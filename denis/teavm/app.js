"use strict";
(function(module) {
    if (typeof define === 'function' && define.amd) {
        define(['exports'], function(exports)  {
            module(exports);
        });
    } else if (typeof exports === 'object' && exports !== null && typeof exports.nodeName !== 'string') {
        module(exports);
    } else {
        module(typeof self !== 'undefined' ? self : this);
}
}(function($rt_exports) {
let $rt_seed = 2463534242,
$rt_nextId = () => {
    let x = $rt_seed;
    x ^= x << 13;
    x ^= x >>> 17;
    x ^= x << 5;
    $rt_seed = x;
    return x;
},
$rt_wrapFunction0 = f => function() {
    return f(this);
},
$rt_wrapFunction1 = f => function(p1) {
    return f(this, p1);
},
$rt_wrapFunction2 = f => function(p1, p2) {
    return f(this, p1, p2);
},
$rt_wrapFunction3 = f => function(p1, p2, p3) {
    return f(this, p1, p2, p3, p3);
},
$rt_wrapFunction4 = f => function(p1, p2, p3, p4) {
    return f(this, p1, p2, p3, p4);
},
$rt_mainStarter = f => (args, callback) => {
    if (!args) {
        args = [];
    }
    let javaArgs = $rt_createArray($rt_objcls(), args.length);
    for (let i = 0;i < args.length;++i) {
        javaArgs.data[i] = $rt_str(args[i]);
    }
    $rt_startThread(() => {
        f.call(null, javaArgs);
    }, callback);
},
$rt_eraseClinit = target => target.$clinit = () => {
},
$dbg_class = obj => {
    let cls = obj.constructor;
    let arrayDegree = 0;
    while (cls.$meta && cls.$meta.item) {
        ++arrayDegree;
        cls = cls.$meta.item;
    }
    let clsName = "";
    if (cls.$meta.primitive) {
        clsName = cls.$meta.name;
    } else {
        clsName = cls.$meta ? cls.$meta.name || "a/" + cls.name : "@" + cls.name;
    }
    while (arrayDegree-- > 0) {
        clsName += "[]";
    }
    return clsName;
},
$rt_classWithoutFields = superclass => {
    if (superclass === 0) {
        return function() {
        };
    }
    if (superclass === void 0) {
        superclass = $rt_objcls();
    }
    return function() {
        superclass.call(this);
    };
},
$rt_cls = cls => jl_Class_getClass(cls),
$rt_objcls = () => jl_Object,
$rt_getThread = () => {
    {
        return jl_Thread_currentThread0();
    }
},
$rt_setThread = t => {
    {
        return jl_Thread_setCurrentThread(t);
    }
},
$rt_callWithReceiver = f => function() {
    return f.apply(null, [this].concat(Array.prototype.slice.call(arguments)));
},
$rt_createcls = () => {
    return { $array : null, classObject : null, $meta : { supertypes : [], superclass : null } };
},
$rt_createPrimitiveCls = (name, binaryName) => {
    let cls = $rt_createcls();
    cls.$meta.primitive = true;
    cls.$meta.name = name;
    cls.$meta.binaryName = binaryName;
    cls.$meta.enum = false;
    cls.$meta.item = null;
    cls.$meta.simpleName = null;
    cls.$meta.declaringClass = null;
    cls.$meta.enclosingClass = null;
    return cls;
},
$rt_booleancls = $rt_createPrimitiveCls("boolean", "Z"),
$rt_charcls = $rt_createPrimitiveCls("char", "C"),
$rt_bytecls = $rt_createPrimitiveCls("byte", "B"),
$rt_shortcls = $rt_createPrimitiveCls("short", "S"),
$rt_intcls = $rt_createPrimitiveCls("int", "I"),
$rt_longcls = $rt_createPrimitiveCls("long", "J"),
$rt_floatcls = $rt_createPrimitiveCls("float", "F"),
$rt_voidcls = $rt_createPrimitiveCls("void", "V"),
$rt_numberConversionBuffer = new ArrayBuffer(16),
$rt_numberConversionFloatArray = new Float32Array($rt_numberConversionBuffer),
$rt_numberConversionIntArray = new Int32Array($rt_numberConversionBuffer),
$rt_floatToRawIntBits = n => {
    $rt_numberConversionFloatArray[0] = n;
    return $rt_numberConversionIntArray[0];
},
$rt_intBitsToFloat = n => {
    $rt_numberConversionIntArray[0] = n;
    return $rt_numberConversionFloatArray[0];
},
$rt_compare = (a, b) => a > b ? 1 : a < b ?  -1 : a === b ? 0 : 1,
$rt_imul = Math.imul || function(a, b) {
    let ah = a >>> 16 & 0xFFFF;
    let al = a & 0xFFFF;
    let bh = b >>> 16 & 0xFFFF;
    let bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
},
$rt_udiv = (a, b) => (a >>> 0) / (b >>> 0) >>> 0,
$rt_umod = (a, b) => (a >>> 0) % (b >>> 0) >>> 0,
$rt_ucmp = (a, b) => {
    a >>>= 0;
    b >>>= 0;
    return a < b ?  -1 : a > b ? 1 : 0;
},
Long_ZERO = BigInt(0),
Long_create = (lo, hi) => BigInt.asIntN(64, BigInt.asUintN(64, BigInt(lo)) | BigInt.asUintN(64, BigInt(hi) << BigInt(32))),
Long_fromInt = val => BigInt.asIntN(64, BigInt(val | 0)),
Long_fromNumber = val => BigInt.asIntN(64, BigInt(val >= 0 ? Math.floor(val) : Math.ceil(val))),
Long_toNumber = val => Number(val),
Long_hi = val => Number(BigInt.asIntN(64, val >> BigInt(32))) | 0,
Long_lo = val => Number(BigInt.asIntN(32, val)) | 0,
Long_eq = (a, b) => a === b,
Long_ne = (a, b) => a !== b,
Long_gt = (a, b) => a > b,
Long_ge = (a, b) => a >= b,
Long_le = (a, b) => a <= b,
Long_add = (a, b) => BigInt.asIntN(64, a + b),
Long_neg = a => BigInt.asIntN(64,  -a);
let Long_sub = (a, b) => BigInt.asIntN(64, a - b),
Long_compare = (a, b) => a < b ?  -1 : a > b ? 1 : 0,
Long_ucompare = (a, b) => {
    a = BigInt.asUintN(64, a);
    b = BigInt.asUintN(64, b);
    return a < b ?  -1 : a > b ? 1 : 0;
},
Long_mul = (a, b) => BigInt.asIntN(64, a * b),
Long_rem = (a, b) => BigInt.asIntN(64, a % b),
Long_and = (a, b) => BigInt.asIntN(64, a & b),
Long_or = (a, b) => BigInt.asIntN(64, a | b),
Long_xor = (a, b) => BigInt.asIntN(64, a ^ b),
Long_shl = (a, b) => BigInt.asIntN(64, a << BigInt(b & 63)),
Long_shr = (a, b) => BigInt.asIntN(64, a >> BigInt(b & 63)),
Long_shru = (a, b) => BigInt.asIntN(64, BigInt.asUintN(64, a) >> BigInt(b & 63)),
$rt_createArray = (cls, sz) => {
    let data = new Array(sz);
    data.fill(null);
    return new ($rt_arraycls(cls))(data);
},
$rt_wrapArray = (cls, data) => new ($rt_arraycls(cls))(data),
$rt_createLongArray = sz => new $rt_longArrayCls(new BigInt64Array(sz)),
$rt_createLongArrayFromData = data => {
    let buffer = new BigInt64Array(data.length);
    buffer.set(data);
    return new $rt_longArrayCls(buffer);
},
$rt_createCharArray = sz => new $rt_charArrayCls(new Uint16Array(sz)),
$rt_createCharArrayFromData = data => {
    let buffer = new Uint16Array(data.length);
    buffer.set(data);
    return new $rt_charArrayCls(buffer);
},
$rt_createByteArray = sz => new $rt_byteArrayCls(new Int8Array(sz)),
$rt_createShortArray = sz => new $rt_shortArrayCls(new Int16Array(sz)),
$rt_createIntArray = sz => new $rt_intArrayCls(new Int32Array(sz)),
$rt_createIntArrayFromData = data => {
    let buffer = new Int32Array(data.length);
    buffer.set(data);
    return new $rt_intArrayCls(buffer);
},
$rt_createBooleanArray = sz => new $rt_booleanArrayCls(new Int8Array(sz)),
$rt_createFloatArray = sz => new $rt_floatArrayCls(new Float32Array(sz)),
$rt_createFloatArrayFromData = data => {
    let buffer = new Float32Array(data.length);
    buffer.set(data);
    return new $rt_floatArrayCls(buffer);
},
$rt_arraycls = cls => {
    let result = cls.$array;
    if (result === null) {
        function JavaArray(data) {
            ($rt_objcls()).call(this);
            this.data = data;
        }
        JavaArray.prototype = Object.create(($rt_objcls()).prototype);
        JavaArray.prototype.type = cls;
        JavaArray.prototype.constructor = JavaArray;
        JavaArray.prototype.toString = function() {
            let str = "[";
            for (let i = 0;i < this.data.length;++i) {
                if (i > 0) {
                    str += ", ";
                }
                str += this.data[i].toString();
            }
            str += "]";
            return str;
        };
        JavaArray.prototype.$clone0 = function() {
            let dataCopy;
            if ('slice' in this.data) {
                dataCopy = this.data.slice();
            } else {
                dataCopy = new this.data.constructor(this.data.length);
                for (let i = 0;i < dataCopy.length;++i) {
                    dataCopy[i] = this.data[i];
                }
            }
            return new ($rt_arraycls(this.type))(dataCopy);
        };
        let name = "[" + cls.$meta.binaryName;
        JavaArray.$meta = { item : cls, supertypes : [$rt_objcls()], primitive : false, superclass : $rt_objcls(), name : name, binaryName : name, enum : false, simpleName : null, declaringClass : null, enclosingClass : null };
        JavaArray.classObject = null;
        JavaArray.$array = null;
        result = JavaArray;
        cls.$array = JavaArray;
    }
    return result;
},
$rt_stringPool_instance,
$rt_stringPool = strings => {
    $rt_stringClassInit();
    $rt_stringPool_instance = new Array(strings.length);
    for (let i = 0;i < strings.length;++i) {
        $rt_stringPool_instance[i] = $rt_intern($rt_str(strings[i]));
    }
},
$rt_s = index => $rt_stringPool_instance[index],
$rt_charArrayToString = (array, offset, count) => {
    let result = "";
    let limit = offset + count;
    for (let i = offset;i < limit;i = i + 1024 | 0) {
        let next = Math.min(limit, i + 1024 | 0);
        result += String.fromCharCode.apply(null, array.subarray(i, next));
    }
    return result;
},
$rt_fullArrayToString = array => $rt_charArrayToString(array, 0, array.length),
$rt_fastStringToCharArray = string => {
    let array = new Uint16Array(string.length);
    for (let i = 0;i < array.length;++i) {
        array[i] = string.charCodeAt(i);
    }
    return new $rt_charArrayCls(array);
},
$rt_str = str => str === null ? null : jl_String__init_1(str),
$rt_ustr = str => str === null ? null : str.$nativeString,
$rt_stringClassInit = () => (() => {})(),
$rt_intern;
{
    $rt_intern = str => str;
}
let $rt_isInstance = (obj, cls) => obj instanceof $rt_objcls() && !!obj.constructor.$meta && $rt_isAssignable(obj.constructor, cls),
$rt_isAssignable = (from, to) => {
    if (from === to) {
        return true;
    }
    let map = from.$meta.assignableCache;
    if (typeof map === 'undefined') {
        map = new Map();
        from.$meta.assignableCache = map;
    }
    let cachedResult = map.get(to);
    if (typeof cachedResult !== 'undefined') {
        return cachedResult;
    }
    if (to.$meta.item !== null) {
        let result = from.$meta.item !== null && $rt_isAssignable(from.$meta.item, to.$meta.item);
        map.set(to, result);
        return result;
    }
    let supertypes = from.$meta.supertypes;
    for (let i = 0;i < supertypes.length;i = i + 1 | 0) {
        if ($rt_isAssignable(supertypes[i], to)) {
            map.set(to, true);
            return true;
        }
    }
    map.set(to, false);
    return false;
},
$rt_throw = ex => {
    throw $rt_exception(ex);
},
$rt_javaExceptionProp = Symbol("javaException"),
$rt_exception = ex => {
    if (!ex.$jsException) {
        $rt_fillNativeException(ex);
    }
    return ex.$jsException;
},
$rt_fillNativeException = ex => {
    let javaCause = $rt_throwableCause(ex);
    let jsCause = javaCause !== null ? javaCause.$jsException : void 0;
    let cause = typeof jsCause === "object" ? { cause : jsCause } : void 0;
    let err = new JavaError("Java exception thrown", cause);
    if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(err);
    }
    err[$rt_javaExceptionProp] = ex;
    ex.$jsException = err;
    $rt_fillStack(err, ex);
},
$rt_fillStack = (err, ex) => {
    if (typeof $rt_decodeStack === "function" && err.stack) {
        let stack = $rt_decodeStack(err.stack);
        let javaStack = $rt_createArray($rt_stecls(), stack.length);
        let elem;
        let noStack = false;
        for (let i = 0;i < stack.length;++i) {
            let element = stack[i];
            elem = $rt_createStackElement($rt_str(element.className), $rt_str(element.methodName), $rt_str(element.fileName), element.lineNumber);
            if (elem == null) {
                noStack = true;
                break;
            }
            javaStack.data[i] = elem;
        }
        if (!noStack) {
            $rt_setStack(ex, javaStack);
        }
    }
},
JavaError;
if (typeof Reflect === 'object') {
    let defaultMessage = Symbol("defaultMessage");
    JavaError = function JavaError(message, cause) {
        let self = Reflect.construct(Error, [void 0, cause], JavaError);
        Object.setPrototypeOf(self, JavaError.prototype);
        self[defaultMessage] = message;
        return self;
    }
    ;
    JavaError.prototype = Object.create(Error.prototype, { constructor : { configurable : true, writable : true, value : JavaError }, message : { get() {
        try {
            let javaException = this[$rt_javaExceptionProp];
            if (typeof javaException === 'object') {
                let javaMessage = $rt_throwableMessage(javaException);
                if (typeof javaMessage === "object") {
                    return javaMessage !== null ? javaMessage.toString() : null;
                }
            }
            return this[defaultMessage];
        } catch (e){
            return "Exception occurred trying to extract Java exception message: " + e;
        }
    } } });
} else {
    JavaError = Error;
}
let $rt_javaException = e => e instanceof Error && typeof e[$rt_javaExceptionProp] === 'object' ? e[$rt_javaExceptionProp] : null,
$rt_wrapException = err => {
    let ex = err[$rt_javaExceptionProp];
    if (!ex) {
        ex = $rt_createException($rt_str("(JavaScript) " + err.toString()));
        err[$rt_javaExceptionProp] = ex;
        ex.$jsException = err;
        $rt_fillStack(err, ex);
    }
    return ex;
},
$rt_createException = message => jl_RuntimeException__init_(message),
$rt_throwableMessage = t => jl_Throwable_getMessage(t),
$rt_throwableCause = t => jl_Throwable_getCause(t),
$rt_stecls = () => $rt_objcls(),
$rt_createStackElement = (className, methodName, fileName, lineNumber) => {
    {
        return null;
    }
},
$rt_setStack = (e, stack) => {
},
$rt_createOutputFunction = outputFunction => {
    let buffer = "";
    return msg => {
        let index = 0;
        while (true) {
            let next = msg.indexOf('\n', index);
            if (next < 0) {
                break;
            }
            outputFunction(buffer + msg.substring(index, next));
            buffer = "";
            index = next + 1;
        }
        buffer += msg.substring(index);
    };
},
$rt_putStdout = typeof $rt_putStdoutCustom === "function" ? $rt_putStdoutCustom : typeof console === "object" ? $rt_createOutputFunction(msg => console.info(msg)) : () => {
},
$rt_putStderr = typeof $rt_putStderrCustom === "function" ? $rt_putStderrCustom : typeof console === "object" ? $rt_createOutputFunction(msg => console.error(msg)) : () => {
},
$rt_packageData = null,
$rt_packages = data => {
    let i = 0;
    let packages = new Array(data.length);
    for (let j = 0;j < data.length;++j) {
        let prefixIndex = data[i++];
        let prefix = prefixIndex >= 0 ? packages[prefixIndex] : "";
        packages[j] = prefix + data[i++] + ".";
    }
    $rt_packageData = packages;
},
$rt_metadata = data => {
    let packages = $rt_packageData;
    let i = 0;
    while (i < data.length) {
        let cls = data[i++];
        cls.$meta = {  };
        let m = cls.$meta;
        let className = data[i++];
        m.name = className !== 0 ? className : null;
        if (m.name !== null) {
            let packageIndex = data[i++];
            if (packageIndex >= 0) {
                m.name = packages[packageIndex] + m.name;
            }
        }
        m.binaryName = "L" + m.name + ";";
        let superclass = data[i++];
        m.superclass = superclass !== 0 ? superclass : null;
        m.supertypes = data[i++];
        if (m.superclass) {
            m.supertypes.push(m.superclass);
            cls.prototype = Object.create(m.superclass.prototype);
        } else {
            cls.prototype = {  };
        }
        let flags = data[i++];
        m.enum = (flags & 8) !== 0;
        m.flags = flags;
        m.primitive = false;
        m.item = null;
        cls.prototype.constructor = cls;
        cls.classObject = null;
        m.accessLevel = data[i++];
        let innerClassInfo = data[i++];
        if (innerClassInfo === 0) {
            m.simpleName = null;
            m.declaringClass = null;
            m.enclosingClass = null;
        } else {
            let enclosingClass = innerClassInfo[0];
            m.enclosingClass = enclosingClass !== 0 ? enclosingClass : null;
            let declaringClass = innerClassInfo[1];
            m.declaringClass = declaringClass !== 0 ? declaringClass : null;
            let simpleName = innerClassInfo[2];
            m.simpleName = simpleName !== 0 ? simpleName : null;
        }
        let clinit = data[i++];
        cls.$clinit = clinit !== 0 ? clinit : function() {
        };
        let virtualMethods = data[i++];
        if (virtualMethods !== 0) {
            for (let j = 0;j < virtualMethods.length;j += 2) {
                let name = virtualMethods[j];
                let func = virtualMethods[j + 1];
                if (typeof name === 'string') {
                    name = [name];
                }
                for (let k = 0;k < name.length;++k) {
                    cls.prototype[name[k]] = func;
                }
            }
        }
        cls.$array = null;
    }
};
function TeaVMThread(runner) {
    this.status = 3;
    this.stack = [];
    this.suspendCallback = null;
    this.runner = runner;
    this.attribute = null;
    this.completeCallback = null;
}
TeaVMThread.prototype.push = function() {
    for (let i = 0;i < arguments.length;++i) {
        this.stack.push(arguments[i]);
    }
    return this;
};
TeaVMThread.prototype.s = TeaVMThread.prototype.push;
TeaVMThread.prototype.pop = function() {
    return this.stack.pop();
};
TeaVMThread.prototype.l = TeaVMThread.prototype.pop;
TeaVMThread.prototype.isResuming = function() {
    return this.status === 2;
};
TeaVMThread.prototype.isSuspending = function() {
    return this.status === 1;
};
TeaVMThread.prototype.suspend = function(callback) {
    this.suspendCallback = callback;
    this.status = 1;
};
TeaVMThread.prototype.start = function(callback) {
    if (this.status !== 3) {
        throw new Error("Thread already started");
    }
    if ($rt_currentNativeThread !== null) {
        throw new Error("Another thread is running");
    }
    this.status = 0;
    this.completeCallback = callback ? callback : result => {
        if (result instanceof Error) {
            throw result;
        }
    };
    this.run();
};
TeaVMThread.prototype.resume = function() {
    if ($rt_currentNativeThread !== null) {
        throw new Error("Another thread is running");
    }
    this.status = 2;
    this.run();
};
TeaVMThread.prototype.run = function() {
    $rt_currentNativeThread = this;
    let result;
    try {
        result = this.runner();
    } catch (e){
        result = e;
    } finally {
        $rt_currentNativeThread = null;
    }
    if (this.suspendCallback !== null) {
        let self = this;
        let callback = this.suspendCallback;
        this.suspendCallback = null;
        callback(() => self.resume());
    } else if (this.status === 0) {
        this.completeCallback(result);
    }
};
let $rt_suspending = () => {
    let thread = $rt_nativeThread();
    return thread != null && thread.isSuspending();
},
$rt_resuming = () => {
    let thread = $rt_nativeThread();
    return thread != null && thread.isResuming();
},
$rt_requireNativeThread = () => {
    let nativeThread = $rt_nativeThread();
    if (nativeThread === null) {
        throw new Error("Suspension point reached from non-threading context " + "(perhaps, from native JS method). See https://teavm.org/docs/runtime/coroutines.html " + "('Interaction with JavaScript' section)");
    }
    return nativeThread;
},
$rt_startThread = (runner, callback) => (new TeaVMThread(runner)).start(callback),
$rt_currentNativeThread = null,
$rt_nativeThread = () => $rt_currentNativeThread,
$rt_invalidPointer = () => {
    throw new Error("Invalid recorded state");
};
function jl_Object() {
    this.$monitor = null;
    this.$id$ = 0;
}
let jl_Object_monitorEnterSync = $o => {
    let var$2;
    if (jl_Thread_currentThread === null)
        return;
    if ($o.$monitor === null)
        jl_Object_createMonitor($o);
    $o = $o.$monitor;
    var$2 = $o.$owner;
    if (var$2 === null)
        $o.$owner = jl_Thread_currentThread;
    else if (var$2 !== jl_Thread_currentThread) {
        var$2 = new jl_IllegalStateException;
        jl_Throwable__init_(var$2, $rt_s(0));
        $rt_throw(var$2);
    }
    $o.$count0 = $o.$count0 + 1 | 0;
},
jl_Object_monitorExitSync = $o => {
    let var$2, var$3;
    if (jl_Thread_currentThread === null)
        return;
    if (!jl_Object_isEmptyMonitor($o)) {
        var$2 = $o.$monitor;
        if (var$2.$owner === jl_Thread_currentThread) {
            var$3 = var$2.$count0 - 1 | 0;
            var$2.$count0 = var$3;
            if (!var$3)
                var$2.$owner = null;
            jl_Object_isEmptyMonitor($o);
            return;
        }
    }
    $o = new jl_IllegalMonitorStateException;
    jl_Exception__init_($o);
    $rt_throw($o);
},
jl_Object_monitorEnter = $o => {
    let var$2, var$3, $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        let $thread = $rt_nativeThread();
        $ptr = $thread.pop();var$3 = $thread.pop();var$2 = $thread.pop();$o = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        var$2 = 1;
        if ($o.$monitor === null)
            jl_Object_createMonitor($o);
        var$3 = $o.$monitor;
        if (var$3.$owner === null)
            var$3.$owner = jl_Thread_currentThread;
        if (var$3.$owner === jl_Thread_currentThread) {
            var$3.$count0 = var$3.$count0 + var$2 | 0;
            return;
        }
        $ptr = 1;
    case 1:
        jl_Object_monitorEnterWait$_asyncCall_$($o, var$2);
        if ($rt_suspending()) {
            break main;
        }
        return;
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($o, var$2, var$3, $ptr);
},
jl_Object_createMonitor = $o => {
    let var$2;
    var$2 = new jl_Object$Monitor;
    var$2.$owner = jl_Thread_currentThread;
    $o.$monitor = var$2;
},
jl_Object_monitorEnterWait = ($o, $count, $callback) => {
    let $thread_0, $monitor, var$6;
    $thread_0 = jl_Thread_currentThread;
    $monitor = $o.$monitor;
    if ($monitor === null) {
        jl_Object_createMonitor($o);
        jl_Thread_setCurrentThread($thread_0);
        $o = $o.$monitor;
        $o.$count0 = $o.$count0 + $count | 0;
        $o = null;
        otpp_AsyncCallbackWrapper_complete($callback, $o);
        return;
    }
    if ($monitor.$owner === null) {
        $monitor.$owner = $thread_0;
        jl_Thread_setCurrentThread($thread_0);
        $o = $o.$monitor;
        $o.$count0 = $o.$count0 + $count | 0;
        $o = null;
        otpp_AsyncCallbackWrapper_complete($callback, $o);
        return;
    }
    if ($monitor.$enteringThreads === null)
        $monitor.$enteringThreads = otp_Platform_createQueueJs$js_body$_30();
    $monitor = $monitor.$enteringThreads;
    var$6 = new jl_Object$monitorEnterWait$lambda$_6_0;
    var$6.$_08 = $thread_0;
    var$6.$_14 = $o;
    var$6.$_23 = $count;
    var$6.$_31 = $callback;
    $callback = var$6;
    $monitor.push($callback);
},
jl_Object_monitorExit = $o => {
    let var$2, var$3;
    if (!jl_Object_isEmptyMonitor($o)) {
        var$2 = $o.$monitor;
        if (var$2.$owner === jl_Thread_currentThread) {
            var$3 = var$2.$count0 - 1 | 0;
            var$2.$count0 = var$3;
            if (var$3 <= 0) {
                var$2.$owner = null;
                var$2 = var$2.$enteringThreads;
                if (var$2 !== null && !otp_PlatformQueue_isEmpty$static(var$2)) {
                    var$2 = new jl_Object$monitorExit$lambda$_8_0;
                    var$2.$_09 = $o;
                    otp_Platform_schedule(var$2, 0);
                } else
                    jl_Object_isEmptyMonitor($o);
            }
            return;
        }
    }
    $o = new jl_IllegalMonitorStateException;
    jl_Exception__init_($o);
    $rt_throw($o);
},
jl_Object_isEmptyMonitor = $this => {
    let $monitor, var$2;
    $monitor = $this.$monitor;
    if ($monitor === null)
        return 1;
    a: {
        if ($monitor.$owner === null) {
            var$2 = $monitor.$enteringThreads;
            if (!(var$2 !== null && !otp_PlatformQueue_isEmpty$static(var$2))) {
                $monitor = $monitor.$notifyListeners;
                if ($monitor === null)
                    break a;
                if (otp_PlatformQueue_isEmpty$static($monitor))
                    break a;
            }
        }
        return 0;
    }
    $this.$monitor = null;
    return 1;
},
jl_Object_getClass = $this => {
    return jl_Class_getClass($this.constructor);
},
jl_Object_hashCode = $this => {
    return jl_Object_identity($this);
},
jl_Object_equals = ($this, $other) => {
    return $this !== $other ? 0 : 1;
},
jl_Object_toString = $this => {
    let var$1, var$2, var$3;
    var$1 = jl_Class_getName(jl_Object_getClass($this));
    var$2 = jl_Integer_toHexString(jl_Object_identity($this));
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    var$1 = jl_StringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append0(var$1, 64);
    jl_StringBuilder_append(var$1, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jl_Object_identity = $this => {
    let $platformThis;
    $platformThis = $this;
    if (!$platformThis.$id$)
        $platformThis.$id$ = $rt_nextId();
    return $this.$id$;
},
jl_Object_clone = $this => {
    let $result, var$2, var$3;
    if (!$rt_isInstance($this, jl_Cloneable) && $this.constructor.$meta.item === null) {
        $result = new jl_CloneNotSupportedException;
        jl_Exception__init_($result);
        $rt_throw($result);
    }
    $result = otp_Platform_clone($this);
    var$2 = $result;
    var$3 = $rt_nextId();
    var$2.$id$ = var$3;
    return $result;
},
jl_Object_monitorEnterWait$_asyncCall_$ = (var$1, var$2) => {
    let thread = $rt_requireNativeThread();
    let javaThread = $rt_getThread();
    if (thread.isResuming()) {
        thread.status = 0;
        let result = thread.attribute;
        if (result instanceof Error) {
            throw result;
        }
        return result;
    }
    let callback = function() {
    };
    callback.$complete = val => {
        thread.attribute = val;
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback.$error0 = e => {
        thread.attribute = $rt_exception(e);
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback = otpp_AsyncCallbackWrapper_create(callback);
    thread.suspend(() => {
        try {
            jl_Object_monitorEnterWait(var$1, var$2, callback);
            ;
        } catch ($e){
            callback.$error0($e);
        }
    });
    return null;
},
cbgu_Pool$Poolable = $rt_classWithoutFields(0),
cbggg_GlyphLayout = $rt_classWithoutFields(),
cbggg_GlyphLayout_glyphRunPool = null,
cbggg_GlyphLayout_colorStack = null,
cbggg_GlyphLayout_$callClinit = () => {
    cbggg_GlyphLayout_$callClinit = $rt_eraseClinit(cbggg_GlyphLayout);
    cbggg_GlyphLayout__clinit_();
},
cbggg_GlyphLayout__clinit_ = () => {
    let var$1, var$2, $$je;
    cbgu_Pools_$callClinit();
    var$1 = cbgu_ObjectMap_get(cbgu_Pools_typePools, $rt_cls(cbggg_GlyphLayout$GlyphRun));
    if (var$1 === null) {
        var$1 = new cbgu_ReflectionPool;
        cbgu_Pool__init_(var$1, 4, 100);
        a: {
            try {
                var$2 = cbgur_ClassReflection_getConstructor($rt_cls(cbggg_GlyphLayout$GlyphRun), null);
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                } else {
                    throw $$e;
                }
            }
            try {
                var$2 = cbgur_ClassReflection_getDeclaredConstructor($rt_cls(cbggg_GlyphLayout$GlyphRun), null);
                cbgur_Constructor_setAccessible(var$2, 1);
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof cbgur_ReflectionException) {
                } else {
                    throw $$e;
                }
            }
            var$2 = null;
        }
        var$1.$constructor = var$2;
        if (var$2 === null) {
            var$1 = new jl_RuntimeException;
            var$2 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$2);
            jl_AbstractStringBuilder_append(var$2, $rt_s(1));
            jl_AbstractStringBuilder_append(var$2, jl_Class_getName($rt_cls(cbggg_GlyphLayout$GlyphRun)));
            jl_Throwable__init_(var$1, jl_AbstractStringBuilder_toString(var$2));
            $rt_throw(var$1);
        }
        cbgu_ObjectMap_put(cbgu_Pools_typePools, $rt_cls(cbggg_GlyphLayout$GlyphRun), var$1);
    }
    cbggg_GlyphLayout_glyphRunPool = var$1;
    cbggg_GlyphLayout_colorStack = cbgu_IntArray__init_(4);
};
function cbggg_TextureRegion() {
    let a = this; jl_Object.call(a);
    a.$texture = null;
    a.$u = 0.0;
    a.$v = 0.0;
    a.$u2 = 0.0;
    a.$v2 = 0.0;
    a.$regionWidth = 0;
    a.$regionHeight = 0;
}
let cbggg_TextureRegion__init_ = ($this, $texture) => {
    if ($texture !== null) {
        $this.$texture = $texture;
        cbggg_TextureRegion_setRegion0($this, 0, 0, cbgg_Texture_getWidth($texture), cbgg_Texture_getHeight($texture));
        return;
    }
    $texture = new jl_IllegalArgumentException;
    jl_Throwable__init_($texture, $rt_s(2));
    $rt_throw($texture);
},
cbggg_TextureRegion__init_1 = var_0 => {
    let var_1 = new cbggg_TextureRegion();
    cbggg_TextureRegion__init_(var_1, var_0);
    return var_1;
},
cbggg_TextureRegion__init_2 = ($this, $texture, $x, $y, $width, $height) => {
    $this.$texture = $texture;
    cbggg_TextureRegion_setRegion0($this, $x, $y, $width, $height);
},
cbggg_TextureRegion__init_0 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new cbggg_TextureRegion();
    cbggg_TextureRegion__init_2(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
cbggg_TextureRegion_setRegion0 = ($this, $x, $y, $width, $height) => {
    let $invTexWidth, $invTexHeight;
    $invTexWidth = 1.0 / cbgg_Texture_getWidth($this.$texture);
    $invTexHeight = 1.0 / cbgg_Texture_getHeight($this.$texture);
    $this.$setRegion0($x * $invTexWidth, $y * $invTexHeight, ($x + $width | 0) * $invTexWidth, ($y + $height | 0) * $invTexHeight);
    $this.$regionWidth = jl_Math_abs0($width);
    $this.$regionHeight = jl_Math_abs0($height);
},
cbggg_TextureRegion_setRegion1 = ($this, $u, $v, $u2, $v2) => {
    let $texWidth, $texHeight, $adjustX, $adjustY, var$9, var$10;
    $texWidth = cbgg_Texture_getWidth($this.$texture);
    $texHeight = cbgg_Texture_getHeight($this.$texture);
    $adjustX = jl_Math_abs($u2 - $u);
    $adjustY = $texWidth;
    $this.$regionWidth = jl_Math_round($adjustX * $adjustY);
    $adjustX = jl_Math_abs($v2 - $v);
    var$9 = $texHeight;
    var$10 = jl_Math_round($adjustX * var$9);
    $this.$regionHeight = var$10;
    if ($this.$regionWidth == 1 && var$10 == 1) {
        $adjustX = 0.25 / $adjustY;
        $u = $u + $adjustX;
        $u2 = $u2 - $adjustX;
        $adjustY = 0.25 / var$9;
        $v = $v + $adjustY;
        $v2 = $v2 - $adjustY;
    }
    $this.$u = $u;
    $this.$v = $v;
    $this.$u2 = $u2;
    $this.$v2 = $v2;
},
cbggg_TextureRegion_setRegion = ($this, $region) => {
    $this.$texture = $region.$texture;
    $this.$setRegion0($region.$u, $region.$v, $region.$u2, $region.$v2);
},
cbggg_TextureRegion_getTexture = $this => {
    return $this.$texture;
},
cbggg_TextureRegion_getU = $this => {
    return $this.$u;
},
cbggg_TextureRegion_getV = $this => {
    return $this.$v;
},
cbggg_TextureRegion_getU2 = $this => {
    return $this.$u2;
},
cbggg_TextureRegion_getV2 = $this => {
    return $this.$v2;
},
cbggg_TextureRegion_getRegionX = $this => {
    return jl_Math_round($this.$u * cbgg_Texture_getWidth($this.$texture));
},
cbggg_TextureRegion_getRegionY = $this => {
    return jl_Math_round($this.$v * cbgg_Texture_getHeight($this.$texture));
},
cbggg_TextureRegion_getRegionWidth = $this => {
    return $this.$regionWidth;
},
cbggg_TextureRegion_setRegionWidth = ($this, $width) => {
    let var$2, var$3, var$4;
    var$2 = $this.$u;
    var$3 = $this.$u2;
    if (!(var$2 <= var$3 ? 0 : 1)) {
        var$4 = var$2 + $width / cbgg_Texture_getWidth($this.$texture);
        $this.$u2 = var$4;
        $this.$regionWidth = jl_Math_round(jl_Math_abs(var$4 - $this.$u) * cbgg_Texture_getWidth($this.$texture));
    } else {
        var$4 = var$3 + $width / cbgg_Texture_getWidth($this.$texture);
        $this.$u = var$4;
        $this.$regionWidth = jl_Math_round(jl_Math_abs($this.$u2 - var$4) * cbgg_Texture_getWidth($this.$texture));
    }
},
cbggg_TextureRegion_getRegionHeight = $this => {
    return $this.$regionHeight;
},
cbggg_TextureRegion_setRegionHeight = ($this, $height) => {
    let var$2, var$3, var$4;
    var$2 = $this.$v;
    var$3 = $this.$v2;
    if (!(var$2 <= var$3 ? 0 : 1)) {
        var$4 = var$2 + $height / cbgg_Texture_getHeight($this.$texture);
        $this.$v2 = var$4;
        $this.$regionHeight = jl_Math_round(jl_Math_abs(var$4 - $this.$v) * cbgg_Texture_getHeight($this.$texture));
    } else {
        var$4 = var$3 + $height / cbgg_Texture_getHeight($this.$texture);
        $this.$v = var$4;
        $this.$regionHeight = jl_Math_round(jl_Math_abs($this.$v2 - var$4) * cbgg_Texture_getHeight($this.$texture));
    }
};
function cbggg_Sprite() {
    let a = this; cbggg_TextureRegion.call(a);
    a.$vertices0 = null;
    a.$color0 = null;
    a.$packedColor = 0.0;
    a.$x0 = 0.0;
    a.$y0 = 0.0;
    a.$width0 = 0.0;
    a.$height0 = 0.0;
    a.$originX = 0.0;
    a.$originY = 0.0;
    a.$rotation = 0.0;
    a.$scaleX0 = 0.0;
    a.$scaleY0 = 0.0;
    a.$dirty = 0;
}
let cbggg_Sprite__init_ = ($this, $texture, $srcX, $srcY, $srcWidth, $srcHeight) => {
    $this.$vertices0 = $rt_createFloatArray(20);
    $this.$color0 = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    $this.$packedColor = cbgg_Color_WHITE_FLOAT_BITS;
    $this.$scaleX0 = 1.0;
    $this.$scaleY0 = 1.0;
    $this.$dirty = 1;
    if ($texture === null) {
        $texture = new jl_IllegalArgumentException;
        jl_Throwable__init_($texture, $rt_s(2));
        $rt_throw($texture);
    }
    $this.$texture = $texture;
    cbggg_TextureRegion_setRegion0($this, $srcX, $srcY, $srcWidth, $srcHeight);
    cbggg_Sprite_setColor($this, 1.0, 1.0, 1.0, 1.0);
    cbggg_Sprite_setSize($this, jl_Math_abs0($srcWidth), jl_Math_abs0($srcHeight));
    cbggg_Sprite_setOrigin($this, $this.$width0 / 2.0, $this.$height0 / 2.0);
},
cbggg_Sprite__init_0 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new cbggg_Sprite();
    cbggg_Sprite__init_(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
cbggg_Sprite_set = ($this, $sprite) => {
    if ($sprite === null) {
        $sprite = new jl_IllegalArgumentException;
        jl_Throwable__init_($sprite, $rt_s(3));
        $rt_throw($sprite);
    }
    jl_System_fastArraycopy($sprite.$vertices0, 0, $this.$vertices0, 0, 20);
    $this.$texture = $sprite.$texture;
    $this.$u = $sprite.$u;
    $this.$v = $sprite.$v;
    $this.$u2 = $sprite.$u2;
    $this.$v2 = $sprite.$v2;
    $this.$x0 = $sprite.$x0;
    $this.$y0 = $sprite.$y0;
    $this.$width0 = $sprite.$width0;
    $this.$height0 = $sprite.$height0;
    $this.$regionWidth = $sprite.$regionWidth;
    $this.$regionHeight = $sprite.$regionHeight;
    $this.$originX = $sprite.$originX;
    $this.$originY = $sprite.$originY;
    $this.$rotation = $sprite.$rotation;
    $this.$scaleX0 = $sprite.$scaleX0;
    $this.$scaleY0 = $sprite.$scaleY0;
    cbgg_Color_set($this.$color0, $sprite.$color0);
    $this.$dirty = $sprite.$dirty;
},
cbggg_Sprite_setBounds = ($this, $x, $y, $width, $height) => {
    let $x2, $y2, $vertices;
    $this.$x0 = $x;
    $this.$y0 = $y;
    $this.$width0 = $width;
    $this.$height0 = $height;
    if ($this.$dirty)
        return;
    if ($this.$rotation === 0.0 && $this.$scaleX0 === 1.0 && $this.$scaleY0 === 1.0) {
        $x2 = $x + $width;
        $y2 = $y + $height;
        $vertices = $this.$vertices0.data;
        $vertices[0] = $x;
        $vertices[1] = $y;
        $vertices[5] = $x;
        $vertices[6] = $y2;
        $vertices[10] = $x2;
        $vertices[11] = $y2;
        $vertices[15] = $x2;
        $vertices[16] = $y;
        return;
    }
    $this.$dirty = 1;
},
cbggg_Sprite_setSize = ($this, $width, $height) => {
    let var$3, $x2, $y2, $vertices;
    $this.$width0 = $width;
    $this.$height0 = $height;
    if ($this.$dirty)
        return;
    if ($this.$rotation === 0.0 && $this.$scaleX0 === 1.0 && $this.$scaleY0 === 1.0) {
        var$3 = $this.$x0;
        $x2 = var$3 + $width;
        $width = $this.$y0;
        $y2 = $width + $height;
        $vertices = $this.$vertices0.data;
        $vertices[0] = var$3;
        $vertices[1] = $width;
        $vertices[5] = var$3;
        $vertices[6] = $y2;
        $vertices[10] = $x2;
        $vertices[11] = $y2;
        $vertices[15] = $x2;
        $vertices[16] = $width;
        return;
    }
    $this.$dirty = 1;
},
cbggg_Sprite_translate = ($this, $xAmount, $yAmount) => {
    let $vertices;
    $this.$x0 = $this.$x0 + $xAmount;
    $this.$y0 = $this.$y0 + $yAmount;
    if ($this.$dirty)
        return;
    if ($this.$rotation === 0.0 && $this.$scaleX0 === 1.0 && $this.$scaleY0 === 1.0) {
        $vertices = $this.$vertices0.data;
        $vertices[0] = $vertices[0] + $xAmount;
        $vertices[1] = $vertices[1] + $yAmount;
        $vertices[5] = $vertices[5] + $xAmount;
        $vertices[6] = $vertices[6] + $yAmount;
        $vertices[10] = $vertices[10] + $xAmount;
        $vertices[11] = $vertices[11] + $yAmount;
        $vertices[15] = $vertices[15] + $xAmount;
        $vertices[16] = $vertices[16] + $yAmount;
        return;
    }
    $this.$dirty = 1;
},
cbggg_Sprite_setColor = ($this, $r, $g, $b, $a) => {
    let var$5, $vertices;
    var$5 = $this.$color0;
    var$5.$r = $r;
    var$5.$g = $g;
    var$5.$b = $b;
    var$5.$a = $a;
    cbgg_Color_clamp(var$5);
    $r = cbgg_Color_toFloatBits($this.$color0);
    $this.$packedColor = $r;
    $vertices = $this.$vertices0.data;
    $vertices[2] = $r;
    $vertices[7] = $r;
    $vertices[12] = $r;
    $vertices[17] = $r;
},
cbggg_Sprite_setOrigin = ($this, $originX, $originY) => {
    $this.$originX = $originX;
    $this.$originY = $originY;
    $this.$dirty = 1;
},
cbggg_Sprite_setRotation = ($this, $degrees) => {
    $this.$rotation = $degrees;
    $this.$dirty = 1;
},
cbggg_Sprite_setScale0 = ($this, $scaleXY) => {
    $this.$scaleX0 = $scaleXY;
    $this.$scaleY0 = $scaleXY;
    $this.$dirty = 1;
},
cbggg_Sprite_setScale = ($this, $scaleX, $scaleY) => {
    $this.$scaleX0 = $scaleX;
    $this.$scaleY0 = $scaleY;
    $this.$dirty = 1;
},
cbggg_Sprite_getVertices = $this => {
    let $vertices, $localX, $localY, $localX2, $localY2, $worldOriginX, $worldOriginY, $x1, $y1, $x2, $y2, $cos, $sin, $localXCos, $localXSin, $localYCos, $localYSin, $localX2Cos, $localX2Sin, $localY2Cos, $localY2Sin, $x3, $y3;
    if ($this.$dirty) {
        $this.$dirty = 0;
        $vertices = $this.$vertices0;
        $localX =  -$this.$originX;
        $localY =  -$this.$originY;
        $localX2 = $localX + $this.$width0;
        $localY2 = $localY + $this.$height0;
        $worldOriginX = $this.$x0 - $localX;
        $worldOriginY = $this.$y0 - $localY;
        $x1 = $this.$scaleX0;
        if (!($x1 === 1.0 && $this.$scaleY0 === 1.0)) {
            $localX = $localX * $x1;
            $y1 = $this.$scaleY0;
            $localY = $localY * $y1;
            $localX2 = $localX2 * $x1;
            $localY2 = $localY2 * $y1;
        }
        $x1 = $this.$rotation;
        if ($x1 === 0.0) {
            $vertices = $vertices.data;
            $x1 = $localX + $worldOriginX;
            $y1 = $localY + $worldOriginY;
            $x2 = $localX2 + $worldOriginX;
            $y2 = $localY2 + $worldOriginY;
            $vertices[0] = $x1;
            $vertices[1] = $y1;
            $vertices[5] = $x1;
            $vertices[6] = $y2;
            $vertices[10] = $x2;
            $vertices[11] = $y2;
            $vertices[15] = $x2;
            $vertices[16] = $y1;
        } else {
            $vertices = $vertices.data;
            $cos = cbgm_MathUtils_cosDeg($x1);
            $sin = cbgm_MathUtils_sinDeg($this.$rotation);
            $localXCos = $localX * $cos;
            $localXSin = $localX * $sin;
            $localYCos = $localY * $cos;
            $localYSin = $localY * $sin;
            $localX2Cos = $localX2 * $cos;
            $localX2Sin = $localX2 * $sin;
            $localY2Cos = $localY2 * $cos;
            $localY2Sin = $localY2 * $sin;
            $x1 = $localXCos - $localYSin + $worldOriginX;
            $y1 = $localYCos + $localXSin + $worldOriginY;
            $vertices[0] = $x1;
            $vertices[1] = $y1;
            $x2 = $localXCos - $localY2Sin + $worldOriginX;
            $y2 = $localY2Cos + $localXSin + $worldOriginY;
            $vertices[5] = $x2;
            $vertices[6] = $y2;
            $x3 = $localX2Cos - $localY2Sin + $worldOriginX;
            $y3 = $localY2Cos + $localX2Sin + $worldOriginY;
            $vertices[10] = $x3;
            $vertices[11] = $y3;
            $vertices[15] = $x1 + $x3 - $x2;
            $vertices[16] = $y3 - ($y2 - $y1);
        }
    }
    return $this.$vertices0;
},
cbggg_Sprite_getWidth = $this => {
    return $this.$width0;
},
cbggg_Sprite_getHeight = $this => {
    return $this.$height0;
},
cbggg_Sprite_setRegion = ($this, $u, $v, $u2, $v2) => {
    let $vertices;
    cbggg_TextureRegion_setRegion1($this, $u, $v, $u2, $v2);
    $vertices = $this.$vertices0.data;
    $vertices[3] = $u;
    $vertices[4] = $v2;
    $vertices[8] = $u;
    $vertices[9] = $v;
    $vertices[13] = $u2;
    $vertices[14] = $v;
    $vertices[18] = $u2;
    $vertices[19] = $v2;
},
cbggg_Sprite_flip = ($this, $x, $y) => {
    let $temp, $vertices, var$5;
    if ($x) {
        $temp = $this.$u;
        $this.$u = $this.$u2;
        $this.$u2 = $temp;
    }
    if ($y) {
        $temp = $this.$v;
        $this.$v = $this.$v2;
        $this.$v2 = $temp;
    }
    $vertices = $this.$vertices0;
    if ($x) {
        var$5 = $vertices.data;
        $temp = var$5[3];
        var$5[3] = var$5[13];
        var$5[13] = $temp;
        $temp = var$5[8];
        var$5[8] = var$5[18];
        var$5[18] = $temp;
    }
    if ($y) {
        $vertices = $vertices.data;
        $temp = $vertices[4];
        $vertices[4] = $vertices[14];
        $vertices[14] = $temp;
        $temp = $vertices[9];
        $vertices[9] = $vertices[19];
        $vertices[19] = $temp;
    }
},
cbgu_Disposable = $rt_classWithoutFields(0),
cbggg_BitmapFont = $rt_classWithoutFields(),
cbggg_NinePatch = $rt_classWithoutFields(),
cbggg_NinePatch_tmpDrawColor = null,
cbggg_NinePatch__clinit_ = () => {
    cbggg_NinePatch_tmpDrawColor = new cbgg_Color;
};
function cbgg_Color() {
    let a = this; jl_Object.call(a);
    a.$r = 0.0;
    a.$g = 0.0;
    a.$b = 0.0;
    a.$a = 0.0;
}
let cbgg_Color_WHITE = null,
cbgg_Color_LIGHT_GRAY = null,
cbgg_Color_GRAY = null,
cbgg_Color_DARK_GRAY = null,
cbgg_Color_BLACK = null,
cbgg_Color_WHITE_FLOAT_BITS = 0.0,
cbgg_Color_CLEAR = null,
cbgg_Color_CLEAR_WHITE = null,
cbgg_Color_BLUE = null,
cbgg_Color_NAVY = null,
cbgg_Color_ROYAL = null,
cbgg_Color_SLATE = null,
cbgg_Color_SKY = null,
cbgg_Color_CYAN = null,
cbgg_Color_TEAL = null,
cbgg_Color_GREEN = null,
cbgg_Color_CHARTREUSE = null,
cbgg_Color_LIME = null,
cbgg_Color_FOREST = null,
cbgg_Color_OLIVE = null,
cbgg_Color_YELLOW = null,
cbgg_Color_GOLD = null,
cbgg_Color_GOLDENROD = null,
cbgg_Color_ORANGE = null,
cbgg_Color_BROWN = null,
cbgg_Color_TAN = null,
cbgg_Color_FIREBRICK = null,
cbgg_Color_RED = null,
cbgg_Color_SCARLET = null,
cbgg_Color_CORAL = null,
cbgg_Color_SALMON = null,
cbgg_Color_PINK = null,
cbgg_Color_MAGENTA = null,
cbgg_Color_PURPLE = null,
cbgg_Color_VIOLET = null,
cbgg_Color_MAROON = null,
cbgg_Color__init_4 = ($this, $rgba8888) => {
    $this.$r = (($rgba8888 & (-16777216)) >>> 24 | 0) / 255.0;
    $this.$g = (($rgba8888 & 16711680) >>> 16 | 0) / 255.0;
    $this.$b = (($rgba8888 & 65280) >>> 8 | 0) / 255.0;
    $this.$a = ($rgba8888 & 255) / 255.0;
},
cbgg_Color__init_ = var_0 => {
    let var_1 = new cbgg_Color();
    cbgg_Color__init_4(var_1, var_0);
    return var_1;
},
cbgg_Color__init_2 = ($this, $r, $g, $b, $a) => {
    $this.$r = $r;
    $this.$g = $g;
    $this.$b = $b;
    $this.$a = $a;
    cbgg_Color_clamp($this);
},
cbgg_Color__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new cbgg_Color();
    cbgg_Color__init_2(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
cbgg_Color__init_1 = ($this, $color) => {
    cbgg_Color_set($this, $color);
},
cbgg_Color__init_3 = var_0 => {
    let var_1 = new cbgg_Color();
    cbgg_Color__init_1(var_1, var_0);
    return var_1;
},
cbgg_Color_set = ($this, $color) => {
    $this.$r = $color.$r;
    $this.$g = $color.$g;
    $this.$b = $color.$b;
    $this.$a = $color.$a;
    return $this;
},
cbgg_Color_clamp = $this => {
    let var$1, var$2;
    var$1 = $this.$r;
    if (var$1 < 0.0)
        $this.$r = 0.0;
    else if (var$1 > 1.0)
        $this.$r = 1.0;
    var$2 = $this.$g;
    if (var$2 < 0.0)
        $this.$g = 0.0;
    else if (var$2 > 1.0)
        $this.$g = 1.0;
    var$2 = $this.$b;
    if (var$2 < 0.0)
        $this.$b = 0.0;
    else if (var$2 > 1.0)
        $this.$b = 1.0;
    var$2 = $this.$a;
    if (var$2 < 0.0)
        $this.$a = 0.0;
    else if (var$2 > 1.0)
        $this.$a = 1.0;
    return $this;
},
cbgg_Color_lerp = ($this, $target, $t) => {
    let var$3, var$4;
    var$3 = $this.$r;
    $this.$r = var$3 + $t * ($target.$r - var$3);
    var$4 = $this.$g;
    $this.$g = var$4 + $t * ($target.$g - var$4);
    var$4 = $this.$b;
    $this.$b = var$4 + $t * ($target.$b - var$4);
    var$3 = $this.$a;
    $this.$a = var$3 + $t * ($target.$a - var$3);
    return cbgg_Color_clamp($this);
},
cbgg_Color_toFloatBits = $this => {
    return cbgu_NumberUtils_intToFloatColor((255.0 * $this.$a | 0) << 24 | (255.0 * $this.$b | 0) << 16 | (255.0 * $this.$g | 0) << 8 | 255.0 * $this.$r | 0);
},
cbgg_Color_rgba8888 = ($r, $g, $b, $a) => {
    return ($r * 255.0 | 0) << 24 | ($g * 255.0 | 0) << 16 | ($b * 255.0 | 0) << 8 | $a * 255.0 | 0;
},
cbgg_Color__clinit_ = () => {
    cbgg_Color_WHITE = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    cbgg_Color_LIGHT_GRAY = cbgg_Color__init_((-1077952513));
    cbgg_Color_GRAY = cbgg_Color__init_(2139062271);
    cbgg_Color_DARK_GRAY = cbgg_Color__init_(1061109759);
    cbgg_Color_BLACK = cbgg_Color__init_0(0.0, 0.0, 0.0, 1.0);
    cbgg_Color_WHITE_FLOAT_BITS = cbgg_Color_toFloatBits(cbgg_Color_WHITE);
    cbgg_Color_CLEAR = cbgg_Color__init_0(0.0, 0.0, 0.0, 0.0);
    cbgg_Color_CLEAR_WHITE = cbgg_Color__init_0(1.0, 1.0, 1.0, 0.0);
    cbgg_Color_BLUE = cbgg_Color__init_0(0.0, 0.0, 1.0, 1.0);
    cbgg_Color_NAVY = cbgg_Color__init_0(0.0, 0.0, 0.5, 1.0);
    cbgg_Color_ROYAL = cbgg_Color__init_(1097458175);
    cbgg_Color_SLATE = cbgg_Color__init_(1887473919);
    cbgg_Color_SKY = cbgg_Color__init_((-2016482305));
    cbgg_Color_CYAN = cbgg_Color__init_0(0.0, 1.0, 1.0, 1.0);
    cbgg_Color_TEAL = cbgg_Color__init_0(0.0, 0.5, 0.5, 1.0);
    cbgg_Color_GREEN = cbgg_Color__init_(16711935);
    cbgg_Color_CHARTREUSE = cbgg_Color__init_(2147418367);
    cbgg_Color_LIME = cbgg_Color__init_(852308735);
    cbgg_Color_FOREST = cbgg_Color__init_(579543807);
    cbgg_Color_OLIVE = cbgg_Color__init_(1804477439);
    cbgg_Color_YELLOW = cbgg_Color__init_((-65281));
    cbgg_Color_GOLD = cbgg_Color__init_((-2686721));
    cbgg_Color_GOLDENROD = cbgg_Color__init_((-626712321));
    cbgg_Color_ORANGE = cbgg_Color__init_((-5963521));
    cbgg_Color_BROWN = cbgg_Color__init_((-1958407169));
    cbgg_Color_TAN = cbgg_Color__init_((-759919361));
    cbgg_Color_FIREBRICK = cbgg_Color__init_((-1306385665));
    cbgg_Color_RED = cbgg_Color__init_((-16776961));
    cbgg_Color_SCARLET = cbgg_Color__init_((-13361921));
    cbgg_Color_CORAL = cbgg_Color__init_((-8433409));
    cbgg_Color_SALMON = cbgg_Color__init_((-92245249));
    cbgg_Color_PINK = cbgg_Color__init_((-9849601));
    cbgg_Color_MAGENTA = cbgg_Color__init_0(1.0, 0.0, 1.0, 1.0);
    cbgg_Color_PURPLE = cbgg_Color__init_((-1608453889));
    cbgg_Color_VIOLET = cbgg_Color__init_((-293409025));
    cbgg_Color_MAROON = cbgg_Color__init_((-1339006721));
};
function cbgg_GLTexture() {
    let a = this; jl_Object.call(a);
    a.$glTarget = 0;
    a.$glHandle = 0;
    a.$minFilter = null;
    a.$magFilter = null;
    a.$uWrap = null;
    a.$vWrap = null;
    a.$anisotropicFilterLevel = 0.0;
}
let cbgg_GLTexture_maxAnisotropicFilterLevel = 0.0,
cbgg_GLTexture_bind = $this => {
    cbg_Gdx_gl.$glBindTexture($this.$glTarget, $this.$glHandle);
},
cbgg_GLTexture_setFilter = ($this, $minFilter, $magFilter) => {
    $this.$minFilter = $minFilter;
    $this.$magFilter = $magFilter;
    cbgg_GLTexture_bind($this);
    cbg_Gdx_gl.$glTexParameteri($this.$glTarget, 10241, $minFilter.$glEnum);
    cbg_Gdx_gl.$glTexParameteri($this.$glTarget, 10240, $magFilter.$glEnum);
},
cbgg_GLTexture_getMaxAnisotropicFilterLevel = () => {
    let var$1, $buffer, var$3;
    var$1 = cbgg_GLTexture_maxAnisotropicFilterLevel;
    if (var$1 > 0.0)
        return var$1;
    if (!cgxgbt_TeaGraphics_supportsExtension(cbg_Gdx_graphics, $rt_s(4))) {
        cbgg_GLTexture_maxAnisotropicFilterLevel = 1.0;
        return 1.0;
    }
    $buffer = cbgu_BufferUtils_newFloatBuffer(16);
    var$3 = $buffer;
    jn_Buffer_position(var$3, 0);
    jn_Buffer_limit(var$3, $buffer.$capacityImpl());
    cbg_Gdx_gl20.$glGetFloatv(34047, $buffer);
    var$1 = jn_FloatBufferImpl_get($buffer, 0);
    cbgg_GLTexture_maxAnisotropicFilterLevel = var$1;
    return var$1;
},
cbgg_GLTexture__clinit_ = () => {
    cbgg_GLTexture_maxAnisotropicFilterLevel = 0.0;
};
function cbgg_Texture() {
    cbgg_GLTexture.call(this);
    this.$data4 = null;
}
let cbgg_Texture_managedTextures = null,
cbgg_Texture_$callClinit = () => {
    cbgg_Texture_$callClinit = $rt_eraseClinit(cbgg_Texture);
    cbgg_Texture__clinit_();
},
cbgg_Texture__init_2 = ($this, $file) => {
    cbgg_Texture_$callClinit();
    cbgg_Texture__init_0($this, $file, null, 0);
},
cbgg_Texture__init_3 = var_0 => {
    let var_1 = new cbgg_Texture();
    cbgg_Texture__init_2(var_1, var_0);
    return var_1;
},
cbgg_Texture__init_0 = ($this, $file, $format, $useMipMaps) => {
    let var$4, var$5;
    cbgg_Texture_$callClinit();
    if ($file === null)
        var$4 = null;
    else {
        var$4 = new cbggg_FileTextureData;
        var$5 = cbgg_Pixmap__init_0($file);
        var$4.$width3 = 0;
        var$4.$height3 = 0;
        var$4.$isPrepared0 = 0;
        var$4.$file0 = $file;
        var$4.$pixmap = var$5;
        var$4.$format = $format;
        var$4.$useMipMaps1 = $useMipMaps;
        $file = cbggg_FileTextureData_ensurePot(var$4, var$5);
        var$4.$pixmap = $file;
        var$4.$width3 = cbgg_Pixmap_getWidth($file);
        var$4.$height3 = cbgg_Pixmap_getHeight(var$4.$pixmap);
        if ($format === null)
            var$4.$format = cbgg_Pixmap_getFormat(var$4.$pixmap);
    }
    cbgg_Texture__init_($this, var$4);
},
cbgg_Texture__init_5 = (var_0, var_1, var_2) => {
    let var_3 = new cbgg_Texture();
    cbgg_Texture__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgg_Texture__init_4 = ($this, $width, $height, $format) => {
    cbgg_Texture_$callClinit();
    cbgg_Texture__init_($this, cbggg_PixmapTextureData__init_(cbgg_Pixmap__init_($width, $height, $format), null, 0, 1));
},
cbgg_Texture__init_1 = (var_0, var_1, var_2) => {
    let var_3 = new cbgg_Texture();
    cbgg_Texture__init_4(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgg_Texture__init_ = ($this, $data) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    cbgg_Texture_$callClinit();
    var$2 = cgxgbt_TeaGL20_glGenTexture(cbg_Gdx_gl);
    var$3 = cbgg_Texture$TextureFilter_Nearest;
    $this.$minFilter = var$3;
    $this.$magFilter = var$3;
    var$3 = cbgg_Texture$TextureWrap_ClampToEdge;
    $this.$uWrap = var$3;
    $this.$vWrap = var$3;
    $this.$anisotropicFilterLevel = 1.0;
    $this.$glTarget = 3553;
    $this.$glHandle = var$2;
    if ($this.$data4 !== null && $data.$isManaged() != $this.$data4.$isManaged()) {
        $data = new cbgu_GdxRuntimeException;
        jl_Throwable__init_($data, $rt_s(5));
        $rt_throw($data);
    }
    $this.$data4 = $data;
    if (!$data.$isPrepared())
        $data.$prepare();
    var$4 = $this;
    cbgg_GLTexture_bind(var$4);
    if (!$data.$isPrepared())
        $data.$prepare();
    if ($data.$getType() === cbgg_TextureData$TextureDataType_Custom)
        $data.$consumeCustomData(3553);
    else {
        var$5 = $data.$consumePixmap();
        var$6 = $data.$disposePixmap();
        if ($data.$getFormat() === cbgg_Pixmap_getFormat(var$5))
            var$7 = var$5;
        else {
            var$7 = cbgg_Pixmap__init_(cbgg_Pixmap_getWidth(var$5), cbgg_Pixmap_getHeight(var$5), $data.$getFormat());
            cbgg_Pixmap_setBlending(var$7, cbgg_Pixmap$Blending_None);
            cbgg_Pixmap_drawPixmap(var$7, var$5, 0, 0, 0, 0, cbgg_Pixmap_getWidth(var$5), cbgg_Pixmap_getHeight(var$5));
            if ($data.$disposePixmap())
                cbgg_Pixmap_dispose(var$5);
            var$6 = 1;
        }
        cbg_Gdx_gl.$glPixelStorei(3317, 1);
        if (!$data.$useMipMaps())
            cbg_Gdx_gl.$glTexImage2D(3553, 0, cbgg_Pixmap_getGLInternalFormat(var$7), cbgg_Pixmap_getWidth(var$7), cbgg_Pixmap_getHeight(var$7), 0, cbgg_Pixmap_getGLFormat(var$7), cbgg_Pixmap_getGLType(var$7), cbgg_Pixmap_getPixels(var$7));
        else {
            var$2 = cbgg_Pixmap_getWidth(var$7);
            var$8 = cbgg_Pixmap_getHeight(var$7);
            if (!cbggg_MipMapGenerator_useHWMipMap)
                cbggg_MipMapGenerator_generateMipMapCPU(3553, var$7, var$2, var$8);
            else {
                var$5 = cbg_Application$ApplicationType_WebGL;
                if (var$5 !== cbg_Application$ApplicationType_Android && var$5 !== var$5 && var$5 !== cbg_Application$ApplicationType_iOS) {
                    if (!cgxgbt_TeaGraphics_supportsExtension(cbg_Gdx_graphics, $rt_s(6)) && !cgxgbt_TeaGraphics_supportsExtension(cbg_Gdx_graphics, $rt_s(7)) && !jl_String_equals(jl_Class_getName(jl_Object_getClass(cbg_Gdx_gl20)), $rt_s(8)) && cbg_Gdx_gl30 === null)
                        cbggg_MipMapGenerator_generateMipMapCPU(3553, var$7, var$2, var$8);
                    else {
                        cbg_Gdx_gl.$glTexImage2D(3553, 0, cbgg_Pixmap_getGLInternalFormat(var$7), cbgg_Pixmap_getWidth(var$7), cbgg_Pixmap_getHeight(var$7), 0, cbgg_Pixmap_getGLFormat(var$7), cbgg_Pixmap_getGLType(var$7), cbgg_Pixmap_getPixels(var$7));
                        cbg_Gdx_gl20.$glGenerateMipmap(3553);
                    }
                } else {
                    cbg_Gdx_gl.$glTexImage2D(3553, 0, cbgg_Pixmap_getGLInternalFormat(var$7), cbgg_Pixmap_getWidth(var$7), cbgg_Pixmap_getHeight(var$7), 0, cbgg_Pixmap_getGLFormat(var$7), cbgg_Pixmap_getGLType(var$7), cbgg_Pixmap_getPixels(var$7));
                    cbg_Gdx_gl20.$glGenerateMipmap(3553);
                }
            }
        }
        if (var$6)
            cbgg_Pixmap_dispose(var$7);
    }
    var$3 = $this.$minFilter;
    var$5 = $this.$magFilter;
    if (var$3 !== null) {
        cbg_Gdx_gl.$glTexParameteri(var$4.$glTarget, 10241, var$3.$glEnum);
        var$4.$minFilter = var$3;
    }
    if (var$5 !== null) {
        cbg_Gdx_gl.$glTexParameteri(var$4.$glTarget, 10240, var$5.$glEnum);
        var$4.$magFilter = var$5;
    }
    var$3 = $this.$uWrap;
    var$5 = $this.$vWrap;
    if (var$3 !== null) {
        cbg_Gdx_gl.$glTexParameteri(var$4.$glTarget, 10242, var$3.$glEnum0);
        var$4.$uWrap = var$3;
    }
    if (var$5 !== null) {
        cbg_Gdx_gl.$glTexParameteri(var$4.$glTarget, 10243, var$5.$glEnum0);
        var$4.$vWrap = var$5;
    }
    var$9 = $this.$anisotropicFilterLevel;
    var$10 = cbgg_GLTexture_getMaxAnisotropicFilterLevel();
    if (var$10 !== 1.0) {
        var$9 = jl_Math_min0(var$9, var$10);
        cbg_Gdx_gl20.$glTexParameterf(3553, 34046, var$9);
        var$4.$anisotropicFilterLevel = var$9;
    }
    cbg_Gdx_gl.$glBindTexture($this.$glTarget, 0);
    if ($data.$isManaged()) {
        $data = cbg_Gdx_app;
        var$3 = ju_HashMap_get(cbgg_Texture_managedTextures, $data);
        if (var$3 === null)
            var$3 = cbgu_Array__init_();
        cbgu_Array_add(var$3, $this);
        ju_HashMap_put(cbgg_Texture_managedTextures, $data, var$3);
    }
},
cbgg_Texture__init_6 = var_0 => {
    let var_1 = new cbgg_Texture();
    cbgg_Texture__init_(var_1, var_0);
    return var_1;
},
cbgg_Texture_draw = ($this, $pixmap, $x, $y) => {
    if ($this.$data4.$isManaged()) {
        $pixmap = new cbgu_GdxRuntimeException;
        jl_Throwable__init_($pixmap, $rt_s(9));
        $rt_throw($pixmap);
    }
    cbgg_GLTexture_bind($this);
    cbg_Gdx_gl.$glTexSubImage2D($this.$glTarget, 0, $x, $y, cbgg_Pixmap_getWidth($pixmap), cbgg_Pixmap_getHeight($pixmap), cbgg_Pixmap_getGLFormat($pixmap), cbgg_Pixmap_getGLType($pixmap), cbgg_Pixmap_getPixels($pixmap));
},
cbgg_Texture_getWidth = $this => {
    return $this.$data4.$getWidth();
},
cbgg_Texture_getHeight = $this => {
    return $this.$data4.$getHeight();
},
cbgg_Texture_toString = $this => {
    let var$1;
    var$1 = $this.$data4;
    if (!(var$1 instanceof cbggg_FileTextureData))
        return jl_Object_toString($this);
    return jl_Object_toString(var$1);
},
cbgg_Texture__clinit_ = () => {
    cbgg_Texture_managedTextures = ju_HashMap__init_();
},
jl_Iterable = $rt_classWithoutFields(0);
function cbgu_Array() {
    let a = this; jl_Object.call(a);
    a.$items = null;
    a.$size0 = 0;
    a.$ordered = 0;
    a.$iterable = null;
}
let cbgu_Array__init_5 = $this => {
    cbgu_Array__init_1($this, 1, 16);
},
cbgu_Array__init_ = () => {
    let var_0 = new cbgu_Array();
    cbgu_Array__init_5(var_0);
    return var_0;
},
cbgu_Array__init_6 = ($this, $capacity) => {
    cbgu_Array__init_1($this, 1, $capacity);
},
cbgu_Array__init_2 = var_0 => {
    let var_1 = new cbgu_Array();
    cbgu_Array__init_6(var_1, var_0);
    return var_1;
},
cbgu_Array__init_1 = ($this, $ordered, $capacity) => {
    $this.$ordered = $ordered;
    $this.$items = $rt_createArray(jl_Object, $capacity);
},
cbgu_Array__init_0 = (var_0, var_1) => {
    let var_2 = new cbgu_Array();
    cbgu_Array__init_1(var_2, var_0, var_1);
    return var_2;
},
cbgu_Array__init_3 = ($this, $ordered, $capacity, $arrayType) => {
    $this.$ordered = $ordered;
    $this.$items = jlr_Array_newInstance($arrayType, $capacity);
},
cbgu_Array__init_4 = (var_0, var_1, var_2) => {
    let var_3 = new cbgu_Array();
    cbgu_Array__init_3(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgu_Array_add = ($this, $value) => {
    let $items, var$3, var$4, var$5;
    $items = $this.$items;
    var$3 = $items.data;
    var$4 = $this.$size0;
    if (var$4 == var$3.length)
        $items = cbgu_Array_resize($this, jl_Math_max(8, var$4 * 1.75 | 0));
    $items = $items.data;
    var$5 = $this.$size0;
    $this.$size0 = var$5 + 1 | 0;
    $items[var$5] = $value;
},
cbgu_Array_addAll0 = ($this, $array) => {
    cbgu_Array_addAll($this, $array.$items, 0, $array.$size0);
},
cbgu_Array_addAll = ($this, $array, $start, $count) => {
    let $items, var$5, $sizeNeeded;
    $items = $this.$items;
    var$5 = $items.data;
    $sizeNeeded = $this.$size0 + $count | 0;
    if ($sizeNeeded > var$5.length)
        $items = cbgu_Array_resize($this, jl_Math_max(jl_Math_max(8, $sizeNeeded), $this.$size0 * 1.75 | 0));
    jl_System_fastArraycopy($array, $start, $items, $this.$size0, $count);
    $this.$size0 = $sizeNeeded;
},
cbgu_Array_get = ($this, $index) => {
    let var$2, var$3;
    if ($index < $this.$size0)
        return $this.$items.data[$index];
    var$2 = new jl_IndexOutOfBoundsException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(10));
    var$3 = jl_StringBuilder_append1(var$3, $index);
    jl_AbstractStringBuilder_append(var$3, $rt_s(11));
    jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$3, $this.$size0)));
    $rt_throw(var$2);
},
cbgu_Array_insert = ($this, $index, $value) => {
    let var$3, var$4, $items, var$6;
    var$3 = $this.$size0;
    if ($index > var$3) {
        $value = new jl_IndexOutOfBoundsException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(12));
        var$4 = jl_StringBuilder_append1(var$4, $index);
        jl_AbstractStringBuilder_append(var$4, $rt_s(13));
        jl_Throwable__init_($value, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$4, $this.$size0)));
        $rt_throw($value);
    }
    $items = $this.$items;
    if (var$3 == $items.data.length)
        $items = cbgu_Array_resize($this, jl_Math_max(8, var$3 * 1.75 | 0));
    if (!$this.$ordered) {
        var$6 = $items.data;
        var$6[$this.$size0] = var$6[$index];
    } else
        jl_System_fastArraycopy($items, $index, $items, $index + 1 | 0, $this.$size0 - $index | 0);
    $items = $items.data;
    $this.$size0 = $this.$size0 + 1 | 0;
    $items[$index] = $value;
},
cbgu_Array_indexOf = ($this, $value, $identity) => {
    let $items, $i, $n;
    a: {
        $items = $this.$items;
        if (!$identity && $value !== null) {
            $i = 0;
            $n = $this.$size0;
            while (true) {
                if ($i >= $n)
                    break a;
                if (jl_Object_equals($value, $items.data[$i]))
                    break;
                $i = $i + 1 | 0;
            }
            return $i;
        }
        $i = 0;
        $n = $this.$size0;
        while (true) {
            if ($i >= $n)
                break a;
            if ($items.data[$i] === $value)
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    return (-1);
},
cbgu_Array_removeValue = ($this, $value, $identity) => {
    let $items, $i, $n;
    a: {
        $items = $this.$items;
        if (!(!$identity && $value !== null)) {
            $i = 0;
            $n = $this.$size0;
            while ($i < $n) {
                if ($items.data[$i] === $value) {
                    $this.$removeIndex($i);
                    return 1;
                }
                $i = $i + 1 | 0;
            }
        } else {
            $i = 0;
            $n = $this.$size0;
            while (true) {
                if ($i >= $n)
                    break a;
                if ($value.$equals($items.data[$i])) {
                    $this.$removeIndex($i);
                    return 1;
                }
                $i = $i + 1 | 0;
            }
        }
    }
    return 0;
},
cbgu_Array_removeIndex = ($this, $index) => {
    let var$2, var$3, $value, $items, var$6, var$7;
    var$2 = $this.$size0;
    if ($index >= var$2) {
        var$3 = new jl_IndexOutOfBoundsException;
        $value = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($value);
        jl_AbstractStringBuilder_append($value, $rt_s(10));
        $value = jl_StringBuilder_append1($value, $index);
        jl_AbstractStringBuilder_append($value, $rt_s(11));
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1($value, $this.$size0)));
        $rt_throw(var$3);
    }
    $items = $this.$items;
    var$6 = $items.data;
    $value = var$6[$index];
    var$7 = var$2 - 1 | 0;
    $this.$size0 = var$7;
    if (!$this.$ordered)
        var$6[$index] = var$6[var$7];
    else
        jl_System_fastArraycopy($items, $index + 1 | 0, $items, $index, var$7 - $index | 0);
    var$6[$this.$size0] = null;
    return $value;
},
cbgu_Array_pop = $this => {
    let var$1, $item, var$3, var$4;
    var$1 = $this.$size0;
    if (!var$1) {
        $item = new jl_IllegalStateException;
        jl_Throwable__init_($item, $rt_s(14));
        $rt_throw($item);
    }
    var$3 = var$1 - 1 | 0;
    $this.$size0 = var$3;
    var$4 = $this.$items.data;
    $item = var$4[var$3];
    var$4[var$3] = null;
    return $item;
},
cbgu_Array_peek = $this => {
    let var$1, var$2;
    var$1 = $this.$size0;
    if (var$1)
        return $this.$items.data[var$1 - 1 | 0];
    var$2 = new jl_IllegalStateException;
    jl_Throwable__init_(var$2, $rt_s(14));
    $rt_throw(var$2);
},
cbgu_Array_first = $this => {
    let var$1;
    if ($this.$size0)
        return $this.$items.data[0];
    var$1 = new jl_IllegalStateException;
    jl_Throwable__init_(var$1, $rt_s(14));
    $rt_throw(var$1);
},
cbgu_Array_isEmpty = $this => {
    return $this.$size0 ? 0 : 1;
},
cbgu_Array_clear = $this => {
    ju_Arrays_fill0($this.$items, 0, $this.$size0, null);
    $this.$size0 = 0;
},
cbgu_Array_resize = ($this, $newSize) => {
    let $items, $newItems, var$4;
    $items = $this.$items;
    $newItems = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($items)), $newSize);
    var$4 = $newItems.data;
    jl_System_fastArraycopy($items, 0, $newItems, 0, jl_Math_min($this.$size0, var$4.length));
    $this.$items = $newItems;
    return $newItems;
},
cbgu_Array_sort = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14;
    if (cbgu_Sort_instance === null)
        cbgu_Sort_instance = new cbgu_Sort;
    var$1 = cbgu_Sort_instance;
    var$2 = $this.$items;
    var$3 = 0;
    var$4 = $this.$size0;
    if (var$1.$comparableTimSort === null) {
        var$5 = new cbgu_ComparableTimSort;
        var$5.$minGallop = 7;
        var$5.$stackSize = 0;
        var$5.$tmp = $rt_createArray(jl_Object, 256);
        var$5.$runBase = $rt_createIntArray(40);
        var$5.$runLen = $rt_createIntArray(40);
        var$1.$comparableTimSort = var$5;
    }
    var$6 = var$2.data;
    var$1 = var$1.$comparableTimSort;
    var$1.$stackSize = 0;
    var$7 = var$6.length;
    if (var$3 > var$4) {
        var$1 = new jl_IllegalArgumentException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_AbstractStringBuilder_append(var$5, $rt_s(15));
        var$5 = jl_StringBuilder_append1(var$5, var$3);
        jl_AbstractStringBuilder_append(var$5, $rt_s(16));
        var$5 = jl_StringBuilder_append1(var$5, var$4);
        jl_AbstractStringBuilder_append(var$5, $rt_s(17));
        jl_Throwable__init_(var$1, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw(var$1);
    }
    if (var$4 > var$7)
        $rt_throw(jl_ArrayIndexOutOfBoundsException__init_0(var$4));
    var$8 = var$4 - var$3 | 0;
    if (var$8 >= 2) {
        if (var$8 < 32)
            cbgu_ComparableTimSort_binarySort(var$2, var$3, var$4, var$3 + cbgu_ComparableTimSort_countRunAndMakeAscending(var$2, var$3, var$4) | 0);
        else {
            var$1.$a0 = var$2;
            var$1.$tmpCount = 0;
            var$9 = 0;
            var$10 = var$8;
            while (var$10 >= 32) {
                var$9 = var$9 | var$10 & 1;
                var$10 = var$10 >> 1;
            }
            var$7 = var$10 + var$9 | 0;
            while (true) {
                var$9 = cbgu_ComparableTimSort_countRunAndMakeAscending(var$2, var$3, var$4);
                if (var$9 >= var$7)
                    var$10 = var$9;
                else {
                    var$10 = var$8 > var$7 ? var$7 : var$8;
                    cbgu_ComparableTimSort_binarySort(var$2, var$3, var$3 + var$10 | 0, var$3 + var$9 | 0);
                }
                var$6 = var$1.$runBase.data;
                var$11 = var$1.$stackSize;
                var$6[var$11] = var$3;
                var$1.$runLen.data[var$11] = var$10;
                var$1.$stackSize = var$11 + 1 | 0;
                a: while (true) {
                    var$11 = var$1.$stackSize;
                    if (var$11 <= 1)
                        break;
                    b: {
                        var$11 = var$11 - 2 | 0;
                        if (var$11 > 0) {
                            var$6 = var$1.$runLen.data;
                            var$12 = var$11 - 1 | 0;
                            var$13 = var$6[var$12];
                            var$14 = var$6[var$11];
                            var$9 = var$11 + 1 | 0;
                            if (var$13 <= (var$14 + var$6[var$9] | 0)) {
                                if (var$6[var$12] < var$6[var$9])
                                    var$11 = var$11 + (-1) | 0;
                                cbgu_ComparableTimSort_mergeAt(var$1, var$11);
                                break b;
                            }
                        }
                        var$6 = var$1.$runLen.data;
                        if (var$6[var$11] > var$6[var$11 + 1 | 0])
                            break a;
                        cbgu_ComparableTimSort_mergeAt(var$1, var$11);
                    }
                }
                var$3 = var$3 + var$10 | 0;
                var$8 = var$8 - var$10 | 0;
                if (!var$8)
                    break;
            }
            while (true) {
                var$4 = var$1.$stackSize;
                if (var$4 <= 1)
                    break;
                var$4 = var$4 - 2 | 0;
                if (var$4 > 0) {
                    var$2 = var$1.$runLen.data;
                    if (var$2[var$4 - 1 | 0] < var$2[var$4 + 1 | 0])
                        var$4 = var$4 + (-1) | 0;
                }
                cbgu_ComparableTimSort_mergeAt(var$1, var$4);
            }
            var$1.$a0 = null;
            var$2 = var$1.$tmp;
            var$3 = 0;
            var$4 = var$1.$tmpCount;
            while (var$3 < var$4) {
                var$2.data[var$3] = null;
                var$3 = var$3 + 1 | 0;
            }
        }
    }
},
cbgu_Array_iterator = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = cbgu_Collections_allocateIterators;
    if (var$1)
        return cbgu_Array$ArrayIterator__init_($this, 1);
    if ($this.$iterable === null) {
        var$2 = new cbgu_Array$ArrayIterable;
        var$2.$array2 = $this;
        var$2.$allowRemove = 1;
        $this.$iterable = var$2;
    }
    var$2 = $this.$iterable;
    if (var$1)
        var$3 = cbgu_Array$ArrayIterator__init_(var$2.$array2, var$2.$allowRemove);
    else {
        if (var$2.$iterator1 === null) {
            var$2.$iterator1 = cbgu_Array$ArrayIterator__init_(var$2.$array2, var$2.$allowRemove);
            var$2.$iterator2 = cbgu_Array$ArrayIterator__init_(var$2.$array2, var$2.$allowRemove);
        }
        var$4 = var$2.$iterator1;
        if (var$4.$valid) {
            var$3 = var$2.$iterator2;
            var$3.$index2 = 0;
            var$3.$valid = 1;
            var$4.$valid = 0;
        } else {
            var$4.$index2 = 0;
            var$4.$valid = 1;
            var$2.$iterator2.$valid = 0;
            var$3 = var$4;
        }
    }
    return var$3;
},
cbgu_Array_truncate = ($this, $newSize) => {
    let var$2, var$3, var$4, $i;
    if ($newSize < 0) {
        var$2 = new jl_IllegalArgumentException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $rt_s(18));
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$3, $newSize)));
        $rt_throw(var$2);
    }
    var$4 = $this.$size0;
    if (var$4 <= $newSize)
        return;
    $i = $newSize;
    while ($i < var$4) {
        $this.$items.data[$i] = null;
        $i = $i + 1 | 0;
    }
    $this.$size0 = $newSize;
},
cbgu_Array_random = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8;
    var$1 = $this.$size0;
    if (!var$1)
        return null;
    var$2 = $this.$items;
    var$3 = var$1 - 1 | 0;
    var$4 = cbgm_MathUtils_random1;
    var$3 = (var$3 - 0 | 0) + 1 | 0;
    var$4 = var$4;
    var$5 = Long_fromInt(var$3);
    if (Long_le(var$5, Long_ZERO)) {
        var$4 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$4, $rt_s(19));
        $rt_throw(var$4);
    }
    var$6 = Long_sub(var$5, Long_fromInt(1));
    while (true) {
        var$7 = Long_shru(cbgm_RandomXS128_nextLong(var$4), 1);
        var$8 = Long_rem(var$7, var$5);
        if (Long_ge(Long_add(Long_sub(var$7, var$8), var$6), Long_ZERO))
            break;
    }
    return var$2.data[0 + Long_lo(var$8) | 0];
},
cbgu_Array_of = ($ordered, $capacity, $arrayType) => {
    return cbgu_Array__init_4($ordered, $capacity, $arrayType);
},
cbgu_Json = $rt_classWithoutFields();
function cbgu_ObjectMap() {
    let a = this; jl_Object.call(a);
    a.$size9 = 0;
    a.$keyTable0 = null;
    a.$valueTable = null;
    a.$loadFactor6 = 0.0;
    a.$threshold2 = 0;
    a.$shift4 = 0;
    a.$mask3 = 0;
    a.$keys1 = null;
    a.$keys2 = null;
}
let cbgu_ObjectMap_dummy = null,
cbgu_ObjectMap__init_1 = $this => {
    cbgu_ObjectMap__init_0($this, 51, 0.800000011920929);
},
cbgu_ObjectMap__init_ = () => {
    let var_0 = new cbgu_ObjectMap();
    cbgu_ObjectMap__init_1(var_0);
    return var_0;
},
cbgu_ObjectMap__init_0 = ($this, $initialCapacity, $loadFactor) => {
    let $tableSize, var$4, var$5;
    if ($loadFactor > 0.0 && $loadFactor < 1.0) {
        $this.$loadFactor6 = $loadFactor;
        $tableSize = cbgu_ObjectSet_tableSize($initialCapacity, $loadFactor);
        $this.$threshold2 = $tableSize * $loadFactor | 0;
        $initialCapacity = $tableSize - 1 | 0;
        $this.$mask3 = $initialCapacity;
        $this.$shift4 = jl_Long_numberOfLeadingZeros(Long_fromInt($initialCapacity));
        $this.$keyTable0 = $rt_createArray(jl_Object, $tableSize);
        $this.$valueTable = $rt_createArray(jl_Object, $tableSize);
        return;
    }
    var$4 = new jl_IllegalArgumentException;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append(var$5, $rt_s(20));
    jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3(var$5, $loadFactor)));
    $rt_throw(var$4);
},
cbgu_ObjectMap__init_2 = (var_0, var_1) => {
    let var_2 = new cbgu_ObjectMap();
    cbgu_ObjectMap__init_0(var_2, var_0, var_1);
    return var_2;
},
cbgu_ObjectMap_place = ($this, $item) => {
    return Long_lo(Long_shru(Long_mul(Long_fromInt($item.$hashCode()), Long_create(2135587861, 2654435769)), $this.$shift4));
},
cbgu_ObjectMap_locateKey = ($this, $key) => {
    let $other, $keyTable, $i;
    if ($key === null) {
        $other = new jl_IllegalArgumentException;
        jl_Throwable__init_($other, $rt_s(21));
        $rt_throw($other);
    }
    $keyTable = $this.$keyTable0;
    $i = cbgu_ObjectMap_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if ($other === null)
            return  -($i + 1 | 0) | 0;
        if ($other.$equals($key))
            break;
        $i = ($i + 1 | 0) & $this.$mask3;
    }
    return $i;
},
cbgu_ObjectMap_put = ($this, $key, $value) => {
    let $i, var$4, $oldValue;
    $i = cbgu_ObjectMap_locateKey($this, $key);
    if ($i >= 0) {
        var$4 = $this.$valueTable.data;
        $oldValue = var$4[$i];
        var$4[$i] = $value;
        return $oldValue;
    }
    $i =  -($i + 1 | 0) | 0;
    var$4 = $this.$keyTable0.data;
    var$4[$i] = $key;
    $this.$valueTable.data[$i] = $value;
    $i = $this.$size9 + 1 | 0;
    $this.$size9 = $i;
    if ($i >= $this.$threshold2)
        cbgu_ObjectMap_resize($this, var$4.length << 1);
    return null;
},
cbgu_ObjectMap_get = ($this, $key) => {
    let $i;
    $i = cbgu_ObjectMap_locateKey($this, $key);
    return $i < 0 ? null : $this.$valueTable.data[$i];
},
cbgu_ObjectMap_containsKey = ($this, $key) => {
    return cbgu_ObjectMap_locateKey($this, $key) < 0 ? 0 : 1;
},
cbgu_ObjectMap_resize = ($this, $newSize) => {
    let $oldCapacity, var$3, $oldKeyTable, $oldValueTable, $i, $key, var$8, var$9, var$10;
    a: {
        $oldCapacity = $this.$keyTable0.data.length;
        $this.$threshold2 = $newSize * $this.$loadFactor6 | 0;
        var$3 = $newSize - 1 | 0;
        $this.$mask3 = var$3;
        $this.$shift4 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$3));
        $oldKeyTable = $this.$keyTable0;
        $oldValueTable = $this.$valueTable;
        $this.$keyTable0 = $rt_createArray(jl_Object, $newSize);
        $this.$valueTable = $rt_createArray(jl_Object, $newSize);
        if ($this.$size9 > 0) {
            $i = 0;
            while (true) {
                if ($i >= $oldCapacity)
                    break a;
                $key = $oldKeyTable.data[$i];
                if ($key !== null) {
                    var$8 = $oldValueTable.data[$i];
                    var$9 = $this.$keyTable0;
                    $newSize = cbgu_ObjectMap_place($this, $key);
                    while (true) {
                        var$10 = var$9.data;
                        if (var$10[$newSize] === null)
                            break;
                        $newSize = ($newSize + 1 | 0) & $this.$mask3;
                    }
                    var$10[$newSize] = $key;
                    $this.$valueTable.data[$newSize] = var$8;
                }
                $i = $i + 1 | 0;
            }
        }
    }
},
cbgu_ObjectMap__clinit_ = () => {
    cbgu_ObjectMap_dummy = new jl_Object;
};
function cbgu_OrderedMap() {
    cbgu_ObjectMap.call(this);
    this.$keys3 = null;
}
let cbgu_OrderedMap__init_0 = $this => {
    cbgu_ObjectMap__init_1($this);
    $this.$keys3 = cbgu_Array__init_();
},
cbgu_OrderedMap__init_ = () => {
    let var_0 = new cbgu_OrderedMap();
    cbgu_OrderedMap__init_0(var_0);
    return var_0;
},
cbgu_OrderedMap_put = ($this, $key, $value) => {
    let $i, var$4, $oldValue;
    $i = cbgu_ObjectMap_locateKey($this, $key);
    if ($i >= 0) {
        var$4 = $this.$valueTable.data;
        $oldValue = var$4[$i];
        var$4[$i] = $value;
        return $oldValue;
    }
    $i =  -($i + 1 | 0) | 0;
    $this.$keyTable0.data[$i] = $key;
    $this.$valueTable.data[$i] = $value;
    cbgu_Array_add($this.$keys3, $key);
    $i = $this.$size9 + 1 | 0;
    $this.$size9 = $i;
    if ($i >= $this.$threshold2)
        cbgu_ObjectMap_resize($this, $this.$keyTable0.data.length << 1);
    return null;
},
cbgu_OrderedMap_keys = $this => {
    let var$1;
    if (cbgu_Collections_allocateIterators)
        return cbgu_OrderedMap$OrderedMapKeys__init_($this);
    if ($this.$keys1 === null) {
        $this.$keys1 = cbgu_OrderedMap$OrderedMapKeys__init_($this);
        $this.$keys2 = cbgu_OrderedMap$OrderedMapKeys__init_($this);
    }
    var$1 = $this.$keys1;
    if (!var$1.$valid1) {
        cbgu_OrderedMap$OrderedMapKeys_reset(var$1);
        var$1 = $this.$keys1;
        var$1.$valid1 = 1;
        $this.$keys2.$valid1 = 0;
        return var$1;
    }
    cbgu_OrderedMap$OrderedMapKeys_reset($this.$keys2);
    var$1 = $this.$keys2;
    var$1.$valid1 = 1;
    $this.$keys1.$valid1 = 0;
    return var$1;
},
cbgu_Queue = $rt_classWithoutFields(),
cbgu_Predicate = $rt_classWithoutFields(0);
function cbgg_VertexAttribute() {
    let a = this; jl_Object.call(a);
    a.$usage4 = 0;
    a.$numComponents = 0;
    a.$normalized = 0;
    a.$type4 = 0;
    a.$offset0 = 0;
    a.$alias = null;
    a.$unit = 0;
    a.$usageIndex = 0;
}
let cbgg_VertexAttribute__init_0 = ($this, $usage, $numComponents, $alias) => {
    let var$4, var$5;
    var$4 = $rt_compare($usage, 4);
    var$5 = var$4 ? 5126 : 5121;
    var$4 = var$4 ? 0 : 1;
    $this.$usage4 = $usage;
    $this.$numComponents = $numComponents;
    $this.$type4 = var$5;
    $this.$normalized = var$4;
    $this.$alias = $alias;
    $this.$unit = 0;
    $this.$usageIndex = jl_Integer_numberOfTrailingZeros($usage);
},
cbgg_VertexAttribute__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cbgg_VertexAttribute();
    cbgg_VertexAttribute__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cbg_Net = $rt_classWithoutFields(0),
cbgm_MapObject = $rt_classWithoutFields(),
cbgggp_ResourceData$Configurable = $rt_classWithoutFields(0),
cbgggp_ParticleEffect = $rt_classWithoutFields(),
cbgu_Json$Serializable = $rt_classWithoutFields(0),
cbgggp_ParticleController = $rt_classWithoutFields(),
cbgggp_ResourceData = $rt_classWithoutFields(),
cbgggp_ParallelArray = $rt_classWithoutFields(),
cbgm_Interpolation = $rt_classWithoutFields(),
cbgm_Interpolation_linear = null,
cbgm_Interpolation_smooth = null,
cbgm_Interpolation_smooth2 = null,
cbgm_Interpolation_smoother = null,
cbgm_Interpolation_fade = null,
cbgm_Interpolation_pow2 = null,
cbgm_Interpolation_pow2In = null,
cbgm_Interpolation_slowFast = null,
cbgm_Interpolation_pow2Out = null,
cbgm_Interpolation_fastSlow = null,
cbgm_Interpolation_pow2InInverse = null,
cbgm_Interpolation_pow2OutInverse = null,
cbgm_Interpolation_pow3 = null,
cbgm_Interpolation_pow3In = null,
cbgm_Interpolation_pow3Out = null,
cbgm_Interpolation_pow3InInverse = null,
cbgm_Interpolation_pow3OutInverse = null,
cbgm_Interpolation_pow4 = null,
cbgm_Interpolation_pow4In = null,
cbgm_Interpolation_pow4Out = null,
cbgm_Interpolation_pow5 = null,
cbgm_Interpolation_pow5In = null,
cbgm_Interpolation_pow5Out = null,
cbgm_Interpolation_sine = null,
cbgm_Interpolation_sineIn = null,
cbgm_Interpolation_sineOut = null,
cbgm_Interpolation_exp10 = null,
cbgm_Interpolation_exp10In = null,
cbgm_Interpolation_exp10Out = null,
cbgm_Interpolation_exp5 = null,
cbgm_Interpolation_exp5In = null,
cbgm_Interpolation_exp5Out = null,
cbgm_Interpolation_circle = null,
cbgm_Interpolation_circleIn = null,
cbgm_Interpolation_circleOut = null,
cbgm_Interpolation_elastic = null,
cbgm_Interpolation_elasticIn = null,
cbgm_Interpolation_elasticOut = null,
cbgm_Interpolation_swing = null;
let cbgm_Interpolation_swingIn = null,
cbgm_Interpolation_swingOut = null,
cbgm_Interpolation_bounce = null,
cbgm_Interpolation_bounceIn = null,
cbgm_Interpolation_bounceOut = null,
cbgm_Interpolation_$callClinit = () => {
    cbgm_Interpolation_$callClinit = $rt_eraseClinit(cbgm_Interpolation);
    cbgm_Interpolation__clinit_();
},
cbgm_Interpolation__init_ = $this => {
    cbgm_Interpolation_$callClinit();
},
cbgm_Interpolation_apply = ($this, $start, $end, $a) => {
    return $start + ($end - $start) * $this.$apply($a);
},
cbgm_Interpolation__clinit_ = () => {
    let var$1;
    var$1 = new cbgm_Interpolation$1;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_linear = var$1;
    var$1 = new cbgm_Interpolation$2;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_smooth = var$1;
    var$1 = new cbgm_Interpolation$3;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_smooth2 = var$1;
    var$1 = new cbgm_Interpolation$4;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_smoother = var$1;
    cbgm_Interpolation_fade = var$1;
    cbgm_Interpolation_pow2 = cbgm_Interpolation$Pow__init_0(2);
    var$1 = new cbgm_Interpolation$PowIn;
    cbgm_Interpolation$Pow__init_(var$1, 2);
    cbgm_Interpolation_pow2In = var$1;
    cbgm_Interpolation_slowFast = var$1;
    var$1 = new cbgm_Interpolation$PowOut;
    cbgm_Interpolation$Pow__init_(var$1, 2);
    cbgm_Interpolation_pow2Out = var$1;
    cbgm_Interpolation_fastSlow = var$1;
    var$1 = new cbgm_Interpolation$5;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_pow2InInverse = var$1;
    var$1 = new cbgm_Interpolation$6;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_pow2OutInverse = var$1;
    cbgm_Interpolation_pow3 = cbgm_Interpolation$Pow__init_0(3);
    var$1 = new cbgm_Interpolation$PowIn;
    cbgm_Interpolation$Pow__init_(var$1, 3);
    cbgm_Interpolation_pow3In = var$1;
    var$1 = new cbgm_Interpolation$PowOut;
    cbgm_Interpolation$Pow__init_(var$1, 3);
    cbgm_Interpolation_pow3Out = var$1;
    var$1 = new cbgm_Interpolation$7;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_pow3InInverse = var$1;
    var$1 = new cbgm_Interpolation$8;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_pow3OutInverse = var$1;
    cbgm_Interpolation_pow4 = cbgm_Interpolation$Pow__init_0(4);
    var$1 = new cbgm_Interpolation$PowIn;
    cbgm_Interpolation$Pow__init_(var$1, 4);
    cbgm_Interpolation_pow4In = var$1;
    var$1 = new cbgm_Interpolation$PowOut;
    cbgm_Interpolation$Pow__init_(var$1, 4);
    cbgm_Interpolation_pow4Out = var$1;
    cbgm_Interpolation_pow5 = cbgm_Interpolation$Pow__init_0(5);
    var$1 = new cbgm_Interpolation$PowIn;
    cbgm_Interpolation$Pow__init_(var$1, 5);
    cbgm_Interpolation_pow5In = var$1;
    var$1 = new cbgm_Interpolation$PowOut;
    cbgm_Interpolation$Pow__init_(var$1, 5);
    cbgm_Interpolation_pow5Out = var$1;
    var$1 = new cbgm_Interpolation$9;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_sine = var$1;
    var$1 = new cbgm_Interpolation$10;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_sineIn = var$1;
    var$1 = new cbgm_Interpolation$11;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_sineOut = var$1;
    cbgm_Interpolation_exp10 = cbgm_Interpolation$Exp__init_0(2.0, 10.0);
    var$1 = new cbgm_Interpolation$ExpIn;
    cbgm_Interpolation$Exp__init_(var$1, 2.0, 10.0);
    cbgm_Interpolation_exp10In = var$1;
    var$1 = new cbgm_Interpolation$ExpOut;
    cbgm_Interpolation$Exp__init_(var$1, 2.0, 10.0);
    cbgm_Interpolation_exp10Out = var$1;
    cbgm_Interpolation_exp5 = cbgm_Interpolation$Exp__init_0(2.0, 5.0);
    var$1 = new cbgm_Interpolation$ExpIn;
    cbgm_Interpolation$Exp__init_(var$1, 2.0, 5.0);
    cbgm_Interpolation_exp5In = var$1;
    var$1 = new cbgm_Interpolation$ExpOut;
    cbgm_Interpolation$Exp__init_(var$1, 2.0, 5.0);
    cbgm_Interpolation_exp5Out = var$1;
    var$1 = new cbgm_Interpolation$12;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_circle = var$1;
    var$1 = new cbgm_Interpolation$13;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_circleIn = var$1;
    var$1 = new cbgm_Interpolation$14;
    cbgm_Interpolation__init_(var$1);
    cbgm_Interpolation_circleOut = var$1;
    cbgm_Interpolation_elastic = cbgm_Interpolation$Elastic__init_0(2.0, 10.0, 7, 1.0);
    var$1 = new cbgm_Interpolation$ElasticIn;
    cbgm_Interpolation$Elastic__init_(var$1, 2.0, 10.0, 6, 1.0);
    cbgm_Interpolation_elasticIn = var$1;
    var$1 = new cbgm_Interpolation$ElasticOut;
    cbgm_Interpolation$Elastic__init_(var$1, 2.0, 10.0, 7, 1.0);
    cbgm_Interpolation_elasticOut = var$1;
    var$1 = new cbgm_Interpolation$Swing;
    cbgm_Interpolation__init_(var$1);
    var$1.$scale0 = 3.0;
    cbgm_Interpolation_swing = var$1;
    var$1 = new cbgm_Interpolation$SwingIn;
    cbgm_Interpolation__init_(var$1);
    var$1.$scale4 = 2.0;
    cbgm_Interpolation_swingIn = var$1;
    var$1 = new cbgm_Interpolation$SwingOut;
    cbgm_Interpolation__init_(var$1);
    var$1.$scale1 = 2.0;
    cbgm_Interpolation_swingOut = var$1;
    var$1 = new cbgm_Interpolation$Bounce;
    cbgm_Interpolation$BounceOut__init_(var$1, 4);
    cbgm_Interpolation_bounce = var$1;
    var$1 = new cbgm_Interpolation$BounceIn;
    cbgm_Interpolation$BounceOut__init_(var$1, 4);
    cbgm_Interpolation_bounceIn = var$1;
    cbgm_Interpolation_bounceOut = cbgm_Interpolation$BounceOut__init_0(4);
},
jlr_AnnotatedElement = $rt_classWithoutFields(0),
jlr_Type = $rt_classWithoutFields(0);
function jl_Class() {
    let a = this; jl_Object.call(a);
    a.$name1 = null;
    a.$simpleName = null;
    a.$platformClass = null;
    a.$declaredConstructors = null;
}
let jl_Class_reflectionInitialized = 0,
jl_Class_getClass = $cls => {
    let $result;
    if ($cls === null)
        return null;
    $result = $cls.classObject;
    if ($result === null) {
        $result = new jl_Class;
        $result.$platformClass = $cls;
        $cls.classObject = $result;
    }
    return $result;
},
jl_Class_toString = $this => {
    let var$1, var$2, var$3;
    var$1 = (!($this.$platformClass.$meta.flags & 2) ? 0 : 1) ? $rt_s(22) : !jl_Class_isPrimitive($this) ? $rt_s(23) : $rt_s(24);
    var$2 = jl_Class_getName($this);
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(var$3, var$1), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jl_Class_getName = $this => {
    if ($this.$name1 === null)
        $this.$name1 = otp_Platform_getName($this.$platformClass);
    return $this.$name1;
},
jl_Class_getSimpleName = $this => {
    let $simpleName, var$2, $lastDollar, $lastDot;
    $simpleName = $this.$simpleName;
    if ($simpleName === null) {
        if (jl_Class_isArray($this)) {
            $simpleName = jl_Class_getSimpleName(jl_Class_getComponentType($this));
            var$2 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$2);
            jl_StringBuilder_append(jl_StringBuilder_append(var$2, $simpleName), $rt_s(25));
            $simpleName = jl_AbstractStringBuilder_toString(var$2);
        } else {
            $simpleName = $this.$platformClass.$meta.enclosingClass;
            if (($simpleName === null ? null : jl_Class_getClass($simpleName)) !== null) {
                $simpleName = $rt_str($this.$platformClass.$meta.simpleName);
                if ($simpleName === null)
                    $simpleName = $rt_s(24);
            } else {
                $simpleName = otp_Platform_getName($this.$platformClass);
                $lastDollar = jl_String_lastIndexOf2($simpleName, 36);
                if ($lastDollar == (-1)) {
                    $lastDot = jl_String_lastIndexOf2($simpleName, 46);
                    if ($lastDot != (-1))
                        $simpleName = jl_String_substring0($simpleName, $lastDot + 1 | 0);
                } else {
                    $simpleName = jl_String_substring0($simpleName, $lastDollar + 1 | 0);
                    if (jl_String_charAt($simpleName, 0) >= 48 && jl_String_charAt($simpleName, 0) <= 57)
                        $simpleName = $rt_s(24);
                }
            }
        }
        $this.$simpleName = $simpleName;
    }
    return $simpleName;
},
jl_Class_isPrimitive = $this => {
    return $this.$platformClass.$meta.primitive ? 1 : 0;
},
jl_Class_isArray = $this => {
    return otp_Platform_getArrayItem($this.$platformClass) === null ? 0 : 1;
},
jl_Class_getComponentType = $this => {
    return jl_Class_getClass(otp_Platform_getArrayItem($this.$platformClass));
},
jl_Class_createMetadata = () => {
    cbggg_GlyphLayout$GlyphRun.$meta.methods = [
        {
            name : "<init>",
            modifiers : 0,
            accessLevel : 3,
            parameterTypes : [],
            returnType : $rt_voidcls,
            callable : null
        }, {
            name : "appendRun",
            modifiers : 0,
            accessLevel : 0,
            parameterTypes : [cbggg_GlyphLayout$GlyphRun],
            returnType : $rt_voidcls,
            callable : null
        }, {
            name : "reset",
            modifiers : 0,
            accessLevel : 3,
            parameterTypes : [],
            returnType : $rt_voidcls,
            callable : null
        }, {
            name : "toString",
            modifiers : 0,
            accessLevel : 3,
            parameterTypes : [],
            returnType : jl_String,
            callable : null
        }];
},
jl_Class_getDeclaredConstructors = $this => {
    let $jsMethods, $count, $i, var$4, $jsMethod, $jsParameterTypes, $parameterTypes, var$8, $j, var$10, var$11, var$12;
    if (!jl_Class_isPrimitive($this) && !jl_Class_isArray($this)) {
        if ($this.$declaredConstructors === null) {
            if (!jl_Class_reflectionInitialized) {
                jl_Class_reflectionInitialized = 1;
                jl_Class_createMetadata();
            }
            $jsMethods = $this.$platformClass.$meta.methods;
            $this.$declaredConstructors = $rt_createArray(jlr_Constructor, $jsMethods.length);
            $count = 0;
            $i = 0;
            while ($i < $jsMethods.length) {
                var$4 = $jsMethods[$i];
                $jsMethod = var$4 === null ? null : !(var$4 instanceof $rt_objcls()) ? var$4 : otji_JSWrapper_unwrap(var$4);
                if (jl_String_equals($rt_str($jsMethod.name), $rt_s(26))) {
                    $jsParameterTypes = $jsMethod.parameterTypes;
                    $parameterTypes = $rt_createArray(jl_Class, $jsParameterTypes.length);
                    var$8 = $parameterTypes.data;
                    $j = 0;
                    var$10 = var$8.length;
                    while ($j < var$10) {
                        var$8[$j] = jl_Class_getClass($jsParameterTypes[$j]);
                        $j = $j + 1 | 0;
                    }
                    var$8 = $this.$declaredConstructors;
                    var$10 = $count + 1 | 0;
                    var$11 = new jlr_Constructor;
                    var$4 = $rt_str($jsMethod.name);
                    var$12 = $jsMethod.modifiers;
                    $j = $jsMethod.accessLevel;
                    $jsParameterTypes = otji_JS_functionAsObject($jsMethod.callable, "call");
                    if ($jsParameterTypes === null)
                        $jsMethod = null;
                    else {
                        $jsMethod = new otcir_MethodCaller$forJs$lambda$_1_0;
                        $jsMethod.$_020 = $jsParameterTypes;
                    }
                    var$8 = var$8.data;
                    var$11.$declaringClass = $this;
                    var$11.$name6 = var$4;
                    var$11.$modifiers = var$12;
                    var$11.$accessLevel = $j;
                    var$11.$parameterTypes = $parameterTypes;
                    var$11.$caller = $jsMethod;
                    var$8[$count] = var$11;
                    $count = var$10;
                }
                $i = $i + 1 | 0;
            }
            $this.$declaredConstructors = ju_Arrays_copyOf0($this.$declaredConstructors, $count);
        }
        return $this.$declaredConstructors.$clone0();
    }
    return $rt_createArray(jlr_Constructor, 0);
},
jl_Class_getDeclaredConstructor = ($this, $parameterTypes) => {
    let var$2, var$3, var$4, $constructor;
    var$2 = (jl_Class_getDeclaredConstructors($this)).data;
    var$3 = var$2.length;
    var$4 = 0;
    while (true) {
        if (var$4 >= var$3) {
            $constructor = new jl_NoSuchMethodException;
            jl_Exception__init_($constructor);
            $rt_throw($constructor);
        }
        $constructor = var$2[var$4];
        if (ju_Arrays_equals(jlr_Constructor_getParameterTypes($constructor), $parameterTypes))
            break;
        var$4 = var$4 + 1 | 0;
    }
    return $constructor;
},
jl_Class_getConstructor = ($this, $parameterTypes) => {
    let var$2, var$3, var$4, $constructor;
    var$2 = (jl_Class_getDeclaredConstructors($this)).data;
    var$3 = var$2.length;
    var$4 = 0;
    while (true) {
        if (var$4 >= var$3) {
            $constructor = new jl_NoSuchMethodException;
            jl_Exception__init_($constructor);
            $rt_throw($constructor);
        }
        $constructor = var$2[var$4];
        if (jlr_Modifier_isPublic(jlr_Constructor_getModifiers($constructor)) && ju_Arrays_equals(jlr_Constructor_getParameterTypes($constructor), $parameterTypes))
            break;
        var$4 = var$4 + 1 | 0;
    }
    return $constructor;
},
otji_JS = $rt_classWithoutFields(),
otji_JS_wrap = $array => {
    let var$2, $result, $i, var$5;
    if ($array === null)
        return null;
    $array = $array.data;
    var$2 = $array.length;
    $result = new Int8Array(var$2);
    $i = 0;
    while ($i < var$2) {
        var$5 = $array[$i];
        $result[$i] = var$5;
        $i = $i + 1 | 0;
    }
    return $result;
},
otji_JS_function = (var$1, var$2) => {
    let name = 'jso$functor$' + var$2;
    let result = var$1[name];
    if (typeof result !== 'function') {
        let fn = function() {
            return var$1[var$2].apply(var$1, arguments);
        };
        result = () => fn;
        var$1[name] = result;
    }
    return result();
},
otji_JS_functionAsObject = (var$1, var$2) => {
    if (typeof var$1 !== 'function') return var$1;
    let result = {  };
    result[var$2] = var$1;
    return result;
},
otp_Platform = $rt_classWithoutFields(),
otp_Platform_clone = var$1 => {
    let copy = new var$1.constructor();
    for (let field in var$1) {
        if (var$1.hasOwnProperty(field)) {
            copy[field] = var$1[field];
        }
    }
    return copy;
},
otp_Platform_isAssignable = (var$1, var$2) => {
    let $supertypes, $i;
    if (var$1 === var$2)
        return 1;
    $supertypes = var$1.$meta.supertypes;
    $i = 0;
    while ($i < $supertypes.length) {
        if (otp_Platform_isAssignable($supertypes[$i], var$2))
            return 1;
        $i = $i + 1 | 0;
    }
    return 0;
},
otp_Platform_getEnumConstants = var$1 => {
    let c = '$$enumConstants$$';
    cgxgbt_TeaApplication$AppState[c] = cgxgbt_TeaApplication$AppState_values;
    cbg_Application$ApplicationType[c] = cbg_Application$ApplicationType_values;
    cbggg_GLVersion$Type[c] = cbggg_GLVersion$Type_values;
    cgxgbtd_StyleWrapper$Unit[c] = cgxgbtd_StyleWrapper$Unit_values;
    cgxgbta_AssetType[c] = cgxgbta_AssetType_values;
    cbgg_Pixmap$Format[c] = cbgg_Pixmap$Format_values;
    cgtt_Font$DistanceFieldType[c] = cgtt_Font$DistanceFieldType_values;
    cbgg_Mesh$VertexDataType[c] = cbgg_Mesh$VertexDataType_values;
    cbgg_Pixmap$Blending[c] = cbgg_Pixmap$Blending_values;
    cbgg_Pixmap$Filter[c] = cbgg_Pixmap$Filter_values;
    cbgss_Touchable[c] = cbgss_Touchable_values;
    cbgg_Texture$TextureFilter[c] = cbgg_Texture$TextureFilter_values;
    cbgg_Texture$TextureWrap[c] = cbgg_Texture$TextureWrap_values;
    cbg_Files$FileType[c] = cbg_Files$FileType_values;
    cgtt_TokenCategory[c] = cgtt_TokenCategory_values;
    cgtt_InternalToken[c] = cgtt_InternalToken_values;
    cbgg_TextureData$TextureDataType[c] = cbgg_TextureData$TextureDataType_values;
    cbggg_ParticleEmitter$SpriteMode[c] = cbggg_ParticleEmitter$SpriteMode_values;
    cbggg_ParticleEmitter$SpawnShape[c] = cbggg_ParticleEmitter$SpawnShape_values;
    cbggg_ParticleEmitter$SpawnEllipseSide[c] = cbggg_ParticleEmitter$SpawnEllipseSide_values;
    otp_Platform_getEnumConstants = cls => {
        if (!cls.hasOwnProperty(c)) {
            return null;
        }
        if (typeof cls[c] === "function") {
            cls[c] = cls[c]();
        }
        return cls[c];
    };
    return otp_Platform_getEnumConstants(var$1);
},
otp_Platform_launchThread = var$1 => {
    let var$2, var$3, var$4;
    var$1 = var$1.$_09;
    if (!jl_Object_isEmptyMonitor(var$1)) {
        var$2 = var$1.$monitor;
        if (var$2.$owner === null) {
            var$1 = var$2.$enteringThreads;
            if (var$1 !== null && !otp_PlatformQueue_isEmpty$static(var$1)) {
                var$1 = var$2.$enteringThreads.shift();
                if (var$1 !== null && !(var$1 instanceof $rt_objcls()))
                    var$1 = otji_JSWrapper_wrap(var$1);
                var$3 = var$1;
                var$2.$enteringThreads = null;
                var$1 = var$3;
                var$2 = var$1.$_08;
                var$3 = var$1.$_14;
                var$4 = var$1.$_23;
                var$1 = var$1.$_31;
                jl_Thread_setCurrentThread(var$2);
                var$3 = var$3.$monitor;
                var$3.$owner = var$2;
                var$3.$count0 = var$3.$count0 + var$4 | 0;
                var$2 = null;
                otpp_AsyncCallbackWrapper_complete(var$1, var$2);
            }
        }
    }
},
otp_Platform_schedule = (var$1, var$2) => {
    setTimeout(() => {
        otp_Platform_launchThread(var$1);
    }, var$2);
},
otp_Platform_getArrayItem = var$1 => {
    return var$1.$meta.item;
},
otp_Platform_getName = $cls => {
    return $rt_str($cls.$meta.name);
},
otp_Platform_createQueueJs$js_body$_30 = () => {
    return [];
};
function jl_Throwable() {
    let a = this; jl_Object.call(a);
    a.$message = null;
    a.$cause = null;
    a.$suppressionEnabled = 0;
    a.$writableStackTrace = 0;
    a.$stackTrace = null;
}
let jl_Throwable__init_ = ($this, $message) => {
    jl_Throwable_initNativeException($this);
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    $this.$message = $message;
},
jl_Throwable__init_1 = var_0 => {
    let var_1 = new jl_Throwable();
    jl_Throwable__init_(var_1, var_0);
    return var_1;
},
jl_Throwable__init_0 = ($this, $message, $cause) => {
    jl_Throwable_initNativeException($this);
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    $this.$message = $message;
    $this.$cause = $cause;
},
jl_Throwable__init_2 = (var_0, var_1) => {
    let var_2 = new jl_Throwable();
    jl_Throwable__init_0(var_2, var_0, var_1);
    return var_2;
},
jl_Throwable_fillInStackTrace = $this => {
    return $this;
},
jl_Throwable_initNativeException = $this => {
    $rt_fillNativeException($this);
},
jl_Throwable_getMessage = $this => {
    return $this.$message;
},
jl_Throwable_getLocalizedMessage = $this => {
    return $this.$getMessage();
},
jl_Throwable_getCause = $this => {
    let var$1;
    var$1 = $this.$cause;
    if (var$1 === $this)
        var$1 = null;
    return var$1;
},
jl_Throwable_printStackTrace = $this => {
    jl_Throwable_printStackTrace0($this, jl_System_err());
},
jl_Throwable_printStackTrace0 = ($this, $stream) => {
    let var$2, var$3, $message, var$5, var$6, var$7, $element, var$9;
    var$2 = jl_Class_getName(jl_Object_getClass($this));
    var$3 = $stream;
    otcic_JSStderrPrintStream_print(var$3, var$2);
    $message = $this.$getMessage();
    if ($message !== null) {
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(27)), $message);
        otcic_JSStderrPrintStream_print(var$3, jl_AbstractStringBuilder_toString(var$2));
    }
    a: {
        var$2 = $stream;
        otcic_JSStderrPrintStream_print(var$2, $rt_s(28));
        var$5 = $this.$stackTrace;
        if (var$5 !== null) {
            var$5 = var$5.data;
            var$6 = var$5.length;
            var$7 = 0;
            while (true) {
                if (var$7 >= var$6)
                    break a;
                $element = var$5[var$7];
                otcic_JSStderrPrintStream_print(var$3, $rt_s(29));
                var$9 = $rt_s(30);
                if ($element !== null)
                    var$9 = $element.$toString();
                otcic_JsConsolePrintStream_println(var$2, var$9);
                var$7 = var$7 + 1 | 0;
            }
        }
    }
    var$2 = $this.$cause;
    if (var$2 !== null && var$2 !== $this) {
        otcic_JSStderrPrintStream_print(var$3, $rt_s(31));
        jl_Throwable_printStackTrace0($this.$cause, $stream);
    }
},
jl_Exception = $rt_classWithoutFields(jl_Throwable),
jl_Exception__init_ = $this => {
    jl_Throwable_initNativeException($this);
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
},
jl_Exception__init_1 = () => {
    let var_0 = new jl_Exception();
    jl_Exception__init_(var_0);
    return var_0;
},
jl_Exception__init_0 = ($this, $message) => {
    jl_Throwable__init_($this, $message);
},
jl_Exception__init_2 = var_0 => {
    let var_1 = new jl_Exception();
    jl_Exception__init_0(var_1, var_0);
    return var_1;
},
jl_RuntimeException = $rt_classWithoutFields(jl_Exception),
jl_RuntimeException__init_0 = ($this, $message) => {
    jl_Throwable__init_($this, $message);
},
jl_RuntimeException__init_ = var_0 => {
    let var_1 = new jl_RuntimeException();
    jl_RuntimeException__init_0(var_1, var_0);
    return var_1;
},
jl_ClassCastException = $rt_classWithoutFields(jl_RuntimeException),
ji_Serializable = $rt_classWithoutFields(0),
jl_Comparable = $rt_classWithoutFields(0),
jl_CharSequence = $rt_classWithoutFields(0);
function jl_String() {
    jl_Object.call(this);
    this.$hashCode1 = 0;
}
let jl_String_EMPTY_CHARS = null,
jl_String_EMPTY = null,
jl_String_CASE_INSENSITIVE_ORDER = null,
jl_String__init_5 = $this => {
    $this.$nativeString = "";
},
jl_String__init_4 = () => {
    let var_0 = new jl_String();
    jl_String__init_5(var_0);
    return var_0;
},
jl_String__init_2 = ($this, $characters) => {
    $this.$nativeString = $rt_charArrayToString($characters.data, 0, $characters.data.length);
},
jl_String__init_0 = var_0 => {
    let var_1 = new jl_String();
    jl_String__init_2(var_1, var_0);
    return var_1;
},
jl_String__init_6 = (var$0, var$1) => {
    var$0.$nativeString = var$1;
},
jl_String__init_1 = var_0 => {
    let var_1 = new jl_String();
    jl_String__init_6(var_1, var_0);
    return var_1;
},
jl_String__init_3 = (var$0, var$1, $offset, $count) => {
    ju_Objects_checkFromIndexSize($offset, $count, var$1.data.length);
    var$0.$nativeString = $rt_charArrayToString(var$1.data, $offset, $count);
},
jl_String__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jl_String();
    jl_String__init_3(var_3, var_0, var_1, var_2);
    return var_3;
},
jl_String_charAt = ($this, $index) => {
    let var$2;
    if ($index >= 0 && $index < $this.$nativeString.length)
        return $this.$nativeString.charCodeAt($index);
    var$2 = new jl_StringIndexOutOfBoundsException;
    jl_Exception__init_(var$2);
    $rt_throw(var$2);
},
jl_String_length = $this => {
    return $this.$nativeString.length;
},
jl_String_isEmpty = $this => {
    return $this.$nativeString.length ? 0 : 1;
},
jl_String_startsWith0 = ($this, $prefix, $toffset) => {
    let $i, var$4, var$5;
    if (($toffset + $prefix.$nativeString.length | 0) > $this.$nativeString.length)
        return 0;
    $i = 0;
    while ($i < $prefix.$nativeString.length) {
        var$4 = jl_String_charAt($prefix, $i);
        var$5 = $toffset + 1 | 0;
        if (var$4 != jl_String_charAt($this, $toffset))
            return 0;
        $i = $i + 1 | 0;
        $toffset = var$5;
    }
    return 1;
},
jl_String_startsWith = ($this, $prefix) => {
    if ($this === $prefix)
        return 1;
    return jl_String_startsWith0($this, $prefix, 0);
},
jl_String_endsWith = ($this, $suffix) => {
    let $j, $i, var$4, var$5;
    if ($this === $suffix)
        return 1;
    if ($suffix.$nativeString.length > $this.$nativeString.length)
        return 0;
    $j = 0;
    $i = $this.$nativeString.length - $suffix.$nativeString.length | 0;
    while ($i < $this.$nativeString.length) {
        var$4 = jl_String_charAt($this, $i);
        var$5 = $j + 1 | 0;
        if (var$4 != jl_String_charAt($suffix, $j))
            return 0;
        $i = $i + 1 | 0;
        $j = var$5;
    }
    return 1;
},
jl_String_indexOf = ($this, $ch, $fromIndex) => {
    let $i, $bmpChar, $hi, $lo;
    $i = jl_Math_max(0, $fromIndex);
    if ($ch < 65536) {
        $bmpChar = $ch & 65535;
        while (true) {
            if ($i >= $this.$nativeString.length)
                return (-1);
            if ($this.$nativeString.charCodeAt($i) == $bmpChar)
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    $hi = jl_Character_highSurrogate($ch);
    $lo = jl_Character_lowSurrogate($ch);
    while (true) {
        if ($i >= ($this.$nativeString.length - 1 | 0))
            return (-1);
        if ($this.$nativeString.charCodeAt($i) == $hi && $this.$nativeString.charCodeAt(($i + 1 | 0)) == $lo)
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
jl_String_lastIndexOf = ($this, $ch, $fromIndex) => {
    let $i, $bmpChar, $hi, $lo;
    $i = jl_Math_min($fromIndex, $this.$nativeString.length - 1 | 0);
    if ($ch < 65536) {
        $bmpChar = $ch & 65535;
        while (true) {
            if ($i < 0)
                return (-1);
            if ($this.$nativeString.charCodeAt($i) == $bmpChar)
                break;
            $i = $i + (-1) | 0;
        }
        return $i;
    }
    $hi = jl_Character_highSurrogate($ch);
    $lo = jl_Character_lowSurrogate($ch);
    while (true) {
        if ($i < 1)
            return (-1);
        if ($this.$nativeString.charCodeAt($i) == $lo) {
            $fromIndex = $i - 1 | 0;
            if ($this.$nativeString.charCodeAt($fromIndex) == $hi)
                break;
        }
        $i = $i + (-1) | 0;
    }
    return $fromIndex;
},
jl_String_lastIndexOf2 = ($this, $ch) => {
    return jl_String_lastIndexOf($this, $ch, $this.$nativeString.length - 1 | 0);
},
jl_String_indexOf0 = ($this, $str, $fromIndex) => {
    let $i, $toIndex, $j;
    $i = jl_Math_max(0, $fromIndex);
    $toIndex = $this.$nativeString.length - $str.$nativeString.length | 0;
    a: while (true) {
        if ($i > $toIndex)
            return (-1);
        $j = 0;
        while (true) {
            if ($j >= $str.$nativeString.length)
                break a;
            if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($str, $j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + 1 | 0;
    }
    return $i;
},
jl_String_lastIndexOf0 = ($this, $str, $fromIndex) => {
    let $i, $j;
    $i = jl_Math_min($fromIndex, $this.$nativeString.length - $str.$nativeString.length | 0);
    a: while (true) {
        if ($i < 0)
            return (-1);
        $j = 0;
        while (true) {
            if ($j >= $str.$nativeString.length)
                break a;
            if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($str, $j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + (-1) | 0;
    }
    return $i;
},
jl_String_lastIndexOf1 = ($this, $str) => {
    return jl_String_lastIndexOf0($this, $str, $this.$nativeString.length);
},
jl_String_substring = ($this, $beginIndex, $endIndex) => {
    let $length, var$4, var$5;
    $length = $this.$nativeString.length;
    var$4 = $rt_compare($beginIndex, $endIndex);
    if (!var$4)
        return jl_String_EMPTY;
    if (!$beginIndex && $endIndex == $length)
        return $this;
    if ($beginIndex >= 0 && var$4 <= 0 && $endIndex <= $length)
        return jl_String__init_1($this.$nativeString.substring($beginIndex, $endIndex));
    var$5 = new jl_StringIndexOutOfBoundsException;
    jl_Exception__init_(var$5);
    $rt_throw(var$5);
},
jl_String_substring0 = ($this, $beginIndex) => {
    return jl_String_substring($this, $beginIndex, $this.$nativeString.length);
},
jl_String_replace0 = ($this, $oldChar, $newChar) => {
    let $buffer, var$4, $i, var$6;
    if ($oldChar == $newChar)
        return $this;
    $buffer = $rt_createCharArray($this.$nativeString.length);
    var$4 = $buffer.data;
    $i = 0;
    while ($i < $this.$nativeString.length) {
        var$4[$i] = jl_String_charAt($this, $i) != $oldChar ? jl_String_charAt($this, $i) : $newChar;
        $i = $i + 1 | 0;
    }
    var$6 = jl_String__init_4();
    var$6.$nativeString = $rt_fullArrayToString($buffer.data);
    return var$6;
},
jl_String_contains = ($this, $s) => {
    let $i, $sz, $j;
    $i = $this.$nativeString.length;
    $s = $s;
    $sz = $i - $s.$nativeString.length | 0;
    $i = 0;
    while ($i <= $sz) {
        $j = 0;
        while (true) {
            if ($j >= $s.$nativeString.length)
                return 1;
            if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($s, $j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + 1 | 0;
    }
    return 0;
},
jl_String_replace = ($this, $target, $replacement) => {
    let $sb, $i, $sz, $i_0, $j;
    if ($target === $replacement)
        return $this;
    $target = $target;
    if (jl_String_isEmpty($target)) {
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        $i = 0;
        while ($i < $this.$nativeString.length) {
            jl_StringBuilder_append($sb, $replacement);
            jl_AbstractStringBuilder_append0($sb, jl_String_charAt($this, $i));
            $i = $i + 1 | 0;
        }
        jl_StringBuilder_append($sb, $replacement);
        return jl_AbstractStringBuilder_toString($sb);
    }
    if ($target.$nativeString.length == 1) {
        $sb = $replacement;
        if ($sb.$nativeString.length == 1)
            return jl_String_replace0($this, jl_String_charAt($target, 0), jl_String_charAt($sb, 0));
    }
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    $sz = $this.$nativeString.length - $target.$nativeString.length | 0;
    $i_0 = 0;
    while ($i_0 <= $sz) {
        $j = 0;
        a: {
            while (true) {
                if ($j >= $target.$nativeString.length) {
                    jl_StringBuilder_append($sb, $replacement);
                    $i_0 = $i_0 + ($target.$nativeString.length - 1 | 0) | 0;
                    break a;
                }
                if (jl_String_charAt($this, $i_0 + $j | 0) != jl_String_charAt($target, $j))
                    break;
                $j = $j + 1 | 0;
            }
            jl_AbstractStringBuilder_append0($sb, jl_String_charAt($this, $i_0));
        }
        $i_0 = $i_0 + 1 | 0;
    }
    jl_StringBuilder_append($sb, jl_String_substring0($this, $i_0));
    return jl_AbstractStringBuilder_toString($sb);
},
jl_String_trim = $this => {
    let $lower, $upper;
    $lower = 0;
    $upper = $this.$nativeString.length - 1 | 0;
    a: {
        while ($lower <= $upper) {
            if (jl_String_charAt($this, $lower) > 32)
                break a;
            $lower = $lower + 1 | 0;
        }
    }
    while ($lower <= $upper && jl_String_charAt($this, $upper) <= 32) {
        $upper = $upper + (-1) | 0;
    }
    return jl_String_substring($this, $lower, $upper + 1 | 0);
},
jl_String_toString = $this => {
    return $this;
},
jl_String_toCharArray = $this => {
    let $array, var$2, $i, var$4;
    $array = $rt_createCharArray($this.$nativeString.length);
    var$2 = $array.data;
    $i = 0;
    var$4 = var$2.length;
    while ($i < var$4) {
        var$2[$i] = jl_String_charAt($this, $i);
        $i = $i + 1 | 0;
    }
    return $array;
},
jl_String_valueOf = $obj => {
    return $obj === null ? $rt_s(30) : $obj.$toString();
},
jl_String_valueOf2 = $data => {
    return jl_String__init_0($data);
},
jl_String_valueOf1 = $c => {
    let var$2, var$3;
    var$2 = new jl_String;
    var$3 = $rt_createCharArray(1);
    var$3.data[0] = $c;
    jl_String__init_2(var$2, var$3);
    return var$2;
},
jl_String_valueOf0 = $i => {
    let var$2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$2, $i));
},
jl_String_equals = ($this, $other) => {
    let $str;
    if ($this === $other)
        return 1;
    if (!($other instanceof jl_String))
        return 0;
    $str = $other;
    return $this.$nativeString !== $str.$nativeString ? 0 : 1;
},
jl_String_equalsIgnoreCase = ($this, $other) => {
    let $i;
    if ($this === $other)
        return 1;
    if ($other === null)
        return 0;
    if ($this.$nativeString.length != $other.$nativeString.length)
        return 0;
    $i = 0;
    while ($i < $this.$nativeString.length) {
        if (jl_Character_toLowerCase(jl_String_charAt($this, $i)) != jl_Character_toLowerCase(jl_String_charAt($other, $i)))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
},
jl_String_hashCode = $this => {
    let $i;
    a: {
        if (!$this.$hashCode1) {
            $i = 0;
            while (true) {
                if ($i >= $this.$nativeString.length)
                    break a;
                $this.$hashCode1 = (31 * $this.$hashCode1 | 0) + $this.$nativeString.charCodeAt($i) | 0;
                $i = $i + 1 | 0;
            }
        }
    }
    return $this.$hashCode1;
},
jl_String_toUpperCase = $this => {
    let $upperCase;
    $upperCase = $this.$nativeString.toUpperCase();
    if ($upperCase !== $this.$nativeString)
        $this = jl_String__init_1($upperCase);
    return $this;
},
jl_String_split = ($this, $regex) => {
    return jur_Pattern_split(jur_Pattern_compile($regex), $this, 0);
},
jl_String_replaceAll = ($this, $regex, $replacement) => {
    let var$3;
    $regex = jur_Pattern_matcher(jur_Pattern_compile($regex), $this);
    var$3 = new jl_StringBuffer;
    jl_AbstractStringBuilder__init_(var$3);
    jur_Matcher_reset($regex);
    while (jur_Matcher_find($regex)) {
        jur_Matcher_appendReplacement($regex, var$3, $replacement);
    }
    return jl_AbstractStringBuilder_toString(jur_Matcher_appendTail($regex, var$3));
},
jl_String_compareTo = ($this, var$1) => {
    let var$2, var$3, var$4;
    a: {
        var$1 = var$1;
        if ($this === var$1)
            var$2 = 0;
        else {
            var$3 = jl_Math_min($this.$nativeString.length, var$1.$nativeString.length);
            var$4 = 0;
            while (true) {
                if (var$4 >= var$3) {
                    var$2 = $this.$nativeString.length - var$1.$nativeString.length | 0;
                    break a;
                }
                var$2 = jl_String_charAt($this, var$4) - jl_String_charAt(var$1, var$4) | 0;
                if (var$2)
                    break;
                var$4 = var$4 + 1 | 0;
            }
        }
    }
    return var$2;
},
jl_String__clinit_ = () => {
    jl_String_EMPTY_CHARS = $rt_createCharArray(0);
    jl_String_EMPTY = jl_String__init_4();
    jl_String_CASE_INSENSITIVE_ORDER = new jl_String$_clinit_$lambda$_115_0;
},
jl_Number = $rt_classWithoutFields();
function jl_Integer() {
    jl_Number.call(this);
    this.$value0 = 0;
}
let jl_Integer_TYPE = null,
jl_Integer_integerCache = null,
jl_Integer__init_0 = ($this, $value) => {
    $this.$value0 = $value;
},
jl_Integer__init_ = var_0 => {
    let var_1 = new jl_Integer();
    jl_Integer__init_0(var_1, var_0);
    return var_1;
},
jl_Integer_toHexString = $i => {
    let var$2, var$3, var$4, var$5, var$6, var$7;
    if (!$i)
        var$2 = $rt_s(32);
    else {
        var$3 = (((32 - jl_Integer_numberOfLeadingZeros($i) | 0) + 4 | 0) - 1 | 0) / 4 | 0;
        var$4 = $rt_createCharArray(var$3);
        var$5 = var$4.data;
        var$6 = (var$3 - 1 | 0) * 4 | 0;
        var$3 = 0;
        while (var$6 >= 0) {
            var$7 = var$3 + 1 | 0;
            var$5[var$3] = jl_Character_forDigit(($i >>> var$6 | 0) & 15, 16);
            var$6 = var$6 - 4 | 0;
            var$3 = var$7;
        }
        var$2 = jl_String__init_0(var$4);
    }
    return var$2;
},
jl_Integer_toString = $i => {
    return (jl_AbstractStringBuilder_append4(jl_AbstractStringBuilder__init_1(20), $i, 10)).$toString();
},
jl_Integer_parseInt0 = ($s, $radix) => {
    if ($s !== null)
        return jl_Integer_parseIntImpl($s, 0, $s.$nativeString.length, $radix);
    $s = new jl_NumberFormatException;
    jl_Throwable__init_($s, $rt_s(33));
    $rt_throw($s);
},
jl_Integer_parseIntImpl = ($s, $beginIndex, $endIndex, $radix) => {
    let $negative, var$6, $value, $maxValue, var$9, $digit, var$11, var$12;
    if ($beginIndex == $endIndex) {
        $s = new jl_NumberFormatException;
        jl_Throwable__init_($s, $rt_s(34));
        $rt_throw($s);
    }
    if ($radix >= 2 && $radix <= 36) {
        a: {
            $negative = 0;
            $s = $s;
            switch (jl_String_charAt($s, $beginIndex)) {
                case 43:
                    var$6 = $beginIndex + 1 | 0;
                    break a;
                case 45:
                    $negative = 1;
                    var$6 = $beginIndex + 1 | 0;
                    break a;
                default:
            }
            var$6 = $beginIndex;
        }
        $value = 0;
        $maxValue = 1 + (2147483647 / $radix | 0) | 0;
        if (var$6 == $endIndex) {
            $s = new jl_NumberFormatException;
            jl_Exception__init_($s);
            $rt_throw($s);
        }
        while (var$6 < $endIndex) {
            var$9 = var$6 + 1 | 0;
            $digit = jl_String_charAt($s, var$6);
            $digit = $digit >= 48 && $digit <= 57 ? $digit - 48 | 0 : $digit >= 97 && $digit <= 122 ? ($digit - 97 | 0) + 10 | 0 : $digit >= 65 && $digit <= 90 ? ($digit - 65 | 0) + 10 | 0 : (-1);
            if ($digit < 0) {
                var$11 = new jl_NumberFormatException;
                $s = jl_String_valueOf(jl_String_substring($s, $beginIndex, $endIndex));
                var$12 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$12);
                jl_StringBuilder_append(jl_StringBuilder_append(var$12, $rt_s(35)), $s);
                jl_Throwable__init_(var$11, jl_AbstractStringBuilder_toString(var$12));
                $rt_throw(var$11);
            }
            if ($digit >= $radix) {
                var$11 = new jl_NumberFormatException;
                $s = jl_String_valueOf(jl_String_substring($s, $beginIndex, $endIndex));
                var$12 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$12);
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(var$12, $rt_s(36)), $radix), $rt_s(27)), $s);
                jl_Throwable__init_(var$11, jl_AbstractStringBuilder_toString(var$12));
                $rt_throw(var$11);
            }
            if ($value > $maxValue) {
                $s = new jl_NumberFormatException;
                jl_Throwable__init_($s, $rt_s(37));
                $rt_throw($s);
            }
            $value = $rt_imul($radix, $value) + $digit | 0;
            if ($value < 0) {
                if (var$9 == $endIndex && $value == (-2147483648) && $negative)
                    return (-2147483648);
                var$11 = new jl_NumberFormatException;
                $s = jl_String_valueOf(jl_String_substring($s, $beginIndex, $endIndex));
                var$12 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$12);
                jl_StringBuilder_append(jl_StringBuilder_append(var$12, $rt_s(38)), $s);
                jl_Throwable__init_(var$11, jl_AbstractStringBuilder_toString(var$12));
                $rt_throw(var$11);
            }
            var$6 = var$9;
        }
        if ($negative)
            $value =  -$value | 0;
        return $value;
    }
    $s = new jl_NumberFormatException;
    var$11 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$11);
    jl_StringBuilder_append1(jl_StringBuilder_append(var$11, $rt_s(39)), $radix);
    jl_Throwable__init_($s, jl_AbstractStringBuilder_toString(var$11));
    $rt_throw($s);
},
jl_Integer_parseInt = $s => {
    return jl_Integer_parseInt0($s, 10);
},
jl_Integer_valueOf = $i => {
    let var$2, var$3;
    if ($i >= (-128) && $i <= 127) {
        a: {
            if (jl_Integer_integerCache === null) {
                jl_Integer_integerCache = $rt_createArray(jl_Integer, 256);
                var$2 = 0;
                while (true) {
                    var$3 = jl_Integer_integerCache.data;
                    if (var$2 >= var$3.length)
                        break a;
                    var$3[var$2] = jl_Integer__init_(var$2 - 128 | 0);
                    var$2 = var$2 + 1 | 0;
                }
            }
        }
        return jl_Integer_integerCache.data[$i + 128 | 0];
    }
    return jl_Integer__init_($i);
},
jl_Integer_intValue = $this => {
    return $this.$value0;
},
jl_Integer_equals = ($this, $other) => {
    if ($this === $other)
        return 1;
    return $other instanceof jl_Integer && $other.$value0 == $this.$value0 ? 1 : 0;
},
jl_Integer_numberOfLeadingZeros = $i => {
    let $n, var$3;
    if (!$i)
        return 32;
    $n = 0;
    var$3 = $i >>> 16 | 0;
    if (var$3)
        $n = 16;
    else
        var$3 = $i;
    $i = var$3 >>> 8 | 0;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 8;
    var$3 = $i >>> 4 | 0;
    if (!var$3)
        var$3 = $i;
    else
        $n = $n | 4;
    $i = var$3 >>> 2 | 0;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 2;
    if ($i >>> 1 | 0)
        $n = $n | 1;
    return (32 - $n | 0) - 1 | 0;
},
jl_Integer_numberOfTrailingZeros = $i => {
    let $n, var$3;
    if (!$i)
        return 32;
    $n = 0;
    var$3 = $i << 16;
    if (var$3)
        $n = 16;
    else
        var$3 = $i;
    $i = var$3 << 8;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 8;
    var$3 = $i << 4;
    if (!var$3)
        var$3 = $i;
    else
        $n = $n | 4;
    $i = var$3 << 2;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 2;
    if ($i << 1)
        $n = $n | 1;
    return (32 - $n | 0) - 1 | 0;
},
jl_Integer_lowestOneBit = $i => {
    return ( -$i | 0) & $i;
},
jl_Integer_reverseBytes = $i => {
    $i = (($i & (-16711936)) >>> 8 | 0) | ($i & 16711935) << 8;
    return ($i >>> 16 | 0) | $i << 16;
},
jl_Integer__clinit_ = () => {
    jl_Integer_TYPE = $rt_cls($rt_intcls);
};
function jl_AbstractStringBuilder() {
    let a = this; jl_Object.call(a);
    a.$buffer = null;
    a.$length2 = 0;
}
let jl_AbstractStringBuilder__init_ = $this => {
    jl_AbstractStringBuilder__init_0($this, 16);
},
jl_AbstractStringBuilder__init_2 = () => {
    let var_0 = new jl_AbstractStringBuilder();
    jl_AbstractStringBuilder__init_(var_0);
    return var_0;
},
jl_AbstractStringBuilder__init_0 = ($this, $capacity) => {
    $this.$buffer = $rt_createCharArray($capacity);
},
jl_AbstractStringBuilder__init_1 = var_0 => {
    let var_1 = new jl_AbstractStringBuilder();
    jl_AbstractStringBuilder__init_0(var_1, var_0);
    return var_1;
},
jl_AbstractStringBuilder_append = ($this, $string) => {
    return $this.$insert($this.$length2, $string);
},
jl_AbstractStringBuilder_insert = ($this, $index, $string) => {
    let $i, $i_0, var$5, var$6;
    if ($index >= 0 && $index <= $this.$length2) {
        if ($string === null)
            $string = $rt_s(30);
        else if (jl_String_isEmpty($string))
            return $this;
        $this.$ensureCapacity($this.$length2 + $string.$nativeString.length | 0);
        $i = $this.$length2 - 1 | 0;
        while ($i >= $index) {
            $this.$buffer.data[$i + $string.$nativeString.length | 0] = $this.$buffer.data[$i];
            $i = $i + (-1) | 0;
        }
        $this.$length2 = $this.$length2 + $string.$nativeString.length | 0;
        $i_0 = 0;
        while ($i_0 < $string.$nativeString.length) {
            var$5 = $this.$buffer.data;
            var$6 = $index + 1 | 0;
            var$5[$index] = jl_String_charAt($string, $i_0);
            $i_0 = $i_0 + 1 | 0;
            $index = var$6;
        }
        return $this;
    }
    $string = new jl_StringIndexOutOfBoundsException;
    jl_Exception__init_($string);
    $rt_throw($string);
},
jl_AbstractStringBuilder_append4 = ($this, $value, $radix) => {
    return jl_AbstractStringBuilder_insert3($this, $this.$length2, $value, $radix);
},
jl_AbstractStringBuilder_insert3 = ($this, $target, $value, $radix) => {
    let $positive, var$5, var$6, $pos, $sz, $posLimit, var$10;
    $positive = 1;
    if ($value < 0) {
        $positive = 0;
        $value =  -$value | 0;
    }
    a: {
        if ($rt_ucmp($value, $radix) < 0) {
            if ($positive)
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 1 | 0);
            else {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 2 | 0);
                var$5 = $this.$buffer.data;
                var$6 = $target + 1 | 0;
                var$5[$target] = 45;
                $target = var$6;
            }
            $this.$buffer.data[$target] = jl_Character_forDigit($value, $radix);
        } else {
            $pos = 1;
            $sz = 1;
            $posLimit = $rt_udiv((-1), $radix);
            b: {
                while (true) {
                    var$10 = $rt_imul($pos, $radix);
                    if ($rt_ucmp(var$10, $value) > 0) {
                        var$10 = $pos;
                        break b;
                    }
                    $sz = $sz + 1 | 0;
                    if ($rt_ucmp(var$10, $posLimit) > 0)
                        break;
                    $pos = var$10;
                }
            }
            if (!$positive)
                $sz = $sz + 1 | 0;
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + $sz | 0);
            if ($positive)
                $positive = $target;
            else {
                var$5 = $this.$buffer.data;
                $positive = $target + 1 | 0;
                var$5[$target] = 45;
            }
            while (true) {
                if (!var$10)
                    break a;
                var$5 = $this.$buffer.data;
                $target = $positive + 1 | 0;
                var$5[$positive] = jl_Character_forDigit($rt_udiv($value, var$10), $radix);
                $value = $rt_umod($value, var$10);
                var$10 = $rt_udiv(var$10, $radix);
                $positive = $target;
            }
        }
    }
    return $this;
},
jl_AbstractStringBuilder_insert4 = ($this, $target, $value) => {
    let $mantissa, var$4, $number, $exp, $negative, $intPart, $sz, $digits, $zeros, $leadingZeros, $leadingZero, $pos, $intDigit, $i;
    $mantissa = $rt_compare($value, 0.0);
    if (!$mantissa) {
        if (1.0 / $value === Infinity) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 48;
            $target = $mantissa + 1 | 0;
            var$4[$mantissa] = 46;
            var$4[$target] = 48;
            return $this;
        }
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 4 | 0);
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 45;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 48;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 46;
        var$4[$mantissa] = 48;
        return $this;
    }
    if (isNaN($value) ? 1 : 0) {
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 78;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 97;
        var$4[$target] = 78;
        return $this;
    }
    if (!isFinite($value) ? 1 : 0) {
        if ($mantissa > 0) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 8 | 0);
            $mantissa = $target;
        } else {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 9 | 0);
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 45;
        }
        var$4 = $this.$buffer.data;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 73;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 110;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 102;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 105;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 110;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 105;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 116;
        var$4[$target] = 121;
        return $this;
    }
    $number = jl_AbstractStringBuilder$Constants_floatAnalysisResult;
    otcit_FloatAnalyzer_analyze($value, $number);
    $mantissa = $number.$mantissa;
    $exp = $number.$exponent;
    $negative = $number.$sign1;
    $intPart = 1;
    $sz = 1;
    if ($negative)
        $sz = 2;
    $digits = 9;
    $zeros = jl_AbstractStringBuilder_trailingDecimalZeros($mantissa);
    if ($zeros > 0)
        $digits = $digits - $zeros | 0;
    $leadingZeros = 0;
    $leadingZero = 0;
    if ($exp < 7 && $exp >= (-3)) {
        if ($exp >= 0) {
            $intPart = $exp + 1 | 0;
            $digits = jl_Math_max($digits, $intPart + 1 | 0);
            $exp = 0;
        } else {
            $intPart = 0;
            $leadingZeros = ( -$exp | 0) - 1 | 0;
            $leadingZero = 1;
            $sz = $sz + 1 | 0;
            $exp = 0;
        }
    }
    if ($exp) {
        $sz = $sz + 2 | 0;
        if (!($exp > (-10) && $exp < 10))
            $sz = $sz + 1 | 0;
        if ($exp < 0)
            $sz = $sz + 1 | 0;
    }
    if ($exp && $digits == $intPart)
        $digits = $digits + 1 | 0;
    jl_AbstractStringBuilder_insertSpace($this, $target, $target + ($sz + ($digits + $leadingZeros | 0) | 0) | 0);
    if (!$negative)
        $negative = $target;
    else {
        var$4 = $this.$buffer.data;
        $negative = $target + 1 | 0;
        var$4[$target] = 45;
    }
    $pos = 100000000;
    if ($leadingZero) {
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = 48;
        $negative = $target + 1 | 0;
        var$4[$target] = 46;
        while (true) {
            $target = $leadingZeros + (-1) | 0;
            if ($leadingZeros <= 0)
                break;
            $intDigit = $negative + 1 | 0;
            var$4[$negative] = 48;
            $leadingZeros = $target;
            $negative = $intDigit;
        }
    }
    $i = 0;
    while ($i < $digits) {
        if ($pos <= 0)
            $intDigit = 0;
        else {
            $intDigit = $mantissa / $pos | 0;
            $mantissa = $mantissa % $pos | 0;
        }
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = (48 + $intDigit | 0) & 65535;
        $intPart = $intPart + (-1) | 0;
        if ($intPart)
            $negative = $target;
        else {
            $negative = $target + 1 | 0;
            var$4[$target] = 46;
        }
        $pos = $pos / 10 | 0;
        $i = $i + 1 | 0;
    }
    if ($exp) {
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = 69;
        if ($exp >= 0)
            $mantissa = $target;
        else {
            $exp =  -$exp | 0;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 45;
        }
        if ($exp < 10)
            $intDigit = $mantissa;
        else {
            $intDigit = $mantissa + 1 | 0;
            var$4[$mantissa] = (48 + ($exp / 10 | 0) | 0) & 65535;
        }
        var$4[$intDigit] = (48 + ($exp % 10 | 0) | 0) & 65535;
    }
    return $this;
},
jl_AbstractStringBuilder_trailingDecimalZeros = $n => {
    let $result, $zeros, var$4;
    if (!($n % 1000000000 | 0))
        return 9;
    $result = 0;
    $zeros = 1;
    if (!($n % 100000000 | 0)) {
        $result = 8;
        $zeros = 100000000;
    }
    var$4 = $zeros * 10000 | 0;
    if ($n % var$4 | 0)
        var$4 = $zeros;
    else
        $result = $result | 4;
    $zeros = var$4 * 100 | 0;
    if ($n % $zeros | 0)
        $zeros = var$4;
    else
        $result = $result | 2;
    if (!($n % ($zeros * 10 | 0) | 0))
        $result = $result | 1;
    return $result;
},
jl_AbstractStringBuilder_append0 = ($this, $c) => {
    return $this.$insert1($this.$length2, $c);
},
jl_AbstractStringBuilder_insert2 = ($this, $index, $c) => {
    jl_AbstractStringBuilder_insertSpace($this, $index, $index + 1 | 0);
    $this.$buffer.data[$index] = $c;
    return $this;
},
jl_AbstractStringBuilder_ensureCapacity = ($this, $capacity) => {
    let var$2, $newLength;
    var$2 = $this.$buffer.data.length;
    if (var$2 >= $capacity)
        return;
    $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($capacity, jl_Math_max(var$2 * 2 | 0, 5));
    $this.$buffer = ju_Arrays_copyOf1($this.$buffer, $newLength);
},
jl_AbstractStringBuilder_toString = $this => {
    return jl_String__init_($this.$buffer, 0, $this.$length2);
},
jl_AbstractStringBuilder_charAt = ($this, $index) => {
    let var$2;
    if ($index >= 0 && $index < $this.$length2)
        return $this.$buffer.data[$index];
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$2);
    $rt_throw(var$2);
},
jl_AbstractStringBuilder_append5 = ($this, $s, $start, $end) => {
    return $this.$insert2($this.$length2, $s, $start, $end);
},
jl_AbstractStringBuilder_insert1 = ($this, $index, $s, $i, $end) => {
    let var$5, var$6;
    if ($i <= $end && $end <= $s.$length() && $i >= 0) {
        jl_AbstractStringBuilder_insertSpace($this, $index, ($index + $end | 0) - $i | 0);
        while ($i < $end) {
            var$5 = $this.$buffer.data;
            var$6 = $index + 1 | 0;
            var$5[$index] = $s.$charAt($i);
            $i = $i + 1 | 0;
            $index = var$6;
        }
        return $this;
    }
    $s = new jl_IndexOutOfBoundsException;
    jl_Exception__init_($s);
    $rt_throw($s);
},
jl_AbstractStringBuilder_append1 = ($this, $s) => {
    return $this.$append5($s, 0, $s.$length());
},
jl_AbstractStringBuilder_append3 = ($this, $chars, $offset, $len) => {
    return $this.$insert3($this.$length2, $chars, $offset, $len);
},
jl_AbstractStringBuilder_insert0 = ($this, $index, $chars, $offset, $len) => {
    let var$5, var$6, var$7, var$8;
    jl_AbstractStringBuilder_insertSpace($this, $index, $index + $len | 0);
    var$5 = $len + $offset | 0;
    while ($offset < var$5) {
        var$6 = $chars.data;
        var$7 = $this.$buffer.data;
        $len = $index + 1 | 0;
        var$8 = $offset + 1 | 0;
        var$7[$index] = var$6[$offset];
        $index = $len;
        $offset = var$8;
    }
    return $this;
},
jl_AbstractStringBuilder_append2 = ($this, $chars) => {
    return $this.$append6($chars, 0, $chars.data.length);
},
jl_AbstractStringBuilder_insertSpace = ($this, $start, $end) => {
    let var$3, $sz, $i, var$6;
    var$3 = $this.$length2;
    $sz = var$3 - $start | 0;
    $this.$ensureCapacity((var$3 + $end | 0) - $start | 0);
    $i = $sz - 1 | 0;
    while ($i >= 0) {
        var$6 = $this.$buffer.data;
        var$6[$end + $i | 0] = var$6[$start + $i | 0];
        $i = $i + (-1) | 0;
    }
    $this.$length2 = $this.$length2 + ($end - $start | 0) | 0;
},
jl_Appendable = $rt_classWithoutFields(0),
jl_StringBuilder = $rt_classWithoutFields(jl_AbstractStringBuilder),
jl_StringBuilder__init_1 = ($this, $capacity) => {
    jl_AbstractStringBuilder__init_0($this, $capacity);
},
jl_StringBuilder__init_0 = var_0 => {
    let var_1 = new jl_StringBuilder();
    jl_StringBuilder__init_1(var_1, var_0);
    return var_1;
},
jl_StringBuilder__init_2 = $this => {
    jl_AbstractStringBuilder__init_($this);
},
jl_StringBuilder__init_ = () => {
    let var_0 = new jl_StringBuilder();
    jl_StringBuilder__init_2(var_0);
    return var_0;
},
jl_StringBuilder_append = ($this, $obj) => {
    let var$2, var$3;
    var$2 = $this.$length2;
    var$3 = $this;
    $obj = $obj === null ? $rt_s(30) : $obj.$toString();
    jl_AbstractStringBuilder_insert(var$3, var$2, $obj);
    return $this;
},
jl_StringBuilder_append0 = ($this, $string) => {
    jl_AbstractStringBuilder_append($this, $string);
    return $this;
},
jl_StringBuilder_append1 = ($this, $value) => {
    jl_AbstractStringBuilder_append4($this, $value, 10);
    return $this;
},
jl_StringBuilder_append3 = ($this, $value) => {
    let var$2;
    var$2 = $this.$length2;
    jl_AbstractStringBuilder_insert4($this, var$2, $value);
    return $this;
},
jl_StringBuilder_append2 = ($this, $c) => {
    jl_AbstractStringBuilder_append0($this, $c);
    return $this;
},
jl_StringBuilder_append5 = ($this, $chars, $offset, $len) => {
    jl_AbstractStringBuilder_append3($this, $chars, $offset, $len);
    return $this;
},
jl_StringBuilder_append4 = ($this, $b) => {
    let var$2, var$3, var$4;
    var$2 = $this.$length2;
    var$3 = $this;
    var$4 = !$b ? $rt_s(40) : $rt_s(41);
    jl_AbstractStringBuilder_insert(var$3, var$2, var$4);
    return $this;
},
jl_StringBuilder_delete = ($this, $start, $end) => {
    let var$3, var$4, var$5, var$6, var$7, var$8;
    if ($start >= 0) {
        var$3 = $rt_compare($start, $end);
        if (var$3 <= 0) {
            var$4 = $this.$length2;
            if ($start <= var$4) {
                if (var$3) {
                    if ($end > var$4)
                        $end = var$4;
                    var$5 = var$4 - $end | 0;
                    $this.$length2 = var$4 - ($end - $start | 0) | 0;
                    var$4 = 0;
                    while (var$4 < var$5) {
                        var$6 = $this.$buffer.data;
                        var$3 = $start + 1 | 0;
                        var$7 = $end + 1 | 0;
                        var$6[$start] = var$6[$end];
                        var$4 = var$4 + 1 | 0;
                        $start = var$3;
                        $end = var$7;
                    }
                }
                return $this;
            }
        }
    }
    var$8 = new jl_StringIndexOutOfBoundsException;
    jl_Exception__init_(var$8);
    $rt_throw(var$8);
},
jl_StringBuilder_deleteCharAt = ($this, $index) => {
    let var$2, var$3, var$4, var$5;
    if ($index >= 0) {
        var$2 = $this.$length2;
        if ($index < var$2) {
            var$2 = var$2 - 1 | 0;
            $this.$length2 = var$2;
            while ($index < var$2) {
                var$3 = $this.$buffer.data;
                var$4 = $index + 1 | 0;
                var$3[$index] = var$3[var$4];
                $index = var$4;
            }
            return $this;
        }
    }
    var$5 = new jl_StringIndexOutOfBoundsException;
    jl_Exception__init_(var$5);
    $rt_throw(var$5);
},
jl_StringBuilder_setLength = ($this, var$1) => {
    $this.$length2 = var$1;
},
jl_StringBuilder_subSequence = ($this, var$1, var$2) => {
    let var$3;
    var$3 = $this;
    if (var$1 <= var$2 && var$1 >= 0 && var$2 <= var$3.$length2)
        return jl_String__init_(var$3.$buffer, var$1, var$2 - var$1 | 0);
    var$3 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$3);
    $rt_throw(var$3);
},
jl_StringBuilder_insert = ($this, var$1, var$2, var$3, var$4) => {
    jl_AbstractStringBuilder_insert0($this, var$1, var$2, var$3, var$4);
    return $this;
},
jl_StringBuilder_append7 = ($this, var$1, var$2, var$3) => {
    jl_AbstractStringBuilder_append3($this, var$1, var$2, var$3);
    return $this;
},
jl_StringBuilder_insert1 = ($this, var$1, var$2, var$3, var$4) => {
    jl_AbstractStringBuilder_insert1($this, var$1, var$2, var$3, var$4);
    return $this;
},
jl_StringBuilder_append6 = ($this, var$1, var$2, var$3) => {
    jl_AbstractStringBuilder_append5($this, var$1, var$2, var$3);
    return $this;
},
jl_StringBuilder_charAt = ($this, var$1) => {
    return jl_AbstractStringBuilder_charAt($this, var$1);
},
jl_StringBuilder_length = $this => {
    return $this.$length2;
},
jl_StringBuilder_toString = $this => {
    return jl_AbstractStringBuilder_toString($this);
},
jl_StringBuilder_ensureCapacity = ($this, var$1) => {
    jl_AbstractStringBuilder_ensureCapacity($this, var$1);
},
jl_StringBuilder_insert0 = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert2($this, var$1, var$2);
    return $this;
},
jl_StringBuilder_insert2 = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert($this, var$1, var$2);
    return $this;
},
otcir_FieldInfo = $rt_classWithoutFields();
let otcir_MethodInfo = $rt_classWithoutFields(),
otcir_ClassList = $rt_classWithoutFields(),
cvdt_TeaVMLauncher = $rt_classWithoutFields(),
cvdt_TeaVMLauncher_$callClinit = () => {
    cvdt_TeaVMLauncher_$callClinit = $rt_eraseClinit(cvdt_TeaVMLauncher);
    cvdt_TeaVMLauncher__clinit_();
},
cvdt_TeaVMLauncher_main = $args => {
    let $config, var$3, var$4;
    cvdt_TeaVMLauncher_$callClinit();
    $config = new cgxgbt_TeaApplicationConfiguration;
    $config.$useGL30 = 0;
    $config.$preloadAssets = 1;
    $config.$storagePrefix = $rt_s(42);
    $config.$localStoragePrefix = $rt_s(43);
    $config.$shouldEncodePreference = 0;
    $config.$showDownloadLogs = 0;
    $config.$width2 = (-1);
    $config.$height1 = (-1);
    $config.$padHorizontal = 0;
    $config.$padVertical = 0;
    $config.$stencil = 0;
    $config.$antialiasing = 0;
    $config.$alpha = 0;
    $config.$premultipliedAlpha0 = 0;
    $config.$preserveDrawingBuffer = 0;
    $config.$useDebugGL = 0;
    $config.$usePhysicalPixels = 0;
    $config.$powerPreference = $rt_s(44);
    $config.$baseUrlProvider = new cgxgbtu_TeaDefaultBaseUrlProvider;
    $config.$canvasID = $rt_s(45);
    $config.$width2 = 0;
    $config.$height1 = 0;
    var$3 = new cgxgbt_TeaApplication;
    var$4 = new cvd_Clicker;
    var$4.$clicks = 0;
    var$3.$lifecycleListeners = cbgu_Array__init_2(4);
    var$3.$initState = cgxgbt_TeaApplication$AppState_INIT;
    var$3.$lastWidth = (-1);
    var$3.$lastHeight = 1;
    var$3.$logLevel = 2;
    var$3.$prefs = cbgu_ObjectMap__init_();
    var$3.$runnables = cbgu_Array__init_();
    var$3.$runnablesHelper = cbgu_Array__init_();
    var$3.$window = cgxgbtdi_TeaWindow_get();
    var$3.$config = $config;
    var$3.$queueAppListener = var$4;
    cgxgbt_TeaApplication_init(var$3);
},
cvdt_TeaVMLauncher__clinit_ = () => {
    cbgu_ObjectMap__clinit_();
    jl_String__clinit_();
    jl_Float__clinit_();
    jl_AbstractStringBuilder$Constants__clinit_();
    jl_Integer__clinit_();
    otcit_FloatAnalyzer__clinit_();
    jl_Long__clinit_();
    cbgm_MathUtils__clinit_();
    jl_Character__clinit_();
    jlr_Modifier__clinit_();
    cbgg_Color__clinit_();
    cbggg_NinePatch__clinit_();
    cbgg_GLTexture__clinit_();
    cgxgbt_TeaApplication__clinit_();
    cgxgbt_TeaApplication$AppState__clinit_();
    cbg_Application$ApplicationType__clinit_();
    ju_Hashtable__clinit_();
    cbggg_GLVersion$Type__clinit_();
    jur_AbstractSet__clinit_();
    jur_AbstractCharClass$PredefinedCharacterClasses__clinit_();
    jur_AbstractCharClass__clinit_();
    jl_Thread__clinit_();
    cgxgbta_AssetType__clinit_();
    cbgg_Mesh$VertexDataType__clinit_();
    r_Block__clinit_();
    r_BlockSet__clinit_();
    cbgg_Pixmap$Format__clinit_();
    cbgm_Quaternion__clinit_();
    cgtt_Font$DistanceFieldType__clinit_();
    cgttu_CaseInsensitiveIntMap__clinit_();
    cbgm_Vector2__clinit_();
    cbgg_Pixmap$Blending__clinit_();
    cbgg_Pixmap$Filter__clinit_();
    cbgu_BufferUtils__clinit_();
    cgxgbt_TeaTool__clinit_();
    jn_ByteOrder__clinit_();
    ses_FilledPolygonDrawer__clinit_();
    ses_DrawerTemplate__clinit_();
    ses_PathDrawer__clinit_();
    ses_PolygonDrawer__clinit_();
    cgtt_ColorLookup__clinit_();
    cbgss_Touchable__clinit_();
    cbgg_Texture$TextureFilter__clinit_();
    cbgg_Texture$TextureWrap__clinit_();
    cbg_Files$FileType__clinit_();
    cgttu_BlockUtils__clinit_();
    cgtt_TokenCategory__clinit_();
    cbgm_MathUtils$Sin__clinit_();
    ju_Collections__clinit_();
    ju_Comparator$NaturalOrder__clinit_();
    cbgg_TextureData$TextureDataType__clinit_();
    cbggg_MipMapGenerator__clinit_();
    jl_Byte__clinit_();
    otcit_FloatSynthesizer__clinit_();
    cbgu_StreamUtils__clinit_();
    jnc_CodingErrorAction__clinit_();
    cbggg_ParticleEmitter$GradientColorValue__clinit_();
    cbggg_ParticleEmitter$SpriteMode__clinit_();
    cbggg_ParticleEmitter$SpawnShape__clinit_();
    cbggg_ParticleEmitter$SpawnEllipseSide__clinit_();
    jl_Boolean__clinit_();
    jnc_CoderResult__clinit_();
},
otci_IntegerUtil = $rt_classWithoutFields();
function cgxgbt_TeaApplicationConfiguration() {
    let a = this; jl_Object.call(a);
    a.$useGL30 = 0;
    a.$windowListener = null;
    a.$preloadAssets = 0;
    a.$storagePrefix = null;
    a.$localStoragePrefix = null;
    a.$shouldEncodePreference = 0;
    a.$showDownloadLogs = 0;
    a.$canvasID = null;
    a.$width2 = 0;
    a.$height1 = 0;
    a.$padHorizontal = 0;
    a.$padVertical = 0;
    a.$stencil = 0;
    a.$antialiasing = 0;
    a.$alpha = 0;
    a.$premultipliedAlpha0 = 0;
    a.$preserveDrawingBuffer = 0;
    a.$useDebugGL = 0;
    a.$usePhysicalPixels = 0;
    a.$powerPreference = null;
    a.$preloadListener = null;
    a.$baseUrlProvider = null;
}
let cgxgbt_TeaApplicationConfiguration_isAutoSizeApplication = $this => {
    return !$this.$width2 && !$this.$height1 ? 1 : 0;
},
cbg_Application = $rt_classWithoutFields(0),
jl_Runnable = $rt_classWithoutFields(0);
function cgxgbt_TeaApplication() {
    let a = this; jl_Object.call(a);
    a.$delayInitCount = 0;
    a.$graphics = null;
    a.$input = null;
    a.$files = null;
    a.$net = null;
    a.$audio = null;
    a.$config = null;
    a.$queueAppListener = null;
    a.$appListener = null;
    a.$lifecycleListeners = null;
    a.$window = null;
    a.$initState = null;
    a.$lastWidth = 0;
    a.$lastHeight = 0;
    a.$logger = null;
    a.$logLevel = 0;
    a.$assetLoader = null;
    a.$prefs = null;
    a.$clipboard = null;
    a.$runnables = null;
    a.$runnablesHelper = null;
}
let cgxgbt_TeaApplication_WEB_SCRIPT_PATH = null,
cgxgbt_TeaApplication_WEB_ASSET_PATH = null,
cgxgbt_TeaApplication_agentInfo = null,
cgxgbt_TeaApplication_init = $this => {
    let $assetDownload, $hostPageBaseURL, var$3, $instance, $map, var$6;
    cgxgbt_TeaApplication_agentInfo = cgxgbta_TeaWebAgent_createAgent$js_body$_1();
    jl_System_setProperty($rt_s(46), $rt_s(24));
    jl_System_setProperty($rt_s(47), $rt_str(cgxgbt_TeaApplication_agentInfo.userAgent));
    if (cgxgbt_TeaApplication_agentInfo.windows ? 1 : 0)
        jl_System_setProperty($rt_s(48), $rt_s(49));
    else if (cgxgbt_TeaApplication_agentInfo.macOS ? 1 : 0)
        jl_System_setProperty($rt_s(48), $rt_s(50));
    else if (!(cgxgbt_TeaApplication_agentInfo.linux ? 1 : 0))
        jl_System_setProperty($rt_s(48), $rt_s(51));
    else
        jl_System_setProperty($rt_s(48), $rt_s(52));
    $this.$graphics = cgxgbt_TeaGraphics__init_0($this.$config);
    $assetDownload = new cgxgbta_AssetDownloadImpl;
    $assetDownload.$showLogs = $this.$config.$showDownloadLogs;
    cgxgbta_AssetInstance_downloaderInstance = $assetDownload;
    $hostPageBaseURL = $rt_str((cgxgbtdi_TeaWindow_get()).$window0.location.href);
    if (jl_String_contains($hostPageBaseURL, $rt_s(53)))
        $hostPageBaseURL = jl_String_replace(jl_String_replace(jl_String_replace($hostPageBaseURL, $rt_s(54), $rt_s(24)), $rt_s(55), $rt_s(24)), $rt_s(56), $rt_s(24));
    var$3 = jl_String_indexOf($hostPageBaseURL, 63, 0);
    if (var$3 >= 0)
        $hostPageBaseURL = jl_String_substring($hostPageBaseURL, 0, var$3);
    $instance = new cgxgbta_AssetLoadImpl;
    $map = $this.$graphics.$canvas0;
    $instance.$assetTotal = (-1);
    $instance.$assetDownloader = $assetDownload;
    $instance.$baseUrl = $hostPageBaseURL;
    $assetDownload = new ju_HashSet;
    $assetDownload.$backingMap = ju_HashMap__init_();
    $instance.$assetInQueue = $assetDownload;
    var$6 = $this.$config;
    if (var$6.$windowListener !== null) {
        $hostPageBaseURL = $map.ownerDocument;
        $map = new cgxgbta_AssetLoadImpl$1;
        $map.$this$050 = $instance;
        $hostPageBaseURL.addEventListener("dragenter", otji_JS_function(otji_JSWrapper_unwrap($map), "handleEvent"), !!0);
        $map = new cgxgbta_AssetLoadImpl$2;
        $map.$this$039 = $instance;
        $hostPageBaseURL.addEventListener("dragover", otji_JS_function(otji_JSWrapper_unwrap($map), "handleEvent"), !!0);
        $map = new cgxgbta_AssetLoadImpl$3;
        $map.$this$010 = $instance;
        $map.$val$config0 = var$6;
        $hostPageBaseURL.addEventListener("drop", otji_JS_function(otji_JSWrapper_unwrap($map), "handleEvent"));
    }
    $this.$assetLoader = $instance;
    cgxgbta_AssetInstance_instance = $instance;
    if (cgxjc_JMultiplatform_platformMap === null) {
        $assetDownload = new cgxjc_JMultiplatform;
        $instance = new cgxjc_JPlatformMap;
        $instance.$map0 = ju_HashMap__init_();
        $assetDownload.$map2 = $instance;
        cgxjc_JMultiplatform_platformMap = $assetDownload;
    }
    $map = cgxjc_JMultiplatform_platformMap.$map2;
    cgxjc_JPlatformMap_put($map, cgxgbt_TeaApplication_WEB_SCRIPT_PATH, cgxgbta_AssetLoadImpl_getScriptUrl($this.$assetLoader));
    cgxjc_JPlatformMap_put($map, cgxgbt_TeaApplication_WEB_ASSET_PATH, cgxgbta_AssetLoadImpl_getAssetUrl($this.$assetLoader));
    $this.$input = cgxgbt_TeaInput__init_($this, $this.$graphics.$canvas0);
    $assetDownload = new cgxgbt_TeaFiles;
    $instance = $this.$config;
    $map = new cgxgbtft_InternalStorage;
    cgxgbtf_MemoryFileStorage__init_($map);
    $assetDownload.$internalStorage = $map;
    $map = new cgxgbtft_ClasspathStorage;
    cgxgbtf_MemoryFileStorage__init_($map);
    $assetDownload.$classpathStorage = $map;
    $map = new cgxgbtft_LocalDBStorage;
    cgxgbtf_MemoryFileStorage__init_($map);
    $map.$dataBase = null;
    cgxgbtft_LocalDBStorage_setupIndexedDB($map, $this);
    $assetDownload.$localStorage = $map;
    $assetDownload.$localStoragePrefix0 = $instance.$localStoragePrefix;
    $this.$files = $assetDownload;
    $assetDownload = new cgxgbt_TeaNet;
    $assetDownload.$httpResponseListeners = ju_HashMap__init_2(16);
    $this.$net = $assetDownload;
    $this.$logger = cgxgbt_TeaApplicationLogger__init_();
    $this.$clipboard = cgxgbt_TeaClipboard__init_0();
    cgxgbt_TeaApplication_initGdx($this);
    cgxgbt_TeaApplication_initSound($this);
    $assetDownload = $this.$config.$preloadListener;
    if ($assetDownload !== null)
        $assetDownload.$onPreload($this.$assetLoader);
    cbg_Gdx_app = $this;
    $assetDownload = $this.$graphics;
    cbg_Gdx_graphics = $assetDownload;
    cbg_Gdx_gl = cgxgbt_TeaGraphics_getGL20($assetDownload);
    cbg_Gdx_gl20 = cgxgbt_TeaGraphics_getGL20($this.$graphics);
    cbg_Gdx_gl30 = cgxgbt_TeaGraphics_getGL30($this.$graphics);
    cbg_Gdx_input = $this.$input;
    cbg_Gdx_files = $this.$files;
    cbg_Gdx_net = $this.$net;
    $assetDownload = cgxgbt_DefaultTeaAudio__init_0();
    $this.$audio = $assetDownload;
    cbg_Gdx_audio = $assetDownload;
    cgxgbtdi_TeaWindow_addEventListener($this.$window, $rt_s(57), otji_JSWrapper_unwrap(cgxgbt_TeaApplication$1__init_0($this)));
    $assetDownload = cgxgbtdi_TeaWindow_getDocument($this.$window);
    $map = cgxgbt_TeaApplication$2__init_0($this);
    $assetDownload.addEventListener("visibilitychange", otji_JS_function(otji_JSWrapper_unwrap($map), "handleEvent"));
    if (cgxgbt_TeaApplicationConfiguration_isAutoSizeApplication($this.$config))
        cgxgbtdi_TeaWindow_addEventListener($this.$window, $rt_s(58), otji_JSWrapper_unwrap(cgxgbt_TeaApplication$3__init_0($this)));
    cgxgbtdi_TeaWindow_requestAnimationFrame($this.$window, $this);
},
cgxgbt_TeaApplication_run = $this => {
    let $state, $queue, $element, $total, $percentage, $progressBar, $t, $$je;
    $state = $this.$initState;
    a: {
        try {
            b: {
                c: {
                    d: {
                        cgxgbt_TeaApplication$6_$callClinit();
                        switch (cgxgbt_TeaApplication$6_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$TeaApplication$AppState.data[jl_Enum_ordinal($state)]) {
                            case 1:
                                if ($this.$delayInitCount)
                                    break b;
                                $this.$initState = cgxgbt_TeaApplication$AppState_PRELOAD_ASSETS;
                                break b;
                            case 2:
                                break;
                            case 3:
                                break c;
                            case 4:
                                break d;
                            default:
                                break b;
                        }
                        cgxgbta_AssetLoadImpl_preload($this.$assetLoader, $this.$config, $rt_s(59));
                        $this.$initState = cgxgbt_TeaApplication$AppState_DOWNLOAD_ASSETS;
                        break b;
                    }
                    if ($this.$queueAppListener !== null) {
                        $state = $this.$appListener;
                        if ($state !== null) {
                            cbg_ApplicationAdapter_pause($state);
                            cbg_ApplicationAdapter_dispose($this.$appListener);
                        }
                        cgxgbt_TeaInput_setInputProcessor($this.$input, null);
                        cgxgbt_TeaInput_reset($this.$input);
                        cbgu_Array_clear($this.$runnables);
                        $this.$appListener = $this.$queueAppListener;
                        $this.$queueAppListener = null;
                        $this.$initState = cgxgbt_TeaApplication$AppState_APP_CREATE;
                        $this.$graphics.$frameId = Long_ZERO;
                    }
                    $state = $this.$appListener;
                    if ($state === null)
                        break b;
                    cgxgbt_TeaApplication_step($this, $state);
                    break b;
                }
                $queue = cgxgbta_AssetLoadImpl_getQueue($this.$assetLoader);
                if (!$queue) {
                    $this.$initState = cgxgbt_TeaApplication$AppState_APP_LOOP;
                    $element = window.document.getElementById("progress");
                    if ($element !== null)
                        $element.style.setProperty("display", "none");
                } else {
                    $total = $this.$assetLoader.$assetTotal;
                    if ($total > 0) {
                        $percentage = 25 + ((75 * ($total - $queue | 0) | 0) / $total | 0) | 0;
                        $progressBar = window.document.getElementById("progress-bar");
                        if ($progressBar !== null) {
                            $t = $progressBar.style;
                            $element = jl_StringBuilder__init_();
                            jl_StringBuilder_append2(jl_StringBuilder_append1($element, $percentage), 37);
                            $t.setProperty("width", $rt_ustr(jl_StringBuilder_toString($element)));
                        }
                    }
                }
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Throwable) {
                $t = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        cgxgbtdi_TeaWindow_requestAnimationFrame($this.$window, $this);
        return;
    }
    jl_Throwable_printStackTrace($t);
    $rt_throw($t);
},
cgxgbt_TeaApplication_step = ($this, $appListener) => {
    let var$2, var$3, var$4, $i, $width, $height, $resizeBypass, var$9, var$10, var$11, var$12, var$13, var$14, var$15, var$16, var$17, var$18, var$19, var$20, $$je;
    var$2 = $this.$graphics;
    var$3 = jl_System_currentTimeMillis();
    var$4 = Long_toNumber(Long_sub(var$3, var$2.$lastTimeStamp)) / 1000.0;
    var$2.$deltaTime = var$4;
    var$2.$lastTimeStamp = var$3;
    var$4 = var$2.$time + var$4;
    var$2.$time = var$4;
    $i = var$2.$frames + 1 | 0;
    var$2.$frames = $i;
    if (var$4 > 1.0) {
        var$2.$fps = $i;
        var$2.$time = 0.0;
        var$2.$frames = 0;
    }
    a: {
        $width = cgxgbt_TeaGraphics_getWidth(cbg_Gdx_graphics);
        $height = cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics);
        $resizeBypass = 0;
        if ($this.$initState === cgxgbt_TeaApplication$AppState_APP_CREATE) {
            $this.$initState = cgxgbt_TeaApplication$AppState_APP_LOOP;
            var$2 = $appListener;
            var$9 = new cbggg_SpriteBatch;
            cbggg_SpriteBatch_$callClinit();
            cbggg_SpriteBatch__init_(var$9, 1000, null);
            var$2.$batch = var$9;
            var$10 = new cbggg_ParticleEffect;
            var$10.$xSizeScale = 1.0;
            var$10.$ySizeScale = 1.0;
            var$10.$motionScale = 1.0;
            var$10.$emitters = cbgu_Array__init_2(8);
            var$2.$clickEffect = var$10;
            var$11 = cgxgbt_TeaFiles_internal(cbg_Gdx_files, $rt_s(60));
            var$9 = cgxgbt_TeaFiles_internal(cbg_Gdx_files, $rt_s(61));
            var$12 = cgxgbt_TeaFileHandle_read(var$11);
            cbgu_Array_clear(var$10.$emitters);
            var$13 = null;
            b: {
                try {
                    try {
                        var$14 = var$13;
                        var$15 = new ji_BufferedReader;
                        var$13 = var$15;
                        var$14 = var$15;
                        ji_BufferedReader__init_(var$15, ji_InputStreamReader__init_2(var$12), 512);
                        while (true) {
                            var$14 = var$15;
                            var$13 = var$15;
                            var$16 = cbggg_ParticleEffect_newEmitter(var$10, var$15);
                            cbgu_Array_add(var$10.$emitters, var$16);
                            if (ji_BufferedReader_readLine(var$15) === null)
                                break;
                            var$14 = var$15;
                            var$13 = var$15;
                        }
                        var$14 = var$15;
                        var$13 = var$15;
                        break b;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof ji_IOException) {
                            var$2 = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    var$13 = var$14;
                    $rt_throw(cbgu_GdxRuntimeException__init_(jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(62)), var$11)), var$2));
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    $appListener = $$je;

                }
                cbgu_StreamUtils_closeQuietly(var$13);
                $rt_throw($appListener);
            }
            cbgu_StreamUtils_closeQuietly(var$15);
            var$10.$ownsTexture = 1;
            var$11 = cbgu_ObjectMap__init_2(var$10.$emitters.$size0, 0.800000011920929);
            var$17 = 0;
            var$18 = var$10.$emitters.$size0;
            var$14 = var$9;
            c: while (true) {
                if (var$17 >= var$18) {
                    var$9 = cvd_Trail__init_0(var$2.$batch, 0.10000000149011612, 16.0, 40);
                    var$2.$trail = var$9;
                    cbgg_Color_set(var$9.$startColor, cbgg_Color_CYAN);
                    cbgg_Color_set(var$2.$trail.$endColor, cbgg_Color_CLEAR_WHITE);
                    var$9 = cgtt_Font_scale(cgtt_Font__init_0($rt_s(63)), 3.0);
                    var$10 = cgtt_TypingLabel__init_($rt_s(24), var$9);
                    var$2.$label0 = var$10;
                    cgtt_TypingLabel_setText0(var$10, $rt_s(64));
                    var$10 = var$2.$label0;
                    var$10.$align = 1;
                    cgtt_TypingLabel_skipToTheEnd(var$10, 1, 0);
                    var$10 = cgtt_TypingLabel__init_($rt_s(24), var$9);
                    var$2.$score = var$10;
                    cgtt_TypingLabel_setVariable(var$10, $rt_s(65), $rt_s(32));
                    cgtt_TypingLabel_setText0(var$2.$score, $rt_s(66));
                    $resizeBypass = 1;
                    break a;
                }
                var$9 = cbgu_Array_get(var$10.$emitters, var$17);
                if (var$9.$imagePaths.$size0) {
                    var$16 = cbgu_Array__init_();
                    var$13 = cbgu_Array_iterator(var$9.$imagePaths);
                    while (cbgu_Array$ArrayIterator_hasNext(var$13)) {
                        var$12 = jl_String_replace0(cbgu_Array$ArrayIterator_next(var$13), 92, 47);
                        ji_File_$callClinit();
                        if (var$12 === null)
                            break c;
                        var$19 = ji_File_fixSlashes(var$12);
                        $resizeBypass = jl_String_lastIndexOf1(var$19, ji_File_separator);
                        if ($resizeBypass >= 0)
                            var$19 = jl_String_substring(var$19, $resizeBypass + 1 | 0, var$19.$nativeString.length);
                        var$12 = cbgu_ObjectMap_get(var$11, var$19);
                        if (var$12 === null) {
                            var$12 = new cbggg_Sprite;
                            var$15 = cgxgbt_TeaFileHandle_child(var$14, var$19);
                            var$20 = new cbgg_Texture;
                            cbgg_Texture_$callClinit();
                            cbgg_Texture__init_0(var$20, var$15, null, 0);
                            cbggg_Sprite__init_(var$12, var$20, 0, 0, cbgg_Texture_getWidth(var$20), cbgg_Texture_getHeight(var$20));
                            cbgu_ObjectMap_put(var$11, var$19, var$12);
                        }
                        cbgu_Array_add(var$16, var$12);
                    }
                    cbggg_ParticleEmitter_setSprites(var$9, var$16);
                }
                var$17 = var$17 + 1 | 0;
            }
            $appListener = new jl_NullPointerException;
            jl_Exception__init_0($appListener, $rt_s(24));
            $rt_throw($appListener);
        }
    }
    if (!($width == $this.$lastWidth && $height == $this.$lastHeight && !$resizeBypass)) {
        $this.$lastWidth = $width;
        $this.$lastHeight = $height;
        cbg_Gdx_gl.$glViewport(0, 0, $width, $height);
        cvd_Clicker_resize($appListener, $width, $height);
    }
    cbgu_Array_addAll0($this.$runnablesHelper, $this.$runnables);
    cbgu_Array_clear($this.$runnables);
    $i = 0;
    while (true) {
        var$2 = $this.$runnablesHelper;
        if ($i >= var$2.$size0)
            break;
        (cbgu_Array_get(var$2, $i)).$run();
        $i = $i + 1 | 0;
    }
    cbgu_Array_clear(var$2);
    var$2 = $this.$graphics;
    var$3 = Long_add(var$2.$frameId, Long_fromInt(1));
    var$2.$frameId = var$3;
    if (Long_gt(var$3, Long_fromInt(60)))
        cvd_Clicker_render($appListener);
    cgxgbt_TeaInput_reset($this.$input);
},
cgxgbt_TeaApplication_error = ($this, $tag, $message) => {
    let var$3, var$4;
    if ($this.$logLevel >= 1) {
        var$3 = jl_System_err();
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$4, $tag), $rt_s(27)), $message);
        $tag = jl_AbstractStringBuilder_toString(var$4);
        otcic_JsConsolePrintStream_println(var$3, $tag);
    }
},
cgxgbt_TeaApplication_initGdx = $this => {
    let var$1, var$2;
    var$1 = $this.$assetLoader;
    var$2 = new cgxgbt_TeaApplication$4;
    var$2.$this$046 = $this;
    cgxgbta_AssetLoadImpl_loadScript(var$1, $rt_s(67), var$2);
},
cgxgbt_TeaApplication_initSound = $this => {
    let var$1, var$2;
    var$1 = $this.$assetLoader;
    var$2 = new cgxgbt_TeaApplication$5;
    var$2.$this$029 = $this;
    cgxgbta_AssetLoadImpl_loadScript(var$1, $rt_s(68), var$2);
},
cgxgbt_TeaApplication__clinit_ = () => {
    cgxgbt_TeaApplication_WEB_SCRIPT_PATH = $rt_s(69);
    cgxgbt_TeaApplication_WEB_ASSET_PATH = $rt_s(70);
},
cbg_ApplicationListener = $rt_classWithoutFields(0),
cbg_ApplicationAdapter = $rt_classWithoutFields(),
cbg_ApplicationAdapter_pause = $this => {
    return;
},
cbg_ApplicationAdapter_dispose = $this => {
    return;
};
function cvd_Clicker() {
    let a = this; cbg_ApplicationAdapter.call(a);
    a.$label0 = null;
    a.$score = null;
    a.$clickEffect = null;
    a.$trail = null;
    a.$batch = null;
    a.$clicks = 0;
}
let cvd_Clicker_render = $this => {
    let $delta, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14;
    $delta = cbg_Gdx_graphics.$deltaTime;
    var$2 = $this.$clickEffect;
    var$3 = 0;
    var$4 = var$2.$emitters.$size0;
    while (var$3 < var$4) {
        cbggg_ParticleEmitter_update(cbgu_Array_get(var$2.$emitters, var$3), $delta);
        var$3 = var$3 + 1 | 0;
    }
    var$2 = $this.$trail;
    var$5 = cbgu_Array_iterator(var$2.$segments);
    while (cbgu_Array$ArrayIterator_hasNext(var$5)) {
        var$6 = cbgu_Array$ArrayIterator_next(var$5);
        var$6.$life = var$6.$life + $delta;
    }
    var$6 = var$2.$segments;
    var$6.$iterating = var$6.$iterating + 1 | 0;
    var$7 = cbgu_Array_iterator(var$6);
    while (cbgu_Array$ArrayIterator_hasNext(var$7)) {
        var$6 = cbgu_Array$ArrayIterator_next(var$7);
        if (var$6.$life > var$2.$lifetime) {
            var$5 = var$2.$segments;
            if (var$5.$iterating <= 0)
                cbgu_Array_removeValue(var$5, var$6, 1);
            else {
                var$3 = cbgu_Array_indexOf(var$5, var$6, 1);
                if (var$3 != (-1))
                    cbgu_DelayedRemovalArray_remove(var$5, var$3);
            }
            var$5 = var$2.$pool;
            var$8 = var$5.$freeObjects;
            if (var$8.$size0 >= var$5.$max2)
                cbgu_Pool_reset(var$5, var$6);
            else {
                cbgu_Array_add(var$8, var$6);
                var$5.$peak = jl_Math_max(var$5.$peak, var$5.$freeObjects.$size0);
                cbgu_Pool_reset(var$5, var$6);
            }
        }
    }
    var$6 = var$2.$segments;
    var$4 = var$6.$iterating;
    if (!var$4) {
        var$2 = new jl_IllegalStateException;
        jl_Throwable__init_(var$2, $rt_s(71));
        $rt_throw(var$2);
    }
    var$3 = var$4 - 1 | 0;
    var$6.$iterating = var$3;
    if (!var$3) {
        a: {
            var$3 = var$6.$clear4;
            if (!(var$3 > 0 && var$3 == var$6.$size0)) {
                var$3 = 0;
                var$4 = var$6.$remove2.$size2;
                while (var$3 < var$4) {
                    var$5 = var$6.$remove2;
                    var$9 = var$5.$items1.data;
                    var$10 = var$5.$size2 - 1 | 0;
                    var$5.$size2 = var$10;
                    var$11 = var$9[var$10];
                    if (var$11 >= var$6.$clear4)
                        cbgu_DelayedRemovalArray_removeIndex(var$6, var$11);
                    var$3 = var$3 + 1 | 0;
                }
                var$3 = var$6.$clear4 - 1 | 0;
                while (true) {
                    if (var$3 < 0)
                        break a;
                    cbgu_DelayedRemovalArray_removeIndex(var$6, var$3);
                    var$3 = var$3 + (-1) | 0;
                }
            }
            cbgu_IntArray_clear(var$6.$remove2);
            if (var$6.$iterating <= 0)
                cbgu_Array_clear(var$6);
            else
                var$6.$clear4 = var$6.$size0;
        }
        var$6.$clear4 = 0;
    }
    if (var$2.$segments.$size0 < var$2.$length5) {
        var$6 = var$2.$pool;
        var$5 = var$6.$freeObjects;
        if (var$5.$size0)
            var$6 = cbgu_Array_pop(var$5);
        else {
            var$5 = var$6;
            var$6 = new cvd_Trail$Segment;
            var$5 = var$5.$this$07;
            var$12 = var$5.$anchorX;
            var$13 = var$5.$anchorY;
            var$14 = var$5.$anchorAngle;
            var$6.$x5 = var$12;
            var$6.$y5 = var$13;
            var$6.$angle = var$14;
        }
        var$6 = var$6;
        var$6.$x5 = var$2.$anchorX;
        var$6.$y5 = var$2.$anchorY;
        var$6.$angle = var$2.$anchorAngle;
        var$2 = var$2.$segments;
        if (var$2.$iterating > 0) {
            var$2 = new jl_IllegalStateException;
            jl_Throwable__init_(var$2, $rt_s(72));
            $rt_throw(var$2);
        }
        cbgu_Array_insert(var$2, 0, var$6);
    }
    cvd_Trail_setAnchor($this.$trail, cgxgbt_TeaInput_getX(cbg_Gdx_input), cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics) - cgxgbt_TeaInput_getY(cbg_Gdx_input) | 0);
    cgtt_TypingLabel_act($this.$label0, $delta);
    cgtt_TypingLabel_act($this.$score, $delta);
    var$6 = cbg_Gdx_input;
    if (var$6.$justTouched0) {
        cbggg_ParticleEffect_setPosition($this.$clickEffect, cgxgbt_TeaInput_getX(var$6), cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics) - cgxgbt_TeaInput_getY(cbg_Gdx_input) | 0);
        cbggg_ParticleEffect_start($this.$clickEffect);
        var$3 = $this.$clicks + 1 | 0;
        $this.$clicks = var$3;
        cgtt_TypingLabel_setVariable($this.$score, $rt_s(65), jl_String_valueOf0(var$3));
        cgtt_TypingLabel_parseTokens($this.$score);
        if ($this.$clicks > 1)
            cgtt_TypingLabel_setText0($this.$label0, $rt_s(73));
    }
    var$2 = cbgg_Color_CLEAR;
    cbgu_ScreenUtils_clear(var$2.$r, var$2.$g, var$2.$b, var$2.$a, 0, 0);
    cbggg_SpriteBatch_begin($this.$batch);
    cvd_Trail_draw($this.$trail);
    cbggg_ParticleEffect_draw($this.$clickEffect, $this.$batch);
    cgtt_TypingLabel_draw($this.$label0, $this.$batch, 1.0);
    cgtt_TypingLabel_draw($this.$score, $this.$batch, 1.0);
    cbggg_SpriteBatch_end($this.$batch);
},
cvd_Clicker_resize = ($this, $width, $height) => {
    let var$3, var$4, var$5, var$6;
    cbg_Gdx_gl.$glViewport(0, 0, $width, $height);
    var$3 = $this.$label0;
    var$4 = $width / 2.0;
    var$5 = $height;
    var$6 = var$5 - var$5 * 0.10000000149011612;
    cbgss_Actor_setPosition(var$3, var$4, var$6, 1);
    var$3 = $this.$score;
    var$5 = var$5 / 2.0;
    cbgss_Actor_setPosition(var$3, var$4, var$5, 1);
},
cbggg_GlyphLayout$GlyphRun = $rt_classWithoutFields(),
cbgu_Pools = $rt_classWithoutFields(),
cbgu_Pools_typePools = null,
cbgu_Pools_$callClinit = () => {
    cbgu_Pools_$callClinit = $rt_eraseClinit(cbgu_Pools);
    cbgu_Pools__clinit_();
},
cbgu_Pools__clinit_ = () => {
    cbgu_Pools_typePools = cbgu_ObjectMap__init_();
};
function cbgu_IntArray() {
    let a = this; jl_Object.call(a);
    a.$items1 = null;
    a.$size2 = 0;
    a.$ordered0 = 0;
}
let cbgu_IntArray__init_2 = $this => {
    cbgu_IntArray__init_0($this, 1, 16);
},
cbgu_IntArray__init_1 = () => {
    let var_0 = new cbgu_IntArray();
    cbgu_IntArray__init_2(var_0);
    return var_0;
},
cbgu_IntArray__init_3 = ($this, $capacity) => {
    cbgu_IntArray__init_0($this, 1, $capacity);
},
cbgu_IntArray__init_ = var_0 => {
    let var_1 = new cbgu_IntArray();
    cbgu_IntArray__init_3(var_1, var_0);
    return var_1;
},
cbgu_IntArray__init_0 = ($this, $ordered, $capacity) => {
    $this.$ordered0 = $ordered;
    $this.$items1 = $rt_createIntArray($capacity);
},
cbgu_IntArray__init_4 = (var_0, var_1) => {
    let var_2 = new cbgu_IntArray();
    cbgu_IntArray__init_0(var_2, var_0, var_1);
    return var_2;
},
cbgu_IntArray_add = ($this, $value) => {
    let $items, var$3, var$4, var$5;
    $items = $this.$items1;
    var$3 = $items.data;
    var$4 = $this.$size2;
    if (var$4 == var$3.length)
        $items = cbgu_IntArray_resize($this, jl_Math_max(8, var$4 * 1.75 | 0));
    $items = $items.data;
    var$5 = $this.$size2;
    $this.$size2 = var$5 + 1 | 0;
    $items[var$5] = $value;
},
cbgu_IntArray_add0 = ($this, $value1, $value2) => {
    let $items, var$4, var$5, var$6;
    $items = $this.$items1;
    var$4 = $items.data;
    var$5 = $this.$size2;
    if ((var$5 + 1 | 0) >= var$4.length)
        $items = cbgu_IntArray_resize($this, jl_Math_max(8, var$5 * 1.75 | 0));
    $items = $items.data;
    var$6 = $this.$size2;
    $items[var$6] = $value1;
    $items[var$6 + 1 | 0] = $value2;
    $this.$size2 = var$6 + 2 | 0;
},
cbgu_IntArray_get = ($this, $index) => {
    let var$2, var$3;
    if ($index < $this.$size2)
        return $this.$items1.data[$index];
    var$2 = new jl_IndexOutOfBoundsException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(10));
    var$3 = jl_StringBuilder_append1(var$3, $index);
    jl_AbstractStringBuilder_append(var$3, $rt_s(11));
    jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$3, $this.$size2)));
    $rt_throw(var$2);
},
cbgu_IntArray_set = ($this, $index, $value) => {
    let var$3, var$4;
    if ($index < $this.$size2) {
        $this.$items1.data[$index] = $value;
        return;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(10));
    var$4 = jl_StringBuilder_append1(var$4, $index);
    jl_AbstractStringBuilder_append(var$4, $rt_s(11));
    jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$4, $this.$size2)));
    $rt_throw(var$3);
},
cbgu_IntArray_contains = ($this, $value) => {
    let $i, $items, var$4, var$5;
    $i = $this.$size2 - 1 | 0;
    $items = $this.$items1;
    while ($i >= 0) {
        var$4 = $items.data;
        var$5 = $i + (-1) | 0;
        if (var$4[$i] == $value)
            return 1;
        $i = var$5;
    }
    return 0;
},
cbgu_IntArray_clear = $this => {
    $this.$size2 = 0;
},
cbgu_IntArray_resize = ($this, $newSize) => {
    let $newItems, var$3;
    $newItems = $rt_createIntArray($newSize);
    var$3 = $newItems.data;
    jl_System_fastArraycopy($this.$items1, 0, $newItems, 0, jl_Math_min($this.$size2, var$3.length));
    $this.$items1 = $newItems;
    return $newItems;
},
ju_Map = $rt_classWithoutFields(0),
ju_AbstractMap = $rt_classWithoutFields(),
jl_Cloneable = $rt_classWithoutFields(0);
function ju_HashMap() {
    let a = this; ju_AbstractMap.call(a);
    a.$elementCount = 0;
    a.$elementData = null;
    a.$modCount0 = 0;
    a.$loadFactor9 = 0.0;
    a.$threshold1 = 0;
}
let ju_HashMap_newElementArray = ($this, $s) => {
    return $rt_createArray(ju_HashMap$HashEntry, $s);
},
ju_HashMap__init_1 = $this => {
    ju_HashMap__init_0($this, 16);
},
ju_HashMap__init_ = () => {
    let var_0 = new ju_HashMap();
    ju_HashMap__init_1(var_0);
    return var_0;
},
ju_HashMap__init_0 = ($this, $capacity) => {
    let var$2;
    if ($capacity < 0) {
        var$2 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    $capacity = ju_HashMap_calculateCapacity($capacity);
    $this.$elementCount = 0;
    $this.$elementData = $this.$newElementArray($capacity);
    $this.$loadFactor9 = 0.75;
    ju_HashMap_computeThreshold($this);
},
ju_HashMap__init_2 = var_0 => {
    let var_1 = new ju_HashMap();
    ju_HashMap__init_0(var_1, var_0);
    return var_1;
},
ju_HashMap_calculateCapacity = $x => {
    let var$2;
    if ($x >= 1073741824)
        return 1073741824;
    if (!$x)
        return 16;
    var$2 = $x - 1 | 0;
    $x = var$2 | var$2 >> 1;
    $x = $x | $x >> 2;
    $x = $x | $x >> 4;
    $x = $x | $x >> 8;
    return ($x | $x >> 16) + 1 | 0;
},
ju_HashMap_computeThreshold = $this => {
    $this.$threshold1 = $this.$elementData.data.length * $this.$loadFactor9 | 0;
},
ju_HashMap_containsValue = ($this, $value) => {
    let $i, var$3, $entry, var$5;
    a: {
        if ($value === null) {
            $i = 0;
            b: while (true) {
                var$3 = $this.$elementData.data;
                if ($i >= var$3.length)
                    break a;
                $entry = var$3[$i];
                while ($entry !== null) {
                    if ($entry.$value === null)
                        break b;
                    $entry = $entry.$next4;
                }
                $i = $i + 1 | 0;
            }
            return 1;
        }
        $i = 0;
        c: while (true) {
            var$3 = $this.$elementData.data;
            if ($i >= var$3.length)
                break a;
            $entry = var$3[$i];
            while ($entry !== null) {
                var$5 = $entry.$value;
                if (jl_Integer_equals($value, var$5))
                    break c;
                $entry = $entry.$next4;
            }
            $i = $i + 1 | 0;
        }
        return 1;
    }
    return 0;
},
ju_HashMap_get = ($this, $key) => {
    let $m;
    $m = ju_HashMap_entryByKey($this, $key);
    if ($m === null)
        return null;
    return $m.$value;
},
ju_HashMap_entryByKey = ($this, $key) => {
    let $m, $hash;
    if ($key === null)
        $m = ju_HashMap_findNullKeyEntry($this);
    else {
        $hash = $key.$hashCode();
        $m = ju_HashMap_findNonNullKeyEntry($this, $key, $hash & ($this.$elementData.data.length - 1 | 0), $hash);
    }
    return $m;
},
ju_HashMap_findNonNullKeyEntry = ($this, $key, $index, $keyHash) => {
    let $m;
    $m = $this.$elementData.data[$index];
    while ($m !== null && !($m.$origKeyHash == $keyHash && ju_HashMap_areEqualKeys($key, $m.$key))) {
        $m = $m.$next4;
    }
    return $m;
},
ju_HashMap_findNullKeyEntry = $this => {
    let $m;
    $m = $this.$elementData.data[0];
    while ($m !== null && $m.$key !== null) {
        $m = $m.$next4;
    }
    return $m;
},
ju_HashMap_put = ($this, $key, $value) => {
    let var$3, var$4, var$5;
    if ($key === null) {
        var$3 = ju_HashMap_findNullKeyEntry($this);
        if (var$3 === null) {
            $this.$modCount0 = $this.$modCount0 + 1 | 0;
            var$3 = ju_HashMap_createHashedEntry($this, null, 0, 0);
            var$4 = $this.$elementCount + 1 | 0;
            $this.$elementCount = var$4;
            if (var$4 > $this.$threshold1)
                ju_HashMap_rehash($this);
        }
    } else {
        var$4 = $key.$hashCode();
        var$5 = var$4 & ($this.$elementData.data.length - 1 | 0);
        var$3 = ju_HashMap_findNonNullKeyEntry($this, $key, var$5, var$4);
        if (var$3 === null) {
            $this.$modCount0 = $this.$modCount0 + 1 | 0;
            var$3 = ju_HashMap_createHashedEntry($this, $key, var$5, var$4);
            var$4 = $this.$elementCount + 1 | 0;
            $this.$elementCount = var$4;
            if (var$4 > $this.$threshold1)
                ju_HashMap_rehash($this);
        }
    }
    $key = var$3.$value;
    var$3.$value = $value;
    return $key;
},
ju_HashMap_createHashedEntry = ($this, $key, $index, $hash) => {
    let $entry, var$5;
    $entry = ju_HashMap$HashEntry__init_0($key, $hash);
    var$5 = $this.$elementData.data;
    $entry.$next4 = var$5[$index];
    var$5[$index] = $entry;
    return $entry;
},
ju_HashMap_rehash0 = ($this, $capacity) => {
    let $length, $newData, $i, var$5, $entry, $index, $next;
    $length = ju_HashMap_calculateCapacity(!$capacity ? 1 : $capacity << 1);
    $newData = $this.$newElementArray($length);
    $i = 0;
    $length = $length - 1 | 0;
    while (true) {
        var$5 = $this.$elementData.data;
        if ($i >= var$5.length)
            break;
        $entry = var$5[$i];
        var$5[$i] = null;
        while ($entry !== null) {
            var$5 = $newData.data;
            $index = $entry.$origKeyHash & $length;
            $next = $entry.$next4;
            $entry.$next4 = var$5[$index];
            var$5[$index] = $entry;
            $entry = $next;
        }
        $i = $i + 1 | 0;
    }
    $this.$elementData = $newData;
    ju_HashMap_computeThreshold($this);
},
ju_HashMap_rehash = $this => {
    ju_HashMap_rehash0($this, $this.$elementData.data.length);
},
ju_HashMap_areEqualKeys = ($key1, $key2) => {
    return $key1 !== $key2 && !$key1.$equals($key2) ? 0 : 1;
},
cbgm_Interpolation$1 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$1_apply = ($this, $a) => {
    return $a;
},
cbgm_Interpolation$2 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$2_apply = ($this, $a) => {
    return $a * $a * (3.0 - 2.0 * $a);
},
cbgm_Interpolation$3 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$4 = $rt_classWithoutFields(cbgm_Interpolation);
function cbgm_Interpolation$Pow() {
    cbgm_Interpolation.call(this);
    this.$power = 0;
}
let cbgm_Interpolation$Pow__init_ = ($this, $power) => {
    cbgm_Interpolation__init_($this);
    $this.$power = $power;
},
cbgm_Interpolation$Pow__init_0 = var_0 => {
    let var_1 = new cbgm_Interpolation$Pow();
    cbgm_Interpolation$Pow__init_(var_1, var_0);
    return var_1;
},
cbgm_Interpolation$PowIn = $rt_classWithoutFields(cbgm_Interpolation$Pow),
cbgm_Interpolation$PowIn_apply = ($this, $a) => {
    return jl_Math_pow($a, $this.$power);
},
cbgm_Interpolation$PowOut = $rt_classWithoutFields(cbgm_Interpolation$Pow),
cbgm_Interpolation$PowOut_apply = ($this, $a) => {
    return jl_Math_pow($a - 1.0, $this.$power) * ($this.$power % 2 | 0 ? 1 : (-1)) + 1.0;
},
cbgm_Interpolation$5 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$6 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$7 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$8 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$9 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$9_apply = ($this, $a) => {
    return (1.0 - cbgm_MathUtils_cos($a * 3.1415927410125732)) / 2.0;
},
cbgm_Interpolation$10 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$11 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$11_apply = ($this, $a) => {
    return cbgm_MathUtils_sin($a * 1.5707963705062866);
};
function cbgm_Interpolation$Exp() {
    let a = this; cbgm_Interpolation.call(a);
    a.$value2 = 0.0;
    a.$power0 = 0.0;
    a.$min2 = 0.0;
    a.$scale2 = 0.0;
}
let cbgm_Interpolation$Exp__init_ = ($this, $value, $power) => {
    cbgm_Interpolation__init_($this);
    $this.$value2 = $value;
    $this.$power0 = $power;
    $power = jl_Math_pow($value,  -$power);
    $this.$min2 = $power;
    $this.$scale2 = 1.0 / (1.0 - $power);
},
cbgm_Interpolation$Exp__init_0 = (var_0, var_1) => {
    let var_2 = new cbgm_Interpolation$Exp();
    cbgm_Interpolation$Exp__init_(var_2, var_0, var_1);
    return var_2;
},
cbgm_Interpolation$ExpIn = $rt_classWithoutFields(cbgm_Interpolation$Exp),
cbgm_Interpolation$ExpIn_apply = ($this, $a) => {
    return (jl_Math_pow($this.$value2, $this.$power0 * ($a - 1.0)) - $this.$min2) * $this.$scale2;
},
cbgm_Interpolation$ExpOut = $rt_classWithoutFields(cbgm_Interpolation$Exp),
cbgm_Interpolation$12 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$13 = $rt_classWithoutFields(cbgm_Interpolation),
cbgm_Interpolation$14 = $rt_classWithoutFields(cbgm_Interpolation);
function cbgm_Interpolation$Elastic() {
    let a = this; cbgm_Interpolation.call(a);
    a.$value6 = 0.0;
    a.$power1 = 0.0;
    a.$scale3 = 0.0;
    a.$bounces = 0.0;
}
let cbgm_Interpolation$Elastic__init_ = ($this, $value, $power, $bounces, $scale) => {
    cbgm_Interpolation__init_($this);
    $this.$value6 = $value;
    $this.$power1 = $power;
    $this.$scale3 = $scale;
    $this.$bounces = $bounces * 3.1415927410125732 * ($bounces % 2 | 0 ? (-1) : 1);
},
cbgm_Interpolation$Elastic__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new cbgm_Interpolation$Elastic();
    cbgm_Interpolation$Elastic__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
cbgm_Interpolation$ElasticIn = $rt_classWithoutFields(cbgm_Interpolation$Elastic),
cbgm_Interpolation$ElasticOut = $rt_classWithoutFields(cbgm_Interpolation$Elastic);
function cbgm_Interpolation$Swing() {
    cbgm_Interpolation.call(this);
    this.$scale0 = 0.0;
}
let cbgm_Interpolation$Swing_apply = ($this, $a) => {
    let var$2, var$3, var$4;
    if ($a <= 0.5) {
        $a = $a * 2.0;
        var$2 = $a * $a;
        var$3 = $this.$scale0;
        return var$2 * ((var$3 + 1.0) * $a - var$3) / 2.0;
    }
    $a = ($a - 1.0) * 2.0;
    var$2 = $a * $a;
    var$4 = $this.$scale0;
    return var$2 * ((var$4 + 1.0) * $a + var$4) / 2.0 + 1.0;
};
function cbgm_Interpolation$SwingIn() {
    cbgm_Interpolation.call(this);
    this.$scale4 = 0.0;
}
function cbgm_Interpolation$SwingOut() {
    cbgm_Interpolation.call(this);
    this.$scale1 = 0.0;
}
let cbgm_Interpolation$SwingOut_apply = ($this, $a) => {
    let var$2, var$3;
    $a = $a - 1.0;
    var$2 = $a * $a;
    var$3 = $this.$scale1;
    return var$2 * ((var$3 + 1.0) * $a + var$3) + 1.0;
};
function cbgm_Interpolation$BounceOut() {
    let a = this; cbgm_Interpolation.call(a);
    a.$widths = null;
    a.$heights = null;
}
let cbgm_Interpolation$BounceOut__init_ = ($this, $bounces) => {
    let var$2, var$3, var$4, var$5, var$6;
    cbgm_Interpolation__init_($this);
    if ($bounces >= 2 && $bounces <= 5) {
        a: {
            var$2 = $rt_createFloatArray($bounces);
            $this.$widths = var$2;
            var$3 = $rt_createFloatArray($bounces);
            var$4 = var$3.data;
            $this.$heights = var$3;
            var$4[0] = 1.0;
            switch ($bounces) {
                case 2:
                    break;
                case 3:
                    var$3 = var$2.data;
                    var$3[0] = 0.4000000059604645;
                    var$3[1] = 0.4000000059604645;
                    var$3[2] = 0.20000000298023224;
                    var$4[1] = 0.33000001311302185;
                    var$4[2] = 0.10000000149011612;
                    break a;
                case 4:
                    var$3 = var$2.data;
                    var$3[0] = 0.3400000035762787;
                    var$3[1] = 0.3400000035762787;
                    var$3[2] = 0.20000000298023224;
                    var$3[3] = 0.15000000596046448;
                    var$4[1] = 0.25999999046325684;
                    var$4[2] = 0.10999999940395355;
                    var$4[3] = 0.029999999329447746;
                    break a;
                case 5:
                    var$3 = var$2.data;
                    var$3[0] = 0.30000001192092896;
                    var$3[1] = 0.30000001192092896;
                    var$3[2] = 0.20000000298023224;
                    var$3[3] = 0.10000000149011612;
                    var$3[4] = 0.10000000149011612;
                    var$4[1] = 0.44999998807907104;
                    var$4[2] = 0.30000001192092896;
                    var$4[3] = 0.15000000596046448;
                    var$4[4] = 0.05999999865889549;
                    break a;
                default:
                    break a;
            }
            var$3 = var$2.data;
            var$3[0] = 0.6000000238418579;
            var$3[1] = 0.4000000059604645;
            var$4[1] = 0.33000001311302185;
        }
        var$2 = var$2.data;
        var$2[0] = var$2[0] * 2.0;
        return;
    }
    var$5 = new jl_IllegalArgumentException;
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_AbstractStringBuilder_append(var$6, $rt_s(74));
    jl_Throwable__init_(var$5, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$6, $bounces)));
    $rt_throw(var$5);
},
cbgm_Interpolation$BounceOut__init_0 = var_0 => {
    let var_1 = new cbgm_Interpolation$BounceOut();
    cbgm_Interpolation$BounceOut__init_(var_1, var_0);
    return var_1;
},
cbgm_Interpolation$BounceOut_apply = ($this, $a) => {
    let var$2, $width, $height, $i, $n, $z;
    if ($a === 1.0)
        return 1.0;
    var$2 = $this.$widths.data;
    $a = $a + var$2[0] / 2.0;
    $width = 0.0;
    $height = 0.0;
    $i = 0;
    $n = var$2.length;
    a: {
        while ($i < $n) {
            $width = var$2[$i];
            if ($a <= $width) {
                $height = $this.$heights.data[$i];
                break a;
            }
            $a = $a - $width;
            $i = $i + 1 | 0;
        }
    }
    $a = $a / $width;
    $z = 4.0 / $width * $height * $a;
    return 1.0 - ($z - $z * $a) * $width;
},
cbgm_Interpolation$Bounce = $rt_classWithoutFields(cbgm_Interpolation$BounceOut),
cbgm_Interpolation$BounceIn = $rt_classWithoutFields(cbgm_Interpolation$BounceOut),
ju_Comparator = $rt_classWithoutFields(0),
jl_String$_clinit_$lambda$_115_0 = $rt_classWithoutFields(),
jl_Character = $rt_classWithoutFields(),
jl_Character_TYPE = null,
jl_Character_digitMapping = null,
jl_Character_upperCaseMapping = null,
jl_Character_lowerCaseMapping = null,
jl_Character_classMapping = null,
jl_Character_characterCache = null,
jl_Character_$$metadata$$0 = null,
jl_Character_$$metadata$$1 = null,
jl_Character_$$metadata$$3 = null,
jl_Character_$$metadata$$4 = null,
jl_Character_toString = $c => {
    let var$2, var$3;
    var$2 = new jl_String;
    var$3 = $rt_createCharArray(1);
    var$3.data[0] = $c;
    jl_String__init_2(var$2, var$3);
    return var$2;
},
jl_Character_isSupplementaryCodePoint = $codePoint => {
    return $codePoint >= 65536 && $codePoint <= 1114111 ? 1 : 0;
},
jl_Character_isHighSurrogate = $ch => {
    return ($ch & 64512) != 55296 ? 0 : 1;
},
jl_Character_isLowSurrogate = $ch => {
    return ($ch & 64512) != 56320 ? 0 : 1;
},
jl_Character_isSurrogate = $ch => {
    return !jl_Character_isHighSurrogate($ch) && !jl_Character_isLowSurrogate($ch) ? 0 : 1;
},
jl_Character_isSurrogatePair = ($high, $low) => {
    return jl_Character_isHighSurrogate($high) && jl_Character_isLowSurrogate($low) ? 1 : 0;
},
jl_Character_toCodePoint = ($high, $low) => {
    return (($high & 1023) << 10 | $low & 1023) + 65536 | 0;
},
jl_Character_highSurrogate = $codePoint => {
    return (55296 | ($codePoint - 65536 | 0) >> 10 & 1023) & 65535;
},
jl_Character_lowSurrogate = $codePoint => {
    return (56320 | $codePoint & 1023) & 65535;
},
jl_Character_toLowerCase = $ch => {
    return jl_Character_toLowerCase0($ch) & 65535;
},
jl_Character_toLowerCase0 = $ch => {
    if (jl_Character_lowerCaseMapping === null) {
        if (jl_Character_$$metadata$$0 === null)
            jl_Character_$$metadata$$0 = jl_Character_acquireLowerCaseMapping$$create();
        jl_Character_lowerCaseMapping = otciu_UnicodeHelper_createCharMapping(otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$0.value !== null ? $rt_str(jl_Character_$$metadata$$0.value) : null)));
    }
    return jl_Character_mapChar(jl_Character_lowerCaseMapping, $ch);
},
jl_Character_toUpperCase = $ch => {
    return jl_Character_toUpperCase0($ch) & 65535;
},
jl_Character_toUpperCase0 = $codePoint => {
    if (jl_Character_upperCaseMapping === null) {
        if (jl_Character_$$metadata$$1 === null)
            jl_Character_$$metadata$$1 = jl_Character_acquireUpperCaseMapping$$create();
        jl_Character_upperCaseMapping = otciu_UnicodeHelper_createCharMapping(otciu_UnicodeHelper_decodeCaseMapping((jl_Character_$$metadata$$1.value !== null ? $rt_str(jl_Character_$$metadata$$1.value) : null)));
    }
    return jl_Character_mapChar(jl_Character_upperCaseMapping, $codePoint);
},
jl_Character_mapChar = ($table, $codePoint) => {
    let $binSearchTable, var$4, var$5, var$6, $index, var$8;
    $binSearchTable = $table.$fastTable.data;
    if ($codePoint < $binSearchTable.length)
        return $codePoint + $binSearchTable[$codePoint] | 0;
    $binSearchTable = $table.$binarySearchTable.data;
    var$4 = 0;
    var$5 = $binSearchTable.length;
    var$6 = (var$5 / 2 | 0) - 1 | 0;
    a: {
        while (true) {
            $index = (var$4 + var$6 | 0) / 2 | 0;
            var$8 = $rt_compare($binSearchTable[$index * 2 | 0], $codePoint);
            if (!var$8)
                break;
            if (var$8 <= 0) {
                var$4 = $index + 1 | 0;
                if (var$4 > var$6)
                    break a;
            } else {
                $index = $index - 1 | 0;
                if ($index < var$4)
                    break a;
                var$6 = $index;
            }
        }
    }
    if ($index >= 0) {
        $index = $index * 2 | 0;
        if ($index < var$5)
            return $codePoint + $binSearchTable[$index + 1 | 0] | 0;
    }
    return 0;
},
jl_Character_digit = ($ch, $radix) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12;
    if ($radix >= 2 && $radix <= 36) {
        if (jl_Character_digitMapping === null) {
            if (jl_Character_$$metadata$$3 === null)
                jl_Character_$$metadata$$3 = jl_Character_obtainDigitMapping$$create();
            var$3 = (jl_Character_$$metadata$$3.value !== null ? $rt_str(jl_Character_$$metadata$$3.value) : null);
            var$4 = otci_CharFlow__init_(jl_String_toCharArray(var$3));
            var$5 = otci_Base46_decodeUnsigned(var$4);
            var$6 = $rt_createIntArray(var$5 * 2 | 0);
            var$7 = var$6.data;
            var$8 = 0;
            var$9 = 0;
            var$10 = 0;
            var$11 = 0;
            while (var$11 < var$5) {
                var$9 = var$9 + otci_Base46_decode(var$4) | 0;
                var$10 = var$10 + otci_Base46_decode(var$4) | 0;
                var$12 = var$8 + 1 | 0;
                var$7[var$8] = var$9;
                var$8 = var$12 + 1 | 0;
                var$7[var$12] = var$10;
                var$11 = var$11 + 1 | 0;
            }
            jl_Character_digitMapping = var$6;
        }
        var$6 = jl_Character_digitMapping.data;
        var$8 = 0;
        var$9 = (var$6.length / 2 | 0) - 1 | 0;
        a: {
            while (var$9 >= var$8) {
                var$10 = (var$8 + var$9 | 0) / 2 | 0;
                var$11 = var$10 * 2 | 0;
                var$5 = $rt_compare($ch, var$6[var$11]);
                if (var$5 > 0)
                    var$8 = var$10 + 1 | 0;
                else {
                    if (var$5 >= 0) {
                        $ch = var$6[var$11 + 1 | 0];
                        break a;
                    }
                    var$9 = var$10 - 1 | 0;
                }
            }
            $ch = (-1);
        }
        if ($ch >= $radix)
            $ch = (-1);
    } else
        $ch = (-1);
    return $ch;
},
jl_Character_forDigit = ($digit, $radix) => {
    if ($radix >= 2 && $radix <= 36 && $digit >= 0 && $digit < $radix)
        return $digit < 10 ? (48 + $digit | 0) & 65535 : ((97 + $digit | 0) - 10 | 0) & 65535;
    return 0;
},
jl_Character_isDigit0 = $ch => {
    return jl_Character_isDigit($ch);
},
jl_Character_isDigit = $codePoint => {
    return jl_Character_getType($codePoint) != 9 ? 0 : 1;
},
jl_Character_toChars = $codePoint => {
    let var$2, var$3, var$4;
    if (!($codePoint >= 0 && $codePoint <= 1114111 ? 1 : 0)) {
        var$2 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    if ($codePoint < 65536) {
        var$3 = $rt_createCharArray(1);
        var$3.data[0] = $codePoint & 65535;
        return var$3;
    }
    var$3 = $rt_createCharArray(2);
    var$4 = var$3.data;
    var$4[0] = jl_Character_highSurrogate($codePoint);
    var$4[1] = jl_Character_lowSurrogate($codePoint);
    return var$3;
},
jl_Character_getType = $codePoint => {
    let $u, $range, $classes, var$5, var$6, var$7, var$8, var$9, $i, var$11, var$12, var$13, var$14, $l;
    $u = $codePoint > 0 && $codePoint <= 65535 ? 1 : 0;
    if ($u && jl_Character_isSurrogate($codePoint & 65535))
        return 19;
    if (jl_Character_classMapping === null) {
        if (jl_Character_$$metadata$$4 === null)
            jl_Character_$$metadata$$4 = jl_Character_obtainClasses$$create();
        $range = (jl_Character_$$metadata$$4.value !== null ? $rt_str(jl_Character_$$metadata$$4.value) : null);
        $classes = $rt_createArray(otciu_UnicodeHelper$Range, 16384);
        var$5 = $classes.data;
        var$6 = $rt_createByteArray(16384);
        var$7 = var$6.data;
        var$8 = 0;
        var$9 = 0;
        $i = 0;
        var$11 = 0;
        while (var$11 < $range.$nativeString.length) {
            var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
            if (var$12 == 64) {
                var$11 = var$11 + 1 | 0;
                var$12 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
                var$13 = 0;
                var$14 = 1;
                $u = 0;
                while ($u < 3) {
                    var$11 = var$11 + 1 | 0;
                    var$13 = var$13 | $rt_imul(var$14, otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11)));
                    var$14 = var$14 * 64 | 0;
                    $u = $u + 1 | 0;
                }
            } else if (var$12 < 32)
                var$13 = 1;
            else {
                var$12 = (var$12 - 32 | 0) << 24 >> 24;
                var$11 = var$11 + 1 | 0;
                var$13 = otciu_UnicodeHelper_decodeByte(jl_String_charAt($range, var$11));
            }
            if (!var$12 && var$13 >= 128) {
                if (var$8 > 0) {
                    $u = var$9 + 1 | 0;
                    var$5[var$9] = otciu_UnicodeHelper$Range__init_($i, $i + var$8 | 0, ju_Arrays_copyOf(var$6, var$8));
                    var$9 = $u;
                }
                $i = $i + (var$8 + var$13 | 0) | 0;
                var$8 = 0;
            } else {
                $u = var$8 + var$13 | 0;
                if ($u < var$7.length)
                    $l = var$9;
                else {
                    $l = var$9 + 1 | 0;
                    var$5[var$9] = otciu_UnicodeHelper$Range__init_($i, $i + var$8 | 0, ju_Arrays_copyOf(var$6, var$8));
                    $i = $i + $u | 0;
                    var$8 = 0;
                }
                while (true) {
                    $u = var$13 + (-1) | 0;
                    if (var$13 <= 0)
                        break;
                    var$13 = var$8 + 1 | 0;
                    var$7[var$8] = var$12;
                    var$8 = var$13;
                    var$13 = $u;
                }
                var$9 = $l;
            }
            var$11 = var$11 + 1 | 0;
        }
        jl_Character_classMapping = ju_Arrays_copyOf0($classes, var$9);
    }
    $classes = jl_Character_classMapping.data;
    $l = 0;
    $u = $classes.length - 1 | 0;
    while ($l <= $u) {
        $i = ($l + $u | 0) / 2 | 0;
        $range = $classes[$i];
        if ($codePoint >= $range.$end4)
            $l = $i + 1 | 0;
        else {
            $u = $range.$start3;
            if ($codePoint >= $u)
                return $range.$data12.data[$codePoint - $u | 0];
            $u = $i - 1 | 0;
        }
    }
    return 0;
},
jl_Character_isLetterOrDigit = $codePoint => {
    a: {
        switch (jl_Character_getType($codePoint)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 9:
                break;
            case 6:
            case 7:
            case 8:
                break a;
            default:
                break a;
        }
        return 1;
    }
    return 0;
},
jl_Character_isIdentifierIgnorable = $codePoint => {
    a: {
        if (!($codePoint >= 0 && $codePoint <= 8) && !($codePoint >= 14 && $codePoint <= 27)) {
            if ($codePoint < 127)
                break a;
            if ($codePoint > 159)
                break a;
        }
        return 1;
    }
    return jl_Character_getType($codePoint) != 16 ? 0 : 1;
},
jl_Character_isSpaceChar = $codePoint => {
    switch (jl_Character_getType($codePoint)) {
        case 12:
        case 13:
        case 14:
            break;
        default:
            return 0;
    }
    return 1;
},
jl_Character_isWhitespace = $codePoint => {
    switch ($codePoint) {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 28:
        case 29:
        case 30:
        case 31:
            break;
        case 160:
        case 8199:
        case 8239:
            return 0;
        default:
            return jl_Character_isSpaceChar($codePoint);
    }
    return 1;
},
jl_Character__clinit_ = () => {
    jl_Character_TYPE = $rt_cls($rt_charcls);
    jl_Character_characterCache = $rt_createArray(jl_Character, 128);
},
jl_Character_acquireLowerCaseMapping$$create = () => {
    return {"value" : "TW  H#F#U 4%F#O #F#/ d%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a1# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #<+#%# #%# #%# \'.3#%# #%# #{1#%# #w1%%# %J\'#k1#o1#%# #w1#!3# #23#*3#%# \'23#:3# #>3#%# #%# #%# #N3#%# #N3# %%# #N3#%# #J3%%# #%# #R3#%# \'%# /)#%# #)#%# #)#%# #%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# %)#%# #%# #8)#L%#%# #%# #%# #"
    + "%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a+# #%# #%# #%# #%# #%# #%# #%# #%# #%# /B45#%# #,/#645# %%# #P1#!\'#*\'#%# #%# #%# #%# #%# <-%# #%# \'%# 1&++ %_## #Z#)k%%g%% #F#W hA# 1%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# +]%# %%# #?#%# %a+\'N\'AF#b &#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #^#%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%"
    + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# %*%r iB#oq-&# _?gejg#A1 a$#%# -mo%&# {-%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3,4/# #%# #%"
    + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3C1 1C1 1C1 1C1 1C1 3C/ 1C1 QC1 1C1 1C1 1C%8\'%G# 7i\')G# 7C%D)\' 7C%u)%?# 7X+%P+%G# L-q*/# \'Pw/#8m/# -6## |bA G%# kC.#U !r*%&# &#%# #,05#qX\'#H.5# %%# #%# #%# #e25#D05#q25#m25# #%# %%# 1865%%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# "
    + "#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 1%# #%# )%# (a=%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# G%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# y%%# #%# #%# #%# #%# #%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 5%# #%# #4Fd#%# #%# #%# #%# #%# )%# #<{p# %%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #P}p#}}p#m}p#D}p#P}p# #@yp#D{p#Lyp#Br#%# #%# #%"
    + "# #%# #%# #%# #%# #%# #,%#L}p#LJd#%# #%# #$$r#%# \'%# +%# #%# #%# #P6rM \'%# ,T5F#U TUg#r {%g#r >\'c#p Lnk%F# .\'F#S HB#F#b o@5F#b Jo=N#f "};
},
jl_Character_acquireUpperCaseMapping$$create = () => {
    return {"value" : "NY  ,%H#U :#>b# vH#O #H#/:+# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #,5# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'#(;#N1# %\'# #\'# %\'# \'\'# +\'# %6)# \'\'#*/#N6r# %_+# %\'# #\'# #\'# %\'# )\'# %\'# \'\'# #\'# %\'# \'\'# #J%# +\'#+# #\'#+# #\'#+# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#L\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'#+# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#"
    + " #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# %665% #\'# )\'# #\'# #\'# #\'# #\'#o25#c25#k25#03#}1# #y1% #m1# #q1#{}p# \'y1#k}p# #$3#!$r#:{p#N}p# #,3#43#N}p#*05#B}p# %43# #B05#<3# %@3# /F.5# %P3# #J}p#P3# \'B{p#P3#$\'#L3%,\'# +T3# 5Jyp#>yp# Z\'_\'# x\'# #\'# \'\'\' #_+\' !#a##]#\' #H#CD##H#3m%#i%% #e%#P%# \'(%#D%#C# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#i\'#P\'#=#(+# #4)# %\'# %\'# .#H#bP\'A #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 3\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'"
    + "# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'#`# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'% &#,%n mB#ko%x %ko%\' RAC1 >$#yu+#uu+#Pu+#Hu+%Lu+#0u+#io+#>@d# #\'- (+2Fd# \'oX\'# AJJd# N%\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#"
g\')B)%V+%s)%N+)A1 1A1 1A1 1A% #E# 5<m-# )E# 9A% =A% \'=# ;E# R/8## ddA )\'# @E0#U Nr,%&# #\'# \'D45#845# #\'#"
    + " #\'# #\'# -\'# %\'# 5\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# #\'# )\'- /qq-&# i]=\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# G\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# y%\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #"
    + "\'# #\'# #\'# #\'# #\'# #\'# #\'# 5\'# #\'# %\'# #\'# #\'# #\'# #\'# )\'# )\'# #\'#*%# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 7\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# )\'# #\'# %\'\' #\'% )\'# #\'# #\'# U\'# cEDr# Yiejg# e*5H#U eUi#r {%i#r <\'e#t {nm%:# V%H#^ >B#H#b o@5H#b No=P#f "};
},
jl_Character_obtainDigitMapping$$create = () => {
    return {"value" : "kE*% %%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_H#T#%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%{CG%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%6)G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%!i#G"
    + "%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%*;G%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%:/G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%{/G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%R@dG%%%%%%%%%%%%%%%%%%R[G%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%!#G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%cCG%%%%%%%%%%%%%%%%%%o*IG%%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%c:#T#%%%%%%%%%%%%%%%%%%w&%G%%%%%"
    + "%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%_fG%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%_%G%%%%%%%%%%%%%%%%%%>-G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%w=G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%>AG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%B\'G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%oYG%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%g5G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%ow?G%%%%%%%%%%%%%%%%%%s4%G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%"
    + "%%%%:OG%%%%%%%%%%%%%%%%%%V*OG%%%%%%%%%%%%%%%%%%VZ%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%!8%G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%sKG%%%%%%%%%%%%%%%%%%k5G%%%%%%%%%%%%%%%%%%.lG%%%%%%%%%%%%%%%%%%wN)G%%%%%%%%%%%%%%%%%%"};
},
jl_Character_obtainClasses$$create = () => {
    return {"value" : "PA-Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:PB-9[%=9<=&>:1=<=:L#<#Y#<,&?L$9B8:B(C9:C)!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!C$B##!#B##B$C#B%#B##B$C$B##B##!#!#B##!C#!#B##B$#!#B#C#&!C$F%!$#!$#!$#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!C#!$#!#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C(B##B#C#!#B%#!#!#!#!Cg&C<E3]%E-]/E&](%<%]2b\'Q! !#!#%<!#A#%C$9!A%]#!9B$ ! B##B2 B*CD!C#B$C$!#!#!#!#!#!#!#!#!#!#!#!C&!#:!#B#C#BTCQ!#!#!#!#"
    + "!#!#!#!#!#!#!#!#!#!#!#!#!#=G&H#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!# BGA#%Y\'CJ95A#^#; GN5\'9G#9G#9\'A)F<A%F%Y#A,Q\'Z$Y#;Y#^#G,91Y$FA%F+G6J+Y%F#\'b&D! 9&G(1=G\'E#G#=G%F#J+F$^#&Y/ 1&\'F?G<A#b&:! G,&A/J+FBG*E#=Y$%A#\'[#F7G%%G*%G$%G&A#Y0 F:G$A#9 F,A&F9<F\' Q#A&G*FJ%G91GA)FW\')\'&I$G)I%\'I#&G(F+G#Y#J+9%F0\'I# F)A#F#A#F7 F( &A$F%A#\'&I$G%A#I#A#I#\'&A))A%F# F$G#A#J+F#[#L\'=;&9\'A#G#) F\'A%F#A#F7 F( F# F#"
    + " F#A#\' I$G#A%G#A#G$A$\'A(F% &A(J+G#F$\'9A+G#) F* F$ F7 F( F# F&A#\'&I$G& G#) I#\'A#&A0F#G#A#J+9;A(&G\' \'I# F)A#F#A#F7 F( F# F&A#\'&)\')G%A#I#A#I#\'A(G#)A%F# F$G#A#J+=&L\'A+\'& F\'A$F$ F%A$F# & F#A$F#A$F$A$F-A%I#\'I#A$I$ I$\'A#&A\')A/J+L$^\';=A&\'I$\'F) F$ F8 F1A#\'&G$I% G$ G%A(G# F$A#&A#F#G#A#J+A(9L(=&\'I#9F) F$ F8 F+ F&A#\'&)\'I& \'I# I#G#A(I#A\'F# F#G#A#J+ F#)A-G#I#F* F$ FJG#&I$G% I$ I$\'&=A%F$)L(F$G#A#J+L*=F\' \'I# F3A$F9 F* &A#F(A$\'A%I$G$ \' I)A\'J+A#I#9A-FQ\'F#G(A%;F\'%G)9J+Y#AFF# & F& F9 & F+\'F#G*&A#F& % G( J+A#F%AA&^$Y0=9^$G#^\'J+"
    + "L+=\'=\'=\'6767I#F) FEA%G/)G&9G#F&G, GE ^)\'^\' ^#Y&^%Y#AFFLI#G%)G\')G#I#G#&J+Y\'F\'I#G#F%G$&I$F#I(F$G%F.\'I#G#I\'\'&)J+I$\'^#BG !A&!A#CL9%C$b&*&  F%A#F( & F%A#FJ F%A#FB F%A#F( & F%A#F0 FZ F%A#FeA#G$Y*L5A$F1^+A\'b!7! A#C\'A#5b&M* =9F2-F;67A$FmY$K$F)A(F3G$)A*F4G#)Y#A*F3G#A-F. F$ G#A-FUG#)G(I)\'I#G,Y$%Y$;&\'A#J+A\'L+A\'Y\'5Y%G$1\'J+A\'FD%FVA(F&G#FC\'&A&FhA+F@ G$I%G#I$A%I#\'I\'G$A%=A$Y#J+F?A#F&A,FMA%F;A\'J+,A$^CF8G#I#\'A#Y#FV)\')G( \')\'I#G)I\'G+A#\'J+A\'J+A\'Y(%Y\'A#G/(G1ARG%)FP\')G&)\'I&\'I#F) Y#J+Y(^+G*^*Y$G#)F?)G%I#G#)G$F#J+FM\')G#I$\')G$I#A)Y%"
    + "FEI)G)I#G#A$Y&J+A$F$J+F?E\'Y#C*!#A&BLA#B$Y)A)G$9G.)G(F%\'F\'\'F#)G#&A&CMEaC.%CCEFGb!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*B)C\'A#B\'A#C)B)C)B)C\'A#B\'A#C) ! ! ! !C)B)C/A#C)D)C)D)C)D)C& C#B%$<#]$C$ C#B%$]$C%A#C#B% ]$C)B&]$A#C$ C#B%$]# M,Q&U\'Y#>?6_#?6>Y)./Q&-Y*>?Y%X#Y$:67Y,:98Y+-Q& Q+,%A#L\'Z$67%L+Z$67 E.A$[BA0"
    + "G.H%\'H$G-A0^#!^%!^##B$C#B$#=!^#:B&^\'!=!=!=B%=#B%#F%#^#C#B#Z&!C%=:^##=L1KD!#K%,^#A%Z&^&Z#^%:^#:^#:^(:^@Z#^#:=:^@b:-% ^)6767^5Z#^(67b=2! :^?Z:^IZ\'^jA7^,A6L^^pL7b=X# :^*:^WZ)b=P! :b=Y$ 67676767676767L?^MZ&67Z@6767676767Z1b= % b:$# 6767676767676767676767Za6767ZA67b:#% ^QZ6^#Z\'^HA#^A b=J! BQCQ!#B$C#!#!#!#B%#!C#!C\'E#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#^\'!#!#G$!#A&Y%,Y#CG #A&#A#FYA(%9A/\'F8A*F( F( F( F( F( F( F( F( GAY#>?>?Y$>?9>?Y*5Y#59>?Y#>?6767676"
    + "7Y&%Y+U#Y%596Y.^#Y$676767675AC^; b=:! A-b=7$ A;^1-Y$=%&+6767676767^#6767676756W#=K*G%I#5E&^#K$%&9^# b&7! A#G#]#E#&5b&;! 9E$&A&FL b&?!  ^#L%^+FA^GA*=F1^@ L+^?L)=L0^AL+^HL0b= & &b `G!&^b&b   %b `(!F7%b&X2 A$^XA*FIE\'Y#b&-% %Y$F1J+F#A5!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#&\'H$9G+9%!#!#!#!#!#!#!#!#!#!#!#!#!#!#E#G#FhK+G#Y\'A)]8E*]#!#!#!#!#!#!#!C$!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#%C)!#!#B##!#!#!#!#%]#!#!#&!#!C$!#!#!#!#!#!#!#!#!#!#B&#B&#!#!#!#!#!#!#!#B%#!#B##A#!# # #!#!#!#!A6E$!#&"
    + "E##F(\'F$\'F%\'F8I#G#)^%\'A$L\'^#;=A\'FUY%A)I#FSI1G#A)Y#J+A\'G3F\'Y$&9F#\'J+F=G)Y#F8G,I#A,9F>A$G$)FP\'I#G%I#G#I$Y. %J+A%Y#F&\'%F*J+F& FJG\'I#G#I#G#A*F$\'F)\')A#J+A#Y%F1%F\'^$&)\')FS\'&G$F#G#F&G#&\'&A9F#%Y#F,)G#I#Y#&E#)\'A+F\'A#F\'A#F\'A*F( F( CL<E%C*%]#A%b#1! FDI#\'I#\'I#9)\'A#J+A\'&b CO#&A-F8A%FRA%4b `. T#b `! T#b `0 43b `D!3b&O& A#b&K! AGC(A-C&A&&\'F+:F. F& & F# F# b&M! ]2A1b&L& 76^1FbA#FWA(=AAF-;^$G1Y(679A\'G19U#X#6767676767676767Y#67Y%X$Y$ Y%5676767Y$:5Z$ 9;Y#A%F& b&(# A#1 Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:67967Y#F+%FNE#F@A$F\'A#F"
    + "\'A#F\'A#F$A$[#:<=[# =Z%^#A+Q$^#A#F- F; F4 F# F0A#F/ACb&]! A&Y$A%LNA$^*KVL%^2L#^$ ^.A$=AP^N\'b ## F>A$FRA0\'L<A%FAL%A*F5+F)+A&FGG&A&F? 9FEA%F)9K&AKBICIFpA#J+A\'BEA%CEA%FIA)FUA,9B, B0 B( B# C, C0 C( C#A$FUA-b&X% A*F7A+F)A9E\' EK E*AgF\'A#& FM F#A$&A#F8 9L)F8^#L(F@A)L*AQF4 F#A&L&F7L\'A$9F;A&9AbFYA%L#F#L1A#LO&G$ G#A&G%F% F$ F>A#G$A%\'L*A(Y*A(F>L#9F>L$AAF)=F=G#A%L&Y(A*FWA$Y(F7A#L)F4A&L)F3A(Y%A-L(b 1! FkAXBTA.CTA(L\'FEG%A)J+A\'J+F%%&B7A$G&5%C7A)Z#b 1$ L@ FK G#5A#F#A1F$AXG%F>L+&A)F7G,L%Y&A7F3G%Y%AGF6L(A5F8A*)\')FVG0Y(A%L5J+\'"
    + "F#G#&A*G$)FNI$G%I#G#Y#1Y%\'A+1A#F:A(J+A\'G$FEG&)G) J+Y%&I#&A)FD\'Y#&A*G#)FQI$G*I#F%Y%G%9)\'J+&9&Y$ L5A,F3 F:I$G$I#\')G#Y\'\'F#\'A`F( & F% F0 F+9A\'FP\'I$G)A&J+A\'G#I# F)A#F#A#F7 F( F# F& G#&I#\'I%A#I#A#I$A#&A\')A&F&I#A#G(A$G&A,F+ &A#& FG &I$G\' )A#) I% I#\')\'&\'&Y# Y#A)G#A>FVI$G)I#G$)\'F%Y&J+Y# 9\'F$A?FQI$G\')\'I%G#)G#F#9&A)J+b G# FPI$G%A#I%G#)G#Y8F%G#ACFQI$G)I#\')G#Y$&A,J+A\'Y.A4FL\')\'I#G\')\'&9A\'J+A\'J5A=F<A#\')\'I#G%)G&A%J+L#Y$=F(b Z# FMI$G*)G#9b E! BACAJ+L*A-F)A#&A#F) F# F9I\' I#A#G#)\'&)&)\'Y$A*J+AhF)A#FHI$G%A#G#I%\'&9&)A<&G+FIG\')&G%"
    + "Y)\'A)&G\'I#G$FOG.)G#Y$&Y&A.FkA(Y+b W# FB9A/J+A\'F* FF)G( G\')\'&Y&A+J+L4A$Y#F?A#G7 )G()G#)G#AkF( F# FGG\'A$\' G# G(&\'A)J+A\'F\' F# FAI& G# I#\')\'&A(J+b W% F4G#I#Y#A(G#&)F. FCI#G&A$I#\')\'Y.J+\'b 6! &A0L6^)[%^2A.9b&;/ b G! b+P!  Y&A,b&%$ b -J b&B! Y#A.b&Q1 Q1\'F\'G0A+b&<` A&b&(* b ZK!F?G-I$G$J+b \'< b&Z) A(F@ J+A%Y#Fq J+A\'F?A#G&9A+FQG(Y&^%E%9=A+J+ L( F6A&F4b Q\' E$FIE#Y$J+b \'$ BACAL8Y%b F! FmA%\'&IXA(G%E.AbE#9%\'A,I#A/&b W@!&A)b&74 AJF#A(&b H,#E% E( E# b&D% A0&A>F$A#&A/F%A)b&-\' b %E b&L! A&F.A$F*A(F+A#=G#9Q%b =_ b=Q$ J+A\'b=U\'"
    + " AnGOA#G8A*b=U! A^b=W$ A+^HA#^^I#G$^$I\'Q)G)^#G(^?G%^_A6^dG$=b [! L5A-L5A-b=8! A*L:b (# B;C;B;C( C3B;C;! B#A#!A#B#A#B% B)C% # C( C,B;C;B# B%A#B) B( C;B# B% B& !A$B( C;B;C;B;C;B;C;B;C;B;C;B;C=A#B::C::C\'B::C::C\'B::C::C\'B::C::C\'B::C::C\'!#A#JSb= ) GX^%GS^)\'^/\'^#Y&A0G& G0b 12 C+&C5A\'C\'b 6$ G( G2A#G( G# G&A&E`AB\'b Q! FNA$G(E(A#J+A%&=b  & F?\'A2FMG%J+A&;b 1( F<%G%J+b 7$ F?G#&J+A%9b A( F( F% F# F0 b&&$ A#L*G(AJBCCCG(%A%J+A%Y#b 2- L]=L$;L%AnLN=L0b #$ F% F< F# &A#& F+ F% & &A\'&A%& & & F$ F# &A#& & & & & F# &A#F% F( F% "
    + "F% & F+ F2A&F$ F& F2AUZ#b /% ^MA%b=E! A-^0A#^0 ^0 ^FA+L.b=B# AY^>A.^MA%^*A(^#A/^\'b ;# b=]$ ]&b=9, A%^2A$^.A$b=X! A%b=@! A\'^-A%=A0^-A%^YA)^+A\'^IA)^?A#^-A%^#A`b=5& A-^/A#^.A$^+A&^YA(^0A#^,A\'^*A(b=4#  b==! J+b \'1 &b   %b   %b ?<#&AA&b Y !&A\'&b =$ &A#&b  ;!&A/&b PU!&A0&b M* &b CG b&?) b C8 &b *.!&A&&b ?!!&b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   "
    + "%b   %b 2R!1A?b1A! b  # b\'Q$ b   %b   %b   %b 1Y$3b   %b   %b   %b ^a$3A#3b   %b   %b   %b ^a$3"};
},
cgxgbtu_TeaBaseUrlProvider = $rt_classWithoutFields(0),
cgxgbtu_TeaDefaultBaseUrlProvider = $rt_classWithoutFields();
function jl_Enum() {
    let a = this; jl_Object.call(a);
    a.$name0 = null;
    a.$ordinal0 = 0;
}
let jl_Enum__init_ = ($this, $name, $ordinal) => {
    $this.$name0 = $name;
    $this.$ordinal0 = $ordinal;
},
jl_Enum_ordinal = $this => {
    return $this.$ordinal0;
},
jl_Enum_toString = $this => {
    return $this.$name0;
},
jl_Enum_valueOf = ($enumType, $name) => {
    let $constants, var$4, var$5, $constant, var$7;
    if (!($enumType.$platformClass.$meta.enum ? 1 : 0))
        $constants = null;
    else {
        $enumType.$platformClass.$clinit();
        $constants = (otp_Platform_getEnumConstants($enumType.$platformClass)).$clone0();
    }
    $constants = $constants;
    if ($constants === null) {
        $enumType = new jl_IllegalArgumentException;
        jl_Throwable__init_($enumType, $rt_s(75));
        $rt_throw($enumType);
    }
    $constants = $constants.data;
    var$4 = $constants.length;
    var$5 = 0;
    while (true) {
        if (var$5 >= var$4) {
            $constant = new jl_IllegalArgumentException;
            $enumType = jl_String_valueOf($enumType);
            $name = jl_String_valueOf($name);
            var$7 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$7);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$7, $rt_s(76)), $enumType), $rt_s(77)), $name), $rt_s(78));
            jl_Throwable__init_($constant, jl_AbstractStringBuilder_toString(var$7));
            $rt_throw($constant);
        }
        $constant = $constants[var$5];
        if (jl_String_equals($constant.$name0, $name))
            break;
        var$5 = var$5 + 1 | 0;
    }
    return $constant;
},
cgxgbt_TeaApplication$AppState = $rt_classWithoutFields(jl_Enum),
cgxgbt_TeaApplication$AppState_INIT = null,
cgxgbt_TeaApplication$AppState_PRELOAD_ASSETS = null,
cgxgbt_TeaApplication$AppState_DOWNLOAD_ASSETS = null,
cgxgbt_TeaApplication$AppState_APP_CREATE = null,
cgxgbt_TeaApplication$AppState_APP_LOOP = null,
cgxgbt_TeaApplication$AppState_$VALUES = null,
cgxgbt_TeaApplication$AppState_values = () => {
    return cgxgbt_TeaApplication$AppState_$VALUES.$clone0();
},
cgxgbt_TeaApplication$AppState__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cgxgbt_TeaApplication$AppState;
    jl_Enum__init_(var$1, $rt_s(79), 0);
    cgxgbt_TeaApplication$AppState_INIT = var$1;
    var$1 = new cgxgbt_TeaApplication$AppState;
    jl_Enum__init_(var$1, $rt_s(80), 1);
    cgxgbt_TeaApplication$AppState_PRELOAD_ASSETS = var$1;
    var$1 = new cgxgbt_TeaApplication$AppState;
    jl_Enum__init_(var$1, $rt_s(81), 2);
    cgxgbt_TeaApplication$AppState_DOWNLOAD_ASSETS = var$1;
    var$1 = new cgxgbt_TeaApplication$AppState;
    jl_Enum__init_(var$1, $rt_s(82), 3);
    cgxgbt_TeaApplication$AppState_APP_CREATE = var$1;
    var$1 = new cgxgbt_TeaApplication$AppState;
    jl_Enum__init_(var$1, $rt_s(83), 4);
    cgxgbt_TeaApplication$AppState_APP_LOOP = var$1;
    var$2 = $rt_createArray(cgxgbt_TeaApplication$AppState, 5);
    var$3 = var$2.data;
    var$3[0] = cgxgbt_TeaApplication$AppState_INIT;
    var$3[1] = cgxgbt_TeaApplication$AppState_PRELOAD_ASSETS;
    var$3[2] = cgxgbt_TeaApplication$AppState_DOWNLOAD_ASSETS;
    var$3[3] = cgxgbt_TeaApplication$AppState_APP_CREATE;
    var$3[4] = var$1;
    cgxgbt_TeaApplication$AppState_$VALUES = var$2;
},
cgxgbtd_WindowWrapper = $rt_classWithoutFields(0),
otj_JSObject = $rt_classWithoutFields(0),
otjb_AnimationFrameCallback = $rt_classWithoutFields(0);
function cgxgbtdi_TeaWindow() {
    let a = this; jl_Object.call(a);
    a.$window0 = null;
    a.$runnable = null;
}
let cgxgbtdi_TeaWindow_TEA_WINDOW = null,
cgxgbtdi_TeaWindow_$callClinit = () => {
    cgxgbtdi_TeaWindow_$callClinit = $rt_eraseClinit(cgxgbtdi_TeaWindow);
    cgxgbtdi_TeaWindow__clinit_();
},
cgxgbtdi_TeaWindow_get = () => {
    cgxgbtdi_TeaWindow_$callClinit();
    return cgxgbtdi_TeaWindow_TEA_WINDOW;
},
cgxgbtdi_TeaWindow__init_0 = $this => {
    cgxgbtdi_TeaWindow_$callClinit();
    $this.$window0 = window;
},
cgxgbtdi_TeaWindow__init_ = () => {
    let var_0 = new cgxgbtdi_TeaWindow();
    cgxgbtdi_TeaWindow__init_0(var_0);
    return var_0;
},
cgxgbtdi_TeaWindow_getDocument = $this => {
    return $this.$window0.document;
},
cgxgbtdi_TeaWindow_requestAnimationFrame = ($this, $runnable) => {
    $this.$runnable = $runnable;
    requestAnimationFrame(otji_JS_function(otji_JSWrapper_unwrap($this), "onAnimationFrame"));
},
cgxgbtdi_TeaWindow_getClientWidth = $this => {
    return $this.$window0.innerWidth;
},
cgxgbtdi_TeaWindow_getClientHeight = $this => {
    return $this.$window0.innerHeight;
},
cgxgbtdi_TeaWindow_addEventListener = ($this, $type, $listener) => {
    $this.$window0.addEventListener($rt_ustr($type), otji_JS_function($listener, "handleEvent"));
},
cgxgbtdi_TeaWindow__clinit_ = () => {
    cgxgbtdi_TeaWindow_TEA_WINDOW = cgxgbtdi_TeaWindow__init_();
},
cgxgbtdi_TeaWindow_onAnimationFrame$exported$0 = (var$1, var$2) => {
    let var$3;
    cgxgbtdi_TeaWindow_$callClinit();
    var$2;
    var$1 = var$1;
    var$3 = var$1.$runnable;
    var$1.$runnable = null;
    cgxgbt_TeaApplication_run(var$3);
},
jl_Math = $rt_classWithoutFields(),
jl_Math_sin = var$1 => {
    return Math.sin(var$1);
},
jl_Math_cos = var$1 => {
    return Math.cos(var$1);
},
jl_Math_sqrt = var$1 => {
    return Math.sqrt(var$1);
},
jl_Math_ceil = var$1 => {
    return Math.ceil(var$1);
},
jl_Math_pow = (var$1, $y) => {
    return jl_Math_powImpl(var$1, $y);
},
jl_Math_powImpl = (var$1, var$2) => {
    return Math.pow(var$1, var$2);
},
jl_Math_round = var$1 => {
    return var$1 + jl_Math_signum(var$1) * 0.5 | 0;
},
jl_Math_random = () => {
    return jl_Math_randomImpl();
},
jl_Math_randomImpl = () => {
    return Math.random();
},
jl_Math_min = ($a, $b) => {
    if ($a < $b)
        $b = $a;
    return $b;
},
jl_Math_max = ($a, $b) => {
    if ($a > $b)
        $b = $a;
    return $b;
},
jl_Math_minImpl = (var$1, var$2) => {
    return Math.min(var$1, var$2);
},
jl_Math_min0 = (var$1, var$2) => {
    return jl_Math_minImpl(var$1, var$2);
},
jl_Math_maxImpl = (var$1, var$2) => {
    return Math.max(var$1, var$2);
},
jl_Math_max0 = (var$1, var$2) => {
    return jl_Math_maxImpl(var$1, var$2);
},
jl_Math_abs0 = $n => {
    if ($n < 0)
        $n =  -$n | 0;
    return $n;
},
jl_Math_absImpl = var$1 => {
    return Math.abs(var$1);
},
jl_Math_abs = var$1 => {
    return jl_Math_absImpl(var$1);
},
jl_Math_absImpl0 = var$1 => {
    return Math.abs(var$1);
},
jl_Math_sign = var$1 => {
    return Math.sign(var$1);
},
jl_Math_sign0 = var$1 => {
    return Math.sign(var$1);
},
jl_Math_signum = var$1 => {
    return jl_Math_sign0(var$1);
},
jl_IllegalArgumentException = $rt_classWithoutFields(jl_RuntimeException),
jl_IllegalArgumentException__init_0 = ($this, $message) => {
    jl_Throwable__init_($this, $message);
},
jl_IllegalArgumentException__init_ = var_0 => {
    let var_1 = new jl_IllegalArgumentException();
    jl_IllegalArgumentException__init_0(var_1, var_0);
    return var_1;
},
ju_Objects = $rt_classWithoutFields(),
ju_Objects_equals = ($a, $b) => {
    if ($a === $b)
        return 1;
    return $a !== null ? $a.$equals($b) : $b !== null ? 0 : 1;
},
ju_Objects_hashCode = $o => {
    return $o !== null ? $o.$hashCode() : 0;
},
ju_Objects_checkFromIndexSize = ($fromIndex, $size, $length) => {
    let var$4;
    if ($fromIndex >= 0 && $size >= 0 && $size <= ($length - $fromIndex | 0))
        return $fromIndex;
    var$4 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$4);
    $rt_throw(var$4);
};
function otji_JSWrapper() {
    jl_Object.call(this);
    this.$js = null;
}
let otji_JSWrapper__init_0 = ($this, $js) => {
    $this.$js = $js;
},
otji_JSWrapper__init_ = var_0 => {
    let var_1 = new otji_JSWrapper();
    otji_JSWrapper__init_0(var_1, var_0);
    return var_1;
},
otji_JSWrapper_wrap = $jsNumber => {
    let $type, $isObject, $wrappers, $existingRef, $existing, $wrapper, $stringWrappers, $stringFinalizationRegistry, $wrapperAsJs, $numberWrappers, $numberFinalizationRegistry;
    if ($jsNumber === null)
        return null;
    $type = $rt_str(typeof $jsNumber);
    $isObject = !jl_String_equals($type, $rt_s(84)) && !jl_String_equals($type, $rt_s(85)) ? 0 : 1;
    otji_JSWrapper$Helper_$callClinit();
    $wrappers = otji_JSWrapper$Helper_wrappers;
    if ($wrappers !== null) {
        if ($isObject) {
            $existingRef = $wrappers.get($jsNumber);
            $existing = (typeof $existingRef == 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            $wrappers.set($jsNumber, new WeakRef($wrapper));
            return $wrapper;
        }
        if (jl_String_equals($type, $rt_s(86))) {
            $stringWrappers = otji_JSWrapper$Helper_stringWrappers;
            $stringFinalizationRegistry = otji_JSWrapper$Helper_stringFinalizationRegistry;
            $existingRef = $stringWrappers.get($jsNumber);
            $existing = (typeof $existingRef == 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            $wrapperAsJs = $wrapper;
            $stringWrappers.set($jsNumber, new WeakRef($wrapperAsJs));
            otji_JSWrapper_register$js_body$_4($stringFinalizationRegistry, $wrapperAsJs, $jsNumber);
            return $wrapper;
        }
        if (jl_String_equals($type, $rt_s(87))) {
            $numberWrappers = otji_JSWrapper$Helper_numberWrappers;
            $numberFinalizationRegistry = otji_JSWrapper$Helper_numberFinalizationRegistry;
            $existingRef = $numberWrappers.get($jsNumber);
            $existing = (typeof $existingRef == 'undefined' ? 1 : 0) ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            $wrapperAsJs = $wrapper;
            $numberWrappers.set($jsNumber, new WeakRef($wrapperAsJs));
            otji_JSWrapper_register$js_body$_4($numberFinalizationRegistry, $wrapperAsJs, $jsNumber);
            return $wrapper;
        }
        if (jl_String_equals($type, $rt_s(88))) {
            $existingRef = otji_JSWrapper$Helper_undefinedWrapper;
            $existing = $existingRef === null ? void 0 : $existingRef.deref();
            if (!(typeof $existing == 'undefined' ? 1 : 0))
                return $existing;
            $wrapper = otji_JSWrapper__init_($jsNumber);
            otji_JSWrapper$Helper_undefinedWrapper = new WeakRef($wrapper);
            return $wrapper;
        }
    }
    return otji_JSWrapper__init_($jsNumber);
},
otji_JSWrapper_unwrap = $o => {
    if ($o === null)
        return null;
    return !($o instanceof otji_JSWrapper) ? $o : $o.$js;
},
otji_JSWrapper_javaToJs = $o => {
    if ($o === null)
        return null;
    return $o instanceof $rt_objcls() && $o instanceof otji_JSWrapper ? otji_JSWrapper_unwrap($o) : $o;
},
otji_JSWrapper_jsToJava = $o => {
    if ($o === null)
        return null;
    return $o instanceof $rt_objcls() ? $o : otji_JSWrapper_wrap($o);
},
otji_JSWrapper_register$js_body$_4 = (var$1, var$2, var$3) => {
    return var$1.register(var$2, var$3);
},
cgxgbta_TeaWebAgent = $rt_classWithoutFields(),
cgxgbta_TeaWebAgent_createAgent$js_body$_1 = () => {
    var userAgent = navigator.userAgent.toLowerCase();
    return { firefox : userAgent.indexOf('firefox') !=  -1, chrome : userAgent.indexOf('chrome') !=  -1, safari : userAgent.indexOf('safari') !=  -1, opera : userAgent.indexOf('opera') !=  -1, IE : userAgent.indexOf('msie') !=  -1, macOS : userAgent.indexOf('mac') !=  -1, linux : userAgent.indexOf('linux') !=  -1, windows : userAgent.indexOf('win') !=  -1, userAgent : userAgent };
},
jl_System = $rt_classWithoutFields(),
jl_System_outCache = null,
jl_System_errCache = null,
jl_System_properties = null,
jl_System_out = () => {
    let var$1;
    if (jl_System_outCache === null) {
        var$1 = new otcic_JSStdoutPrintStream;
        otcic_JsConsolePrintStream__init_(var$1);
        jl_System_outCache = var$1;
    }
    return jl_System_outCache;
},
jl_System_err = () => {
    let var$1;
    if (jl_System_errCache === null) {
        var$1 = new otcic_JSStderrPrintStream;
        otcic_JsConsolePrintStream__init_(var$1);
        jl_System_errCache = var$1;
    }
    return jl_System_errCache;
},
jl_System_arraycopy = ($src, $srcPos, $dest, $destPos, $length) => {
    let $srcType, $targetType, $srcArray, $i, var$10, var$11, var$12, $elem, var$14;
    if ($src !== null && $dest !== null) {
        if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
            a: {
                b: {
                    if ($src !== $dest) {
                        $srcType = jl_Class_getComponentType(jl_Object_getClass($src));
                        $targetType = jl_Class_getComponentType(jl_Object_getClass($dest));
                        if ($srcType !== null && $targetType !== null) {
                            if ($srcType === $targetType)
                                break b;
                            if (!jl_Class_isPrimitive($srcType) && !jl_Class_isPrimitive($targetType)) {
                                $srcArray = $src;
                                $i = 0;
                                var$10 = $srcPos;
                                while ($i < $length) {
                                    var$11 = $srcArray.data;
                                    var$12 = var$10 + 1 | 0;
                                    $elem = var$11[var$10];
                                    var$14 = $targetType.$platformClass;
                                    if (!($elem !== null && !(typeof $elem.constructor.$meta === 'undefined' ? 1 : 0) && otp_Platform_isAssignable($elem.constructor, var$14) ? 1 : 0)) {
                                        jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $i);
                                        $src = new jl_ArrayStoreException;
                                        jl_Exception__init_($src);
                                        $rt_throw($src);
                                    }
                                    $i = $i + 1 | 0;
                                    var$10 = var$12;
                                }
                                jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                                return;
                            }
                            if (!jl_Class_isPrimitive($srcType))
                                break a;
                            if (jl_Class_isPrimitive($targetType))
                                break b;
                            else
                                break a;
                        }
                        $src = new jl_ArrayStoreException;
                        jl_Exception__init_($src);
                        $rt_throw($src);
                    }
                }
                jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                return;
            }
            $src = new jl_ArrayStoreException;
            jl_Exception__init_($src);
            $rt_throw($src);
        }
        $src = new jl_IndexOutOfBoundsException;
        jl_Exception__init_($src);
        $rt_throw($src);
    }
    $dest = new jl_NullPointerException;
    jl_Throwable__init_($dest, $rt_s(89));
    $rt_throw($dest);
},
jl_System_fastArraycopy = ($src, $srcPos, $dest, $destPos, $length) => {
    if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
        jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
        return;
    }
    $src = new jl_IndexOutOfBoundsException;
    jl_Exception__init_($src);
    $rt_throw($src);
},
jl_System_doArrayCopy = (var$1, var$2, var$3, var$4, var$5) => {
    if (var$5 !== 0) {
        if (typeof var$1.data.buffer !== 'undefined') {
            var$3.data.set(var$1.data.subarray(var$2, var$2 + var$5), var$4);
        } else if (var$1 !== var$3 || var$4 < var$2) {
            for (let i = 0;i < var$5;i = i + 1 | 0) {
                var$3.data[var$4++] = var$1.data[var$2++];
            }
        } else {
            var$2 = var$2 + var$5 | 0;
            var$4 = var$4 + var$5 | 0;
            for (let i = 0;i < var$5;i = i + 1 | 0) {
                var$3.data[ --var$4] = var$1.data[ --var$2];
            }
        }
    }
},
jl_System_currentTimeMillis = () => {
    return Long_fromNumber((new Date()).getTime());
},
jl_System_setProperty = (var$1, var$2) => {
    let var$3, var$4, var$5;
    if (jl_System_properties === null) {
        var$3 = new ju_Properties;
        ju_Hashtable__init_(var$3);
        var$4 = var$3;
        ju_Hashtable_put(var$4, $rt_s(90), $rt_s(91));
        ju_Hashtable_put(var$4, $rt_s(48), $rt_s(92));
        ju_Hashtable_put(var$4, $rt_s(93), $rt_s(94));
        ju_Hashtable_put(var$4, $rt_s(95), $rt_s(96));
        ju_Hashtable_put(var$4, $rt_s(97), $rt_s(28));
        ju_Hashtable_put(var$4, $rt_s(98), $rt_s(99));
        ju_Hashtable_put(var$4, $rt_s(100), $rt_s(91));
        ju_Hashtable_put(var$4, $rt_s(101), $rt_s(94));
        var$5 = new ju_Properties;
        ju_Hashtable__init_(var$5);
        var$5.$defaults = var$3;
        jl_System_properties = var$5;
    }
    return ju_Hashtable_put(jl_System_properties, var$1, var$2);
},
cbg_Graphics = $rt_classWithoutFields(0);
function cgxgbt_TeaGraphics() {
    let a = this; jl_Object.call(a);
    a.$context = null;
    a.$canvas0 = null;
    a.$config0 = null;
    a.$gl20 = null;
    a.$gl30 = null;
    a.$glVersion = null;
    a.$fps = 0.0;
    a.$lastTimeStamp = Long_ZERO;
    a.$frameId = Long_ZERO;
    a.$deltaTime = 0.0;
    a.$time = 0.0;
    a.$frames = 0;
}
let cgxgbt_TeaGraphics__init_ = ($this, $config) => {
    let $attr, $canvas1, $window, $document, $versionString, $vendorString, $rendererString, $width, $currentWindow, var$11, var$12;
    $this.$fps = 0.0;
    $this.$lastTimeStamp = jl_System_currentTimeMillis();
    $this.$frameId = Long_fromInt(-1);
    $this.$deltaTime = 0.0;
    $this.$time = 0.0;
    $this.$config0 = $config;
    $this.$canvas0 = (cgxgbtdi_TeaWindow_getDocument(cgxgbtdi_TeaWindow__init_())).getElementById($rt_ustr($config.$canvasID));
    $attr = cgxgbtg_WebGLContextAttributesWrapper_create$js_body$_14();
    $attr.alpha = !!$config.$alpha;
    $attr.antialias = !!$config.$antialiasing;
    $attr.stencil = !!$config.$stencil;
    $attr.premultipliedAlpha = !!$config.$premultipliedAlpha0;
    $attr.preserveDrawingBuffer = !!$config.$preserveDrawingBuffer;
    $attr.powerPreference = $rt_ustr($config.$powerPreference);
    $canvas1 = $this.$canvas0;
    if ($config.$useGL30)
        $this.$context = $canvas1.getContext("webgl2", $attr);
    a: {
        if ($config.$useGL30) {
            $window = $this.$context;
            if ($window !== null) {
                if (!$config.$useDebugGL)
                    $document = cgxgbt_TeaGL30__init_0($window);
                else {
                    $document = new cgxgbt_TeaGL30Debug;
                    cgxgbt_TeaGL30__init_($document, $window);
                }
                $this.$gl30 = $document;
                $this.$gl20 = $document;
                break a;
            }
        }
        $document = $canvas1.getContext("webgl", $attr);
        $this.$context = $document;
        if (!$config.$useDebugGL)
            $window = cgxgbt_TeaGL20__init_0($document);
        else {
            $window = new cgxgbt_TeaGL20Debug;
            cgxgbt_TeaGL20__init_($window, $document);
        }
        $this.$gl20 = $window;
    }
    $versionString = $this.$gl20.$glGetString(7938);
    $vendorString = $this.$gl20.$glGetString(7936);
    $rendererString = $this.$gl20.$glGetString(7937);
    $canvas1 = new cbggg_GLVersion;
    $window = cbg_Application$ApplicationType_WebGL;
    $canvas1.$TAG = $rt_s(102);
    if ($window === cbg_Application$ApplicationType_Android)
        $canvas1.$type2 = cbggg_GLVersion$Type_GLES;
    else if ($window === cbg_Application$ApplicationType_iOS)
        $canvas1.$type2 = cbggg_GLVersion$Type_GLES;
    else if ($window === cbg_Application$ApplicationType_Desktop)
        $canvas1.$type2 = cbggg_GLVersion$Type_OpenGL;
    else if ($window === cbg_Application$ApplicationType_Applet)
        $canvas1.$type2 = cbggg_GLVersion$Type_OpenGL;
    else if ($window !== $window)
        $canvas1.$type2 = cbggg_GLVersion$Type_NONE;
    else
        $canvas1.$type2 = cbggg_GLVersion$Type_WebGL;
    $window = $canvas1.$type2;
    if ($window === cbggg_GLVersion$Type_GLES)
        cbggg_GLVersion_extractVersion($canvas1, $rt_s(103), $versionString);
    else if ($window === cbggg_GLVersion$Type_WebGL)
        cbggg_GLVersion_extractVersion($canvas1, $rt_s(104), $versionString);
    else if ($window === cbggg_GLVersion$Type_OpenGL)
        cbggg_GLVersion_extractVersion($canvas1, $rt_s(105), $versionString);
    else {
        $canvas1.$majorVersion = (-1);
        $canvas1.$minorVersion = (-1);
        $canvas1.$releaseVersion = (-1);
        $vendorString = $rt_s(24);
        $rendererString = $rt_s(24);
    }
    $canvas1.$versionString = $versionString;
    $canvas1.$vendorString = $vendorString;
    $canvas1.$rendererString = $rendererString;
    $this.$glVersion = $canvas1;
    $width = $config.$width2;
    if (!($width < 0 && $config.$height1 < 0)) {
        if ($width && $config.$height1 ? 1 : 0)
            cgxgbt_TeaGraphics_setCanvasSize($this, $width, $config.$height1, 0);
        else {
            $currentWindow = cgxgbtdi_TeaWindow_get();
            cgxgbt_TeaGraphics_setCanvasSize($this, cgxgbtdi_TeaWindow_getClientWidth($currentWindow) - $config.$padHorizontal | 0, cgxgbtdi_TeaWindow_getClientHeight($currentWindow) - $config.$padVertical | 0, $config.$usePhysicalPixels);
        }
    }
    $config = $this.$context;
    var$11 = cgxgbt_TeaGraphics_getWidth($this);
    var$12 = cgxgbt_TeaGraphics_getHeight($this);
    $config.viewport(0, 0, var$11, var$12);
    $config = $this.$canvas0;
    $window = new cgxgbt_TeaGraphics$1;
    $window.$this$022 = $this;
    cgxgbt_TeaGraphics_addFullscreenChangeListener$js_body$_61($config, otji_JS_function(otji_JSWrapper_unwrap($window), "fullscreenChanged"));
},
cgxgbt_TeaGraphics__init_0 = var_0 => {
    let var_1 = new cgxgbt_TeaGraphics();
    cgxgbt_TeaGraphics__init_(var_1, var_0);
    return var_1;
},
cgxgbt_TeaGraphics_getGL20 = $this => {
    return $this.$gl20;
},
cgxgbt_TeaGraphics_getGL30 = $this => {
    return $this.$gl30;
},
cgxgbt_TeaGraphics_getWidth = $this => {
    return $this.$canvas0.width;
},
cgxgbt_TeaGraphics_getHeight = $this => {
    return $this.$canvas0.height;
},
cgxgbt_TeaGraphics_getBackBufferWidth = $this => {
    return $this.$canvas0.width;
},
cgxgbt_TeaGraphics_getBackBufferHeight = $this => {
    return $this.$canvas0.height;
},
cgxgbt_TeaGraphics_setCanvasSize = ($this, $width, $height, $usePhysicalPixels) => {
    let $density, $w, $h, $style, var$8;
    $density = 1.0;
    if ($usePhysicalPixels)
        $density = devicePixelRatio || 1;
    $w = $width * $density | 0;
    $h = $height * $density | 0;
    $this.$canvas0.width = $w;
    $this.$canvas0.height = $h;
    if ($usePhysicalPixels) {
        $style = $this.$canvas0.style;
        cgxgbtd_StyleWrapper$Unit_$callClinit();
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_StringBuilder_append(jl_StringBuilder_append1(var$8, $width), $rt_s(106));
        $style.setProperty("width", $rt_ustr(jl_AbstractStringBuilder_toString(var$8)));
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_StringBuilder_append(jl_StringBuilder_append1(var$8, $height), $rt_s(106));
        $style.setProperty("height", $rt_ustr(jl_AbstractStringBuilder_toString(var$8)));
    }
},
cgxgbt_TeaGraphics_supportsExtension = ($this, $extensionName) => {
    return $this.$context.getExtension($rt_ustr($extensionName)) === null ? 0 : 1;
},
cgxgbt_TeaGraphics_addFullscreenChangeListener$js_body$_61 = (var$1, var$2) => {
    if (var$1.requestFullscreen) {
        document.addEventListener("fullscreenchange", var$2, false);
    }
    if (var$1.webkitRequestFullScreen) {
        document.addEventListener("webkitfullscreenchange", var$2, false);
    }
    if (var$1.mozRequestFullScreen) {
        document.addEventListener("mozfullscreenchange", var$2, false);
    }
    if (var$1.msRequestFullscreen) {
        document.addEventListener("msfullscreenchange", var$2, false);
    }
},
cgxgbta_AssetDownloader = $rt_classWithoutFields(0);
function cgxgbta_AssetDownloadImpl() {
    let a = this; jl_Object.call(a);
    a.$queue = 0;
    a.$showLogs = 0;
}
let cgxgbta_AssetDownloadImpl_subtractQueue = $this => {
    $this.$queue = $this.$queue - 1 | 0;
},
cgxgbta_AssetDownloadImpl_addQueue = $this => {
    $this.$queue = $this.$queue + 1 | 0;
},
cgxgbta_AssetDownloadImpl_load = ($this, $async, $url, $type, $listener) => {
    let $internalListener, var$6;
    $internalListener = new cgxgbta_AssetDownloadImpl$1;
    $internalListener.$this$06 = $this;
    $internalListener.$val$listener = $listener;
    if ($this.$showLogs) {
        $listener = jl_System_out();
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(107)), $url);
        var$6 = jl_AbstractStringBuilder_toString(var$6);
        otcic_JsConsolePrintStream_println($listener, var$6);
    }
    a: {
        cgxgbta_AssetDownloadImpl$3_$callClinit();
        switch (cgxgbta_AssetDownloadImpl$3_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$assetloader$AssetType.data[$type.$ordinal0]) {
            case 1:
                break;
            case 2:
                $type = null;
                cgxgbta_AssetDownloadImpl$1_onSuccess($internalListener, $url, $type);
                break a;
            default:
                $url = new cbgu_GdxRuntimeException;
                $type = jl_String_valueOf($type);
                $listener = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($listener);
                jl_StringBuilder_append(jl_StringBuilder_append($listener, $rt_s(108)), $type);
                jl_Throwable__init_($url, jl_AbstractStringBuilder_toString($listener));
                $rt_throw($url);
        }
        cgxgbta_AssetDownloadImpl_loadBinary($this, $async, $url, $internalListener, 0);
    }
},
cgxgbta_AssetDownloadImpl_loadBinary = ($this, $async, $url, $listener, $count) => {
    let var$5;
    if ($count == 3) {
        if ($listener !== null)
            cgxgbta_AssetDownloadImpl$1_onFailure($listener, $url);
        return;
    }
    cgxgbta_AssetDownloadImpl_addQueue($this);
    if (!$async)
        cgxgbta_AssetDownloadImpl_loadBinaryInternally($this, 0, $url, $listener, $count);
    else {
        var$5 = new cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0;
        var$5.$_02 = $this;
        var$5.$_10 = $url;
        var$5.$_20 = $listener;
        var$5.$_30 = $count;
        setTimeout(otji_JS_function(otji_JSWrapper_unwrap(var$5), "onTimer"), 0);
    }
},
cgxgbta_AssetDownloadImpl_loadBinaryInternally = ($this, $async, $url, $listener, $count) => {
    let $request, var$6;
    $request = new XMLHttpRequest();
    var$6 = new cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0;
    var$6.$_013 = $this;
    var$6.$_16 = $request;
    var$6.$_24 = $listener;
    var$6.$_32 = $url;
    var$6.$_40 = $count;
    var$6.$_5 = $async;
    $request.onreadystatechange = otji_JS_function(otji_JSWrapper_unwrap(var$6), "handleEvent");
    var$6 = new cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0;
    var$6.$_015 = $listener;
    $listener = otji_JSWrapper_unwrap(var$6);
    $request.addEventListener("progress", otji_JS_function($listener, "handleEvent"));
    $request.open("GET", $rt_ustr($url), !!$async);
    if ($async)
        $request.responseType = "arraybuffer";
    $request.send();
},
cgxgbta_AssetInstance = $rt_classWithoutFields(),
cgxgbta_AssetInstance_downloaderInstance = null,
cgxgbta_AssetInstance_instance = null,
cgxgbta_AssetLoader = $rt_classWithoutFields(0);
function cgxgbta_AssetLoadImpl() {
    let a = this; jl_Object.call(a);
    a.$assetTotal = 0;
    a.$baseUrl = null;
    a.$assetInQueue = null;
    a.$assetDownloader = null;
}
let cgxgbta_AssetLoadImpl_getAssetUrl = $this => {
    let var$1, var$2;
    var$1 = $this.$baseUrl;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, var$1), $rt_s(109));
    return jl_AbstractStringBuilder_toString(var$2);
},
cgxgbta_AssetLoadImpl_getScriptUrl = $this => {
    let var$1, var$2;
    var$1 = $this.$baseUrl;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, var$1), $rt_s(110));
    return jl_AbstractStringBuilder_toString(var$2);
},
cgxgbta_AssetLoadImpl_preload = ($this, $config, $assetFileUrl) => {
    let $listener, var$4, var$5;
    $listener = new cgxgbta_AssetLoadImpl$5;
    $listener.$this$02 = $this;
    $listener.$val$config = $config;
    $listener.$val$assetFileUrl = $assetFileUrl;
    $config = $this.$assetDownloader;
    var$4 = cgxgbta_AssetLoadImpl_getAssetUrl($this);
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_StringBuilder_append(jl_StringBuilder_append(var$5, var$4), $assetFileUrl);
    $assetFileUrl = jl_AbstractStringBuilder_toString(var$5);
    var$5 = cgxgbta_AssetType_Binary;
    cgxgbta_AssetDownloadImpl_load($config, 1, $assetFileUrl, var$5, $listener);
},
cgxgbta_AssetLoadImpl_loadScript = ($this, $path, $listener) => {
    let var$3, var$4, var$5, var$6, var$7;
    var$3 = $this.$assetDownloader;
    var$4 = cgxgbta_AssetLoadImpl_getScriptUrl($this);
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_StringBuilder_append(jl_StringBuilder_append(var$5, var$4), $path);
    var$6 = jl_AbstractStringBuilder_toString(var$5);
    $path = var$3;
    if ($path.$showLogs) {
        var$3 = jl_System_out();
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(111)), var$6);
        var$4 = jl_AbstractStringBuilder_toString(var$4);
        otcic_JsConsolePrintStream_println(var$3, var$4);
    }
    cgxgbta_AssetDownloadImpl_addQueue($path);
    var$5 = window.document;
    var$7 = var$5.createElement("script");
    var$3 = new cgxgbta_AssetDownloadImpl$2;
    var$3.$this$05 = $path;
    var$3.$val$url = var$6;
    var$3.$val$listener1 = $listener;
    var$7.addEventListener("load", otji_JS_function(otji_JSWrapper_unwrap(var$3), "handleEvent"));
    var$4 = new cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0;
    var$4.$_05 = $path;
    var$4.$_12 = var$6;
    var$4.$_22 = $listener;
    var$7.addEventListener("error", otji_JS_function(otji_JSWrapper_unwrap(var$4), "handleEvent"));
    $path = $rt_ustr(var$6);
    var$7.src = $path;
    var$5.body.appendChild(var$7);
},
cgxgbta_AssetLoadImpl_getQueue = $this => {
    return $this.$assetDownloader.$queue;
};
function cgxjc_JMultiplatform() {
    jl_Object.call(this);
    this.$map2 = null;
}
let cgxjc_JMultiplatform_platformMap = null;
function cgxjc_JPlatformMap() {
    jl_Object.call(this);
    this.$map0 = null;
}
let cgxjc_JPlatformMap_put = ($this, $key, $value) => {
    ju_HashMap_put($this.$map0, $key, $value);
},
cbg_Input = $rt_classWithoutFields(0);
function cbg_AbstractInput() {
    let a = this; jl_Object.call(a);
    a.$pressedKeys = null;
    a.$justPressedKeys = null;
    a.$keysToCatch = null;
}
let cbg_AbstractInput_isCatchKey = ($this, $keycode) => {
    let var$2;
    var$2 = $this.$keysToCatch;
    return !$keycode ? var$2.$hasZeroValue1 : cbgu_IntSet_locateKey(var$2, $keycode) < 0 ? 0 : 1;
},
cgxgbtd_EventListenerWrapper = $rt_classWithoutFields(0);
function cgxgbt_TeaInput() {
    let a = this; cbg_AbstractInput.call(a);
    a.$canvas = null;
    a.$justTouched0 = 0;
    a.$touchMap = null;
    a.$touched = null;
    a.$touchX = null;
    a.$touchY = null;
    a.$deltaX = null;
    a.$deltaY = null;
    a.$pressedButtons = null;
    a.$pressedKeyCount = 0;
    a.$keyJustPressed = 0;
    a.$justPressedButtons = null;
    a.$processor = null;
    a.$currentEventTimeStamp = Long_ZERO;
    a.$hasFocus = 0;
    a.$application = null;
}
let cgxgbt_TeaInput_getMouseWheelVelocity = $event => {
    let $agent, $delta, $detail, $wheelDelta;
    $agent = cgxgbt_TeaApplication_agentInfo;
    $delta = 0.0;
    $detail = $event.detail;
    $wheelDelta = $event.wheelDelta;
    if ($agent.firefox ? 1 : 0)
        $delta = ($agent.macOS ? 1 : 0) ? 1.0 * $detail : 1.0 * $detail / 3.0;
    else if ($agent.opera ? 1 : 0)
        $delta = !($agent.linux ? 1 : 0) ? (-1.0) * $wheelDelta / 40.0 : (-1.0) * $wheelDelta / 80.0;
    else if (!(!($agent.chrome ? 1 : 0) && !($agent.safari ? 1 : 0) && !($agent.IE ? 1 : 0))) {
        $delta = (-1.0) * $wheelDelta;
        $detail = $delta / 120.0;
        if (jl_Math_abs($detail) >= 1.0)
            $delta = $detail;
        else if (!($agent.windows ? 1 : 0))
            $delta = !($agent.macOS ? 1 : 0) ? $detail : $delta / 3.0;
    }
    return $delta;
},
cgxgbt_TeaInput__init_0 = ($this, $application, $canvas) => {
    $this.$keysToCatch = cbgu_IntSet__init_();
    $this.$pressedKeys = $rt_createBooleanArray(256);
    $this.$justPressedKeys = $rt_createBooleanArray(256);
    $this.$justTouched0 = 0;
    $this.$touchMap = cbgu_IntMap__init_(20);
    $this.$touched = $rt_createBooleanArray(20);
    $this.$touchX = $rt_createIntArray(20);
    $this.$touchY = $rt_createIntArray(20);
    $this.$deltaX = $rt_createIntArray(20);
    $this.$deltaY = $rt_createIntArray(20);
    $this.$pressedButtons = cbgu_IntSet__init_();
    $this.$pressedKeyCount = 0;
    $this.$keyJustPressed = 0;
    $this.$justPressedButtons = $rt_createBooleanArray(5);
    $this.$hasFocus = 1;
    $this.$application = $application;
    $this.$canvas = $canvas;
    cgxgbt_TeaInput_hookEvents($this);
},
cgxgbt_TeaInput__init_ = (var_0, var_1) => {
    let var_2 = new cgxgbt_TeaInput();
    cgxgbt_TeaInput__init_0(var_2, var_0, var_1);
    return var_2;
},
cgxgbt_TeaInput_hookEvents = $this => {
    let $document;
    $document = $this.$canvas.ownerDocument;
    $document.addEventListener("mousedown", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("mouseup", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("mousemove", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("wheel", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("keydown", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("keyup", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $document.addEventListener("keypress", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!0);
    $this.$canvas.addEventListener("touchstart", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!1);
    $this.$canvas.addEventListener("touchmove", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!1);
    $this.$canvas.addEventListener("touchcancel", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!1);
    $this.$canvas.addEventListener("touchend", otji_JS_function(otji_JSWrapper_unwrap($this), "handleEvent"), !!1);
},
cgxgbt_TeaInput_handleMouseEvents = ($this, $touchEvent) => {
    let $type, $target, $canvas2, var$5, $button, $relativeX, $relativeY, $touch, $mouseX, $mouseY, $wheelDelta, $touches, $i, $j, $real, $equals, $touch_0, $touchId, $j_0, var$21;
    a: {
        $type = $rt_str($touchEvent.type);
        if (jl_String_equals($type, $rt_s(112))) {
            window.focus();
            $target = $touchEvent.target;
            $canvas2 = $this.$canvas;
            if ($target !== $canvas2 ? 0 : 1) {
                var$5 = $this.$touched.data;
                if (!var$5[0]) {
                    $this.$hasFocus = 1;
                    $this.$justTouched0 = 1;
                    var$5[0] = 1;
                    $button = cgxgbtu_KeyCodes_getButton($touchEvent.button);
                    cbgu_IntSet_add($this.$pressedButtons, $button);
                    $this.$justPressedButtons.data[$button] = 1;
                    $this.$deltaX.data[0] = 0;
                    $this.$deltaY.data[0] = 0;
                    if (!cgxgbt_TeaInput_isCursorCatched($this)) {
                        $relativeX = cgxgbt_TeaInput_getRelativeX0($this, $touchEvent, $this.$canvas);
                        $relativeY = cgxgbt_TeaInput_getRelativeY0($this, $touchEvent, $this.$canvas);
                        $this.$touchX.data[0] = $relativeX;
                        $this.$touchY.data[0] = $relativeY;
                    } else {
                        var$5 = $this.$touchX.data;
                        var$5[0] = var$5[0] + $touchEvent.movementX | 0;
                        var$5 = $this.$touchY.data;
                        var$5[0] = var$5[0] + $touchEvent.movementY | 0;
                    }
                    $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
                    $touch = $this.$processor;
                    if ($touch !== null)
                        $touch.$touchDown($this.$touchX.data[0], $this.$touchY.data[0], 0, cgxgbtu_KeyCodes_getButton($touchEvent.button));
                    $touchEvent.preventDefault();
                    $touchEvent.stopPropagation();
                    break a;
                }
            }
            $mouseX = cgxgbt_TeaInput_getRelativeX0($this, $touchEvent, $canvas2);
            $mouseY = cgxgbt_TeaInput_getRelativeY0($this, $touchEvent, $this.$canvas);
            if (!($mouseX >= 0.0 && $mouseX <= cgxgbt_TeaGraphics_getWidth(cbg_Gdx_graphics) && $mouseY >= 0.0 && $mouseY <= cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics)))
                $this.$hasFocus = 0;
            return;
        }
        if (jl_String_equals($type, $rt_s(113))) {
            if (!$this.$touched.data[0])
                return;
            cbgu_IntSet_remove($this.$pressedButtons, cgxgbtu_KeyCodes_getButton($touchEvent.button));
            var$5 = $this.$touched;
            var$5.data[0] = $this.$pressedButtons.$size6 <= 0 ? 0 : 1;
            if (!cgxgbt_TeaInput_isCursorCatched($this)) {
                cgxgbt_TeaInput_setDelta($this, 0, cgxgbt_TeaInput_getRelativeX0($this, $touchEvent, $this.$canvas) - $this.$touchX.data[0] | 0, cgxgbt_TeaInput_getRelativeY0($this, $touchEvent, $this.$canvas) - $this.$touchY.data[0] | 0);
                $this.$touchX.data[0] = cgxgbt_TeaInput_getRelativeX0($this, $touchEvent, $this.$canvas);
                $this.$touchY.data[0] = cgxgbt_TeaInput_getRelativeY0($this, $touchEvent, $this.$canvas);
            } else {
                cgxgbt_TeaInput_setDelta($this, 0, $touchEvent.movementX | 0, $touchEvent.movementY | 0);
                var$5 = $this.$touchX.data;
                var$5[0] = var$5[0] + $touchEvent.movementX | 0;
                var$5 = $this.$touchY.data;
                var$5[0] = var$5[0] + $touchEvent.movementY | 0;
            }
            $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
            $this.$touched.data[0] = 0;
            $touch = $this.$processor;
            if ($touch !== null)
                $touch.$touchUp($this.$touchX.data[0], $this.$touchY.data[0], 0, cgxgbtu_KeyCodes_getButton($touchEvent.button));
        } else if (!jl_String_equals($type, $rt_s(114))) {
            if (jl_String_equals($type, $rt_s(115))) {
                if ($this.$processor !== null) {
                    $wheelDelta = cgxgbt_TeaInput_getMouseWheelVelocity($touchEvent);
                    $this.$processor.$scrolled(0.0, $wheelDelta | 0);
                }
                $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
            } else if (jl_String_equals($type, $rt_s(116))) {
                $this.$justTouched0 = 1;
                $touches = $touchEvent.changedTouches;
                $i = 0;
                $j = $touches.length;
                while ($i < $j) {
                    $touch = $touches.item($i);
                    $real = $touch.identifier;
                    $canvas2 = $this.$touchMap;
                    $equals = cgxgbt_TeaInput_getAvailablePointer($this);
                    cbgu_IntMap_put($canvas2, $real, jl_Integer_valueOf($equals));
                    $this.$touched.data[$equals] = 1;
                    $this.$touchX.data[$equals] = cgxgbt_TeaInput_getRelativeX($this, $touch, $this.$canvas);
                    $this.$touchY.data[$equals] = cgxgbt_TeaInput_getRelativeY($this, $touch, $this.$canvas);
                    $this.$deltaX.data[$equals] = 0;
                    $this.$deltaY.data[$equals] = 0;
                    $touch = $this.$processor;
                    if ($touch !== null)
                        $touch.$touchDown($this.$touchX.data[$equals], $this.$touchY.data[$equals], $equals, 0);
                    $i = $i + 1 | 0;
                }
                $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
                $touchEvent.preventDefault();
            }
        } else {
            if (!cgxgbt_TeaInput_isCursorCatched($this)) {
                $relativeX = cgxgbt_TeaInput_getRelativeX0($this, $touchEvent, $this.$canvas);
                $relativeY = cgxgbt_TeaInput_getRelativeY0($this, $touchEvent, $this.$canvas);
                cgxgbt_TeaInput_setDelta($this, 0, $relativeX - $this.$touchX.data[0] | 0, $relativeY - $this.$touchY.data[0] | 0);
                $this.$touchX.data[0] = $relativeX;
                $this.$touchY.data[0] = $relativeY;
            } else {
                cgxgbt_TeaInput_setDelta($this, 0, $touchEvent.movementX | 0, $touchEvent.movementY | 0);
                var$5 = $this.$touchX.data;
                var$5[0] = var$5[0] + $touchEvent.movementX | 0;
                var$5 = $this.$touchY.data;
                var$5[0] = var$5[0] + $touchEvent.movementY | 0;
            }
            $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
            $touch = $this.$processor;
            if ($touch !== null) {
                if (!$this.$touched.data[0])
                    $touch.$mouseMoved($this.$touchX.data[0], $this.$touchY.data[0]);
                else
                    $touch.$touchDragged($this.$touchX.data[0], $this.$touchY.data[0], 0);
            }
        }
    }
    if (jl_String_equals($type, $rt_s(117))) {
        $touches = $touchEvent.changedTouches;
        $i = 0;
        $j = $touches.length;
        while ($i < $j) {
            $touch_0 = $touches.item($i);
            $real = $touch_0.identifier;
            $touchId = jl_Integer_intValue(cbgu_IntMap_get0($this.$touchMap, $real));
            cgxgbt_TeaInput_setDelta($this, $touchId, cgxgbt_TeaInput_getRelativeX($this, $touch_0, $this.$canvas) - $this.$touchX.data[$touchId] | 0, cgxgbt_TeaInput_getRelativeY($this, $touch_0, $this.$canvas) - $this.$touchY.data[$touchId] | 0);
            $this.$touchX.data[$touchId] = cgxgbt_TeaInput_getRelativeX($this, $touch_0, $this.$canvas);
            $this.$touchY.data[$touchId] = cgxgbt_TeaInput_getRelativeY($this, $touch_0, $this.$canvas);
            $touch = $this.$processor;
            if ($touch !== null)
                $touch.$touchDragged($this.$touchX.data[$touchId], $this.$touchY.data[$touchId], $touchId);
            $i = $i + 1 | 0;
        }
        $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
        $touchEvent.preventDefault();
    }
    if (jl_String_equals($type, $rt_s(118))) {
        $touches = $touchEvent.changedTouches;
        $i = 0;
        $j_0 = $touches.length;
        while ($i < $j_0) {
            $touch_0 = $touches.item($i);
            $real = $touch_0.identifier;
            $touchId = jl_Integer_intValue(cbgu_IntMap_get0($this.$touchMap, $real));
            cbgu_IntMap_remove($this.$touchMap, $real);
            $this.$touched.data[$touchId] = 0;
            $relativeX = cgxgbt_TeaInput_getRelativeX($this, $touch_0, $this.$canvas);
            $relativeY = cgxgbt_TeaInput_getRelativeY($this, $touch_0, $this.$canvas);
            cgxgbt_TeaInput_setDelta($this, $touchId, $relativeX - $this.$touchX.data[$touchId] | 0, $relativeY - $this.$touchY.data[$touchId] | 0);
            var$5 = $this.$touchX.data;
            var$5[$touchId] = $relativeX;
            var$21 = $this.$touchY.data;
            var$21[$touchId] = $relativeY;
            $touch = $this.$processor;
            if ($touch !== null)
                $touch.$touchUp(var$5[$touchId], var$21[$touchId], $touchId, 0);
            $i = $i + 1 | 0;
        }
        $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
        $touchEvent.preventDefault();
    }
    if (jl_String_equals($type, $rt_s(119))) {
        $touches = $touchEvent.changedTouches;
        $i = 0;
        $j_0 = $touches.length;
        while ($i < $j_0) {
            $touch_0 = $touches.item($i);
            $real = $touch_0.identifier;
            $touchId = jl_Integer_intValue(cbgu_IntMap_get0($this.$touchMap, $real));
            cbgu_IntMap_remove($this.$touchMap, $real);
            $this.$touched.data[$touchId] = 0;
            $relativeX = cgxgbt_TeaInput_getRelativeX($this, $touch_0, $this.$canvas);
            $relativeY = cgxgbt_TeaInput_getRelativeY($this, $touch_0, $this.$canvas);
            cgxgbt_TeaInput_setDelta($this, $touchId, $relativeX - $this.$touchX.data[$touchId] | 0, $relativeY - $this.$touchY.data[$touchId] | 0);
            var$5 = $this.$touchX.data;
            var$5[$touchId] = $relativeX;
            var$21 = $this.$touchY.data;
            var$21[$touchId] = $relativeY;
            $touch = $this.$processor;
            if ($touch !== null)
                $touch.$touchUp(var$5[$touchId], var$21[$touchId], $touchId, 0);
            $i = $i + 1 | 0;
        }
        $this.$currentEventTimeStamp = cbgu_TimeUtils_nanoTime();
        $touchEvent.preventDefault();
    }
},
cgxgbt_TeaInput_handleKeyboardEvents = ($this, $keyboardEvent) => {
    let $type, $c, var$4, $code, var$6, $keyChar;
    $type = $rt_str($keyboardEvent.type);
    if (!(jl_String_equals($type, $rt_s(120)) && $this.$hasFocus)) {
        if (jl_String_equals($type, $rt_s(121)) && $this.$hasFocus) {
            $c = $keyboardEvent.charCode & 65535;
            var$4 = $this.$processor;
            if (var$4 !== null)
                var$4.$keyTyped($c);
            if ($c == 9) {
                $keyboardEvent.preventDefault();
                $keyboardEvent.stopPropagation();
            }
        } else if (jl_String_equals($type, $rt_s(122)) && $this.$hasFocus) {
            $code = cgxgbtu_KeyCodes_keyForCode($keyboardEvent.keyCode);
            if (cbg_AbstractInput_isCatchKey($this, $code))
                $keyboardEvent.preventDefault();
            var$6 = $this.$pressedKeys.data;
            if (var$6[$code]) {
                $this.$pressedKeyCount = $this.$pressedKeyCount - 1 | 0;
                var$6[$code] = 0;
            }
            var$4 = $this.$processor;
            if (var$4 !== null)
                var$4.$keyUp($code);
            if ($code == 61) {
                $keyboardEvent.preventDefault();
                $keyboardEvent.stopPropagation();
            }
        }
    } else {
        a: {
            $code = cgxgbtu_KeyCodes_keyForCode($keyboardEvent.keyCode);
            $keyChar = 0;
            switch ($code) {
                case 67:
                    $keyChar = 8;
                    break a;
                case 112:
                    $keyChar = 127;
                    break a;
                default:
            }
        }
        if (cbg_AbstractInput_isCatchKey($this, $code))
            $keyboardEvent.preventDefault();
        if (!($code != 67 && $code != 112)) {
            $keyboardEvent.preventDefault();
            var$4 = $this.$processor;
            if (var$4 !== null) {
                var$4.$keyDown($code);
                $this.$processor.$keyTyped($keyChar);
            }
        } else {
            var$6 = $this.$pressedKeys.data;
            if (!var$6[$code]) {
                $this.$pressedKeyCount = $this.$pressedKeyCount + 1 | 0;
                var$6[$code] = 1;
                $this.$keyJustPressed = 1;
                $this.$justPressedKeys.data[$code] = 1;
                var$4 = $this.$processor;
                if (var$4 !== null)
                    var$4.$keyDown($code);
            }
        }
        if ($code == 61) {
            $keyboardEvent.preventDefault();
            $keyboardEvent.stopPropagation();
        }
    }
},
cgxgbt_TeaInput_getAvailablePointer = $this => {
    let $i, var$2, var$3, var$4, var$5, var$6;
    $i = 0;
    while (true) {
        if ($i >= 20)
            return (-1);
        a: {
            b: {
                var$2 = $this.$touchMap;
                var$3 = jl_Integer_valueOf($i);
                var$4 = var$2.$valueTable0;
                if (var$3 !== null) {
                    if (var$2.$hasZeroValue) {
                        var$2 = var$2.$zeroValue;
                        if (jl_Integer_equals(var$3, var$2)) {
                            var$5 = 1;
                            break a;
                        }
                    }
                    var$4 = var$4.data;
                    var$5 = var$4.length - 1 | 0;
                    while (true) {
                        if (var$5 < 0)
                            break b;
                        var$2 = var$4[var$5];
                        if (jl_Integer_equals(var$3, var$2))
                            break;
                        var$5 = var$5 + (-1) | 0;
                    }
                    var$5 = 1;
                    break a;
                }
                if (var$2.$hasZeroValue && var$2.$zeroValue === null) {
                    var$5 = 1;
                    break a;
                }
                var$6 = var$4.data;
                var$4 = var$2.$keyTable4;
                var$5 = var$6.length - 1 | 0;
                while (true) {
                    if (var$5 < 0)
                        break b;
                    if (var$4.data[var$5] && var$6[var$5] === null)
                        break;
                    var$5 = var$5 + (-1) | 0;
                }
                var$5 = 1;
                break a;
            }
            var$5 = 0;
        }
        if (!var$5)
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
cgxgbt_TeaInput_reset = $this => {
    let $i, var$2, $i_0;
    a: {
        if ($this.$justTouched0) {
            $this.$justTouched0 = 0;
            $i = 0;
            while (true) {
                var$2 = $this.$justPressedButtons.data;
                if ($i >= var$2.length)
                    break a;
                var$2[$i] = 0;
                $i = $i + 1 | 0;
            }
        }
    }
    b: {
        if ($this.$keyJustPressed) {
            $this.$keyJustPressed = 0;
            $i = 0;
            while (true) {
                var$2 = $this.$justPressedKeys.data;
                if ($i >= var$2.length)
                    break b;
                var$2[$i] = 0;
                $i = $i + 1 | 0;
            }
        }
    }
    $i_0 = 0;
    while ($i_0 < $this.$touchX.data.length) {
        $this.$deltaX.data[$i_0] = 0;
        $this.$deltaY.data[$i_0] = 0;
        $i_0 = $i_0 + 1 | 0;
    }
},
cgxgbt_TeaInput_setDelta = ($this, $touchId, $x, $y) => {
    $this.$deltaX.data[$touchId] = $x;
    $this.$deltaY.data[$touchId] = $y;
},
cgxgbt_TeaInput_getCompatMode = ($this, $element) => {
    if (jl_String_equals($rt_str($element.compatMode), $rt_s(123)))
        $element = $element.documentElement;
    return $element;
},
cgxgbt_TeaInput_getScrollTop = ($this, $target) => {
    return $target.scrollTop | 0;
},
cgxgbt_TeaInput_getScrollTop0 = ($this, $target) => {
    return cgxgbt_TeaInput_getScrollTop($this, cgxgbt_TeaInput_getCompatMode($this, $target));
},
cgxgbt_TeaInput_getScrollLeft = ($this, $target) => {
    return $target.scrollLeft | 0;
},
cgxgbt_TeaInput_getScrollLeft0 = ($this, $target) => {
    return cgxgbt_TeaInput_getScrollLeft($this, cgxgbt_TeaInput_getCompatMode($this, $target));
},
cgxgbt_TeaInput_getRelativeX0 = ($this, $e, $target) => {
    return jl_Math_round($target.width * 1.0 / cgxgbt_TeaInput_getClientWidth($this, $target) * ((($e.clientX - cgxgbt_TeaInput_getAbsoluteLeft($this, $target) | 0) + cgxgbt_TeaInput_getScrollLeft($this, $target) | 0) + cgxgbt_TeaInput_getScrollLeft0($this, $target.ownerDocument) | 0));
},
cgxgbt_TeaInput_getRelativeY0 = ($this, $e, $target) => {
    return jl_Math_round($target.height * 1.0 / cgxgbt_TeaInput_getClientHeight($this, $target) * ((($e.clientY - cgxgbt_TeaInput_getAbsoluteTop($this, $target) | 0) + cgxgbt_TeaInput_getScrollTop($this, $target) | 0) + cgxgbt_TeaInput_getScrollTop0($this, $target.ownerDocument) | 0));
},
cgxgbt_TeaInput_getRelativeX = ($this, $touch, $target) => {
    return jl_Math_round($target.width * 1.0 / cgxgbt_TeaInput_getClientWidth($this, $target) * ((($touch.clientX - cgxgbt_TeaInput_getAbsoluteLeft($this, $target) | 0) + cgxgbt_TeaInput_getScrollLeft($this, $target) | 0) + cgxgbt_TeaInput_getScrollLeft0($this, $target.ownerDocument) | 0));
},
cgxgbt_TeaInput_getRelativeY = ($this, $touch, $target) => {
    return jl_Math_round($target.height * 1.0 / cgxgbt_TeaInput_getClientHeight($this, $target) * ((($touch.clientY - cgxgbt_TeaInput_getAbsoluteTop($this, $target) | 0) + cgxgbt_TeaInput_getScrollTop($this, $target) | 0) + cgxgbt_TeaInput_getScrollTop0($this, $target.ownerDocument) | 0));
},
cgxgbt_TeaInput_getClientWidth = ($this, $target) => {
    return $target.clientWidth;
},
cgxgbt_TeaInput_getClientHeight = ($this, $target) => {
    return $target.clientHeight;
},
cgxgbt_TeaInput_getAbsoluteTop = ($this, $target) => {
    let var$2, var$3;
    var$2 = 0.0;
    var$3 = $target;
    while (var$3.offsetParent !== null) {
        var$2 = var$2 - var$3.scrollTop;
        var$3 = var$3.parentNode;
    }
    while ($target !== null) {
        var$2 = var$2 + $target.offsetTop;
        $target = var$3.offsetParent;
    }
    return var$2 | 0;
},
cgxgbt_TeaInput_getAbsoluteLeft = ($this, $target) => {
    let var$2, var$3;
    var$2 = 0.0;
    var$3 = $target;
    while (var$3.offsetParent !== null) {
        var$2 = var$2 - var$3.scrollLeft;
        var$3 = var$3.parentNode;
    }
    while ($target !== null) {
        var$2 = var$2 + $target.offsetLeft;
        $target = var$3.offsetParent;
    }
    return var$2 | 0;
},
cgxgbt_TeaInput_getX = $this => {
    return $this.$touchX.data[0];
},
cgxgbt_TeaInput_getY = $this => {
    return $this.$touchY.data[0];
},
cgxgbt_TeaInput_isTouched = $this => {
    let $pointer;
    $pointer = 0;
    while ($pointer < 20) {
        if ($this.$touched.data[$pointer])
            return 1;
        $pointer = $pointer + 1 | 0;
    }
    return 0;
},
cgxgbt_TeaInput_justTouched = $this => {
    return $this.$justTouched0;
},
cgxgbt_TeaInput_setInputProcessor = ($this, $processor) => {
    $this.$processor = $processor;
},
cgxgbt_TeaInput_isCursorCatched = $this => {
    return cgxgbt_TeaInput_isCursorCatchedJSNI$js_body$_75($this.$canvas) ? 1 : 0;
},
cgxgbt_TeaInput_isCursorCatchedJSNI$js_body$_75 = var$1 => {
    if (document.pointerLockElement === canvas || document.mozPointerLockElement === canvas) {
        return true;
    }
    return false;
},
cgxgbt_TeaInput_handleEvent$exported$0 = (var$1, var$2) => {
    var$1 = var$1;
    if (var$1.$application.$appListener !== null) {
        cgxgbt_TeaInput_handleMouseEvents(var$1, var$2);
        cgxgbt_TeaInput_handleKeyboardEvents(var$1, var$2);
    }
},
cbg_Files = $rt_classWithoutFields(0);
function cgxgbt_TeaFiles() {
    let a = this; jl_Object.call(a);
    a.$internalStorage = null;
    a.$classpathStorage = null;
    a.$localStorage = null;
    a.$localStoragePrefix0 = null;
}
let cgxgbt_TeaFiles_getFileDB = ($this, $type) => {
    if ($type === cbg_Files$FileType_Internal)
        return $this.$internalStorage;
    if ($type === cbg_Files$FileType_Classpath)
        return $this.$classpathStorage;
    if ($type !== cbg_Files$FileType_Local)
        return null;
    return $this.$localStorage;
},
cgxgbt_TeaFiles_internal = ($this, $path) => {
    return cgxgbt_TeaFileHandle__init_($this, $path, cbg_Files$FileType_Internal);
};
function cgxgbt_TeaNet() {
    jl_Object.call(this);
    this.$httpResponseListeners = null;
}
let cbg_ApplicationLogger = $rt_classWithoutFields(0),
cgxgbt_TeaApplicationLogger = $rt_classWithoutFields(),
cgxgbt_TeaApplicationLogger__init_0 = $this => {
    return;
},
cgxgbt_TeaApplicationLogger__init_ = () => {
    let var_0 = new cgxgbt_TeaApplicationLogger();
    cgxgbt_TeaApplicationLogger__init_0(var_0);
    return var_0;
},
cbgu_Clipboard = $rt_classWithoutFields(0);
function cgxgbt_TeaClipboard() {
    let a = this; jl_Object.call(a);
    a.$requestedWritePermissions = 0;
    a.$hasWritePermissions = 0;
    a.$writeHandler = null;
    a.$content = null;
}
let cgxgbt_TeaClipboard__init_ = $this => {
    let var$1, var$2;
    $this.$requestedWritePermissions = 0;
    $this.$hasWritePermissions = 1;
    var$1 = new cgxgbt_TeaClipboard$ClipboardWriteHandler;
    var$1.$this$00 = $this;
    $this.$writeHandler = var$1;
    $this.$content = $rt_s(24);
    var$1 = cgxgbtdi_TeaWindow_getDocument(cgxgbtdi_TeaWindow_get());
    var$2 = new cgxgbt_TeaClipboard$_init_$lambda$_0_0;
    var$2.$_06 = $this;
    var$1.addEventListener("copy", otji_JS_function(otji_JSWrapper_unwrap(var$2), "handleEvent"));
    var$1 = cgxgbtdi_TeaWindow_getDocument(cgxgbtdi_TeaWindow_get());
    var$2 = new cgxgbt_TeaClipboard$_init_$lambda$_0_1;
    var$2.$_019 = $this;
    var$1.addEventListener("cut", otji_JS_function(otji_JSWrapper_unwrap(var$2), "handleEvent"));
    var$1 = cgxgbtdi_TeaWindow_getDocument(cgxgbtdi_TeaWindow_get());
    var$2 = new cgxgbt_TeaClipboard$_init_$lambda$_0_2;
    var$2.$_011 = $this;
    var$1.addEventListener("paste", otji_JS_function(otji_JSWrapper_unwrap(var$2), "handleEvent"));
},
cgxgbt_TeaClipboard__init_0 = () => {
    let var_0 = new cgxgbt_TeaClipboard();
    cgxgbt_TeaClipboard__init_(var_0);
    return var_0;
},
cgxgbt_TeaClipboard_setContentNATIVE$js_body$_4 = var$1 => {
    if ("clipboard" in navigator) {
        navigator.clipboard.writeText(var$1);
    }
},
cbg_Gdx = $rt_classWithoutFields(),
cbg_Gdx_app = null,
cbg_Gdx_graphics = null,
cbg_Gdx_audio = null,
cbg_Gdx_input = null,
cbg_Gdx_files = null,
cbg_Gdx_net = null,
cbg_Gdx_gl = null,
cbg_Gdx_gl20 = null,
cbg_Gdx_gl30 = null,
cbg_Audio = $rt_classWithoutFields(0),
cgxgbt_TeaAudio = $rt_classWithoutFields(0);
function cgxgbt_DefaultTeaAudio() {
    jl_Object.call(this);
    this.$webAudioAPIManager = null;
}
let cgxgbt_DefaultTeaAudio__init_ = $this => {
    $this.$webAudioAPIManager = null;
    $this.$webAudioAPIManager = new cgxgbtwh_HowlerAudioManager;
},
cgxgbt_DefaultTeaAudio__init_0 = () => {
    let var_0 = new cgxgbt_DefaultTeaAudio();
    cgxgbt_DefaultTeaAudio__init_(var_0);
    return var_0;
},
otjde_EventListener = $rt_classWithoutFields(0);
function cgxgbt_TeaApplication$1() {
    jl_Object.call(this);
    this.$this$017 = null;
}
let cgxgbt_TeaApplication$1__init_ = ($this, $this$0) => {
    $this.$this$017 = $this$0;
},
cgxgbt_TeaApplication$1__init_0 = var_0 => {
    let var_1 = new cgxgbt_TeaApplication$1();
    cgxgbt_TeaApplication$1__init_(var_1, var_0);
    return var_1;
},
cgxgbt_TeaApplication$1_handleEvent$exported$0 = (var$1, var$2) => {
    var$2 = var$1.$this$017;
    if (var$2.$appListener !== null)
        var$2.$appListener = null;
};
function cgxgbt_TeaApplication$2() {
    jl_Object.call(this);
    this.$this$01 = null;
}
let cgxgbt_TeaApplication$2__init_ = ($this, $this$0) => {
    $this.$this$01 = $this$0;
},
cgxgbt_TeaApplication$2__init_0 = var_0 => {
    let var_1 = new cgxgbt_TeaApplication$2();
    cgxgbt_TeaApplication$2__init_(var_1, var_0);
    return var_1;
},
cgxgbt_TeaApplication$2_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, $$je;
    var$1 = var$1;
    var$3 = var$1.$this$01;
    if (var$3.$initState === cgxgbt_TeaApplication$AppState_APP_LOOP) {
        var$3 = $rt_str((cgxgbtdi_TeaWindow_getDocument(var$3.$window)).visibilityState);
        if (jl_String_equals(var$3, $rt_s(124))) {
            var$1 = var$1.$this$01.$lifecycleListeners;
            jl_Object_monitorEnterSync(var$1);
            a: {
                b: {
                    try {
                        var$2 = cbgu_Array_iterator(var$1);
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        var$2 = $$je;
                        break b;

                    }
                    var$3 = var$2;
                    while (true) {
                        try {
                            if (!cbgu_Array$ArrayIterator_hasNext(var$3))
                                break;
                            (cbgu_Array$ArrayIterator_next(var$3)).$pause();
                            continue;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            var$2 = $$je;
                            break b;

                        }
                    }
                    try {
                        jl_Object_monitorExitSync(var$1);
                        break a;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        var$2 = $$je;

                    }
                }
                jl_Object_monitorExitSync(var$1);
                $rt_throw(var$2);
            }
        } else if (jl_String_equals(var$3, $rt_s(125))) {
            var$1 = var$1.$this$01.$lifecycleListeners;
            jl_Object_monitorEnterSync(var$1);
            c: {
                d: {
                    try {
                        var$2 = cbgu_Array_iterator(var$1);
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        var$2 = $$je;
                        break d;

                    }
                    var$3 = var$2;
                    while (true) {
                        try {
                            if (!cbgu_Array$ArrayIterator_hasNext(var$3))
                                break;
                            (cbgu_Array$ArrayIterator_next(var$3)).$resume();
                            continue;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            var$2 = $$je;
                            break d;

                        }
                    }
                    try {
                        jl_Object_monitorExitSync(var$1);
                        break c;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        var$2 = $$je;

                    }
                }
                jl_Object_monitorExitSync(var$1);
                $rt_throw(var$2);
            }
        }
    }
};
function cgxgbt_TeaApplication$3() {
    jl_Object.call(this);
    this.$this$0 = null;
}
let cgxgbt_TeaApplication$3__init_ = ($this, $this$0) => {
    $this.$this$0 = $this$0;
},
cgxgbt_TeaApplication$3__init_0 = var_0 => {
    let var_1 = new cgxgbt_TeaApplication$3();
    cgxgbt_TeaApplication$3__init_(var_1, var_0);
    return var_1;
},
cgxgbt_TeaApplication$3_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4;
    var$1 = var$1;
    var$3 = cgxgbtdi_TeaWindow_getClientWidth(var$1.$this$0.$window);
    var$2 = var$1.$this$0;
    var$3 = var$3 - var$2.$config.$padHorizontal | 0;
    var$4 = cgxgbtdi_TeaWindow_getClientHeight(var$2.$window);
    var$1 = var$1.$this$0;
    var$2 = var$1.$config;
    var$4 = var$4 - var$2.$padVertical | 0;
    if (var$3 > 0 && var$4 > 0) {
        var$1 = var$1.$graphics;
        if (var$1 !== null)
            cgxgbt_TeaGraphics_setCanvasSize(var$1, var$3, var$4, var$2.$usePhysicalPixels);
    }
};
function cbgu_Pool() {
    let a = this; jl_Object.call(a);
    a.$max2 = 0;
    a.$peak = 0;
    a.$freeObjects = null;
}
let cbgu_Pool__init_ = ($this, $initialCapacity, $max) => {
    $this.$freeObjects = cbgu_Array__init_0(0, $initialCapacity);
    $this.$max2 = $max;
},
cbgu_Pool_reset = ($this, $object) => {
    if ($rt_isInstance($object, cbgu_Pool$Poolable)) {
        $object = $object;
        $object.$life = 0.0;
        $object.$angle = 0.0;
        $object.$y5 = 0.0;
        $object.$x5 = 0.0;
    }
};
function cbgu_ReflectionPool() {
    cbgu_Pool.call(this);
    this.$constructor = null;
}
let jl_IndexOutOfBoundsException = $rt_classWithoutFields(jl_RuntimeException),
cbgu_ObjectSet = $rt_classWithoutFields(),
cbgu_ObjectSet_tableSize = ($capacity, $loadFactor) => {
    let var$3, var$4, $tableSize;
    if ($capacity < 0) {
        var$3 = new jl_IllegalArgumentException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(126));
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$4, $capacity)));
        $rt_throw(var$3);
    }
    $tableSize = cbgm_MathUtils_nextPowerOfTwo(jl_Math_max(2, jl_Math_ceil($capacity / $loadFactor) | 0));
    if ($tableSize <= 1073741824)
        return $tableSize;
    var$3 = new jl_IllegalArgumentException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(127));
    jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$4, $capacity)));
    $rt_throw(var$3);
},
jl_Long = $rt_classWithoutFields(jl_Number),
jl_Long_TYPE = null,
jl_Long_numberOfLeadingZeros = $i => {
    let $n, var$3;
    if (Long_eq($i, Long_ZERO))
        return 64;
    $n = 0;
    var$3 = Long_shru($i, 32);
    if (Long_ne(var$3, Long_ZERO))
        $n = 32;
    else
        var$3 = $i;
    $i = Long_shru(var$3, 16);
    if (Long_eq($i, Long_ZERO))
        $i = var$3;
    else
        $n = $n | 16;
    var$3 = Long_shru($i, 8);
    if (Long_eq(var$3, Long_ZERO))
        var$3 = $i;
    else
        $n = $n | 8;
    $i = Long_shru(var$3, 4);
    if (Long_eq($i, Long_ZERO))
        $i = var$3;
    else
        $n = $n | 4;
    var$3 = Long_shru($i, 2);
    if (Long_eq(var$3, Long_ZERO))
        var$3 = $i;
    else
        $n = $n | 2;
    if (Long_ne(Long_shru(var$3, 1), Long_ZERO))
        $n = $n | 1;
    return (64 - $n | 0) - 1 | 0;
},
jl_Long_reverseBytes = $i => {
    $i = Long_or(Long_shru(Long_and($i, Long_create(4278255360, 4278255360)), 8), Long_shl(Long_and($i, Long_create(16711935, 16711935)), 8));
    $i = Long_or(Long_shru(Long_and($i, Long_create(4294901760, 4294901760)), 16), Long_shl(Long_and($i, Long_create(65535, 65535)), 16));
    return Long_or(Long_shru($i, 32), Long_shl($i, 32));
},
jl_Long_compareUnsigned = (var$1, var$2) => {
    return Long_ucompare(var$1, var$2);
},
jl_Long__clinit_ = () => {
    jl_Long_TYPE = $rt_cls($rt_longcls);
},
cgxgbtg_WebGLContextAttributesWrapper = $rt_classWithoutFields(),
cgxgbtg_WebGLContextAttributesWrapper_create$js_body$_14 = () => {
    return {  };
},
cbgg_GL20 = $rt_classWithoutFields(0);
function cgxgbt_TeaGL20() {
    let a = this; jl_Object.call(a);
    a.$gl = null;
    a.$programs = null;
    a.$shaders = null;
    a.$buffers = null;
    a.$frameBuffers = null;
    a.$renderBuffers = null;
    a.$textures = null;
    a.$uniforms0 = null;
    a.$currProgram = 0;
}
let cgxgbt_TeaGL20__init_ = ($this, $gl) => {
    $this.$programs = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$shaders = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$buffers = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$frameBuffers = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$renderBuffers = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$textures = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$uniforms0 = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$currProgram = 0;
    $this.$gl = $gl;
    $gl.pixelStorei(37441, 0);
},
cgxgbt_TeaGL20__init_0 = var_0 => {
    let var_1 = new cgxgbt_TeaGL20();
    cgxgbt_TeaGL20__init_(var_1, var_0);
    return var_1;
},
cgxgbt_TeaGL20_getUniformLocation = ($this, $location) => {
    return cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$uniforms0, $this.$currProgram), $location);
},
cgxgbt_TeaGL20_glAttachShader = ($this, $program, $shader) => {
    let var$3, var$4;
    var$3 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    var$4 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader);
    $this.$gl.attachShader(var$3, var$4);
},
cgxgbt_TeaGL20_glBindBuffer = ($this, $target, $buffer) => {
    let var$3, var$4;
    var$3 = $this.$gl;
    var$4 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$buffers, $buffer);
    var$3.bindBuffer($target, var$4);
},
cgxgbt_TeaGL20_glBindTexture = ($this, $target, $texture) => {
    let var$3, var$4;
    var$3 = $this.$gl;
    var$4 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$textures, $texture);
    var$3.bindTexture($target, var$4);
},
cgxgbt_TeaGL20_glBlendFuncSeparate = ($this, $srcRGB, $dstRGB, $srcAlpha, $dstAlpha) => {
    $this.$gl.blendFuncSeparate($srcRGB, $dstRGB, $srcAlpha, $dstAlpha);
},
cgxgbt_TeaGL20_glBufferData = ($this, $target, $size, $data, $usage) => {
    let $typedArray;
    if ($data === null)
        $this.$gl.bufferData($target, $size, $usage);
    else {
        $typedArray = cgxgbtdt_TypedArrays_getTypedArray($data);
        $this.$gl.bufferData($target, $typedArray, $usage);
    }
},
cgxgbt_TeaGL20_glBufferSubData = ($this, $target, $offset, $size, $data) => {
    let $typedArray;
    $typedArray = cgxgbtdt_TypedArrays_getTypedArray($data);
    $this.$gl.bufferSubData($target, $offset, $typedArray);
},
cgxgbt_TeaGL20_glClear = ($this, $mask) => {
    $this.$gl.clear($mask);
},
cgxgbt_TeaGL20_glClearColor = ($this, $red, $green, $blue, $alpha) => {
    $this.$gl.clearColor($red, $green, $blue, $alpha);
},
cgxgbt_TeaGL20_glCompileShader = ($this, $shader) => {
    let var$2;
    var$2 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader);
    $this.$gl.compileShader(var$2);
},
cgxgbt_TeaGL20_glCreateProgram = $this => {
    let $program;
    $program = $this.$gl.createProgram();
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$programs, $program);
},
cgxgbt_TeaGL20_glCreateShader = ($this, $type) => {
    let $shader;
    $shader = $this.$gl.createShader($type);
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$shaders, $shader);
},
cgxgbt_TeaGL20_glDepthMask = ($this, $flag) => {
    $this.$gl.depthMask(!!$flag);
},
cgxgbt_TeaGL20_glDisable = ($this, $cap) => {
    $this.$gl.disable($cap);
},
cgxgbt_TeaGL20_glDisableVertexAttribArray = ($this, $index) => {
    $this.$gl.disableVertexAttribArray($index);
},
cgxgbt_TeaGL20_glDrawArrays = ($this, $mode, $first, $count) => {
    $this.$gl.drawArrays($mode, $first, $count);
},
cgxgbt_TeaGL20_glDrawElements = ($this, $mode, $count, $type, $indices) => {
    let var$5, var$6;
    var$5 = $this.$gl;
    var$6 = $indices.$position0;
    var$5.drawElements($mode, $count, $type, var$6);
},
cgxgbt_TeaGL20_glDrawElements0 = ($this, $mode, $count, $type, $indices) => {
    $this.$gl.drawElements($mode, $count, $type, $indices);
},
cgxgbt_TeaGL20_glEnable = ($this, $cap) => {
    $this.$gl.enable($cap);
},
cgxgbt_TeaGL20_glEnableVertexAttribArray = ($this, $index) => {
    $this.$gl.enableVertexAttribArray($index);
},
cgxgbt_TeaGL20_glGenBuffer = $this => {
    let $buffer;
    $buffer = $this.$gl.createBuffer();
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$buffers, $buffer);
},
cgxgbt_TeaGL20_glGenerateMipmap = ($this, $target) => {
    $this.$gl.generateMipmap($target);
},
cgxgbt_TeaGL20_glGenTexture = $this => {
    let $texture;
    $texture = $this.$gl.createTexture();
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$textures, $texture);
},
cgxgbt_TeaGL20_glGetActiveAttrib = ($this, $program, $index, $size, $type) => {
    let $activeUniform, var$6;
    $activeUniform = $this.$gl;
    var$6 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    $activeUniform = $activeUniform.getActiveAttrib(var$6, $index);
    $index = $activeUniform.size;
    jn_IntBufferImpl_put($size, 0, $index);
    $index = $activeUniform.type;
    jn_IntBufferImpl_put($type, 0, $index);
    return $rt_str($activeUniform.name);
},
cgxgbt_TeaGL20_glGetActiveUniform = ($this, $program, $index, $size, $type) => {
    let $activeUniform, var$6;
    $activeUniform = $this.$gl;
    var$6 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    $activeUniform = $activeUniform.getActiveUniform(var$6, $index);
    $index = $activeUniform.size;
    jn_IntBufferImpl_put($size, 0, $index);
    $index = $activeUniform.type;
    jn_IntBufferImpl_put($type, 0, $index);
    return $rt_str($activeUniform.name);
},
cgxgbt_TeaGL20_glGetAttribLocation = ($this, $program, $name) => {
    let var$3;
    var$3 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    return $this.$gl.getAttribLocation(var$3, $rt_ustr($name));
},
cgxgbt_TeaGL20_glGetFloatv = ($this, $pname, $params) => {
    let var$3;
    if ($pname != 2931 && $pname != 2849 && $pname != 32824 && $pname != 10752 && $pname != 32938) {
        $params = new cbgu_GdxRuntimeException;
        jl_Throwable__init_($params, $rt_s(128));
        $rt_throw($params);
    }
    var$3 = $this.$gl.getParameter($pname);
    jn_FloatBufferImpl_put($params, 0, var$3);
},
cgxgbt_TeaGL20_glGetProgramInfoLog = ($this, $program) => {
    return $rt_str($this.$gl.getProgramInfoLog(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program)));
},
cgxgbt_TeaGL20_glGetProgramiv = ($this, $program, $pname, $params) => {
    if ($pname != 35712 && $pname != 35714 && $pname != 35715) {
        $program = $this.$gl.getProgramParameter(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program), $pname);
        jn_IntBufferImpl_put($params, 0, $program);
    } else {
        $pname = !($this.$gl.getProgramParameter(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program), $pname) ? 1 : 0) ? 0 : 1;
        jn_IntBufferImpl_put($params, 0, $pname);
    }
},
cgxgbt_TeaGL20_glGetShaderInfoLog = ($this, $shader) => {
    return $rt_str($this.$gl.getShaderInfoLog(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader)));
},
cgxgbt_TeaGL20_glGetShaderiv = ($this, $shader, $pname, $params) => {
    let $result;
    if ($pname != 35713 && $pname != 35712) {
        $result = $this.$gl.getShaderParameter(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader), $pname);
        jn_IntBufferImpl_put($params, 0, $result);
    } else {
        $pname = !($this.$gl.getShaderParameter(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader), $pname) ? 1 : 0) ? 0 : 1;
        jn_IntBufferImpl_put($params, 0, $pname);
    }
},
cgxgbt_TeaGL20_glGetString = ($this, $name) => {
    return $rt_str($this.$gl.getParameter($name));
},
cgxgbt_TeaGL20_glGetUniformLocation = ($this, $program, $name) => {
    let $location;
    $location = $this.$gl.getUniformLocation(cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program), $rt_ustr($name));
    if ($location === null)
        return (-1);
    $name = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$uniforms0, $program);
    if ($name === null) {
        $name = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
        $this.$uniforms0[$program] = $name;
    }
    return cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($name, $location);
},
cgxgbt_TeaGL20_glLinkProgram = ($this, $program) => {
    let var$2, var$3;
    var$2 = $this.$gl;
    var$3 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    var$2.linkProgram(var$3);
},
cgxgbt_TeaGL20_glPixelStorei = ($this, $pname, $param) => {
    $this.$gl.pixelStorei($pname, $param);
},
cgxgbt_TeaGL20_glShaderSource = ($this, $shader, $source) => {
    let var$3, var$4;
    var$3 = $this.$gl;
    var$4 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$shaders, $shader);
    var$3.shaderSource(var$4, $rt_ustr($source));
},
cgxgbt_TeaGL20_glTexImage2D = ($this, $target, $level, $internalformat, $width, $height, $border, $format, $type, $pixels) => {
    let $arrayBuffer;
    if ($pixels === null) {
        $this.$gl.texImage2D($target, $level, $internalformat, $width, $height, $border, $format, $type, null);
        return;
    }
    $arrayBuffer = $type == 5121 ? cgxgbtdt_TypedArrays_getUint8Array($pixels) : $type != 5123 && $type != 33635 && $type != 32819 ? ($type != 5126 ? cgxgbtdt_TypedArrays_getTypedArray($pixels) : cgxgbtdt_TypedArrays_getFloat32Array($pixels)) : cgxgbtdt_TypedArrays_getUint16Array($pixels);
    $this.$gl.texImage2D($target, $level, $internalformat, $width, $height, $border, $format, $type, $arrayBuffer);
},
cgxgbt_TeaGL20_glTexSubImage2D = ($this, $target, $level, $xoffset, $yoffset, $width, $height, $format, $type, $pixels) => {
    let $arrayBuffer;
    $arrayBuffer = $type == 5121 ? cgxgbtdt_TypedArrays_getUint8Array($pixels) : $type != 5123 && $type != 33635 && $type != 32819 ? ($type != 5126 ? cgxgbtdt_TypedArrays_getTypedArray($pixels) : cgxgbtdt_TypedArrays_getFloat32Array($pixels)) : cgxgbtdt_TypedArrays_getUint16Array($pixels);
    $this.$gl.texSubImage2D($target, $level, $xoffset, $yoffset, $width, $height, $format, $type, $arrayBuffer);
},
cgxgbt_TeaGL20_glTexParameterf = ($this, $target, $pname, $param) => {
    $this.$gl.texParameterf($target, $pname, $param);
},
cgxgbt_TeaGL20_glTexParameteri = ($this, $target, $pname, $param) => {
    let var$4, var$5;
    var$4 = $this.$gl;
    var$5 = $param;
    var$4.texParameterf($target, $pname, var$5);
},
cgxgbt_TeaGL20_glUniform1f = ($this, $location, $x) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_getUniformLocation($this, $location);
    $this.$gl.uniform1f($loc, $x);
},
cgxgbt_TeaGL20_glUniform1i = ($this, $location, $x) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_getUniformLocation($this, $location);
    $this.$gl.uniform1i($loc, $x);
},
cgxgbt_TeaGL20_glUniformMatrix4fv = ($this, $location, $count, $transpose, $value, $offset) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_getUniformLocation($this, $location);
    $this.$gl.uniformMatrix4fv($loc, !!$transpose, $value.data);
},
cgxgbt_TeaGL20_glUseProgram = ($this, $program) => {
    let var$2, var$3;
    $this.$currProgram = $program;
    var$2 = $this.$gl;
    var$3 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$programs, $program);
    var$2.useProgram(var$3);
},
cgxgbt_TeaGL20_glVertexAttribPointer = ($this, $indx, $size, $type, $normalized, $stride, $ptr_0) => {
    $this.$gl.vertexAttribPointer($indx, $size, $type, !!$normalized, $stride, $ptr_0);
},
cgxgbt_TeaGL20_glViewport = ($this, $x, $y, $width, $height) => {
    $this.$gl.viewport($x, $y, $width, $height);
},
cbgg_GL30 = $rt_classWithoutFields(0);
function cgxgbt_TeaGL30() {
    let a = this; cgxgbt_TeaGL20.call(a);
    a.$gl0 = null;
    a.$queries = null;
    a.$samplers = null;
    a.$feedbacks = null;
    a.$vertexArrays = null;
}
let cgxgbt_TeaGL30__init_ = ($this, $gl) => {
    cgxgbt_TeaGL20__init_($this, $gl);
    $this.$queries = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$samplers = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$feedbacks = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$vertexArrays = cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1();
    $this.$gl0 = $gl;
},
cgxgbt_TeaGL30__init_0 = var_0 => {
    let var_1 = new cgxgbt_TeaGL30();
    cgxgbt_TeaGL30__init_(var_1, var_0);
    return var_1;
},
cgxgbt_TeaGL30_glBindVertexArray = ($this, $array) => {
    let var$2, var$3;
    var$2 = $this.$gl0;
    var$3 = cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2($this.$vertexArrays, $array);
    var$2.bindVertexArray(var$3);
},
cgxgbt_TeaGL30_glDrawArraysInstanced = ($this, $mode, $first, $count, $instanceCount) => {
    $this.$gl0.drawArraysInstanced($mode, $first, $count, $instanceCount);
},
cgxgbt_TeaGL30_glDrawElementsInstanced = ($this, $mode, $count, $type, $indicesOffset, $instanceCount) => {
    $this.$gl0.drawElementsInstanced($mode, $count, $type, $indicesOffset, $instanceCount);
},
cgxgbt_TeaGL30_glGenVertexArrays = ($this, $n, $ids) => {
    let $i, var$4, $vArray;
    $i = 0;
    var$4 = $ids;
    while ($i < $n) {
        $vArray = $this.$gl0.createVertexArray();
        jn_IntBufferImpl_put(var$4, $i, cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4($this.$vertexArrays, $vArray));
        $i = $i + 1 | 0;
    }
},
cgxgbt_TeaGL30_glGetFloatv = ($this, $pname, $params) => {
    let var$3;
    if ($pname != 34045)
        cgxgbt_TeaGL20_glGetFloatv($this, $pname, $params);
    else {
        var$3 = $this.$gl0.getParameter($pname);
        jn_FloatBufferImpl_put($params, 0, var$3);
    }
},
cgxgbt_TeaGL30Debug = $rt_classWithoutFields(cgxgbt_TeaGL30),
cgxgbt_TeaGL30Debug_checkError = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$gl0.getError();
    if (!var$1)
        return;
    var$2 = new cbgu_GdxRuntimeException;
    var$3 = jl_Integer_toHexString(var$1);
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(var$4, $rt_s(129)), var$1), $rt_s(130)), var$3);
    jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$2);
},
cgxgbt_TeaGL30Debug_glBindVertexArray = ($this, $array) => {
    cgxgbt_TeaGL30_glBindVertexArray($this, $array);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDrawArraysInstanced = ($this, $mode, $first, $count, $instanceCount) => {
    cgxgbt_TeaGL30_glDrawArraysInstanced($this, $mode, $first, $count, $instanceCount);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDrawElementsInstanced = ($this, $mode, $count, $type, $indicesOffset, $instanceCount) => {
    cgxgbt_TeaGL30_glDrawElementsInstanced($this, $mode, $count, $type, $indicesOffset, $instanceCount);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGenVertexArrays = ($this, $n, $ids) => {
    cgxgbt_TeaGL30_glGenVertexArrays($this, $n, $ids);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBindTexture = ($this, $target, $texture) => {
    cgxgbt_TeaGL20_glBindTexture($this, $target, $texture);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glClear = ($this, $mask) => {
    cgxgbt_TeaGL20_glClear($this, $mask);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glClearColor = ($this, $red, $green, $blue, $alpha) => {
    cgxgbt_TeaGL20_glClearColor($this, $red, $green, $blue, $alpha);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDepthMask = ($this, $flag) => {
    cgxgbt_TeaGL20_glDepthMask($this, $flag);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDisable = ($this, $cap) => {
    cgxgbt_TeaGL20_glDisable($this, $cap);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDrawArrays = ($this, $mode, $first, $count) => {
    cgxgbt_TeaGL20_glDrawArrays($this, $mode, $first, $count);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDrawElements0 = ($this, $mode, $count, $type, $indices) => {
    cgxgbt_TeaGL20_glDrawElements($this, $mode, $count, $type, $indices);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glEnable = ($this, $cap) => {
    cgxgbt_TeaGL20_glEnable($this, $cap);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetString = ($this, $name) => {
    return cgxgbt_TeaGL20_glGetString($this, $name);
},
cgxgbt_TeaGL30Debug_glPixelStorei = ($this, $pname, $param) => {
    cgxgbt_TeaGL20_glPixelStorei($this, $pname, $param);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glTexImage2D = ($this, $target, $level, $internalformat, $width, $height, $border, $format, $type, $pixels) => {
    cgxgbt_TeaGL20_glTexImage2D($this, $target, $level, $internalformat, $width, $height, $border, $format, $type, $pixels);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glTexParameterf = ($this, $target, $pname, $param) => {
    cgxgbt_TeaGL20_glTexParameterf($this, $target, $pname, $param);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glTexSubImage2D = ($this, $target, $level, $xoffset, $yoffset, $width, $height, $format, $type, $pixels) => {
    cgxgbt_TeaGL20_glTexSubImage2D($this, $target, $level, $xoffset, $yoffset, $width, $height, $format, $type, $pixels);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glViewport = ($this, $x, $y, $width, $height) => {
    cgxgbt_TeaGL20_glViewport($this, $x, $y, $width, $height);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glAttachShader = ($this, $program, $shader) => {
    cgxgbt_TeaGL20_glAttachShader($this, $program, $shader);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBindBuffer = ($this, $target, $buffer) => {
    cgxgbt_TeaGL20_glBindBuffer($this, $target, $buffer);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBlendFuncSeparate = ($this, $srcRGB, $dstRGB, $srcAlpha, $dstAlpha) => {
    cgxgbt_TeaGL20_glBlendFuncSeparate($this, $srcRGB, $dstRGB, $srcAlpha, $dstAlpha);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBufferData = ($this, $target, $size, $data, $usage) => {
    cgxgbt_TeaGL20_glBufferData($this, $target, $size, $data, $usage);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glBufferSubData = ($this, $target, $offset, $size, $data) => {
    cgxgbt_TeaGL20_glBufferSubData($this, $target, $offset, $size, $data);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glCompileShader = ($this, $shader) => {
    cgxgbt_TeaGL20_glCompileShader($this, $shader);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glCreateProgram = $this => {
    let $program;
    $program = cgxgbt_TeaGL20_glCreateProgram($this);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $program;
},
cgxgbt_TeaGL30Debug_glCreateShader = ($this, $type) => {
    let $shader;
    $shader = cgxgbt_TeaGL20_glCreateShader($this, $type);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $shader;
},
cgxgbt_TeaGL30Debug_glDisableVertexAttribArray = ($this, $index) => {
    cgxgbt_TeaGL20_glDisableVertexAttribArray($this, $index);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glDrawElements = ($this, $mode, $count, $type, $indices) => {
    cgxgbt_TeaGL20_glDrawElements0($this, $mode, $count, $type, $indices);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glEnableVertexAttribArray = ($this, $index) => {
    cgxgbt_TeaGL20_glEnableVertexAttribArray($this, $index);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGenerateMipmap = ($this, $target) => {
    cgxgbt_TeaGL20_glGenerateMipmap($this, $target);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetActiveAttrib = ($this, $program, $index, $size, $type) => {
    let $attrib;
    $attrib = cgxgbt_TeaGL20_glGetActiveAttrib($this, $program, $index, $size, $type);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $attrib;
},
cgxgbt_TeaGL30Debug_glGetActiveUniform = ($this, $program, $index, $size, $type) => {
    let $uniform;
    $uniform = cgxgbt_TeaGL20_glGetActiveUniform($this, $program, $index, $size, $type);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $uniform;
},
cgxgbt_TeaGL30Debug_glGetAttribLocation = ($this, $program, $name) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_glGetAttribLocation($this, $program, $name);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $loc;
},
cgxgbt_TeaGL30Debug_glGetFloatv = ($this, $pname, $params) => {
    cgxgbt_TeaGL30_glGetFloatv($this, $pname, $params);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetProgramiv = ($this, $program, $pname, $params) => {
    cgxgbt_TeaGL20_glGetProgramiv($this, $program, $pname, $params);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetProgramInfoLog = ($this, $program) => {
    let $info;
    $info = cgxgbt_TeaGL20_glGetProgramInfoLog($this, $program);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $info;
},
cgxgbt_TeaGL30Debug_glGetShaderiv = ($this, $shader, $pname, $params) => {
    cgxgbt_TeaGL20_glGetShaderiv($this, $shader, $pname, $params);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glGetShaderInfoLog = ($this, $shader) => {
    let $info;
    $info = cgxgbt_TeaGL20_glGetShaderInfoLog($this, $shader);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $info;
},
cgxgbt_TeaGL30Debug_glGetUniformLocation = ($this, $program, $name) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_glGetUniformLocation($this, $program, $name);
    cgxgbt_TeaGL30Debug_checkError($this);
    return $loc;
},
cgxgbt_TeaGL30Debug_glLinkProgram = ($this, $program) => {
    cgxgbt_TeaGL20_glLinkProgram($this, $program);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glShaderSource = ($this, $shader, $source) => {
    cgxgbt_TeaGL20_glShaderSource($this, $shader, $source);
    cgxgbt_TeaGL30Debug_checkError($this);
};
let cgxgbt_TeaGL30Debug_glTexParameteri = ($this, $target, $pname, $param) => {
    cgxgbt_TeaGL20_glTexParameteri($this, $target, $pname, $param);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glUniform1f = ($this, $location, $x) => {
    cgxgbt_TeaGL20_glUniform1f($this, $location, $x);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glUniform1i = ($this, $location, $x) => {
    cgxgbt_TeaGL20_glUniform1i($this, $location, $x);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glUseProgram = ($this, $program) => {
    cgxgbt_TeaGL20_glUseProgram($this, $program);
    cgxgbt_TeaGL30Debug_checkError($this);
},
cgxgbt_TeaGL30Debug_glVertexAttribPointer = ($this, $indx, $size, $type, $normalized, $stride, $ptr_0) => {
    cgxgbt_TeaGL20_glVertexAttribPointer($this, $indx, $size, $type, $normalized, $stride, $ptr_0);
    cgxgbt_TeaGL30Debug_checkError($this);
};
function cbggg_GLVersion() {
    let a = this; jl_Object.call(a);
    a.$majorVersion = 0;
    a.$minorVersion = 0;
    a.$releaseVersion = 0;
    a.$versionString = null;
    a.$vendorString = null;
    a.$rendererString = null;
    a.$type2 = null;
    a.$TAG = $rt_s(102);
}
let cbggg_GLVersion_extractVersion = ($this, $patternString, $versionString) => {
    let $matcher, $pattern, $result, $resultSplit, $found;
    $matcher = jur_Pattern_matcher(jur_Pattern_compile($patternString), $versionString);
    if (!jur_Matcher_find($matcher)) {
        $pattern = cbg_Gdx_app;
        $patternString = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($patternString);
        jl_AbstractStringBuilder_append($patternString, $rt_s(131));
        jl_AbstractStringBuilder_append($patternString, $versionString);
        $result = jl_AbstractStringBuilder_toString($patternString);
        if ($pattern.$logLevel >= 2) {
            $patternString = jl_System_out();
            $versionString = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($versionString);
            jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($versionString, $rt_s(102)), $rt_s(27)), $result);
            $versionString = jl_AbstractStringBuilder_toString($versionString);
            otcic_JsConsolePrintStream_println($patternString, $versionString);
        }
        $this.$majorVersion = 2;
        $this.$minorVersion = 0;
        $this.$releaseVersion = 0;
    } else {
        $resultSplit = (jl_String_split(jur_Matcher_group($matcher, 1), $rt_s(132))).data;
        $this.$majorVersion = cbggg_GLVersion_parseInt($this, $resultSplit[0], 2);
        $found = $resultSplit.length;
        $this.$minorVersion = $found < 2 ? 0 : cbggg_GLVersion_parseInt($this, $resultSplit[1], 0);
        $this.$releaseVersion = $found < 3 ? 0 : cbggg_GLVersion_parseInt($this, $resultSplit[2], 0);
    }
},
cbggg_GLVersion_parseInt = ($this, $v, $defaultValue) => {
    let var$3, var$4, var$5, $$je;
    a: {
        try {
            var$3 = jl_Integer_parseInt($v);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NumberFormatException) {
                break a;
            } else {
                throw $$e;
            }
        }
        return var$3;
    }
    var$4 = cbg_Gdx_app;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append(var$5, $rt_s(133));
    jl_AbstractStringBuilder_append(var$5, $v);
    jl_AbstractStringBuilder_append(var$5, $rt_s(134));
    var$5 = jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$5, $defaultValue));
    cgxgbt_TeaApplication_error(var$4, $rt_s(135), var$5);
    return $defaultValue;
},
cbg_Application$ApplicationType = $rt_classWithoutFields(jl_Enum),
cbg_Application$ApplicationType_Android = null,
cbg_Application$ApplicationType_Desktop = null,
cbg_Application$ApplicationType_HeadlessDesktop = null,
cbg_Application$ApplicationType_Applet = null,
cbg_Application$ApplicationType_WebGL = null,
cbg_Application$ApplicationType_iOS = null,
cbg_Application$ApplicationType_$VALUES = null,
cbg_Application$ApplicationType_values = () => {
    return cbg_Application$ApplicationType_$VALUES.$clone0();
},
cbg_Application$ApplicationType__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(136), 0);
    cbg_Application$ApplicationType_Android = var$1;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(137), 1);
    cbg_Application$ApplicationType_Desktop = var$1;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(138), 2);
    cbg_Application$ApplicationType_HeadlessDesktop = var$1;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(139), 3);
    cbg_Application$ApplicationType_Applet = var$1;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(140), 4);
    cbg_Application$ApplicationType_WebGL = var$1;
    var$1 = new cbg_Application$ApplicationType;
    jl_Enum__init_(var$1, $rt_s(141), 5);
    cbg_Application$ApplicationType_iOS = var$1;
    var$2 = $rt_createArray(cbg_Application$ApplicationType, 6);
    var$3 = var$2.data;
    var$3[0] = cbg_Application$ApplicationType_Android;
    var$3[1] = cbg_Application$ApplicationType_Desktop;
    var$3[2] = cbg_Application$ApplicationType_HeadlessDesktop;
    var$3[3] = cbg_Application$ApplicationType_Applet;
    var$3[4] = cbg_Application$ApplicationType_WebGL;
    var$3[5] = var$1;
    cbg_Application$ApplicationType_$VALUES = var$2;
},
cgxgbt_TeaGraphics$FullscreenChanged = $rt_classWithoutFields(0);
function cgxgbt_TeaGraphics$1() {
    jl_Object.call(this);
    this.$this$022 = null;
}
let cgxgbt_TeaGraphics$1_fullscreenChanged$exported$0 = var$1 => {
    var$1;
},
cgxgbt_TeaGL20Debug = $rt_classWithoutFields(cgxgbt_TeaGL20),
cgxgbt_TeaGL20Debug_checkError = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$gl.getError();
    if (!var$1)
        return;
    var$2 = new cbgu_GdxRuntimeException;
    var$3 = jl_Integer_toHexString(var$1);
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(var$4, $rt_s(129)), var$1), $rt_s(130)), var$3);
    jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$2);
},
cgxgbt_TeaGL20Debug_glBindTexture = ($this, $target, $texture) => {
    cgxgbt_TeaGL20_glBindTexture($this, $target, $texture);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glClear = ($this, $mask) => {
    cgxgbt_TeaGL20_glClear($this, $mask);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glClearColor = ($this, $red, $green, $blue, $alpha) => {
    cgxgbt_TeaGL20_glClearColor($this, $red, $green, $blue, $alpha);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDepthMask = ($this, $flag) => {
    cgxgbt_TeaGL20_glDepthMask($this, $flag);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDisable = ($this, $cap) => {
    cgxgbt_TeaGL20_glDisable($this, $cap);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDrawArrays = ($this, $mode, $first, $count) => {
    cgxgbt_TeaGL20_glDrawArrays($this, $mode, $first, $count);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDrawElements0 = ($this, $mode, $count, $type, $indices) => {
    cgxgbt_TeaGL20_glDrawElements($this, $mode, $count, $type, $indices);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glEnable = ($this, $cap) => {
    cgxgbt_TeaGL20_glEnable($this, $cap);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetString = ($this, $name) => {
    return cgxgbt_TeaGL20_glGetString($this, $name);
},
cgxgbt_TeaGL20Debug_glPixelStorei = ($this, $pname, $param) => {
    cgxgbt_TeaGL20_glPixelStorei($this, $pname, $param);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glTexImage2D = ($this, $target, $level, $internalformat, $width, $height, $border, $format, $type, $pixels) => {
    cgxgbt_TeaGL20_glTexImage2D($this, $target, $level, $internalformat, $width, $height, $border, $format, $type, $pixels);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glTexParameterf = ($this, $target, $pname, $param) => {
    cgxgbt_TeaGL20_glTexParameterf($this, $target, $pname, $param);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glTexSubImage2D = ($this, $target, $level, $xoffset, $yoffset, $width, $height, $format, $type, $pixels) => {
    cgxgbt_TeaGL20_glTexSubImage2D($this, $target, $level, $xoffset, $yoffset, $width, $height, $format, $type, $pixels);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glViewport = ($this, $x, $y, $width, $height) => {
    cgxgbt_TeaGL20_glViewport($this, $x, $y, $width, $height);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glAttachShader = ($this, $program, $shader) => {
    cgxgbt_TeaGL20_glAttachShader($this, $program, $shader);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBindBuffer = ($this, $target, $buffer) => {
    cgxgbt_TeaGL20_glBindBuffer($this, $target, $buffer);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBlendFuncSeparate = ($this, $srcRGB, $dstRGB, $srcAlpha, $dstAlpha) => {
    cgxgbt_TeaGL20_glBlendFuncSeparate($this, $srcRGB, $dstRGB, $srcAlpha, $dstAlpha);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBufferData = ($this, $target, $size, $data, $usage) => {
    cgxgbt_TeaGL20_glBufferData($this, $target, $size, $data, $usage);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glBufferSubData = ($this, $target, $offset, $size, $data) => {
    cgxgbt_TeaGL20_glBufferSubData($this, $target, $offset, $size, $data);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glCompileShader = ($this, $shader) => {
    cgxgbt_TeaGL20_glCompileShader($this, $shader);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glCreateProgram = $this => {
    let $program;
    $program = cgxgbt_TeaGL20_glCreateProgram($this);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $program;
},
cgxgbt_TeaGL20Debug_glCreateShader = ($this, $type) => {
    let $shader;
    $shader = cgxgbt_TeaGL20_glCreateShader($this, $type);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $shader;
},
cgxgbt_TeaGL20Debug_glDisableVertexAttribArray = ($this, $index) => {
    cgxgbt_TeaGL20_glDisableVertexAttribArray($this, $index);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glDrawElements = ($this, $mode, $count, $type, $indices) => {
    cgxgbt_TeaGL20_glDrawElements0($this, $mode, $count, $type, $indices);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glEnableVertexAttribArray = ($this, $index) => {
    cgxgbt_TeaGL20_glEnableVertexAttribArray($this, $index);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGenerateMipmap = ($this, $target) => {
    cgxgbt_TeaGL20_glGenerateMipmap($this, $target);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetActiveAttrib = ($this, $program, $index, $size, $type) => {
    let $attrib;
    $attrib = cgxgbt_TeaGL20_glGetActiveAttrib($this, $program, $index, $size, $type);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $attrib;
},
cgxgbt_TeaGL20Debug_glGetActiveUniform = ($this, $program, $index, $size, $type) => {
    let $uniform;
    $uniform = cgxgbt_TeaGL20_glGetActiveUniform($this, $program, $index, $size, $type);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $uniform;
},
cgxgbt_TeaGL20Debug_glGetAttribLocation = ($this, $program, $name) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_glGetAttribLocation($this, $program, $name);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $loc;
},
cgxgbt_TeaGL20Debug_glGetFloatv = ($this, $pname, $params) => {
    cgxgbt_TeaGL20_glGetFloatv($this, $pname, $params);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetProgramiv = ($this, $program, $pname, $params) => {
    cgxgbt_TeaGL20_glGetProgramiv($this, $program, $pname, $params);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetProgramInfoLog = ($this, $program) => {
    let $info;
    $info = cgxgbt_TeaGL20_glGetProgramInfoLog($this, $program);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $info;
},
cgxgbt_TeaGL20Debug_glGetShaderiv = ($this, $shader, $pname, $params) => {
    cgxgbt_TeaGL20_glGetShaderiv($this, $shader, $pname, $params);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glGetShaderInfoLog = ($this, $shader) => {
    let $info;
    $info = cgxgbt_TeaGL20_glGetShaderInfoLog($this, $shader);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $info;
},
cgxgbt_TeaGL20Debug_glGetUniformLocation = ($this, $program, $name) => {
    let $loc;
    $loc = cgxgbt_TeaGL20_glGetUniformLocation($this, $program, $name);
    cgxgbt_TeaGL20Debug_checkError($this);
    return $loc;
},
cgxgbt_TeaGL20Debug_glLinkProgram = ($this, $program) => {
    cgxgbt_TeaGL20_glLinkProgram($this, $program);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glShaderSource = ($this, $shader, $source) => {
    cgxgbt_TeaGL20_glShaderSource($this, $shader, $source);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glTexParameteri = ($this, $target, $pname, $param) => {
    cgxgbt_TeaGL20_glTexParameteri($this, $target, $pname, $param);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glUniform1f = ($this, $location, $x) => {
    cgxgbt_TeaGL20_glUniform1f($this, $location, $x);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glUniform1i = ($this, $location, $x) => {
    cgxgbt_TeaGL20_glUniform1i($this, $location, $x);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glUseProgram = ($this, $program) => {
    cgxgbt_TeaGL20_glUseProgram($this, $program);
    cgxgbt_TeaGL20Debug_checkError($this);
},
cgxgbt_TeaGL20Debug_glVertexAttribPointer = ($this, $indx, $size, $type, $normalized, $stride, $ptr_0) => {
    cgxgbt_TeaGL20_glVertexAttribPointer($this, $indx, $size, $type, $normalized, $stride, $ptr_0);
    cgxgbt_TeaGL20Debug_checkError($this);
},
ju_Collection = $rt_classWithoutFields(0),
ju_AbstractCollection = $rt_classWithoutFields(),
ju_AbstractCollection_toArray = ($this, $a) => {
    let var$2, $i, $i_0, var$5, var$6;
    var$2 = $a.data;
    $i = $this.$size3;
    $i_0 = var$2.length;
    if ($i_0 < $i)
        $a = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($a)), $i);
    else
        while ($i < $i_0) {
            var$2[$i] = null;
            $i = $i + 1 | 0;
        }
    $i_0 = 0;
    var$5 = ju_AbstractList_iterator($this);
    while (ju_AbstractList$1_hasNext(var$5)) {
        var$2 = $a.data;
        var$6 = $i_0 + 1 | 0;
        var$2[$i_0] = ju_AbstractList$1_next(var$5);
        $i_0 = var$6;
    }
    return $a;
},
ju_Set = $rt_classWithoutFields(0),
ju_AbstractSet = $rt_classWithoutFields(ju_AbstractCollection);
function ju_HashSet() {
    ju_AbstractSet.call(this);
    this.$backingMap = null;
}
function cbgu_IntMap() {
    let a = this; jl_Object.call(a);
    a.$size8 = 0;
    a.$keyTable4 = null;
    a.$valueTable0 = null;
    a.$zeroValue = null;
    a.$hasZeroValue = 0;
    a.$loadFactor5 = 0.0;
    a.$threshold3 = 0;
    a.$shift2 = 0;
    a.$mask2 = 0;
}
let cbgu_IntMap__init_0 = ($this, $initialCapacity) => {
    let var$2;
    $this.$loadFactor5 = 0.800000011920929;
    $initialCapacity = cbgu_ObjectSet_tableSize($initialCapacity, 0.800000011920929);
    $this.$threshold3 = $initialCapacity * 0.800000011920929 | 0;
    var$2 = $initialCapacity - 1 | 0;
    $this.$mask2 = var$2;
    $this.$shift2 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$2));
    $this.$keyTable4 = $rt_createIntArray($initialCapacity);
    $this.$valueTable0 = $rt_createArray(jl_Object, $initialCapacity);
},
cbgu_IntMap__init_ = var_0 => {
    let var_1 = new cbgu_IntMap();
    cbgu_IntMap__init_0(var_1, var_0);
    return var_1;
},
cbgu_IntMap_place = ($this, $item) => {
    return Long_lo(Long_shru(Long_mul(Long_fromInt($item), Long_create(2135587861, 2654435769)), $this.$shift2));
},
cbgu_IntMap_locateKey = ($this, $key) => {
    let $keyTable, $i, $other;
    $keyTable = $this.$keyTable4;
    $i = cbgu_IntMap_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if (!$other)
            return  -($i + 1 | 0) | 0;
        if ($other == $key)
            break;
        $i = ($i + 1 | 0) & $this.$mask2;
    }
    return $i;
},
cbgu_IntMap_put = ($this, $key, $value) => {
    let $oldValue, $i, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
    if (!$key) {
        $oldValue = $this.$zeroValue;
        $this.$zeroValue = $value;
        if (!$this.$hasZeroValue) {
            $this.$hasZeroValue = 1;
            $this.$size8 = $this.$size8 + 1 | 0;
        }
        return $oldValue;
    }
    $i = cbgu_IntMap_locateKey($this, $key);
    if ($i >= 0) {
        var$5 = $this.$valueTable0.data;
        $oldValue = var$5[$i];
        var$5[$i] = $value;
        return $oldValue;
    }
    $i =  -($i + 1 | 0) | 0;
    var$5 = $this.$keyTable4.data;
    var$5[$i] = $key;
    $this.$valueTable0.data[$i] = $value;
    $key = $this.$size8 + 1 | 0;
    $this.$size8 = $key;
    if ($key >= $this.$threshold3)
        a: {
            $key = var$5.length;
            $i = $key << 1;
            $this.$threshold3 = $i * $this.$loadFactor5 | 0;
            var$6 = $i - 1 | 0;
            $this.$mask2 = var$6;
            $this.$shift2 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$6));
            var$5 = $this.$keyTable4;
            var$7 = $this.$valueTable0;
            $this.$keyTable4 = $rt_createIntArray($i);
            $this.$valueTable0 = $rt_createArray(jl_Object, $i);
            if ($this.$size8 > 0) {
                var$6 = 0;
                while (true) {
                    if (var$6 >= $key)
                        break a;
                    var$8 = var$5.data[var$6];
                    if (var$8) {
                        $value = var$7.data[var$6];
                        var$9 = $this.$keyTable4;
                        var$10 = cbgu_IntMap_place($this, var$8);
                        while (true) {
                            var$11 = var$9.data;
                            if (!var$11[var$10])
                                break;
                            var$10 = (var$10 + 1 | 0) & $this.$mask2;
                        }
                        var$11[var$10] = var$8;
                        $this.$valueTable0.data[var$10] = $value;
                    }
                    var$6 = var$6 + 1 | 0;
                }
            }
        }
    return null;
},
cbgu_IntMap_get0 = ($this, $key) => {
    let $i;
    if (!$key)
        return !$this.$hasZeroValue ? null : $this.$zeroValue;
    $i = cbgu_IntMap_locateKey($this, $key);
    return $i < 0 ? null : $this.$valueTable0.data[$i];
},
cbgu_IntMap_get = ($this, $key, $defaultValue) => {
    let $i;
    if (!$key) {
        if ($this.$hasZeroValue)
            $defaultValue = $this.$zeroValue;
        return $defaultValue;
    }
    $i = cbgu_IntMap_locateKey($this, $key);
    if ($i >= 0)
        $defaultValue = $this.$valueTable0.data[$i];
    return $defaultValue;
},
cbgu_IntMap_remove = ($this, $key) => {
    let $oldValue, $i, $keyTable, $valueTable, $oldValue_0, $mask, $next, var$9, $placement;
    if (!$key) {
        if (!$this.$hasZeroValue)
            return null;
        $this.$hasZeroValue = 0;
        $oldValue = $this.$zeroValue;
        $this.$zeroValue = null;
        $this.$size8 = $this.$size8 - 1 | 0;
        return $oldValue;
    }
    $i = cbgu_IntMap_locateKey($this, $key);
    if ($i < 0)
        return null;
    $keyTable = $this.$keyTable4;
    $valueTable = $this.$valueTable0.data;
    $oldValue_0 = $valueTable[$i];
    $mask = $this.$mask2;
    $next = ($i + 1 | 0) & $mask;
    while (true) {
        var$9 = $keyTable.data;
        $key = var$9[$next];
        if (!$key)
            break;
        $placement = cbgu_IntMap_place($this, $key);
        if ((($next - $placement | 0) & $mask) > (($i - $placement | 0) & $mask)) {
            var$9[$i] = $key;
            $valueTable[$i] = $valueTable[$next];
            $i = $next;
        }
        $next = ($next + 1 | 0) & $mask;
    }
    var$9[$i] = 0;
    $valueTable[$i] = null;
    $this.$size8 = $this.$size8 - 1 | 0;
    return $oldValue_0;
},
cbgu_IntMap_containsKey = ($this, $key) => {
    if (!$key)
        return $this.$hasZeroValue;
    return cbgu_IntMap_locateKey($this, $key) < 0 ? 0 : 1;
};
function cbgu_IntSet() {
    let a = this; jl_Object.call(a);
    a.$size6 = 0;
    a.$keyTable5 = null;
    a.$hasZeroValue1 = 0;
    a.$loadFactor8 = 0.0;
    a.$threshold4 = 0;
    a.$shift1 = 0;
    a.$mask1 = 0;
}
let cbgu_IntSet__init_0 = $this => {
    let var$1, var$2;
    $this.$loadFactor8 = 0.800000011920929;
    var$1 = cbgu_ObjectSet_tableSize(51, 0.800000011920929);
    $this.$threshold4 = var$1 * 0.800000011920929 | 0;
    var$2 = var$1 - 1 | 0;
    $this.$mask1 = var$2;
    $this.$shift1 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$2));
    $this.$keyTable5 = $rt_createIntArray(var$1);
},
cbgu_IntSet__init_ = () => {
    let var_0 = new cbgu_IntSet();
    cbgu_IntSet__init_0(var_0);
    return var_0;
},
cbgu_IntSet_place = ($this, $item) => {
    return Long_lo(Long_shru(Long_mul(Long_fromInt($item), Long_create(2135587861, 2654435769)), $this.$shift1));
},
cbgu_IntSet_locateKey = ($this, $key) => {
    let $keyTable, $i, $other;
    $keyTable = $this.$keyTable5;
    $i = cbgu_IntSet_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if (!$other)
            return  -($i + 1 | 0) | 0;
        if ($other == $key)
            break;
        $i = ($i + 1 | 0) & $this.$mask1;
    }
    return $i;
},
cbgu_IntSet_add = ($this, $key) => {
    let $i, var$3, var$4, var$5, var$6, var$7;
    if (!$key) {
        if ($this.$hasZeroValue1)
            return 0;
        $this.$hasZeroValue1 = 1;
        $this.$size6 = $this.$size6 + 1 | 0;
        return 1;
    }
    $i = cbgu_IntSet_locateKey($this, $key);
    if ($i >= 0)
        return 0;
    $i =  -($i + 1 | 0) | 0;
    var$3 = $this.$keyTable5.data;
    var$3[$i] = $key;
    $key = $this.$size6 + 1 | 0;
    $this.$size6 = $key;
    if ($key >= $this.$threshold4)
        a: {
            $key = var$3.length;
            $i = $key << 1;
            $this.$threshold4 = $i * $this.$loadFactor8 | 0;
            var$4 = $i - 1 | 0;
            $this.$mask1 = var$4;
            $this.$shift1 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$4));
            var$3 = $this.$keyTable5;
            $this.$keyTable5 = $rt_createIntArray($i);
            if ($this.$size6 > 0) {
                $i = 0;
                while (true) {
                    if ($i >= $key)
                        break a;
                    var$4 = var$3.data[$i];
                    if (var$4) {
                        var$5 = $this.$keyTable5;
                        var$6 = cbgu_IntSet_place($this, var$4);
                        while (true) {
                            var$7 = var$5.data;
                            if (!var$7[var$6])
                                break;
                            var$6 = (var$6 + 1 | 0) & $this.$mask1;
                        }
                        var$7[var$6] = var$4;
                    }
                    $i = $i + 1 | 0;
                }
            }
        }
    return 1;
},
cbgu_IntSet_remove = ($this, $key) => {
    let $i, $keyTable, $mask, $next, var$6, var$7, $placement;
    if (!$key) {
        if (!$this.$hasZeroValue1)
            return 0;
        $this.$hasZeroValue1 = 0;
        $this.$size6 = $this.$size6 - 1 | 0;
        return 1;
    }
    $i = cbgu_IntSet_locateKey($this, $key);
    if ($i < 0)
        return 0;
    $keyTable = $this.$keyTable5;
    $mask = $this.$mask1;
    $next = ($i + 1 | 0) & $mask;
    while (true) {
        var$6 = $keyTable.data;
        var$7 = var$6[$next];
        if (!var$7)
            break;
        $placement = cbgu_IntSet_place($this, var$7);
        if ((($next - $placement | 0) & $mask) > (($i - $placement | 0) & $mask)) {
            var$6[$i] = var$7;
            $i = $next;
        }
        $next = ($next + 1 | 0) & $mask;
    }
    var$6[$i] = 0;
    $this.$size6 = $this.$size6 - 1 | 0;
    return 1;
},
cgxgbtf_FileDB = $rt_classWithoutFields();
function cgxgbtf_MemoryFileStorage() {
    let a = this; cgxgbtf_FileDB.call(a);
    a.$fileMap = null;
    a.$tmpPaths = null;
    a.$debug = 0;
}
let cgxgbtf_MemoryFileStorage__init_ = $this => {
    $this.$tmpPaths = cbgu_Array__init_();
    $this.$debug = 0;
    $this.$fileMap = cbgu_OrderedMap__init_();
},
cgxgbtf_MemoryFileStorage__init_0 = () => {
    let var_0 = new cgxgbtf_MemoryFileStorage();
    cgxgbtf_MemoryFileStorage__init_(var_0);
    return var_0;
},
cgxgbtf_MemoryFileStorage_read = ($this, $file) => {
    let $path, $data, $byteArray, $e, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15, $$je;
    $path = cgxgbtf_MemoryFileStorage_fixPath($this, $file.$file);
    $data = cgxgbtf_MemoryFileStorage_getInternal($this, $path);
    if ($data === null)
        return null;
    $byteArray = $data.$bytes;
    a: {
        try {
            $file = ji_ByteArrayInputStream__init_0($byteArray);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_RuntimeException) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $file;
    }
    var$6 = $this.$fileMap;
    cbgu_Array_removeValue(var$6.$keys3, $path, 0);
    var$7 = cbgu_ObjectMap_locateKey(var$6, $path);
    if (var$7 < 0)
        $file = null;
    else {
        $byteArray = var$6.$keyTable0;
        var$8 = var$6.$valueTable.data;
        $file = var$8[var$7];
        var$9 = var$6.$mask3;
        var$10 = (var$7 + 1 | 0) & var$9;
        while (true) {
            var$11 = $byteArray.data;
            $data = var$11[var$10];
            if ($data === null)
                break;
            var$12 = cbgu_ObjectMap_place(var$6, $data);
            if (((var$10 - var$12 | 0) & var$9) > ((var$7 - var$12 | 0) & var$9)) {
                var$11[var$7] = $data;
                var$8[var$7] = var$8[var$10];
                var$7 = var$10;
            }
            var$10 = (var$10 + 1 | 0) & var$9;
        }
        var$11[var$7] = null;
        var$8[var$7] = null;
        var$6.$size9 = var$6.$size9 - 1 | 0;
    }
    var$13 = $file;
    if ($this.$debug) {
        $data = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($data);
        jl_AbstractStringBuilder_append0($data, 34);
        jl_AbstractStringBuilder_append0(jl_StringBuilder_append($data, $path), 34);
        var$14 = jl_AbstractStringBuilder_toString($data);
        var$6 = var$13 !== null && cgxgbtf_FileData_isDirectory(var$13) ? $rt_s(142) : $rt_s(143);
        var$15 = jl_System_out();
        $data = jl_Class_getSimpleName(jl_Object_getClass($this));
        var$7 = var$13 === null ? 0 : 1;
        $file = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($file);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append4(jl_StringBuilder_append(jl_StringBuilder_append($file, $data), var$6), var$7), $rt_s(144)), var$14);
        $data = jl_AbstractStringBuilder_toString($file);
        otcic_JsConsolePrintStream_println(var$15, $data);
    }
    if (var$13 !== null)
        $this.$removeFile($path);
    $file = new cbgu_GdxRuntimeException;
    $data = jl_Class_getSimpleName(jl_Object_getClass($this));
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $data), $rt_s(145)), $path);
    jl_Throwable__init_0($file, jl_AbstractStringBuilder_toString(var$6), $e);
    $rt_throw($file);
},
cgxgbtf_MemoryFileStorage_writeInternal = ($this, $file, $data, $append, $expectedLength) => {
    let $path, $oldData, var$7, var$8, $newSize, $oldBytes, $i, $j, $cur, $parentPath;
    $path = cgxgbtf_MemoryFileStorage_fixPath($this, $file.$file);
    $oldData = cbgu_ObjectMap_get($this.$fileMap, $path);
    if ($append && $oldData !== null) {
        var$7 = $data.data;
        var$8 = $oldData.$bytes.data;
        $append = var$7.length;
        $expectedLength = var$8.length;
        $newSize = $append + $expectedLength | 0;
        $data = $rt_createByteArray($newSize);
        $oldBytes = $data.data;
        $i = 0;
        while ($i < $expectedLength) {
            $oldBytes[$i] = var$8[$i];
            $i = $i + 1 | 0;
        }
        $j = 0;
        while ($expectedLength < $newSize) {
            $oldBytes[$expectedLength] = var$7[$j];
            $expectedLength = $expectedLength + 1 | 0;
            $j = $j + 1 | 0;
        }
    }
    cgxgbtf_MemoryFileStorage_putFileInternal($this, $path, $data, 1);
    $cur = cgxgbt_TeaFileHandle_parent($file);
    while (!cgxgbtf_MemoryFileStorage_isRootFolder($this, $cur)) {
        $oldData = $cur;
        $parentPath = cgxgbtf_MemoryFileStorage_fixPath($this, $oldData.$file);
        if (!cbgu_ObjectMap_containsKey($this.$fileMap, $parentPath))
            cgxgbtf_MemoryFileStorage_putFolderInternal($this, $parentPath);
        $cur = cgxgbt_TeaFileHandle_parent($oldData);
    }
},
cgxgbtf_MemoryFileStorage_mkdirs = ($this, $file) => {
    let $cur, $path, $parentPath;
    cgxgbtf_MemoryFileStorage_putFolderInternal($this, cgxgbtf_MemoryFileStorage_fixPath($this, $file.$file));
    $cur = cgxgbt_TeaFileHandle_parent($file);
    while (!cgxgbtf_MemoryFileStorage_isRootFolder($this, $cur)) {
        $path = $cur;
        $parentPath = cgxgbtf_MemoryFileStorage_fixPath($this, $path.$file);
        if (!cbgu_ObjectMap_containsKey($this.$fileMap, $parentPath))
            cgxgbtf_MemoryFileStorage_putFolderInternal($this, $parentPath);
        $cur = cgxgbt_TeaFileHandle_parent($path);
    }
},
cgxgbtf_MemoryFileStorage_exists = ($this, $file) => {
    let $path, var$3, var$4, var$5, var$6;
    $path = cgxgbtf_MemoryFileStorage_fixPath($this, $file.$file);
    if (cgxgbtf_MemoryFileStorage_isRootFolder($this, $file))
        return 1;
    $file = cbgu_ObjectMap_get($this.$fileMap, $path);
    var$3 = $file === null ? 0 : 1;
    if ($this.$debug) {
        $file = $file !== null && cgxgbtf_FileData_isDirectory($file) ? $rt_s(146) : $rt_s(147);
        var$4 = jl_System_out();
        var$5 = jl_Class_getSimpleName(jl_Object_getClass($this));
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append4(jl_StringBuilder_append(jl_StringBuilder_append(var$6, var$5), $file), var$3), $rt_s(144)), $path);
        $file = jl_AbstractStringBuilder_toString(var$6);
        otcic_JsConsolePrintStream_println(var$4, $file);
    }
    return var$3;
},
cgxgbtf_MemoryFileStorage_length = ($this, $file) => {
    let $data;
    $data = cgxgbtf_MemoryFileStorage_getInternal($this, cgxgbtf_MemoryFileStorage_fixPath($this, $file.$file));
    if ($data !== null && !cgxgbtf_FileData_isDirectory($data))
        return Long_fromInt($data.$bytes.data.length);
    return Long_ZERO;
},
cgxgbtf_MemoryFileStorage_isRootFolder = ($this, $cur) => {
    let $path;
    $path = cgxgbtf_MemoryFileStorage_fixPath($this, $cur.$file);
    if (!jl_String_isEmpty($path) && !jl_String_equals($path, $rt_s(148)) && !jl_String_equals($path, $rt_s(94)) && !jl_String_equals($path, $rt_s(149)))
        return 0;
    return 1;
},
cgxgbtf_MemoryFileStorage_putFile = ($this, $key, $data) => {
    return;
},
cgxgbtf_MemoryFileStorage_removeFile = ($this, $key) => {
    return;
},
cgxgbtf_MemoryFileStorage_getInternal = ($this, $path) => {
    let $fileData, $type, var$4, var$5, var$6, var$7, var$8, var$9;
    $fileData = cbgu_ObjectMap_get($this.$fileMap, $path);
    if ($this.$debug) {
        $type = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($type);
        jl_AbstractStringBuilder_append0($type, 34);
        jl_AbstractStringBuilder_append0(jl_StringBuilder_append($type, $path), 34);
        var$4 = jl_AbstractStringBuilder_toString($type);
        $type = $fileData !== null && cgxgbtf_FileData_isDirectory($fileData) ? $rt_s(150) : $rt_s(151);
        $path = jl_System_out();
        var$5 = jl_Class_getSimpleName(jl_Object_getClass($this));
        var$6 = $fileData === null ? 0 : 1;
        if ($fileData === null)
            var$7 = 0;
        else {
            var$8 = $fileData.$bytes;
            var$7 = var$8 === null ? 0 : var$8.data.length;
        }
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append4(jl_StringBuilder_append(jl_StringBuilder_append(var$9, var$5), $type), var$6), $rt_s(152)), var$7), $rt_s(144)), var$4);
        $type = jl_AbstractStringBuilder_toString(var$9);
        otcic_JsConsolePrintStream_println($path, $type);
    }
    return $fileData;
},
cgxgbtf_MemoryFileStorage_putFileInternal = ($this, $path, $bytes, $callMethod) => {
    let var$4, $fileData, var$6, var$7, var$8, var$9;
    if ($this.$debug) {
        var$4 = $bytes.data;
        $fileData = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($fileData);
        jl_AbstractStringBuilder_append0($fileData, 34);
        jl_AbstractStringBuilder_append0(jl_StringBuilder_append($fileData, $path), 34);
        var$6 = jl_AbstractStringBuilder_toString($fileData);
        $fileData = jl_System_out();
        var$7 = jl_Class_getSimpleName(jl_Object_getClass($this));
        var$8 = var$4.length;
        var$9 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$9);
        jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$9, var$7), $rt_s(153)), var$6), $rt_s(154)), var$8);
        var$7 = jl_AbstractStringBuilder_toString(var$9);
        otcic_JsConsolePrintStream_println($fileData, var$7);
    }
    if (!jl_String_isEmpty($path) && !jl_String_equals($path, $rt_s(148)) && !jl_String_equals($path, $rt_s(94)) && !jl_String_equals($path, $rt_s(149))) {
        $fileData = cgxgbtf_FileData__init_0($path, $bytes);
        cbgu_OrderedMap_put($this.$fileMap, $path, $fileData);
        if ($callMethod)
            $this.$putFile($path, $fileData);
        return;
    }
    $fileData = new cbgu_GdxRuntimeException;
    jl_Throwable__init_($fileData, $rt_s(155));
    $rt_throw($fileData);
},
cgxgbtf_MemoryFileStorage_putFolderInternal = ($this, $path) => {
    cgxgbtf_MemoryFileStorage_putFolderInternal0($this, $path, 1);
},
cgxgbtf_MemoryFileStorage_putFolderInternal0 = ($this, $path, $callMethod) => {
    let var$3, var$4, var$5, $fileData;
    if ($this.$debug) {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append0(var$3, 34);
        jl_AbstractStringBuilder_append0(jl_StringBuilder_append(var$3, $path), 34);
        var$4 = jl_AbstractStringBuilder_toString(var$3);
        var$3 = jl_System_out();
        var$5 = jl_Class_getSimpleName(jl_Object_getClass($this));
        $fileData = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($fileData);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($fileData, var$5), $rt_s(156)), var$4);
        var$5 = jl_AbstractStringBuilder_toString($fileData);
        otcic_JsConsolePrintStream_println(var$3, var$5);
    }
    if (!jl_String_isEmpty($path) && !jl_String_equals($path, $rt_s(148)) && !jl_String_equals($path, $rt_s(94)) && !jl_String_equals($path, $rt_s(149))) {
        $fileData = cgxgbtf_FileData__init_1($path);
        cbgu_OrderedMap_put($this.$fileMap, $path, cgxgbtf_FileData__init_1($path));
        if ($callMethod)
            $this.$putFile($path, $fileData);
        return;
    }
    var$3 = new cbgu_GdxRuntimeException;
    jl_Throwable__init_(var$3, $rt_s(155));
    $rt_throw(var$3);
},
cgxgbtf_MemoryFileStorage_fixPath = ($this, $path) => {
    let var$2, var$3;
    var$2 = jl_String_trim($path);
    if (jl_String_startsWith(var$2, $rt_s(149)))
        var$2 = jl_String_replace(var$2, $rt_s(149), $rt_s(24));
    if (jl_String_startsWith(var$2, $rt_s(148))) {
        var$2 = jur_Pattern_matcher(jur_Pattern_compile($rt_s(148)), var$2);
        jur_Matcher_reset(var$2);
        if (!jur_Matcher_find(var$2))
            var$2 = var$2.$string0;
        else {
            var$3 = new jl_StringBuffer;
            jl_AbstractStringBuilder__init_(var$3);
            jur_Matcher_appendReplacement(var$2, var$3, $rt_s(24));
            var$2 = jl_AbstractStringBuilder_toString(jur_Matcher_appendTail(var$2, var$3));
        }
    }
    if (!jl_String_startsWith(var$2, $rt_s(94))) {
        $path = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($path);
        jl_AbstractStringBuilder_append0($path, 47);
        jl_StringBuilder_append($path, var$2);
        var$2 = jl_AbstractStringBuilder_toString($path);
    }
    if (!jl_String_endsWith(var$2, $rt_s(94))) {
        $path = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($path);
        jl_AbstractStringBuilder_append0(jl_StringBuilder_append($path, var$2), 47);
        var$2 = jl_AbstractStringBuilder_toString($path);
    }
    return var$2;
},
cgxgbtft_InternalStorage = $rt_classWithoutFields(cgxgbtf_MemoryFileStorage),
cgxgbtft_ClasspathStorage = $rt_classWithoutFields(cgxgbtf_MemoryFileStorage);
function cgxgbtft_LocalDBStorage() {
    cgxgbtf_MemoryFileStorage.call(this);
    this.$dataBase = null;
}
let cgxgbtft_LocalDBStorage_setupIndexedDB = ($this, $teaApplication) => {
    let $config, $request, $databaseName, var$5;
    if ($teaApplication === null)
        return;
    $config = $teaApplication.$config;
    $teaApplication.$delayInitCount = $teaApplication.$delayInitCount + 1 | 0;
    $request = indexedDB || mozIndexedDB || webkitIndexedDB || msIndexedDB;
    if (typeof $request === 'undefined' ? 1 : 0) {
        $databaseName = new jl_IllegalStateException;
        jl_Throwable__init_($databaseName, $rt_s(157));
        $rt_throw($databaseName);
    }
    $databaseName = $config.$localStoragePrefix;
    $request = $request.open($rt_ustr($databaseName), 1);
    $config = new cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0;
    $config.$_03 = $request;
    var$5 = otji_JS_function(otji_JSWrapper_unwrap($config), "handleEvent");
    $request.onupgradeneeded = var$5;
    $config = new cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1;
    $config.$_016 = $this;
    $config.$_18 = $request;
    $config.$_25 = $teaApplication;
    $config = otji_JS_function(otji_JSWrapper_unwrap($config), "handleEvent");
    $request.onsuccess = $config;
    $config = new cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2;
    $config.$_014 = $databaseName;
    $config.$_17 = $teaApplication;
    $teaApplication = otji_JS_function(otji_JSWrapper_unwrap($config), "handleEvent");
    $request.onerror = $teaApplication;
},
cgxgbtft_LocalDBStorage_putFile = ($this, $key, $fileData) => {
    let $type, $transaction, $objectStore, $dbFileData, $request;
    if ($this.$debug) {
        $type = $fileData !== null && cgxgbtf_FileData_isDirectory($fileData) ? $rt_s(158) : $rt_s(159);
        $transaction = jl_System_out();
        $objectStore = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($objectStore);
        jl_StringBuilder_append(jl_StringBuilder_append($objectStore, $type), $key);
        $objectStore = jl_AbstractStringBuilder_toString($objectStore);
        otcic_JsConsolePrintStream_println($transaction, $objectStore);
    }
    $objectStore = $this.$dataBase.transaction("FILE_DATA", "readwrite").objectStore("FILE_DATA");
    $dbFileData = cgxgbtfi_IndexedDBFileData_create$js_body$_5($fileData.$type6, new Date());
    if (!cgxgbtf_FileData_isDirectory($fileData))
        $dbFileData.contents = otji_JS_wrap($fileData.$bytes);
    $type = $rt_ustr($key);
    $request = $objectStore.put($dbFileData, $type);
    $fileData = new cgxgbtft_LocalDBStorage$putFile$lambda$_2_0;
    $fileData.$_01 = $key;
    $key = otji_JS_function(otji_JSWrapper_unwrap($fileData), "handleEvent");
    $request.onerror = $key;
},
cgxgbtft_LocalDBStorage_removeFile = ($this, $key) => {
    let $objectStore, $transaction, $request;
    if ($this.$debug) {
        $objectStore = jl_System_out();
        $transaction = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($transaction);
        jl_StringBuilder_append(jl_StringBuilder_append($transaction, $rt_s(160)), $key);
        $transaction = jl_AbstractStringBuilder_toString($transaction);
        otcic_JsConsolePrintStream_println($objectStore, $transaction);
    }
    $objectStore = $this.$dataBase.transaction("FILE_DATA", "readwrite").objectStore("FILE_DATA");
    $transaction = $rt_ustr($key);
    $request = $objectStore.delete($transaction);
    $objectStore = new cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0;
    $objectStore.$_010 = $key;
    $key = otji_JS_function(otji_JSWrapper_unwrap($objectStore), "handleEvent");
    $request.onerror = $key;
},
cgxgbt_TeaPermissions$TeaPermissionResult = $rt_classWithoutFields(0);
function cgxgbt_TeaClipboard$ClipboardWriteHandler() {
    jl_Object.call(this);
    this.$this$00 = null;
}
let cgxgbt_TeaClipboard$ClipboardWriteHandler_granted$exported$0 = var$1 => {
    var$1 = var$1.$this$00;
    var$1.$hasWritePermissions = 1;
    cgxgbt_TeaClipboard_setContentNATIVE$js_body$_4($rt_ustr(var$1.$content));
},
cgxgbt_TeaClipboard$ClipboardWriteHandler_prompt$exported$1 = var$1 => {
    var$1 = var$1.$this$00;
    var$1.$hasWritePermissions = 1;
    cgxgbt_TeaClipboard_setContentNATIVE$js_body$_4($rt_ustr(var$1.$content));
},
cgxgbt_TeaClipboard$ClipboardWriteHandler_denied$exported$2 = var$1 => {
    var$1.$this$00.$hasWritePermissions = 0;
};
function cgxgbt_TeaClipboard$_init_$lambda$_0_0() {
    jl_Object.call(this);
    this.$_06 = null;
}
let cgxgbt_TeaClipboard$_init_$lambda$_0_0_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3;
    var$1 = var$1.$_06;
    var$3 = var$2.clipboardData;
    if (var$3 !== null)
        var$3.setData("text/plain", $rt_ustr(var$1.$content));
    var$2.preventDefault();
};
function cgxgbt_TeaClipboard$_init_$lambda$_0_1() {
    jl_Object.call(this);
    this.$_019 = null;
}
let cgxgbt_TeaClipboard$_init_$lambda$_0_1_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3;
    var$1 = var$1.$_019;
    var$3 = var$2.clipboardData;
    if (var$3 !== null)
        var$3.setData("text/plain", $rt_ustr(var$1.$content));
    var$2.preventDefault();
};
function cgxgbt_TeaClipboard$_init_$lambda$_0_2() {
    jl_Object.call(this);
    this.$_011 = null;
}
let cgxgbt_TeaClipboard$_init_$lambda$_0_2_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3;
    var$1 = var$1.$_011;
    var$3 = var$2.clipboardData;
    if (var$3 !== null)
        var$1.$content = $rt_str(var$3.getData("text/plain"));
    var$2.preventDefault();
},
cgxgbta_AssetLoaderListener = $rt_classWithoutFields(0),
cgxgbta_AssetLoaderListener_onProgress = ($this, $total, $loaded) => {
    return;
},
cgxgbta_AssetLoaderListener_onFailure = ($this, $url) => {
    return;
},
cgxgbta_AssetLoaderListener_onSuccess = ($this, $url, $result) => {
    return;
};
function cgxgbt_TeaApplication$4() {
    jl_Object.call(this);
    this.$this$046 = null;
}
function cgxgbt_TeaApplication$5() {
    jl_Object.call(this);
    this.$this$029 = null;
}
let cbg_LifecycleListener = $rt_classWithoutFields(0),
cgxgbtwh_HowlerAudioManager = $rt_classWithoutFields(),
cbgm_MathUtils = $rt_classWithoutFields(),
cbgm_MathUtils_random1 = null,
cbgm_MathUtils_sin = $radians => {
    return cbgm_MathUtils$Sin_table.data[($radians * 2607.594482421875 | 0) & 16383];
},
cbgm_MathUtils_cos = $radians => {
    return cbgm_MathUtils$Sin_table.data[(($radians + 1.5707963705062866) * 2607.594482421875 | 0) & 16383];
},
cbgm_MathUtils_sinDeg = $degrees => {
    return cbgm_MathUtils$Sin_table.data[($degrees * 45.511112213134766 | 0) & 16383];
},
cbgm_MathUtils_cosDeg = $degrees => {
    return cbgm_MathUtils$Sin_table.data[(($degrees + 90.0) * 45.511112213134766 | 0) & 16383];
},
cbgm_MathUtils_atanUnchecked = $i => {
    let $n, $c, $c2, $c3, $c5, $c7, $c9;
    $n = jl_Math_absImpl0($i);
    $c = ($n - 1.0) / ($n + 1.0);
    $c2 = $c * $c;
    $c3 = $c * $c2;
    $c5 = $c3 * $c2;
    $c7 = $c5 * $c2;
    $c9 = $c7 * $c2;
    return jl_Math_sign($i) * (0.7853981633974483 + 0.99997726 * $c - 0.33262347 * $c3 + 0.19354346 * $c5 - 0.11643287 * $c7 + 0.05265332 * $c9 - 0.0117212 * $c9 * $c2);
},
cbgm_MathUtils_random2 = () => {
    return cbgm_RandomXS128_nextFloat(cbgm_MathUtils_random1);
},
cbgm_MathUtils_random0 = $range => {
    return cbgm_RandomXS128_nextFloat(cbgm_MathUtils_random1) * $range;
},
cbgm_MathUtils_random = ($start, $end) => {
    return $start + cbgm_RandomXS128_nextFloat(cbgm_MathUtils_random1) * ($end - $start);
},
cbgm_MathUtils_nextPowerOfTwo = $value => {
    let var$2;
    if (!$value)
        return 1;
    var$2 = $value + (-1) | 0;
    $value = var$2 | var$2 >> 1;
    $value = $value | $value >> 2;
    $value = $value | $value >> 4;
    $value = $value | $value >> 8;
    return ($value | $value >> 16) + 1 | 0;
},
cbgm_MathUtils_clamp = ($value, $min, $max) => {
    if ($value < $min)
        return $min;
    if ($value <= $max)
        return $value;
    return $max;
},
cbgm_MathUtils_lerp = ($fromValue, $toValue, $progress) => {
    return $fromValue + ($toValue - $fromValue) * $progress;
},
cbgm_MathUtils_floor = $value => {
    return ($value + 16384.0 | 0) - 16384 | 0;
},
cbgm_MathUtils_round = $value => {
    return ($value + 16384.5 | 0) - 16384 | 0;
},
cbgm_MathUtils__clinit_ = () => {
    let var$1, var$2, var$3, var$4;
    var$1 = new cbgm_RandomXS128;
    var$2 = new ju_Random;
    var$3 = Long_or(Long_shl(Long_fromInt(ju_Random_nextInt(var$2)), 32), Long_fromInt(ju_Random_nextInt(var$2)));
    if (Long_eq(var$3, Long_ZERO))
        var$3 = Long_create(0, 2147483648);
    var$4 = cbgm_RandomXS128_murmurHash3(var$3);
    var$3 = cbgm_RandomXS128_murmurHash3(var$4);
    var$1.$seed0 = var$4;
    var$1.$seed1 = var$3;
    cbgm_MathUtils_random1 = var$1;
},
ju_Dictionary = $rt_classWithoutFields();
function ju_Hashtable() {
    let a = this; ju_Dictionary.call(a);
    a.$elementCount1 = 0;
    a.$elementData1 = null;
    a.$loadFactor7 = 0.0;
    a.$threshold10 = 0;
    a.$firstSlot = 0;
    a.$lastSlot = 0;
    a.$modCount3 = 0;
}
let ju_Hashtable_EMPTY_ENUMERATION = null,
ju_Hashtable_EMPTY_ITERATOR = null,
ju_Hashtable__init_ = $this => {
    let var$1, var$2;
    $this.$lastSlot = (-1);
    $this.$elementCount1 = 0;
    var$1 = $rt_createArray(ju_Hashtable$Entry, 11);
    var$2 = var$1.data;
    $this.$elementData1 = var$1;
    $this.$firstSlot = var$2.length;
    $this.$loadFactor7 = 0.75;
    ju_Hashtable_computeMaxSize($this);
},
ju_Hashtable__init_0 = () => {
    let var_0 = new ju_Hashtable();
    ju_Hashtable__init_(var_0);
    return var_0;
},
ju_Hashtable_computeMaxSize = $this => {
    $this.$threshold10 = $this.$elementData1.data.length * $this.$loadFactor7 | 0;
},
ju_Hashtable_put = ($this, $key, $value) => {
    let $result, var$4, var$5, $index, $entry, $hash, var$9, var$10, var$11, var$12, var$13;
    jl_Object_monitorEnterSync($this);
    try {
        if ($key !== null && $value !== null) {
            $result = $key;
            var$4 = jl_String_hashCode($result) & 2147483647;
            var$5 = $this.$elementData1.data;
            $index = var$4 % var$5.length | 0;
            $entry = var$5[$index];
            while ($entry !== null && !($entry.$hashcode == jl_String_hashCode($result) && $entry.$key.$equals($key) ? 1 : 0)) {
                $entry = $entry.$next6;
            }
            if ($entry !== null) {
                $result = $entry.$value;
                $entry.$value = $value;
                return $result;
            }
            $this.$modCount3 = $this.$modCount3 + 1 | 0;
            $hash = $this.$elementCount1 + 1 | 0;
            $this.$elementCount1 = $hash;
            if ($hash > $this.$threshold10) {
                $hash = ($this.$elementData1.data.length << 1) + 1 | 0;
                if (!$hash)
                    $hash = 1;
                $index = (-1);
                var$9 = $rt_createArray(ju_Hashtable$Entry, $hash);
                var$5 = var$9.data;
                var$10 = $this.$lastSlot + 1 | 0;
                var$11 = $hash;
                while (true) {
                    var$10 = var$10 + (-1) | 0;
                    if (var$10 < $this.$firstSlot)
                        break;
                    var$12 = $this.$elementData1.data[var$10];
                    while (var$12 !== null) {
                        var$13 = (var$12.$key.$hashCode() & 2147483647) % $hash | 0;
                        if (var$13 < var$11)
                            var$11 = var$13;
                        if (var$13 > $index)
                            $index = var$13;
                        $entry = var$12.$next6;
                        var$12.$next6 = var$5[var$13];
                        var$5[var$13] = var$12;
                        var$12 = $entry;
                    }
                }
                $this.$firstSlot = var$11;
                $this.$lastSlot = $index;
                $this.$elementData1 = var$9;
                ju_Hashtable_computeMaxSize($this);
                $index = var$4 % $this.$elementData1.data.length | 0;
            }
            if ($index < $this.$firstSlot)
                $this.$firstSlot = $index;
            if ($index > $this.$lastSlot)
                $this.$lastSlot = $index;
            $entry = new ju_Hashtable$Entry;
            ju_MapEntry__init_($entry, $key, $value);
            $entry.$hashcode = jl_String_hashCode($result);
            var$5 = $this.$elementData1.data;
            $entry.$next6 = var$5[$index];
            var$5[$index] = $entry;
            return null;
        }
        $key = new jl_NullPointerException;
        jl_Exception__init_($key);
        $rt_throw($key);
    } finally {
        jl_Object_monitorExitSync($this);
    }
},
ju_Hashtable__clinit_ = () => {
    ju_Hashtable_EMPTY_ENUMERATION = new ju_Hashtable$1;
    ju_Hashtable_EMPTY_ITERATOR = new ju_Hashtable$2;
};
function ju_Properties() {
    ju_Hashtable.call(this);
    this.$defaults = null;
}
let cgxgbt_TeaGL20$CustomIntMap = $rt_classWithoutFields(),
cgxgbt_TeaGL20$CustomIntMap_create$js_body$_1 = () => {
    return [undefined];
},
cgxgbt_TeaGL20$CustomIntMap_get$js_body$_2 = (var$1, var$2) => {
    if (var$1[var$2] === undefined) return null;
    return var$1[var$2];
},
cgxgbt_TeaGL20$CustomIntMap_add$js_body$_4 = (var$1, var$2) => {
    var$1.push(var$2);
    return var$1.length - 1;
},
cbggg_GLVersion$Type = $rt_classWithoutFields(jl_Enum),
cbggg_GLVersion$Type_OpenGL = null,
cbggg_GLVersion$Type_GLES = null,
cbggg_GLVersion$Type_WebGL = null,
cbggg_GLVersion$Type_NONE = null,
cbggg_GLVersion$Type_$VALUES = null,
cbggg_GLVersion$Type_values = () => {
    return cbggg_GLVersion$Type_$VALUES.$clone0();
},
cbggg_GLVersion$Type__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbggg_GLVersion$Type;
    jl_Enum__init_(var$1, $rt_s(161), 0);
    cbggg_GLVersion$Type_OpenGL = var$1;
    var$1 = new cbggg_GLVersion$Type;
    jl_Enum__init_(var$1, $rt_s(162), 1);
    cbggg_GLVersion$Type_GLES = var$1;
    var$1 = new cbggg_GLVersion$Type;
    jl_Enum__init_(var$1, $rt_s(140), 2);
    cbggg_GLVersion$Type_WebGL = var$1;
    var$1 = new cbggg_GLVersion$Type;
    jl_Enum__init_(var$1, $rt_s(163), 3);
    cbggg_GLVersion$Type_NONE = var$1;
    var$2 = $rt_createArray(cbggg_GLVersion$Type, 4);
    var$3 = var$2.data;
    var$3[0] = cbggg_GLVersion$Type_OpenGL;
    var$3[1] = cbggg_GLVersion$Type_GLES;
    var$3[2] = cbggg_GLVersion$Type_WebGL;
    var$3[3] = var$1;
    cbggg_GLVersion$Type_$VALUES = var$2;
};
function cgxgbta_AssetLoadImpl$1() {
    jl_Object.call(this);
    this.$this$050 = null;
}
let cgxgbta_AssetLoadImpl$1_handleEvent$exported$0 = (var$1, var$2) => {
    var$1;
    var$2.preventDefault();
};
function cgxgbta_AssetLoadImpl$2() {
    jl_Object.call(this);
    this.$this$039 = null;
}
let cgxgbta_AssetLoadImpl$2_handleEvent$exported$0 = (var$1, var$2) => {
    var$1;
    var$2.preventDefault();
};
function cgxgbta_AssetLoadImpl$3() {
    let a = this; jl_Object.call(a);
    a.$val$config0 = null;
    a.$this$010 = null;
}
let cgxgbta_AssetLoadImpl$3_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    var$1 = var$1;
    var$2.preventDefault();
    var$3 = var$2.dataTransfer.files;
    var$2 = var$1.$this$010;
    var$1 = var$1.$val$config0;
    var$4 = var$3.length;
    if (var$4 > 0) {
        cbgu_Array__init_5(new cbgu_Array);
        var$5 = new Array();
        var$6 = 0;
        while (var$6 < var$4) {
            var$7 = var$3[var$6];
            var$8 = $rt_str(var$7.name);
            if (var$1.$windowListener.$acceptFileDropped(var$8)) {
                var$9 = new cgxgbta_AssetLoadImpl$getFile$lambda$_2_0;
                var$9.$_04 = var$2;
                var$9.$_11 = var$7;
                var$9.$_21 = var$8;
                var$5.push(new Promise(otji_JS_function(otji_JSWrapper_unwrap(var$9), "onExecute")));
            }
            var$6 = var$6 + 1 | 0;
        }
        var$3 = Promise.all(var$5);
        var$2 = new cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0;
        var$2.$_017 = var$1;
        var$1 = new cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1;
        var$2 = var$3.then(otji_JS_function(otji_JSWrapper_unwrap(var$2), "apply"), otji_JS_function(otji_JSWrapper_unwrap(var$1), "apply"));
        var$1 = new cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2;
        var$2.finally(otji_JS_function(otji_JSWrapper_unwrap(var$1), "get"));
    }
},
cbgur_ClassReflection = $rt_classWithoutFields(),
cbgur_ClassReflection_getConstructor = ($c, $parameterTypes) => {
    let $e, $constructor, var$5, var$6, var$7, var$8, var$9, var$10, $$je;
    if ($parameterTypes !== null && $parameterTypes.data.length) {
        a: {
            try {
                $e = cbgur_Constructor__init_(jl_Class_getConstructor($c, $parameterTypes));
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_SecurityException) {
                    $e = $$je;
                    break a;
                } else if ($$je instanceof jl_NoSuchMethodException) {
                    $e = $$je;
                    $constructor = new cbgur_ReflectionException;
                    $c = jl_Class_getName($c);
                    jl_Throwable__init_0($constructor, $c, $e);
                    $rt_throw($constructor);
                } else {
                    throw $$e;
                }
            }
            return $e;
        }
        $constructor = new cbgur_ReflectionException;
        $c = jl_Class_getName($c);
        jl_Throwable__init_0($constructor, $c, $e);
        $rt_throw($constructor);
    }
    $parameterTypes = (jl_Class_getDeclaredConstructors($c)).data;
    var$5 = $parameterTypes.length;
    var$6 = $rt_createArray(jlr_Constructor, var$5);
    var$7 = var$6.data;
    var$8 = 0;
    var$9 = 0;
    while (var$9 < var$5) {
        $c = $parameterTypes[var$9];
        if (jlr_Modifier_isPublic(jlr_Constructor_getModifiers($c))) {
            var$10 = var$8 + 1 | 0;
            var$7[var$8] = $c;
            var$8 = var$10;
        }
        var$9 = var$9 + 1 | 0;
    }
    if (var$8 < var$7.length)
        var$6 = ju_Arrays_copyOf0(var$6, var$8);
    $parameterTypes = var$6.data;
    return $parameterTypes.length <= 0 ? null : cbgur_Constructor__init_($parameterTypes[0]);
},
cbgur_ClassReflection_getDeclaredConstructor = ($c, $parameterTypes) => {
    let $e, $declaredConstructor, $$je;
    a: {
        try {
            $e = cbgur_Constructor__init_(jl_Class_getDeclaredConstructor($c, $parameterTypes));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_SecurityException) {
                $e = $$je;
                break a;
            } else if ($$je instanceof jl_NoSuchMethodException) {
                $e = $$je;
                $declaredConstructor = new cbgur_ReflectionException;
                $c = jl_Class_getName($c);
                jl_Throwable__init_0($declaredConstructor, $c, $e);
                $rt_throw($declaredConstructor);
            } else {
                throw $$e;
            }
        }
        return $e;
    }
    $declaredConstructor = new cbgur_ReflectionException;
    $c = jl_Class_getName($c);
    jl_Throwable__init_0($declaredConstructor, $c, $e);
    $rt_throw($declaredConstructor);
};
function cbgur_Constructor() {
    jl_Object.call(this);
    this.$constructor0 = null;
}
let cbgur_Constructor__init_0 = ($this, $constructor) => {
    $this.$constructor0 = $constructor;
},
cbgur_Constructor__init_ = var_0 => {
    let var_1 = new cbgur_Constructor();
    cbgur_Constructor__init_0(var_1, var_0);
    return var_1;
},
cbgur_Constructor_setAccessible = ($this, $accessible) => {
    return;
},
cbgur_ReflectionException = $rt_classWithoutFields(jl_Exception);
function jur_Pattern() {
    let a = this; jl_Object.call(a);
    a.$lexemes = null;
    a.$flags0 = 0;
    a.$backRefs = null;
    a.$needsBackRefReplacement = 0;
    a.$globalGroupIndex = 0;
    a.$compCount = 0;
    a.$consCount = 0;
    a.$start2 = null;
}
let jur_Pattern_matcher = ($this, $input) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    var$2 = new jur_Matcher;
    var$2.$leftBound0 = (-1);
    var$2.$rightBound0 = (-1);
    var$2.$pat = $this;
    var$2.$start5 = $this.$start2;
    var$2.$string0 = $input;
    var$2.$leftBound0 = 0;
    var$3 = $input.$nativeString.length;
    var$2.$rightBound0 = var$3;
    var$4 = new jur_MatchResultImpl;
    var$5 = var$2.$leftBound0;
    var$6 = $this.$globalGroupIndex;
    var$7 = $this.$compCount + 1 | 0;
    var$8 = $this.$consCount + 1 | 0;
    var$4.$previousMatch = (-1);
    var$6 = var$6 + 1 | 0;
    var$4.$groupCount = var$6;
    var$4.$groupBounds = $rt_createIntArray(var$6 * 2 | 0);
    var$9 = $rt_createIntArray(var$8);
    var$4.$consumers = var$9;
    ju_Arrays_fill(var$9, (-1));
    if (var$7 > 0)
        var$4.$compQuantCounters = $rt_createIntArray(var$7);
    ju_Arrays_fill(var$4.$groupBounds, (-1));
    jur_MatchResultImpl_reset(var$4, $input, var$5, var$3);
    var$2.$matchResult = var$4;
    var$4.$anchoringBounds = 1;
    return var$2;
},
jur_Pattern_split = ($this, $inputSeq, $limit) => {
    let $res, $mat, $index, $curPos, var$7, var$8;
    $res = ju_ArrayList__init_();
    $mat = jur_Pattern_matcher($this, $inputSeq);
    $index = 0;
    $curPos = 0;
    $inputSeq = $inputSeq;
    if (!$inputSeq.$nativeString.length) {
        var$7 = $rt_createArray(jl_String, 1);
        var$7.data[0] = $rt_s(24);
        return var$7;
    }
    while (jur_Matcher_find($mat)) {
        var$8 = $index + 1 | 0;
        if (var$8 >= $limit && $limit > 0)
            break;
        ju_ArrayList_add($res, jl_String_substring($inputSeq, $curPos, jur_Matcher_start($mat)));
        $curPos = jur_Matcher_end($mat);
        $index = var$8;
    }
    a: {
        ju_ArrayList_add($res, jl_String_substring($inputSeq, $curPos, $inputSeq.$nativeString.length));
        $index = $index + 1 | 0;
        if (!$limit)
            while (true) {
                $index = $index + (-1) | 0;
                if ($index < 0)
                    break;
                if ((ju_ArrayList_get($res, $index)).$nativeString.length)
                    break a;
                ju_ArrayList_remove($res, $index);
            }
    }
    if ($index < 0)
        $index = 0;
    var$7 = $rt_createArray(jl_String, $index);
    return ju_AbstractCollection_toArray($res, var$7);
},
jur_Pattern_pattern = $this => {
    return $this.$lexemes.$orig;
},
jur_Pattern_processExpression = ($this, $ch, $newFlags, $last) => {
    let $children, $saveFlags, $saveChangedFlags, $fSet, $child, var$9;
    $children = ju_ArrayList__init_();
    $saveFlags = $this.$flags0;
    $saveChangedFlags = 0;
    if ($newFlags != $saveFlags)
        $this.$flags0 = $newFlags;
    a: {
        switch ($ch) {
            case -1073741784:
                $fSet = new jur_NonCapFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            case -536870872:
            case -268435416:
                break;
            case -134217688:
            case -67108824:
                $fSet = new jur_BehindFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            case -33554392:
                $fSet = new jur_AtomicFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            default:
                $newFlags = $this.$globalGroupIndex + 1 | 0;
                $this.$globalGroupIndex = $newFlags;
                if ($last !== null)
                    $fSet = jur_FSet__init_0($newFlags);
                else {
                    $fSet = new jur_FinalSet;
                    jur_FSet__init_($fSet, 0);
                    $saveChangedFlags = 1;
                }
                $newFlags = $this.$globalGroupIndex;
                if ($newFlags <= (-1))
                    break a;
                if ($newFlags >= 10)
                    break a;
                $this.$backRefs.data[$newFlags] = $fSet;
                break a;
        }
        $fSet = new jur_AheadFSet;
        jur_FSet__init_($fSet, (-1));
    }
    while (true) {
        if (jur_Lexer_isLetter($this.$lexemes) && $this.$lexemes.$lookAhead == (-536870788)) {
            $last = jur_CharClass__init_0(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
            while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
                $child = $this.$lexemes;
                var$9 = $child.$lookAhead;
                if (var$9 && var$9 != (-536870788) && var$9 != (-536870871))
                    break;
                jur_CharClass_add0($last, jur_Lexer_next($child));
                $child = $this.$lexemes;
                if ($child.$ch != (-536870788))
                    continue;
                jur_Lexer_next($child);
            }
            $child = jur_Pattern_processRangeSet($this, $last);
            $child.$setNext($fSet);
        } else if ($this.$lexemes.$ch == (-536870788)) {
            $child = jur_EmptySet__init_($fSet);
            jur_Lexer_next($this.$lexemes);
        } else {
            $child = jur_Pattern_processSubExpression($this, $fSet);
            $last = $this.$lexemes;
            if ($last.$ch == (-536870788))
                jur_Lexer_next($last);
        }
        if ($child !== null)
            ju_ArrayList_add($children, $child);
        if (jur_Lexer_isEmpty($this.$lexemes))
            break;
        if ($this.$lexemes.$ch == (-536870871))
            break;
    }
    if ($this.$lexemes.$lookBack == (-536870788))
        ju_ArrayList_add($children, jur_EmptySet__init_($fSet));
    if ($this.$flags0 != $saveFlags && !$saveChangedFlags) {
        $this.$flags0 = $saveFlags;
        $last = $this.$lexemes;
        $last.$flags1 = $saveFlags;
        $last.$lookAhead = $last.$ch;
        $last.$lookAheadST = $last.$curST;
        var$9 = $last.$curToc;
        $last.$index = var$9 + 1 | 0;
        $last.$lookAheadToc = var$9;
        jur_Lexer_movePointer($last);
    }
    switch ($ch) {
        case -1073741784:
            break;
        case -536870872:
            $last = new jur_PositiveLookAhead;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -268435416:
            $last = new jur_NegativeLookAhead;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -134217688:
            $last = new jur_PositiveLookBehind;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -67108824:
            $last = new jur_NegativeLookBehind;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -33554392:
            $last = new jur_AtomicJointSet;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        default:
            switch ($children.$size3) {
                case 0:
                    break;
                case 1:
                    return jur_SingleSet__init_0(ju_ArrayList_get($children, 0), $fSet);
                default:
                    return jur_JointSet__init_0($children, $fSet);
            }
            return jur_EmptySet__init_($fSet);
    }
    $last = new jur_NonCapJointSet;
    jur_JointSet__init_($last, $children, $fSet);
    return $last;
},
jur_Pattern_processDecomposedChar = $this => {
    let $codePoints, $curSymb, $curSymbIndex, $codePointsHangul, var$5, var$6, $readCodePoints;
    $codePoints = $rt_createIntArray(4);
    $curSymb = (-1);
    $curSymbIndex = (-1);
    if (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
        $codePointsHangul = $codePoints.data;
        $curSymb = jur_Lexer_next($this.$lexemes);
        $codePointsHangul[0] = $curSymb;
        $curSymbIndex = $curSymb - 4352 | 0;
    }
    if ($curSymbIndex >= 0 && $curSymbIndex < 19) {
        $codePointsHangul = $rt_createCharArray(3);
        $codePoints = $codePointsHangul.data;
        $codePoints[0] = $curSymb & 65535;
        var$5 = $this.$lexemes;
        var$6 = var$5.$ch;
        $readCodePoints = var$6 - 4449 | 0;
        if ($readCodePoints >= 0 && $readCodePoints < 21) {
            $codePoints[1] = var$6 & 65535;
            jur_Lexer_next(var$5);
            var$5 = $this.$lexemes;
            var$6 = var$5.$ch;
            $curSymb = var$6 - 4519 | 0;
            if ($curSymb >= 0 && $curSymb < 28) {
                $codePoints[2] = var$6 & 65535;
                jur_Lexer_next(var$5);
                return jur_HangulDecomposedCharSet__init_($codePointsHangul, 3);
            }
            return jur_HangulDecomposedCharSet__init_($codePointsHangul, 2);
        }
        if (!jur_Pattern_hasFlag($this, 2))
            return jur_CharSet__init_($codePoints[0]);
        if (jur_Pattern_hasFlag($this, 64))
            return jur_UCICharSet__init_($codePoints[0]);
        return jur_CICharSet__init_($codePoints[0]);
    }
    $codePointsHangul = $codePoints.data;
    $curSymb = 1;
    while ($curSymb < 4 && !jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
        $readCodePoints = $curSymb + 1 | 0;
        $codePointsHangul[$curSymb] = jur_Lexer_next($this.$lexemes);
        $curSymb = $readCodePoints;
    }
    if ($curSymb == 1) {
        $readCodePoints = $codePointsHangul[0];
        if (!(jur_Lexer_singleDecompTable.$get3($readCodePoints) == jur_Lexer_singleDecompTableSize ? 0 : 1))
            return jur_Pattern_processCharSet($this, $codePointsHangul[0]);
    }
    if (!jur_Pattern_hasFlag($this, 2))
        return jur_DecomposedCharSet__init_0($codePoints, $curSymb);
    if (jur_Pattern_hasFlag($this, 64)) {
        var$5 = new jur_UCIDecomposedCharSet;
        jur_DecomposedCharSet__init_(var$5, $codePoints, $curSymb);
        return var$5;
    }
    var$5 = new jur_CIDecomposedCharSet;
    jur_DecomposedCharSet__init_(var$5, $codePoints, $curSymb);
    return var$5;
},
jur_Pattern_processSubExpression = ($this, $last) => {
    let $cur, $term, var$4, var$5, var$6, $next, var$8;
    if (jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead)) {
        if (jur_Pattern_hasFlag($this, 128)) {
            $cur = jur_Pattern_processDecomposedChar($this);
            if (!jur_Lexer_isEmpty($this.$lexemes)) {
                $term = $this.$lexemes;
                var$4 = $term.$ch;
                if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788) && !jur_Lexer_isLetter($term))
                    $cur = jur_Pattern_processQuantifier($this, $last, $cur);
            }
        } else if (!jur_Lexer_isHighSurrogate0($this.$lexemes) && !jur_Lexer_isLowSurrogate0($this.$lexemes)) {
            $term = new jl_StringBuffer;
            jl_AbstractStringBuilder__init_($term);
            while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isHighSurrogate0($this.$lexemes) && !jur_Lexer_isLowSurrogate0($this.$lexemes)) {
                if (!(!jur_Lexer_isNextSpecial($this.$lexemes) && !$this.$lexemes.$lookAhead) && !(!jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead))) {
                    var$5 = $this.$lexemes.$lookAhead;
                    if (var$5 != (-536870871) && (var$5 & (-2147418113)) != (-2147483608) && var$5 != (-536870788) && var$5 != (-536870876))
                        break;
                }
                var$4 = jur_Lexer_next($this.$lexemes);
                if (!jl_Character_isSupplementaryCodePoint(var$4))
                    jl_AbstractStringBuilder_append0($term, var$4 & 65535);
                else
                    jl_AbstractStringBuilder_append2($term, jl_Character_toChars(var$4));
            }
            if (!jur_Pattern_hasFlag($this, 2)) {
                $cur = new jur_SequenceSet;
                jur_LeafSet__init_($cur);
                $cur.$string = jl_AbstractStringBuilder_toString($term);
                var$4 = $term.$length2;
                $cur.$charCount0 = var$4;
                $cur.$leftToRight = jur_SequenceSet$IntHash__init_(var$4);
                $cur.$rightToLeft = jur_SequenceSet$IntHash__init_($cur.$charCount0);
                var$6 = 0;
                while (var$6 < ($cur.$charCount0 - 1 | 0)) {
                    jur_SequenceSet$IntHash_put($cur.$leftToRight, jl_String_charAt($cur.$string, var$6), ($cur.$charCount0 - var$6 | 0) - 1 | 0);
                    jur_SequenceSet$IntHash_put($cur.$rightToLeft, jl_String_charAt($cur.$string, ($cur.$charCount0 - var$6 | 0) - 1 | 0), ($cur.$charCount0 - var$6 | 0) - 1 | 0);
                    var$6 = var$6 + 1 | 0;
                }
            } else
                $cur = jur_Pattern_hasFlag($this, 64) ? jur_UCISequenceSet__init_0($term) : jur_CISequenceSet__init_0($term);
        } else
            $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
    } else {
        $term = $this.$lexemes;
        if ($term.$ch != (-536870871))
            $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
        else {
            if ($last instanceof jur_FinalSet)
                $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $term.$orig, $term.$curToc));
            $cur = jur_EmptySet__init_($last);
        }
    }
    a: {
        if (!jur_Lexer_isEmpty($this.$lexemes)) {
            var$4 = $this.$lexemes.$ch;
            if (!(var$4 == (-536870871) && !($last instanceof jur_FinalSet)) && var$4 != (-536870788)) {
                $next = jur_Pattern_processSubExpression($this, $last);
                if ($cur instanceof jur_LeafQuantifierSet && !($cur instanceof jur_CompositeQuantifierSet) && !($cur instanceof jur_GroupQuantifierSet) && !($cur instanceof jur_AltQuantifierSet)) {
                    var$8 = $cur;
                    $term = var$8;
                    if (!$next.$first($term.$innerSet)) {
                        $cur = new jur_UnifiedQuantifierSet;
                        $term = $term.$innerSet;
                        var$8 = var$8;
                        jur_LeafQuantifierSet__init_($cur, $term, var$8.$next2, var$8.$type5);
                        $cur.$innerSet.$setNext($cur);
                    }
                }
                if (($next.$getType1() & 65535) != 43)
                    $cur.$setNext($next);
                else
                    $cur.$setNext($next.$innerSet);
                break a;
            }
        }
        if ($cur === null)
            return null;
        $cur.$setNext($last);
    }
    if (($cur.$getType1() & 65535) != 43)
        return $cur;
    return $cur.$innerSet;
},
jur_Pattern_processQuantifier = ($this, $last, $term) => {
    let $q, $quant, $q_0, var$6, $leaf;
    $q = $this.$lexemes;
    $quant = $q.$ch;
    if ($term !== null && !($term instanceof jur_LeafSet)) {
        switch ($quant) {
            case -2147483606:
                jur_Lexer_next($q);
                $q = new jur_PossessiveGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, $quant);
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $q;
            case -2147483605:
                jur_Lexer_next($q);
                $q = new jur_PosPlusGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-2147483606));
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $q;
            case -2147483585:
                jur_Lexer_next($q);
                $q = new jur_PosAltGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $q;
            case -2147483525:
                $q_0 = new jur_PosCompositeGroupQuantifierSet;
                $q = jur_Lexer_nextSpecial($q);
                var$6 = $this.$compCount + 1 | 0;
                $this.$compCount = var$6;
                jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), var$6);
                jur_FSet_$callClinit();
                $term.$setNext(jur_FSet_posFSet);
                return $q_0;
            case -1073741782:
            case -1073741781:
                jur_Lexer_next($q);
                $q = new jur_ReluctantGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, $quant);
                $term.$setNext($q);
                return $q;
            case -1073741761:
                jur_Lexer_next($q);
                $q = new jur_RelAltGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                $term.$setNext($last);
                return $q;
            case -1073741701:
                $q_0 = new jur_RelCompositeGroupQuantifierSet;
                $q = jur_Lexer_nextSpecial($q);
                $quant = $this.$compCount + 1 | 0;
                $this.$compCount = $quant;
                jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                $term.$setNext($q_0);
                return $q_0;
            case -536870870:
            case -536870869:
                jur_Lexer_next($q);
                if ($term.$getType1() != (-2147483602)) {
                    $q = new jur_GroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                } else if (jur_Pattern_hasFlag($this, 32)) {
                    $q = new jur_DotAllQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                } else {
                    $q = new jur_DotQuantifierSet;
                    $q_0 = jur_AbstractLineTerminator_getInstance($this.$flags0);
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                    $q.$lt = $q_0;
                }
                $term.$setNext($q);
                return $q;
            case -536870849:
                jur_Lexer_next($q);
                $q = new jur_AltGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                $term.$setNext($last);
                return $q;
            case -536870789:
                $q_0 = new jur_CompositeGroupQuantifierSet;
                $q = jur_Lexer_nextSpecial($q);
                $quant = $this.$compCount + 1 | 0;
                $this.$compCount = $quant;
                jur_CompositeGroupQuantifierSet__init_($q_0, $q, $term, $last, (-536870849), $quant);
                $term.$setNext($q_0);
                return $q_0;
            default:
        }
        return $term;
    }
    $leaf = null;
    if ($term !== null)
        $leaf = $term;
    switch ($quant) {
        case -2147483606:
        case -2147483605:
            jur_Lexer_next($q);
            $q = new jur_PossessiveQuantifierSet;
            jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
            $leaf.$next2 = $q;
            return $q;
        case -2147483585:
            jur_Lexer_next($q);
            $term = new jur_PossessiveAltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-2147483585));
            return $term;
        case -2147483525:
            $term = new jur_PossessiveCompositeQuantifierSet;
            jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-2147483525));
            return $term;
        case -1073741782:
        case -1073741781:
            jur_Lexer_next($q);
            $q = new jur_ReluctantQuantifierSet;
            jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
            $leaf.$next2 = $q;
            return $q;
        case -1073741761:
            jur_Lexer_next($q);
            $term = new jur_ReluctantAltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-1073741761));
            return $term;
        case -1073741701:
            $term = new jur_ReluctantCompositeQuantifierSet;
            jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($q), $leaf, $last, (-1073741701));
            return $term;
        case -536870870:
        case -536870869:
            jur_Lexer_next($q);
            $q = jur_LeafQuantifierSet__init_0($leaf, $last, $quant);
            $leaf.$next2 = $q;
            return $q;
        case -536870849:
            jur_Lexer_next($q);
            $term = new jur_AltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-536870849));
            return $term;
        case -536870789:
            return jur_CompositeQuantifierSet__init_0(jur_Lexer_nextSpecial($q), $leaf, $last, (-536870789));
        default:
    }
    return $term;
},
jur_Pattern_processTerminal = ($this, $last) => {
    let $term, var$3, var$4, $ch, $newFlags, $number, $negative, $cc;
    $term = null;
    var$3 = $last instanceof jur_FinalSet;
    while (true) {
        a: {
            var$4 = $this.$lexemes;
            $ch = var$4.$ch;
            if (($ch & (-2147418113)) == (-2147483608)) {
                jur_Lexer_next(var$4);
                $newFlags = ($ch & 16711680) >> 16;
                $ch = $ch & (-16711681);
                if ($ch == (-16777176))
                    $this.$flags0 = $newFlags;
                else {
                    if ($ch != (-1073741784))
                        $newFlags = $this.$flags0;
                    $term = jur_Pattern_processExpression($this, $ch, $newFlags, $last);
                    var$4 = $this.$lexemes;
                    if (var$4.$ch != (-536870871))
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), var$4.$orig, var$4.$curToc));
                    jur_Lexer_next(var$4);
                }
            } else {
                b: {
                    c: {
                        switch ($ch) {
                            case -2147483599:
                            case -2147483598:
                            case -2147483597:
                            case -2147483596:
                            case -2147483595:
                            case -2147483594:
                            case -2147483593:
                            case -2147483592:
                            case -2147483591:
                                break c;
                            case -2147483583:
                                break;
                            case -2147483582:
                                jur_Lexer_next(var$4);
                                $term = jur_WordBoundary__init_(0);
                                break a;
                            case -2147483577:
                                jur_Lexer_next(var$4);
                                $term = new jur_PreviousMatch;
                                jur_AbstractSet__init_($term);
                                break a;
                            case -2147483558:
                                jur_Lexer_next(var$4);
                                $term = new jur_EOLSet;
                                $number = $this.$consCount + 1 | 0;
                                $this.$consCount = $number;
                                jur_EOLSet__init_($term, $number);
                                break a;
                            case -2147483550:
                                jur_Lexer_next(var$4);
                                $term = jur_WordBoundary__init_(1);
                                break a;
                            case -2147483526:
                                jur_Lexer_next(var$4);
                                $term = new jur_EOISet;
                                jur_AbstractSet__init_($term);
                                break a;
                            case -536870876:
                                jur_Lexer_next(var$4);
                                $this.$consCount = $this.$consCount + 1 | 0;
                                if (jur_Pattern_hasFlag($this, 8)) {
                                    if (jur_Pattern_hasFlag($this, 1)) {
                                        $term = jur_UMultiLineEOLSet__init_0($this.$consCount);
                                        break a;
                                    }
                                    $term = jur_MultiLineEOLSet__init_($this.$consCount);
                                    break a;
                                }
                                if (jur_Pattern_hasFlag($this, 1)) {
                                    $term = jur_UEOLSet__init_0($this.$consCount);
                                    break a;
                                }
                                $term = jur_EOLSet__init_0($this.$consCount);
                                break a;
                            case -536870866:
                                jur_Lexer_next(var$4);
                                if (jur_Pattern_hasFlag($this, 32)) {
                                    $term = jur_DotAllSet__init_0();
                                    break a;
                                }
                                $term = jur_DotSet__init_0(jur_AbstractLineTerminator_getInstance($this.$flags0));
                                break a;
                            case -536870821:
                                jur_Lexer_next(var$4);
                                $negative = 0;
                                $term = $this.$lexemes;
                                if ($term.$ch == (-536870818)) {
                                    $negative = 1;
                                    jur_Lexer_next($term);
                                }
                                $term = jur_Pattern_processRangeSet($this, jur_Pattern_processRangeExpression($this, $negative));
                                $term.$setNext($last);
                                var$4 = $this.$lexemes;
                                if (var$4.$ch != (-536870819))
                                    $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), var$4.$orig, var$4.$curToc));
                                jur_Lexer_setMode(var$4, 1);
                                jur_Lexer_next($this.$lexemes);
                                break a;
                            case -536870818:
                                jur_Lexer_next(var$4);
                                $this.$consCount = $this.$consCount + 1 | 0;
                                if (!jur_Pattern_hasFlag($this, 8)) {
                                    $term = new jur_SOLSet;
                                    jur_AbstractSet__init_($term);
                                    break a;
                                }
                                $term = new jur_MultiLineSOLSet;
                                var$4 = jur_AbstractLineTerminator_getInstance($this.$flags0);
                                jur_AbstractSet__init_($term);
                                $term.$lt1 = var$4;
                                break a;
                            case 0:
                                $cc = var$4.$curST;
                                if ($cc !== null)
                                    $term = jur_Pattern_processRangeSet($this, $cc);
                                else {
                                    if (jur_Lexer_isEmpty(var$4)) {
                                        $term = jur_EmptySet__init_($last);
                                        break a;
                                    }
                                    $term = jur_CharSet__init_($ch & 65535);
                                }
                                jur_Lexer_next($this.$lexemes);
                                break a;
                            default:
                                break b;
                        }
                        jur_Lexer_next(var$4);
                        $term = new jur_SOLSet;
                        jur_AbstractSet__init_($term);
                        break a;
                    }
                    $number = ($ch & 2147483647) - 48 | 0;
                    if ($this.$globalGroupIndex < $number)
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), jur_Lexer_toString(var$4), jur_Lexer_getIndex($this.$lexemes)));
                    jur_Lexer_next(var$4);
                    $this.$consCount = $this.$consCount + 1 | 0;
                    $term = !jur_Pattern_hasFlag($this, 2) ? jur_BackReferenceSet__init_($number, $this.$consCount) : jur_Pattern_hasFlag($this, 64) ? jur_UCIBackReferenceSet__init_0($number, $this.$consCount) : jur_CIBackReferenceSet__init_0($number, $this.$consCount);
                    $this.$backRefs.data[$number].$isBackReferenced = 1;
                    $this.$needsBackRefReplacement = 1;
                    break a;
                }
                if ($ch >= 0 && !jur_Lexer_isSpecial(var$4)) {
                    $term = jur_Pattern_processCharSet($this, $ch);
                    jur_Lexer_next($this.$lexemes);
                } else if ($ch == (-536870788))
                    $term = jur_EmptySet__init_($last);
                else {
                    if ($ch != (-536870871)) {
                        $last = new jur_PatternSyntaxException;
                        $term = !jur_Lexer_isSpecial($this.$lexemes) ? jl_Character_toString($ch & 65535) : $this.$lexemes.$curST.$toString();
                        var$4 = $this.$lexemes;
                        jur_PatternSyntaxException__init_0($last, $term, var$4.$orig, var$4.$curToc);
                        $rt_throw($last);
                    }
                    if (var$3) {
                        $last = new jur_PatternSyntaxException;
                        var$4 = $this.$lexemes;
                        jur_PatternSyntaxException__init_0($last, $rt_s(24), var$4.$orig, var$4.$curToc);
                        $rt_throw($last);
                    }
                    $term = jur_EmptySet__init_($last);
                }
            }
        }
        if ($ch != (-16777176))
            break;
    }
    return $term;
},
jur_Pattern_processRangeExpression = ($this, $alt) => {
    let $res, $buffer, $intersection, $notClosed, $firstInClass, $cs, $cur, $negative, $$je;
    $res = jur_CharClass__init_0(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
    jur_AbstractCharClass_setNegative($res, $alt);
    $buffer = (-1);
    $intersection = 0;
    $notClosed = 0;
    $firstInClass = 1;
    a: {
        b: {
            c: while (true) {
                if (jur_Lexer_isEmpty($this.$lexemes))
                    break a;
                $cs = $this.$lexemes;
                $alt = $cs.$ch;
                $notClosed = $alt == (-536870819) && !$firstInClass ? 0 : 1;
                if (!$notClosed)
                    break a;
                d: {
                    switch ($alt) {
                        case -536870874:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = jur_Lexer_next($this.$lexemes);
                            $cs = $this.$lexemes;
                            if ($cs.$ch != (-536870874)) {
                                $buffer = 38;
                                break d;
                            }
                            if ($cs.$lookAhead == (-536870821)) {
                                jur_Lexer_next($cs);
                                $intersection = 1;
                                $buffer = (-1);
                                break d;
                            }
                            jur_Lexer_next($cs);
                            if ($firstInClass) {
                                $res = jur_Pattern_processRangeExpression($this, 0);
                                break d;
                            }
                            if ($this.$lexemes.$ch == (-536870819))
                                break d;
                            jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, 0));
                            break d;
                        case -536870867:
                            if (!$firstInClass) {
                                $alt = $cs.$lookAhead;
                                if ($alt != (-536870819) && $alt != (-536870821) && $buffer >= 0) {
                                    jur_Lexer_next($cs);
                                    $cs = $this.$lexemes;
                                    $cur = $cs.$ch;
                                    if (jur_Lexer_isSpecial($cs))
                                        break c;
                                    if ($cur < 0) {
                                        $negative = $this.$lexemes.$lookAhead;
                                        if ($negative != (-536870819) && $negative != (-536870821) && $buffer >= 0)
                                            break c;
                                    }
                                    e: {
                                        try {
                                            if (jur_Lexer_isLetter0($cur))
                                                break e;
                                            $cur = $cur & 65535;
                                            break e;
                                        } catch ($$e) {
                                            $$je = $rt_wrapException($$e);
                                            if ($$je instanceof jl_Exception) {
                                                break b;
                                            } else {
                                                throw $$e;
                                            }
                                        }
                                    }
                                    try {
                                        jur_CharClass_add($res, $buffer, $cur);
                                    } catch ($$e) {
                                        $$je = $rt_wrapException($$e);
                                        if ($$je instanceof jl_Exception) {
                                            break b;
                                        } else {
                                            throw $$e;
                                        }
                                    }
                                    jur_Lexer_next($this.$lexemes);
                                    $buffer = (-1);
                                    break d;
                                }
                            }
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = 45;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870821:
                            if ($buffer >= 0) {
                                jur_CharClass_add0($res, $buffer);
                                $buffer = (-1);
                            }
                            jur_Lexer_next($this.$lexemes);
                            $negative = 0;
                            $cs = $this.$lexemes;
                            if ($cs.$ch == (-536870818)) {
                                jur_Lexer_next($cs);
                                $negative = 1;
                            }
                            if (!$intersection)
                                jur_CharClass_union($res, jur_Pattern_processRangeExpression($this, $negative));
                            else
                                jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, $negative));
                            $intersection = 0;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870819:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = 93;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870818:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $buffer = 94;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case 0:
                            if ($buffer >= 0)
                                jur_CharClass_add0($res, $buffer);
                            $cs = $this.$lexemes.$curST;
                            if ($cs === null)
                                $buffer = 0;
                            else {
                                jur_CharClass_add1($res, $cs);
                                $buffer = (-1);
                            }
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        default:
                    }
                    if ($buffer >= 0)
                        jur_CharClass_add0($res, $buffer);
                    $buffer = jur_Lexer_next($this.$lexemes);
                }
                $firstInClass = 0;
            }
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
        }
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
    }
    if (!$notClosed) {
        if ($buffer >= 0)
            jur_CharClass_add0($res, $buffer);
        return $res;
    }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), jur_Pattern_pattern($this), $this.$lexemes.$curToc - 1 | 0));
},
jur_Pattern_processCharSet = ($this, $ch) => {
    let $isSupplCodePoint, var$3, var$4;
    $isSupplCodePoint = jl_Character_isSupplementaryCodePoint($ch);
    if (jur_Pattern_hasFlag($this, 2)) {
        a: {
            if (!($ch >= 97 && $ch <= 122)) {
                if ($ch < 65)
                    break a;
                if ($ch > 90)
                    break a;
            }
            return jur_CICharSet__init_($ch & 65535);
        }
        if (jur_Pattern_hasFlag($this, 64) && $ch > 128) {
            if ($isSupplCodePoint) {
                var$3 = new jur_UCISupplCharSet;
                jur_LeafSet__init_(var$3);
                var$3.$charCount0 = 2;
                var$3.$ch3 = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
                return var$3;
            }
            if (jur_Lexer_isLowSurrogate($ch))
                return jur_LowSurrogateCharSet__init_($ch & 65535);
            if (!jur_Lexer_isHighSurrogate($ch))
                return jur_UCICharSet__init_($ch & 65535);
            return jur_HighSurrogateCharSet__init_($ch & 65535);
        }
    }
    if (!$isSupplCodePoint) {
        if (jur_Lexer_isLowSurrogate($ch))
            return jur_LowSurrogateCharSet__init_($ch & 65535);
        if (!jur_Lexer_isHighSurrogate($ch))
            return jur_CharSet__init_($ch & 65535);
        return jur_HighSurrogateCharSet__init_($ch & 65535);
    }
    var$3 = new jur_SupplCharSet;
    jur_LeafSet__init_(var$3);
    var$3.$charCount0 = 2;
    var$3.$ch1 = $ch;
    var$4 = (jl_Character_toChars($ch)).data;
    var$3.$high0 = var$4[0];
    var$3.$low0 = var$4[1];
    return var$3;
},
jur_Pattern_processRangeSet = ($this, $charClass) => {
    let $surrogates, $lowHighSurrRangeSet, var$4;
    if (!jur_AbstractCharClass_hasLowHighSurrogates($charClass)) {
        if (!$charClass.$mayContainSupplCodepoints) {
            if ($charClass.$hasUCI())
                return jur_UCIRangeSet__init_($charClass);
            return jur_RangeSet__init_($charClass);
        }
        if (!$charClass.$hasUCI())
            return jur_SupplRangeSet__init_0($charClass);
        $surrogates = new jur_UCISupplRangeSet;
        jur_SupplRangeSet__init_($surrogates, $charClass);
        return $surrogates;
    }
    $surrogates = jur_AbstractCharClass_getSurrogates($charClass);
    $lowHighSurrRangeSet = new jur_LowHighSurrogateRangeSet;
    jur_AbstractSet__init_($lowHighSurrRangeSet);
    $lowHighSurrRangeSet.$surrChars = $surrogates;
    $lowHighSurrRangeSet.$alt1 = $surrogates.$alt;
    if (!$charClass.$mayContainSupplCodepoints) {
        if ($charClass.$hasUCI())
            return jur_CompositeRangeSet__init_(jur_UCIRangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
        return jur_CompositeRangeSet__init_(jur_RangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
    }
    if (!$charClass.$hasUCI())
        return jur_CompositeRangeSet__init_(jur_SupplRangeSet__init_0(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
    $surrogates = new jur_CompositeRangeSet;
    var$4 = new jur_UCISupplRangeSet;
    jur_SupplRangeSet__init_(var$4, jur_AbstractCharClass_getWithoutSurrogates($charClass));
    jur_CompositeRangeSet__init_0($surrogates, var$4, $lowHighSurrRangeSet);
    return $surrogates;
},
jur_Pattern_compile = $pattern => {
    let var$2, var$3, var$4, var$5;
    if ($pattern === null) {
        $pattern = new jl_NullPointerException;
        jl_Throwable__init_($pattern, $rt_s(164));
        $rt_throw($pattern);
    }
    jur_AbstractSet_counter = 1;
    var$2 = new jur_Pattern;
    var$2.$backRefs = $rt_createArray(jur_FSet, 10);
    var$2.$globalGroupIndex = (-1);
    var$2.$compCount = (-1);
    var$2.$consCount = (-1);
    var$3 = new jur_Lexer;
    var$3.$mode = 1;
    var$3.$orig = $pattern;
    var$3.$pattern0 = $rt_createCharArray($pattern.$nativeString.length + 2 | 0);
    jl_System_fastArraycopy(jl_String_toCharArray($pattern), 0, var$3.$pattern0, 0, $pattern.$nativeString.length);
    var$4 = var$3.$pattern0.data;
    var$5 = var$4.length;
    var$4[var$5 - 1 | 0] = 0;
    var$4[var$5 - 2 | 0] = 0;
    var$3.$patternFullLength = var$5;
    var$3.$flags1 = 0;
    jur_Lexer_movePointer(var$3);
    jur_Lexer_movePointer(var$3);
    var$2.$lexemes = var$3;
    var$2.$flags0 = 0;
    var$2.$start2 = jur_Pattern_processExpression(var$2, (-1), 0, null);
    if (jur_Lexer_isEmpty(var$2.$lexemes)) {
        if (var$2.$needsBackRefReplacement)
            var$2.$start2.$processSecondPass();
        return var$2;
    }
    $pattern = new jur_PatternSyntaxException;
    var$2 = var$2.$lexemes;
    jur_PatternSyntaxException__init_0($pattern, $rt_s(24), var$2.$orig, var$2.$curToc);
    $rt_throw($pattern);
},
jur_Pattern_getSupplement = $ch => {
    if ($ch >= 97 && $ch <= 122)
        $ch = ($ch - 32 | 0) & 65535;
    else if ($ch >= 65 && $ch <= 90)
        $ch = ($ch + 32 | 0) & 65535;
    return $ch;
},
jur_Pattern_hasFlag = ($this, $flag) => {
    return ($this.$flags0 & $flag) != $flag ? 0 : 1;
},
jur_MatchResult = $rt_classWithoutFields(0);
function jur_Matcher() {
    let a = this; jl_Object.call(a);
    a.$pat = null;
    a.$start5 = null;
    a.$string0 = null;
    a.$matchResult = null;
    a.$leftBound0 = 0;
    a.$rightBound0 = 0;
    a.$appendPos = 0;
    a.$replacement0 = null;
    a.$processedRepl = null;
    a.$replacementParts = null;
}
let jur_Matcher_appendReplacement = ($this, $buffer, $replacement) => {
    let var$3, var$4;
    $this.$processedRepl = jur_Matcher_processReplacement($this, $replacement);
    $replacement = $this.$string0;
    var$3 = $this.$appendPos;
    var$4 = jur_Matcher_start($this);
    jl_AbstractStringBuilder_append1($buffer, jl_String_substring($replacement, var$3, var$4));
    jl_AbstractStringBuilder_append($buffer, $this.$processedRepl);
    $this.$appendPos = jur_Matcher_end($this);
    return $this;
},
jur_Matcher_processReplacement = ($this, $replacement) => {
    let $res, $sb, $i, $repl, $index, $replacementPos, $nextBackSlashed, var$9, $gr, $group, $$je;
    $res = $this.$replacement0;
    if ($res !== null && jl_String_equals($res, $replacement)) {
        if ($this.$replacementParts === null)
            return $this.$processedRepl;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        $i = 0;
        while (true) {
            $replacement = $this.$replacementParts;
            if ($i >= $replacement.$size3)
                break;
            jl_StringBuilder_append($sb, ju_ArrayList_get($replacement, $i));
            $i = $i + 1 | 0;
        }
        return jl_AbstractStringBuilder_toString($sb);
    }
    $this.$replacement0 = $replacement;
    $repl = jl_String_toCharArray($replacement);
    $res = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($res);
    $this.$replacementParts = null;
    $index = 0;
    $replacementPos = 0;
    $nextBackSlashed = 0;
    a: {
        b: while (true) {
            var$9 = $repl.data;
            $i = var$9.length;
            if ($index >= $i) {
                $replacement = $this.$replacementParts;
                if ($replacement !== null) {
                    $gr = $res.$length2;
                    if ($replacementPos != $gr)
                        ju_ArrayList_add($replacement, jl_StringBuilder_subSequence($res, $replacementPos, $gr));
                }
                return jl_AbstractStringBuilder_toString($res);
            }
            if (var$9[$index] == 92 && !$nextBackSlashed) {
                $nextBackSlashed = 1;
                $index = $index + 1 | 0;
            }
            c: {
                if ($nextBackSlashed) {
                    if ($index >= $i)
                        break b;
                    jl_AbstractStringBuilder_append0($res, var$9[$index]);
                    $nextBackSlashed = 0;
                } else if (var$9[$index] != 36)
                    jl_AbstractStringBuilder_append0($res, var$9[$index]);
                else {
                    if ($this.$replacementParts === null)
                        $this.$replacementParts = ju_ArrayList__init_();
                    d: {
                        try {
                            $replacement = new jl_String;
                            $index = $index + 1 | 0;
                            jl_String__init_3($replacement, $repl, $index, 1);
                            $gr = jl_Integer_parseInt($replacement);
                            if ($replacementPos == jl_StringBuilder_length($res))
                                break d;
                            ju_ArrayList_add($this.$replacementParts, jl_StringBuilder_subSequence($res, $replacementPos, jl_StringBuilder_length($res)));
                            $replacementPos = jl_StringBuilder_length($res);
                            break d;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                break a;
                            } else {
                                throw $$e;
                            }
                        }
                    }
                    try {
                        ju_ArrayList_add($this.$replacementParts, jur_Matcher$1__init_0($this, $gr));
                        $group = jur_Matcher_group($this, $gr);
                        $replacementPos = $replacementPos + jl_String_length($group) | 0;
                        jl_StringBuilder_append0($res, $group);
                        break c;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            break a;
                        } else {
                            throw $$e;
                        }
                    }
                }
            }
            $index = $index + 1 | 0;
        }
        $replacement = new jl_IndexOutOfBoundsException;
        jl_Exception__init_($replacement);
        $rt_throw($replacement);
    }
    $replacement = new jl_IllegalArgumentException;
    jl_Throwable__init_($replacement, $rt_s(24));
    $rt_throw($replacement);
},
jur_Matcher_reset = $this => {
    let var$1;
    $this.$leftBound0 = 0;
    var$1 = $this.$string0.$nativeString.length;
    $this.$rightBound0 = var$1;
    jur_MatchResultImpl_reset($this.$matchResult, $this.$string0, $this.$leftBound0, var$1);
    $this.$appendPos = 0;
    $this.$replacement0 = null;
    $this.$matchResult.$previousMatch = (-1);
    return $this;
},
jur_Matcher_appendTail = ($this, $buffer) => {
    let var$2, var$3;
    var$2 = $this.$string0;
    var$3 = $this.$appendPos;
    var$2 = var$2;
    jl_AbstractStringBuilder_append1($buffer, jl_String_substring(var$2, var$3, var$2.$nativeString.length));
    return $buffer;
},
jur_Matcher_group = ($this, $group) => {
    let var$2, var$3, var$4;
    var$2 = $this.$matchResult;
    if (jur_MatchResultImpl_start(var$2, $group) < 0)
        var$2 = null;
    else {
        var$3 = var$2.$string3;
        var$4 = jur_MatchResultImpl_start(var$2, $group);
        $group = jur_MatchResultImpl_end0(var$2, $group);
        var$2 = jl_String_substring(var$3, var$4, $group);
    }
    return var$2;
},
jur_Matcher_find0 = ($this, $start) => {
    let $stringLength, var$3, var$4;
    $stringLength = $this.$string0.$nativeString.length;
    if ($start >= 0 && $start <= $stringLength) {
        jur_MatchResultImpl_reset($this.$matchResult, null, (-1), (-1));
        var$3 = $this.$matchResult;
        var$3.$mode0 = 1;
        var$3.$startIndex = $start;
        $stringLength = var$3.$previousMatch;
        if ($stringLength < 0)
            $stringLength = $start;
        var$3.$previousMatch = $stringLength;
        $start = $this.$start5.$find0($start, $this.$string0, var$3);
        if ($start == (-1))
            $this.$matchResult.$hitEnd = 1;
        if ($start >= 0) {
            var$3 = $this.$matchResult;
            if (var$3.$valid2) {
                var$4 = var$3.$groupBounds.data;
                if (var$4[0] == (-1)) {
                    $stringLength = var$3.$startIndex;
                    var$4[0] = $stringLength;
                    var$4[1] = $stringLength;
                }
                var$3.$previousMatch = jur_MatchResultImpl_end(var$3);
                return 1;
            }
        }
        $this.$matchResult.$startIndex = (-1);
        return 0;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$3, jl_String_valueOf0($start));
    $rt_throw(var$3);
},
jur_Matcher_find = $this => {
    let $length, var$2, var$3;
    $length = $this.$string0.$nativeString.length;
    var$2 = $this.$matchResult;
    if (!var$2.$transparentBounds)
        $length = $this.$rightBound0;
    if (var$2.$startIndex >= 0 && var$2.$mode0 == 1) {
        var$2.$startIndex = jur_MatchResultImpl_end(var$2);
        if (jur_MatchResultImpl_end($this.$matchResult) == jur_MatchResultImpl_start($this.$matchResult, 0)) {
            var$2 = $this.$matchResult;
            var$2.$startIndex = var$2.$startIndex + 1 | 0;
        }
        var$3 = $this.$matchResult.$startIndex;
        return var$3 <= $length && jur_Matcher_find0($this, var$3) ? 1 : 0;
    }
    return jur_Matcher_find0($this, $this.$leftBound0);
},
jur_Matcher_start = $this => {
    return jur_MatchResultImpl_start($this.$matchResult, 0);
},
jur_Matcher_end = $this => {
    return jur_MatchResultImpl_end0($this.$matchResult, 0);
},
otji_IDBFactory = $rt_classWithoutFields();
function cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0() {
    jl_Object.call(this);
    this.$_03 = null;
}
let cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3;
    var$2 = var$1.$_03.result;
    var$3 = otji_IDBObjectStoreParameters_create$js_body$_1();
    var$2.createObjectStore("FILE_DATA", var$3);
},
otji_EventHandler = $rt_classWithoutFields(0);
function cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1() {
    let a = this; jl_Object.call(a);
    a.$_016 = null;
    a.$_18 = null;
    a.$_25 = null;
}
let cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1_handleEvent$exported$0 = var$1 => {
    let var$2, var$3, var$4, var$5;
    var$1 = var$1;
    var$2 = var$1.$_016;
    var$3 = var$1.$_18;
    var$1 = var$1.$_25;
    var$3 = var$3.result;
    var$2.$dataBase = var$3;
    var$4 = var$3.transaction("FILE_DATA", "readonly");
    var$5 = var$4.objectStore("FILE_DATA").openCursor();
    var$3 = new cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0;
    var$3.$_07 = var$2;
    var$3.$_13 = var$5;
    var$2 = otji_JS_function(otji_JSWrapper_unwrap(var$3), "handleEvent");
    var$5.onsuccess = var$2;
    var$2 = new cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1;
    var$2.$_018 = var$1;
    var$3 = otji_JS_function(otji_JSWrapper_unwrap(var$2), "handleEvent");
    var$4.oncomplete = var$3;
    var$2 = new cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2;
    var$2.$_0 = var$1;
    var$1 = otji_JS_function(otji_JSWrapper_unwrap(var$2), "handleEvent");
    var$5.onerror = var$1;
};
function cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2() {
    let a = this; jl_Object.call(a);
    a.$_014 = null;
    a.$_17 = null;
}
let cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2_handleEvent$exported$0 = var$1 => {
    let var$2, var$3, var$4;
    var$1 = var$1;
    var$2 = var$1.$_014;
    var$1 = var$1.$_17;
    var$3 = jl_System_err();
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(165)), var$2);
    var$4 = jl_AbstractStringBuilder_toString(var$4);
    otcic_JsConsolePrintStream_println(var$3, var$4);
    var$1.$delayInitCount = var$1.$delayInitCount - 1 | 0;
},
jl_SecurityException = $rt_classWithoutFields(jl_RuntimeException),
jl_ReflectiveOperationException = $rt_classWithoutFields(jl_Exception),
jl_NoSuchMethodException = $rt_classWithoutFields(jl_ReflectiveOperationException),
jur_RandomGenerator = $rt_classWithoutFields(0),
ju_Random = $rt_classWithoutFields(),
ju_Random_nextInt = $this => {
    return 4.294967296E9 * jl_Math_random() + (-2.147483648E9) | 0;
};
function cbgm_RandomXS128() {
    let a = this; ju_Random.call(a);
    a.$seed0 = Long_ZERO;
    a.$seed1 = Long_ZERO;
}
let cbgm_RandomXS128_nextLong = $this => {
    let $s1, $s0;
    $s1 = $this.$seed0;
    $s0 = $this.$seed1;
    $this.$seed0 = $s0;
    $s1 = Long_xor($s1, Long_shl($s1, 23));
    $s1 = Long_xor(Long_xor(Long_xor($s1, $s0), Long_shru($s1, 17)), Long_shru($s0, 26));
    $this.$seed1 = $s1;
    return Long_add($s1, $s0);
},
cbgm_RandomXS128_nextFloat = $this => {
    return Long_toNumber(Long_shru(cbgm_RandomXS128_nextLong($this), 40)) * 5.960464477539063E-8;
},
cbgm_RandomXS128_murmurHash3 = $x => {
    $x = Long_mul(Long_xor($x, Long_shru($x, 33)), Long_create(3981806797, 4283543511));
    $x = Long_mul(Long_xor($x, Long_shru($x, 33)), Long_create(444984403, 3301882366));
    return Long_xor($x, Long_shru($x, 33));
},
ju_Enumeration = $rt_classWithoutFields(0),
ju_Hashtable$1 = $rt_classWithoutFields(),
ju_Iterator = $rt_classWithoutFields(0),
ju_Hashtable$2 = $rt_classWithoutFields();
function jur_MatchResultImpl() {
    let a = this; jl_Object.call(a);
    a.$groupBounds = null;
    a.$consumers = null;
    a.$compQuantCounters = null;
    a.$string3 = null;
    a.$groupCount = 0;
    a.$valid2 = 0;
    a.$leftBound = 0;
    a.$rightBound = 0;
    a.$startIndex = 0;
    a.$transparentBounds = 0;
    a.$anchoringBounds = 0;
    a.$hitEnd = 0;
    a.$requireEnd = 0;
    a.$previousMatch = 0;
    a.$mode0 = 0;
}
let jur_MatchResultImpl_setConsumed = ($this, $counter, $value) => {
    $this.$consumers.data[$counter] = $value;
},
jur_MatchResultImpl_getConsumed = ($this, $counter) => {
    return $this.$consumers.data[$counter];
},
jur_MatchResultImpl_end = $this => {
    return jur_MatchResultImpl_end0($this, 0);
},
jur_MatchResultImpl_end0 = ($this, $group) => {
    jur_MatchResultImpl_checkGroup($this, $group);
    return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
},
jur_MatchResultImpl_setStart = ($this, $group, $offset) => {
    $this.$groupBounds.data[$group * 2 | 0] = $offset;
},
jur_MatchResultImpl_setEnd = ($this, $group, $offset) => {
    $this.$groupBounds.data[($group * 2 | 0) + 1 | 0] = $offset;
},
jur_MatchResultImpl_getStart = ($this, $group) => {
    return $this.$groupBounds.data[$group * 2 | 0];
},
jur_MatchResultImpl_getEnd = ($this, $group) => {
    return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
},
jur_MatchResultImpl_start = ($this, $group) => {
    jur_MatchResultImpl_checkGroup($this, $group);
    return $this.$groupBounds.data[$group * 2 | 0];
},
jur_MatchResultImpl_getEnterCounter = ($this, $setCounter) => {
    return $this.$compQuantCounters.data[$setCounter];
},
jur_MatchResultImpl_setEnterCounter = ($this, $setCounter, $value) => {
    $this.$compQuantCounters.data[$setCounter] = $value;
},
jur_MatchResultImpl_checkGroup = ($this, $group) => {
    let var$2;
    if (!$this.$valid2) {
        var$2 = new jl_IllegalStateException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    if ($group >= 0 && $group < $this.$groupCount)
        return;
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$2, jl_String_valueOf0($group));
    $rt_throw(var$2);
},
jur_MatchResultImpl_reset = ($this, $newSequence, $leftBound, $rightBound) => {
    $this.$valid2 = 0;
    $this.$mode0 = 2;
    ju_Arrays_fill($this.$groupBounds, (-1));
    ju_Arrays_fill($this.$consumers, (-1));
    if ($newSequence !== null)
        $this.$string3 = $newSequence;
    if ($leftBound >= 0) {
        $this.$leftBound = $leftBound;
        $this.$rightBound = $rightBound;
    }
    $this.$startIndex = $this.$leftBound;
},
jl_NumberFormatException = $rt_classWithoutFields(jl_IllegalArgumentException),
jl_IllegalStateException = $rt_classWithoutFields(jl_RuntimeException),
jlr_Modifier = $rt_classWithoutFields(),
jlr_Modifier_modifierNames = null,
jlr_Modifier_canonicalOrder = null,
jlr_Modifier_isPublic = $mod => {
    return !($mod & 1) ? 0 : 1;
},
jlr_Modifier__clinit_ = () => {
    jlr_Modifier_canonicalOrder = $rt_createIntArrayFromData([1, 4, 2, 1024, 8, 16, 128, 64, 32, 256, 2048, 512]);
},
ju_Arrays = $rt_classWithoutFields(),
ju_Arrays_copyOf1 = ($array, $length) => {
    let $result, var$4, $sz, $i;
    $array = $array.data;
    $result = $rt_createCharArray($length);
    var$4 = $result.data;
    $sz = jl_Math_min($length, $array.length);
    $i = 0;
    while ($i < $sz) {
        var$4[$i] = $array[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_copyOf = ($array, $length) => {
    let $result, var$4, $sz, $i;
    $array = $array.data;
    $result = $rt_createByteArray($length);
    var$4 = $result.data;
    $sz = jl_Math_min($length, $array.length);
    $i = 0;
    while ($i < $sz) {
        var$4[$i] = $array[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_copyOf0 = ($original, $newLength) => {
    let var$3, $result, $sz, $i;
    var$3 = $original.data;
    $result = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($original)), $newLength);
    $sz = jl_Math_min($newLength, var$3.length);
    $i = 0;
    while ($i < $sz) {
        $result.data[$i] = var$3[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_fill2 = ($a, $fromIndex, $toIndex, $val) => {
    let var$5, var$6, var$7;
    if ($fromIndex > $toIndex) {
        var$5 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$5);
        $rt_throw(var$5);
    }
    while ($fromIndex < $toIndex) {
        var$6 = $a.data;
        var$7 = $fromIndex + 1 | 0;
        var$6[$fromIndex] = $val;
        $fromIndex = var$7;
    }
},
ju_Arrays_fill = ($a, $val) => {
    ju_Arrays_fill2($a, 0, $a.data.length, $val);
},
ju_Arrays_fill1 = ($a, $fromIndex, $toIndex, $val) => {
    let var$5, var$6, var$7;
    if ($fromIndex > $toIndex) {
        var$5 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$5);
        $rt_throw(var$5);
    }
    while ($fromIndex < $toIndex) {
        var$6 = $a.data;
        var$7 = $fromIndex + 1 | 0;
        var$6[$fromIndex] = $val;
        $fromIndex = var$7;
    }
},
ju_Arrays_fill0 = ($a, $fromIndex, $toIndex, $val) => {
    let var$5, var$6;
    if ($fromIndex > $toIndex) {
        $val = new jl_IllegalArgumentException;
        jl_Exception__init_($val);
        $rt_throw($val);
    }
    while ($fromIndex < $toIndex) {
        var$5 = $a.data;
        var$6 = $fromIndex + 1 | 0;
        var$5[$fromIndex] = $val;
        $fromIndex = var$6;
    }
},
ju_Arrays_merge = ($a, $b, $from, $split, $to, $comp) => {
    let var$7, $from2, var$9, $p, $q, var$12, var$13;
    var$7 = $from;
    $from2 = $split;
    a: {
        b: {
            while ($from != $split) {
                if ($from2 == $to)
                    break b;
                var$9 = $a.data;
                $p = var$9[$from];
                $q = var$9[$from2];
                if ($p.$compareTo($q) > 0) {
                    var$9 = $b.data;
                    var$12 = var$7 + 1 | 0;
                    var$9[var$7] = $q;
                    $from2 = $from2 + 1 | 0;
                } else {
                    var$9 = $b.data;
                    var$12 = var$7 + 1 | 0;
                    var$9[var$7] = $p;
                    $from = $from + 1 | 0;
                }
                var$7 = var$12;
            }
            while (true) {
                if ($from2 >= $to)
                    break a;
                var$9 = $a.data;
                var$13 = $b.data;
                $from = var$7 + 1 | 0;
                $split = $from2 + 1 | 0;
                var$13[var$7] = var$9[$from2];
                var$7 = $from;
                $from2 = $split;
            }
        }
        while (true) {
            if ($from >= $split)
                break a;
            var$9 = $a.data;
            var$13 = $b.data;
            $from2 = var$7 + 1 | 0;
            $to = $from + 1 | 0;
            var$13[var$7] = var$9[$from];
            var$7 = $from2;
            $from = $to;
        }
    }
},
ju_Arrays_binarySearch = ($a, $fromIndex, $toIndex, $key) => {
    let var$5, $u, var$7, $i;
    if ($fromIndex > $toIndex) {
        var$5 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$5);
        $rt_throw(var$5);
    }
    $u = $toIndex - 1 | 0;
    while (true) {
        if ($fromIndex > $u)
            return ( -$fromIndex | 0) - 1 | 0;
        var$7 = $a.data;
        $i = ($fromIndex + $u | 0) / 2 | 0;
        $toIndex = $rt_compare(var$7[$i], $key);
        if (!$toIndex)
            break;
        if ($toIndex <= 0)
            $fromIndex = $i + 1 | 0;
        else
            $u = $i - 1 | 0;
    }
    return $i;
},
ju_Arrays_equals = ($a, $a2) => {
    let var$3, var$4, var$5;
    if ($a === $a2)
        return 1;
    if ($a !== null && $a2 !== null) {
        $a = $a.data;
        $a2 = $a2.data;
        var$3 = $a.length;
        if (var$3 == $a2.length) {
            var$4 = 0;
            a: {
                while (true) {
                    if (var$4 >= var$3) {
                        var$4 = (-1);
                        break a;
                    }
                    var$5 = var$4 + 0 | 0;
                    if (!ju_Objects_equals($a[var$5], $a2[var$5]))
                        break;
                    var$4 = var$4 + 1 | 0;
                }
            }
            return var$4 >= 0 ? 0 : 1;
        }
    }
    return 0;
},
jlr_AccessibleObject = $rt_classWithoutFields(),
jl_NullPointerException = $rt_classWithoutFields(jl_RuntimeException);
function jur_AbstractSet() {
    let a = this; jl_Object.call(a);
    a.$next2 = null;
    a.$isSecondPassVisited = 0;
    a.$index6 = null;
    a.$type5 = 0;
}
let jur_AbstractSet_counter = 0,
jur_AbstractSet__init_ = $this => {
    let var$1;
    var$1 = jur_AbstractSet_counter;
    jur_AbstractSet_counter = var$1 + 1 | 0;
    $this.$index6 = jl_Integer_toString(var$1);
},
jur_AbstractSet__init_0 = ($this, $n) => {
    let var$2;
    var$2 = jur_AbstractSet_counter;
    jur_AbstractSet_counter = var$2 + 1 | 0;
    $this.$index6 = jl_Integer_toString(var$2);
    $this.$next2 = $n;
},
jur_AbstractSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $length;
    $length = $matchResult.$rightBound;
    while (true) {
        if ($stringIndex > $length)
            return (-1);
        if ($this.$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $stringIndex = $stringIndex + 1 | 0;
    }
    return $stringIndex;
},
jur_AbstractSet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    while (true) {
        if ($startSearch < $stringIndex)
            return (-1);
        if ($this.$matches($startSearch, $testString, $matchResult) >= 0)
            break;
        $startSearch = $startSearch + (-1) | 0;
    }
    return $startSearch;
},
jur_AbstractSet_setType = ($this, $type) => {
    $this.$type5 = $type;
},
jur_AbstractSet_getType = $this => {
    return $this.$type5;
},
jur_AbstractSet_getQualifiedName = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$index6;
    var$2 = $this.$getName();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append0(var$3, 60);
    var$1 = jl_StringBuilder_append(var$3, var$1);
    jl_AbstractStringBuilder_append0(var$1, 58);
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append(var$1, var$2), 62);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_AbstractSet_toString = $this => {
    return jur_AbstractSet_getQualifiedName($this);
},
jur_AbstractSet_getNext = $this => {
    return $this.$next2;
},
jur_AbstractSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_AbstractSet_first = ($this, $set) => {
    return 1;
},
jur_AbstractSet_processBackRefReplacement = $this => {
    return null;
},
jur_AbstractSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    $set = $this.$next2;
    if ($set !== null) {
        if (!$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$next2.$isSecondPassVisited = 1;
                $this.$next2 = $set;
            }
            $this.$next2.$processSecondPass();
        } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
            $this.$next2 = $set.$next2;
    }
},
jur_AbstractSet__clinit_ = () => {
    jur_AbstractSet_counter = 1;
},
jlr_Member = $rt_classWithoutFields(0);
function jlr_Constructor() {
    let a = this; jlr_AccessibleObject.call(a);
    a.$declaringClass = null;
    a.$name6 = null;
    a.$modifiers = 0;
    a.$accessLevel = 0;
    a.$parameterTypes = null;
    a.$caller = null;
}
let jlr_Constructor_getModifiers = $this => {
    let var$1, var$2, var$3;
    a: {
        var$1 = $this.$modifiers;
        var$2 = $this.$accessLevel;
        var$3 = 0;
        switch (var$2) {
            case 1:
                var$3 = 2;
                break a;
            case 2:
                var$3 = 4;
                break a;
            case 3:
                var$3 = 1;
                break a;
            default:
        }
    }
    var$2 = var$1 >>> 6 | 0;
    return var$3 | var$2 & 8 | var$1 << 2 & 16 | var$2 & 32 | (var$1 >>> 8 | 0) & 64 | (var$1 >>> 5 | 0) & 128 | var$1 & 256 | var$1 << 8 & 512 | var$1 << 10 & 1024 | var$1 << 1 & 2048;
},
jlr_Constructor_getParameterTypes = $this => {
    return $this.$parameterTypes.$clone0();
},
jlr_Constructor_toString = $this => {
    let $sb, $i, var$3, $parameterTypes, var$5, var$6, var$7, var$8, var$9;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    $i = jlr_Constructor_getModifiers($this);
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    if (jlr_Modifier_modifierNames === null)
        jlr_Modifier_modifierNames = $rt_wrapArray(jl_String, [$rt_s(166), $rt_s(167), $rt_s(168), $rt_s(169), $rt_s(170), $rt_s(171), $rt_s(172), $rt_s(173), $rt_s(174), $rt_s(175), $rt_s(176), $rt_s(177)]);
    $parameterTypes = jlr_Modifier_modifierNames;
    var$5 = 0;
    var$6 = jlr_Modifier_canonicalOrder.data;
    var$7 = var$6.length;
    var$8 = 0;
    while (var$8 < var$7) {
        var$9 = var$6[var$8];
        if ($i & var$9) {
            if (var$3.$length2 > 0)
                jl_AbstractStringBuilder_append0(var$3, 32);
            jl_AbstractStringBuilder_append(var$3, $parameterTypes.data[var$5]);
        }
        var$5 = var$5 + 1 | 0;
        var$8 = var$8 + 1 | 0;
    }
    jl_AbstractStringBuilder_append($sb, jl_AbstractStringBuilder_toString(var$3));
    if ($sb.$length2 > 0)
        jl_AbstractStringBuilder_append0($sb, 32);
    jl_AbstractStringBuilder_append($sb, jl_Class_getName($this.$declaringClass));
    jl_AbstractStringBuilder_append0($sb, 40);
    $parameterTypes = jlr_Constructor_getParameterTypes($this);
    $i = 0;
    while (true) {
        var$6 = $parameterTypes.data;
        if ($i >= var$6.length)
            break;
        if ($i > 0)
            jl_AbstractStringBuilder_append0($sb, 44);
        jl_AbstractStringBuilder_append($sb, jl_Class_getName(var$6[$i]));
        $i = $i + 1 | 0;
    }
    jl_AbstractStringBuilder_append0($sb, 41);
    return jl_AbstractStringBuilder_toString($sb);
},
otcir_MethodCaller = $rt_classWithoutFields(0),
ju_Map$Entry = $rt_classWithoutFields(0);
function ju_MapEntry() {
    let a = this; jl_Object.call(a);
    a.$key = null;
    a.$value = null;
}
let ju_MapEntry__init_ = ($this, $theKey, $theValue) => {
    $this.$key = $theKey;
    $this.$value = $theValue;
},
ju_MapEntry__init_0 = (var_0, var_1) => {
    let var_2 = new ju_MapEntry();
    ju_MapEntry__init_(var_2, var_0, var_1);
    return var_2;
};
function ju_Hashtable$Entry() {
    let a = this; ju_MapEntry.call(a);
    a.$next6 = null;
    a.$hashcode = 0;
}
function jur_FSet() {
    let a = this; jur_AbstractSet.call(a);
    a.$isBackReferenced = 0;
    a.$groupIndex0 = 0;
}
let jur_FSet_posFSet = null,
jur_FSet_$callClinit = () => {
    jur_FSet_$callClinit = $rt_eraseClinit(jur_FSet);
    jur_FSet__clinit_();
},
jur_FSet__init_ = ($this, $groupIndex) => {
    jur_FSet_$callClinit();
    jur_AbstractSet__init_($this);
    $this.$groupIndex0 = $groupIndex;
},
jur_FSet__init_0 = var_0 => {
    let var_1 = new jur_FSet();
    jur_FSet__init_(var_1, var_0);
    return var_1;
},
jur_FSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $end, $shift;
    $end = jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex0);
    jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex0, $stringIndex);
    $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex0, $end);
    return $shift;
},
jur_FSet_getGroupIndex = $this => {
    return $this.$groupIndex0;
},
jur_FSet_getName = $this => {
    return $rt_s(178);
},
jur_FSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jur_FSet__clinit_ = () => {
    let var$1;
    var$1 = new jur_FSet$PossessiveFSet;
    jur_AbstractSet__init_(var$1);
    jur_FSet_posFSet = var$1;
};
function jur_Lexer() {
    let a = this; jl_Object.call(a);
    a.$pattern0 = null;
    a.$flags1 = 0;
    a.$mode = 0;
    a.$savedMode = 0;
    a.$lookBack = 0;
    a.$ch = 0;
    a.$lookAhead = 0;
    a.$patternFullLength = 0;
    a.$curST = null;
    a.$lookAheadST = null;
    a.$index = 0;
    a.$prevNW = 0;
    a.$curToc = 0;
    a.$lookAheadToc = 0;
    a.$orig = null;
}
let jur_Lexer_decompTable = null,
jur_Lexer_singleDecompTable = null,
jur_Lexer_singleDecompTableSize = 0,
jur_Lexer_setMode = ($this, $mode) => {
    if ($mode > 0 && $mode < 3)
        $this.$mode = $mode;
    if ($mode == 1) {
        $this.$lookAhead = $this.$ch;
        $this.$lookAheadST = $this.$curST;
        $this.$index = $this.$lookAheadToc;
        $this.$lookAheadToc = $this.$curToc;
        jur_Lexer_movePointer($this);
    }
},
jur_Lexer_isSpecial = $this => {
    return $this.$curST === null ? 0 : 1;
},
jur_Lexer_isNextSpecial = $this => {
    return $this.$lookAheadST === null ? 0 : 1;
},
jur_Lexer_next = $this => {
    jur_Lexer_movePointer($this);
    return $this.$lookBack;
},
jur_Lexer_nextSpecial = $this => {
    let $res;
    $res = $this.$curST;
    jur_Lexer_movePointer($this);
    return $res;
},
jur_Lexer_movePointer = $this => {
    let $reread, $nonCap, var$3, $behind, $mod, $cs, $negative, $$je;
    $this.$lookBack = $this.$ch;
    $this.$ch = $this.$lookAhead;
    $this.$curST = $this.$lookAheadST;
    $this.$curToc = $this.$lookAheadToc;
    $this.$lookAheadToc = $this.$index;
    while (true) {
        $reread = 0;
        $nonCap = $this.$index >= $this.$pattern0.data.length ? 0 : jur_Lexer_nextCodePoint($this);
        $this.$lookAhead = $nonCap;
        $this.$lookAheadST = null;
        if ($this.$mode == 4) {
            if ($nonCap != 92)
                return;
            $nonCap = $this.$index;
            var$3 = $this.$pattern0.data;
            $nonCap = $nonCap >= var$3.length ? 0 : var$3[jur_Lexer_nextIndex($this)];
            $this.$lookAhead = $nonCap;
            switch ($nonCap) {
                case 69:
                    break;
                default:
                    $this.$lookAhead = 92;
                    $this.$index = $this.$prevNW;
                    return;
            }
            $this.$mode = $this.$savedMode;
            $this.$lookAhead = $this.$index > ($this.$pattern0.data.length - 2 | 0) ? 0 : jur_Lexer_nextCodePoint($this);
        }
        a: {
            $nonCap = $this.$lookAhead;
            if ($nonCap != 92) {
                $behind = $this.$mode;
                if ($behind == 1)
                    switch ($nonCap) {
                        case 36:
                            $this.$lookAhead = (-536870876);
                            break a;
                        case 40:
                            if ($this.$pattern0.data[$this.$index] != 63) {
                                $this.$lookAhead = (-2147483608);
                                break a;
                            }
                            jur_Lexer_nextIndex($this);
                            $nonCap = $this.$pattern0.data[$this.$index];
                            $behind = 0;
                            while (true) {
                                b: {
                                    if ($behind) {
                                        $behind = 0;
                                        switch ($nonCap) {
                                            case 33:
                                                break;
                                            case 61:
                                                $this.$lookAhead = (-134217688);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            default:
                                                $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), jur_Lexer_toString($this), $this.$index));
                                        }
                                        $this.$lookAhead = (-67108824);
                                        jur_Lexer_nextIndex($this);
                                    } else {
                                        switch ($nonCap) {
                                            case 33:
                                                break;
                                            case 60:
                                                jur_Lexer_nextIndex($this);
                                                $nonCap = $this.$pattern0.data[$this.$index];
                                                $behind = 1;
                                                break b;
                                            case 61:
                                                $this.$lookAhead = (-536870872);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            case 62:
                                                $this.$lookAhead = (-33554392);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            default:
                                                $mod = jur_Lexer_readFlags($this);
                                                $this.$lookAhead = $mod;
                                                if ($mod < 256) {
                                                    $this.$flags1 = $mod;
                                                    $mod = $mod << 16;
                                                    $this.$lookAhead = $mod;
                                                    $this.$lookAhead = (-1073741784) | $mod;
                                                    break b;
                                                }
                                                $mod = $mod & 255;
                                                $this.$lookAhead = $mod;
                                                $this.$flags1 = $mod;
                                                $mod = $mod << 16;
                                                $this.$lookAhead = $mod;
                                                $this.$lookAhead = (-16777176) | $mod;
                                                break b;
                                        }
                                        $this.$lookAhead = (-268435416);
                                        jur_Lexer_nextIndex($this);
                                    }
                                }
                                if (!$behind)
                                    break;
                            }
                            break a;
                        case 41:
                            $this.$lookAhead = (-536870871);
                            break a;
                        case 42:
                        case 43:
                        case 63:
                            $behind = $this.$index;
                            var$3 = $this.$pattern0.data;
                            switch ($behind >= var$3.length ? 42 : var$3[$behind]) {
                                case 43:
                                    $this.$lookAhead = $nonCap | (-2147483648);
                                    jur_Lexer_nextIndex($this);
                                    break a;
                                case 63:
                                    $this.$lookAhead = $nonCap | (-1073741824);
                                    jur_Lexer_nextIndex($this);
                                    break a;
                                default:
                            }
                            $this.$lookAhead = $nonCap | (-536870912);
                            break a;
                        case 46:
                            $this.$lookAhead = (-536870866);
                            break a;
                        case 91:
                            $this.$lookAhead = (-536870821);
                            jur_Lexer_setMode($this, 2);
                            break a;
                        case 93:
                            if ($behind != 2)
                                break a;
                            $this.$lookAhead = (-536870819);
                            break a;
                        case 94:
                            $this.$lookAhead = (-536870818);
                            break a;
                        case 123:
                            $this.$lookAheadST = jur_Lexer_processQuantifier($this, $nonCap);
                            break a;
                        case 124:
                            $this.$lookAhead = (-536870788);
                            break a;
                        default:
                    }
                else if ($behind == 2)
                    switch ($nonCap) {
                        case 38:
                            $this.$lookAhead = (-536870874);
                            break a;
                        case 45:
                            $this.$lookAhead = (-536870867);
                            break a;
                        case 91:
                            $this.$lookAhead = (-536870821);
                            break a;
                        case 93:
                            $this.$lookAhead = (-536870819);
                            break a;
                        case 94:
                            $this.$lookAhead = (-536870818);
                            break a;
                        default:
                    }
            } else {
                $nonCap = $this.$index >= ($this.$pattern0.data.length - 2 | 0) ? (-1) : jur_Lexer_nextCodePoint($this);
                c: {
                    $this.$lookAhead = $nonCap;
                    switch ($nonCap) {
                        case -1:
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), jur_Lexer_toString($this), $this.$index));
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 58:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 118:
                            break;
                        case 48:
                            $this.$lookAhead = jur_Lexer_readOctals($this);
                            break a;
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                            if ($this.$mode != 1)
                                break a;
                            $this.$lookAhead = (-2147483648) | $nonCap;
                            break a;
                        case 65:
                            $this.$lookAhead = (-2147483583);
                            break a;
                        case 66:
                            $this.$lookAhead = (-2147483582);
                            break a;
                        case 67:
                        case 69:
                        case 70:
                        case 72:
                        case 73:
                        case 74:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 79:
                        case 82:
                        case 84:
                        case 85:
                        case 86:
                        case 88:
                        case 89:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 111:
                        case 113:
                        case 121:
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), jur_Lexer_toString($this), $this.$index));
                        case 68:
                        case 83:
                        case 87:
                        case 100:
                        case 115:
                        case 119:
                            $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass(jl_String__init_($this.$pattern0, $this.$prevNW, 1), 0);
                            $this.$lookAhead = 0;
                            break a;
                        case 71:
                            $this.$lookAhead = (-2147483577);
                            break a;
                        case 80:
                        case 112:
                            break c;
                        case 81:
                            $this.$savedMode = $this.$mode;
                            $this.$mode = 4;
                            $reread = 1;
                            break a;
                        case 90:
                            $this.$lookAhead = (-2147483558);
                            break a;
                        case 97:
                            $this.$lookAhead = 7;
                            break a;
                        case 98:
                            $this.$lookAhead = (-2147483550);
                            break a;
                        case 99:
                            $nonCap = $this.$index;
                            var$3 = $this.$pattern0.data;
                            if ($nonCap >= (var$3.length - 2 | 0))
                                $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), jur_Lexer_toString($this), $this.$index));
                            $this.$lookAhead = var$3[jur_Lexer_nextIndex($this)] & 31;
                            break a;
                        case 101:
                            $this.$lookAhead = 27;
                            break a;
                        case 102:
                            $this.$lookAhead = 12;
                            break a;
                        case 110:
                            $this.$lookAhead = 10;
                            break a;
                        case 114:
                            $this.$lookAhead = 13;
                            break a;
                        case 116:
                            $this.$lookAhead = 9;
                            break a;
                        case 117:
                            $this.$lookAhead = jur_Lexer_readHex($this, 4);
                            break a;
                        case 120:
                            $this.$lookAhead = jur_Lexer_readHex($this, 2);
                            break a;
                        case 122:
                            $this.$lookAhead = (-2147483526);
                            break a;
                        default:
                    }
                    break a;
                }
                $cs = jur_Lexer_parseCharClassName($this);
                $negative = 0;
                if ($this.$lookAhead == 80)
                    $negative = 1;
                try {
                    $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass($cs, $negative);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ju_MissingResourceException) {
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), jur_Lexer_toString($this), $this.$index));
                    } else {
                        throw $$e;
                    }
                }
                $this.$lookAhead = 0;
            }
        }
        if ($reread)
            continue;
        else
            break;
    }
},
jur_Lexer_parseCharClassName = $this => {
    let $sb, $ch, var$3, var$4, $res, var$6;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($sb, 10);
    $ch = $this.$index;
    var$3 = $this.$pattern0;
    var$4 = var$3.data;
    if ($ch < (var$4.length - 2 | 0)) {
        if (var$4[$ch] != 123) {
            $sb = jl_String__init_(var$3, jur_Lexer_nextIndex($this), 1);
            $res = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($res);
            jl_StringBuilder_append(jl_StringBuilder_append($res, $rt_s(179)), $sb);
            return jl_AbstractStringBuilder_toString($res);
        }
        jur_Lexer_nextIndex($this);
        $ch = 0;
        a: {
            while (true) {
                var$6 = $this.$index;
                var$3 = $this.$pattern0.data;
                if (var$6 >= (var$3.length - 2 | 0))
                    break;
                $ch = var$3[jur_Lexer_nextIndex($this)];
                if ($ch == 125)
                    break a;
                jl_AbstractStringBuilder_append0($sb, $ch);
            }
        }
        if ($ch != 125)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $this.$orig, $this.$index));
    }
    if (!$sb.$length2)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $this.$orig, $this.$index));
    $res = jl_AbstractStringBuilder_toString($sb);
    if ($res.$nativeString.length == 1) {
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        jl_StringBuilder_append(jl_StringBuilder_append($sb, $rt_s(179)), $res);
        return jl_AbstractStringBuilder_toString($sb);
    }
    b: {
        c: {
            if ($res.$nativeString.length > 3) {
                if (jl_String_startsWith($res, $rt_s(179)))
                    break c;
                if (jl_String_startsWith($res, $rt_s(180)))
                    break c;
            }
            break b;
        }
        $res = jl_String_substring0($res, 2);
    }
    return $res;
},
jur_Lexer_processQuantifier = ($this, $ch) => {
    let $sb, $min, $max, $mod, var$6, $$je;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($sb, 4);
    $min = (-1);
    $max = 2147483647;
    a: {
        while (true) {
            $mod = $this.$index;
            var$6 = $this.$pattern0.data;
            if ($mod >= var$6.length)
                break a;
            $ch = var$6[jur_Lexer_nextIndex($this)];
            if ($ch == 125)
                break a;
            if ($ch == 44 && $min < 0)
                try {
                    $min = jl_Integer_parseInt0(jl_StringBuilder_toString($sb), 10);
                    jl_StringBuilder_delete($sb, 0, jl_StringBuilder_length($sb));
                    continue;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                        break;
                    } else {
                        throw $$e;
                    }
                }
            jl_AbstractStringBuilder_append0($sb, $ch & 65535);
        }
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $this.$orig, $this.$index));
    }
    if ($ch != 125)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $this.$orig, $this.$index));
    if ($sb.$length2 > 0)
        b: {
            try {
                $max = jl_Integer_parseInt0(jl_StringBuilder_toString($sb), 10);
                if ($min >= 0)
                    break b;
                $min = $max;
                break b;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                } else {
                    throw $$e;
                }
            }
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $this.$orig, $this.$index));
        }
    else if ($min < 0)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $this.$orig, $this.$index));
    if (($min | $max | ($max - $min | 0)) < 0)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $this.$orig, $this.$index));
    $ch = $this.$index;
    var$6 = $this.$pattern0.data;
    $mod = $ch >= var$6.length ? 42 : var$6[$ch];
    c: {
        switch ($mod) {
            case 43:
                $this.$lookAhead = (-2147483525);
                jur_Lexer_nextIndex($this);
                break c;
            case 63:
                $this.$lookAhead = (-1073741701);
                jur_Lexer_nextIndex($this);
                break c;
            default:
        }
        $this.$lookAhead = (-536870789);
    }
    $sb = new jur_Quantifier;
    $sb.$min1 = $min;
    $sb.$max1 = $max;
    return $sb;
},
jur_Lexer_toString = $this => {
    return $this.$orig;
},
jur_Lexer_isEmpty = $this => {
    return !$this.$ch && !$this.$lookAhead && $this.$index == $this.$patternFullLength && !jur_Lexer_isSpecial($this) ? 1 : 0;
},
jur_Lexer_isLetter0 = $ch => {
    return $ch < 0 ? 0 : 1;
},
jur_Lexer_isLetter = $this => {
    return !jur_Lexer_isEmpty($this) && !jur_Lexer_isSpecial($this) && jur_Lexer_isLetter0($this.$ch) ? 1 : 0;
},
jur_Lexer_isHighSurrogate0 = $this => {
    let var$1;
    var$1 = $this.$ch;
    return var$1 <= 56319 && var$1 >= 55296 ? 1 : 0;
},
jur_Lexer_isLowSurrogate0 = $this => {
    let var$1;
    var$1 = $this.$ch;
    return var$1 <= 57343 && var$1 >= 56320 ? 1 : 0;
},
jur_Lexer_isHighSurrogate = $ch => {
    return $ch <= 56319 && $ch >= 55296 ? 1 : 0;
},
jur_Lexer_isLowSurrogate = $ch => {
    return $ch <= 57343 && $ch >= 56320 ? 1 : 0;
},
jur_Lexer_readHex = ($this, $max) => {
    let $st, $length, $i, var$5, $$je;
    $st = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($st, $max);
    $length = $this.$pattern0.data.length - 2 | 0;
    $i = 0;
    while (true) {
        var$5 = $rt_compare($i, $max);
        if (var$5 >= 0)
            break;
        if ($this.$index >= $length)
            break;
        jl_AbstractStringBuilder_append0($st, $this.$pattern0.data[jur_Lexer_nextIndex($this)]);
        $i = $i + 1 | 0;
    }
    if (!var$5)
        a: {
            try {
                $max = jl_Integer_parseInt0(jl_StringBuilder_toString($st), 16);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $max;
        }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $this.$orig, $this.$index));
},
jur_Lexer_readOctals = $this => {
    let $max, $i, var$3, $length, $res, var$6;
    $max = 3;
    $i = 1;
    var$3 = $this.$pattern0.data;
    $length = var$3.length - 2 | 0;
    $res = jl_Character_digit(var$3[$this.$index], 8);
    switch ($res) {
        case -1:
            break;
        default:
            if ($res > 3)
                $max = 2;
            jur_Lexer_nextIndex($this);
            a: {
                while (true) {
                    if ($i >= $max)
                        break a;
                    var$6 = $this.$index;
                    if (var$6 >= $length)
                        break a;
                    var$6 = jl_Character_digit($this.$pattern0.data[var$6], 8);
                    if (var$6 < 0)
                        break;
                    $res = ($res * 8 | 0) + var$6 | 0;
                    jur_Lexer_nextIndex($this);
                    $i = $i + 1 | 0;
                }
            }
            return $res;
    }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $this.$orig, $this.$index));
},
jur_Lexer_readFlags = $this => {
    let $pos, $res, var$3, var$4;
    $pos = 1;
    $res = $this.$flags1;
    a: while (true) {
        var$3 = $this.$index;
        var$4 = $this.$pattern0.data;
        if (var$3 >= var$4.length)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $this.$orig, var$3));
        b: {
            c: {
                switch (var$4[var$3]) {
                    case 41:
                        jur_Lexer_nextIndex($this);
                        return $res | 256;
                    case 45:
                        if (!$pos)
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(24), $this.$orig, var$3));
                        $pos = 0;
                        break b;
                    case 58:
                        break a;
                    case 100:
                        break c;
                    case 105:
                        $res = $pos ? $res | 2 : ($res ^ 2) & $res;
                        break b;
                    case 109:
                        $res = $pos ? $res | 8 : ($res ^ 8) & $res;
                        break b;
                    case 115:
                        $res = $pos ? $res | 32 : ($res ^ 32) & $res;
                        break b;
                    case 117:
                        $res = $pos ? $res | 64 : ($res ^ 64) & $res;
                        break b;
                    case 120:
                        $res = $pos ? $res | 4 : ($res ^ 4) & $res;
                        break b;
                    default:
                }
                break b;
            }
            $res = $pos ? $res | 1 : ($res ^ 1) & $res;
        }
        jur_Lexer_nextIndex($this);
    }
    jur_Lexer_nextIndex($this);
    return $res;
},
jur_Lexer_nextIndex = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    var$1 = $this.$index;
    $this.$prevNW = var$1;
    if (!($this.$flags1 & 4))
        $this.$index = var$1 + 1 | 0;
    else {
        var$2 = $this.$pattern0.data.length - 2 | 0;
        $this.$index = var$1 + 1 | 0;
        a: while (true) {
            var$3 = $this.$index;
            if (var$3 < var$2 && jl_Character_isWhitespace($this.$pattern0.data[var$3])) {
                $this.$index = $this.$index + 1 | 0;
                continue;
            }
            var$3 = $this.$index;
            if (var$3 >= var$2)
                break;
            var$4 = $this.$pattern0.data;
            if (var$4[var$3] != 35)
                break;
            $this.$index = var$3 + 1 | 0;
            while (true) {
                var$5 = $this.$index;
                if (var$5 >= var$2)
                    continue a;
                var$1 = var$4[var$5];
                if (var$1 != 10 && var$1 != 13 && var$1 != 133 && (var$1 | 1) != 8233 ? 0 : 1)
                    continue a;
                $this.$index = var$5 + 1 | 0;
            }
        }
    }
    return $this.$prevNW;
},
jur_Lexer_getDecomposition = $ch => {
    return jur_Lexer_decompTable.$get4($ch);
},
jur_Lexer_nextCodePoint = $this => {
    let $high, $lowExpectedIndex, var$3, $low;
    $high = $this.$pattern0.data[jur_Lexer_nextIndex($this)];
    if (jl_Character_isHighSurrogate($high)) {
        $lowExpectedIndex = $this.$prevNW + 1 | 0;
        var$3 = $this.$pattern0.data;
        if ($lowExpectedIndex < var$3.length) {
            $low = var$3[$lowExpectedIndex];
            if (jl_Character_isLowSurrogate($low)) {
                jur_Lexer_nextIndex($this);
                return jl_Character_toCodePoint($high, $low);
            }
        }
    }
    return $high;
},
jur_Lexer_getIndex = $this => {
    return $this.$curToc;
};
function jur_PatternSyntaxException() {
    let a = this; jl_IllegalArgumentException.call(a);
    a.$desc = null;
    a.$pattern1 = null;
    a.$index4 = 0;
}
let jur_PatternSyntaxException__init_0 = ($this, $description, $pattern, $index) => {
    jl_Exception__init_($this);
    $this.$index4 = (-1);
    $this.$desc = $description;
    $this.$pattern1 = $pattern;
    $this.$index4 = $index;
},
jur_PatternSyntaxException__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jur_PatternSyntaxException();
    jur_PatternSyntaxException__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_PatternSyntaxException_getMessage = $this => {
    let $filler, var$2, $temp, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    $filler = $rt_s(24);
    var$2 = $this.$index4;
    if (var$2 >= 1) {
        $temp = $rt_createCharArray(var$2);
        var$4 = $temp.data;
        var$2 = 0;
        var$5 = var$4.length;
        if (var$2 > var$5) {
            $filler = new jl_IllegalArgumentException;
            jl_Exception__init_($filler);
            $rt_throw($filler);
        }
        while (var$2 < var$5) {
            var$6 = var$2 + 1 | 0;
            var$4[var$2] = 32;
            var$2 = var$6;
        }
        $filler = jl_String__init_0($temp);
    }
    var$7 = $this.$desc;
    var$8 = $this.$pattern1;
    if (var$8 !== null && var$8.$nativeString.length) {
        var$9 = $this.$index4;
        var$8 = $this.$pattern1;
        var$10 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$10);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append1(var$10, var$9), $rt_s(130)), var$8), $rt_s(130)), $filler);
        $filler = jl_AbstractStringBuilder_toString(var$10);
    } else
        $filler = $rt_s(24);
    var$8 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$8);
    jl_StringBuilder_append(jl_StringBuilder_append(var$8, var$7), $filler);
    return jl_AbstractStringBuilder_toString(var$8);
},
jlr_Array = $rt_classWithoutFields(),
jlr_Array_getLength = var$1 => {
    if (var$1 === null || var$1.constructor.$meta.item === 'undefined') {
        $rt_throw(jl_IllegalArgumentException__init_1());
    }
    return var$1.data.length;
},
jlr_Array_newInstance = (var$1, $length) => {
    if (var$1 === null) {
        var$1 = new jl_NullPointerException;
        jl_Exception__init_(var$1);
        $rt_throw(var$1);
    }
    if (var$1 === $rt_cls($rt_voidcls)) {
        var$1 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$1);
        $rt_throw(var$1);
    }
    if ($length >= 0)
        return jlr_Array_newInstanceImpl(var$1.$platformClass, $length);
    var$1 = new jl_NegativeArraySizeException;
    jl_Exception__init_(var$1);
    $rt_throw(var$1);
},
jlr_Array_newInstanceImpl = (var$1, var$2) => {
    if (var$1.$meta.primitive) {
        switch (var$1) {
        }
        ;
    }
    return $rt_createArray(var$1, var$2);
},
jl_CloneNotSupportedException = $rt_classWithoutFields(jl_Exception);
function otcir_MethodCaller$forJs$lambda$_1_0() {
    jl_Object.call(this);
    this.$_020 = null;
}
let ju_SequencedCollection = $rt_classWithoutFields(0),
ju_List = $rt_classWithoutFields(0);
function ju_AbstractList() {
    ju_AbstractCollection.call(this);
    this.$modCount = 0;
}
let ju_AbstractList_iterator = $this => {
    let var$1;
    var$1 = new ju_AbstractList$1;
    var$1.$this$08 = $this;
    var$1.$modCount2 = $this.$modCount;
    var$1.$size14 = $this.$size3;
    var$1.$removeIndex0 = (-1);
    return var$1;
},
ju_RandomAccess = $rt_classWithoutFields(0);
function ju_ArrayList() {
    let a = this; ju_AbstractList.call(a);
    a.$array1 = null;
    a.$size3 = 0;
}
let ju_ArrayList__init_0 = $this => {
    $this.$array1 = $rt_createArray(jl_Object, 10);
},
ju_ArrayList__init_ = () => {
    let var_0 = new ju_ArrayList();
    ju_ArrayList__init_0(var_0);
    return var_0;
},
ju_ArrayList_ensureCapacity = ($this, $minCapacity) => {
    let var$2, $newLength;
    var$2 = $this.$array1.data.length;
    if (var$2 < $minCapacity) {
        $newLength = var$2 >= 1073741823 ? 2147483647 : jl_Math_max($minCapacity, jl_Math_max(var$2 * 2 | 0, 5));
        $this.$array1 = ju_Arrays_copyOf0($this.$array1, $newLength);
    }
},
ju_ArrayList_get = ($this, $index) => {
    ju_ArrayList_checkIndex($this, $index);
    return $this.$array1.data[$index];
},
ju_ArrayList_add = ($this, $element) => {
    let var$2, var$3;
    ju_ArrayList_ensureCapacity($this, $this.$size3 + 1 | 0);
    var$2 = $this.$array1.data;
    var$3 = $this.$size3;
    $this.$size3 = var$3 + 1 | 0;
    var$2[var$3] = $element;
    $this.$modCount = $this.$modCount + 1 | 0;
    return 1;
},
ju_ArrayList_remove = ($this, $i) => {
    let var$2, $old, var$4, $i_0;
    ju_ArrayList_checkIndex($this, $i);
    var$2 = $this.$array1.data;
    $old = var$2[$i];
    var$4 = $this.$size3 - 1 | 0;
    $this.$size3 = var$4;
    while ($i < var$4) {
        $i_0 = $i + 1 | 0;
        var$2[$i] = var$2[$i_0];
        $i = $i_0;
    }
    var$2[var$4] = null;
    $this.$modCount = $this.$modCount + 1 | 0;
    return $old;
},
ju_ArrayList_clear = $this => {
    ju_Arrays_fill0($this.$array1, 0, $this.$size3, null);
    $this.$size3 = 0;
    $this.$modCount = $this.$modCount + 1 | 0;
},
ju_ArrayList_checkIndex = ($this, $index) => {
    let var$2;
    if ($index >= 0 && $index < $this.$size3)
        return;
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$2);
    $rt_throw(var$2);
},
jur_NonCapFSet = $rt_classWithoutFields(jur_FSet),
jur_NonCapFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $gr;
    $gr = $this.$groupIndex0;
    jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_NonCapFSet_getName = $this => {
    return $rt_s(181);
},
jur_NonCapFSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jur_AheadFSet = $rt_classWithoutFields(jur_FSet),
jur_AheadFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    return $stringIndex;
},
jur_AheadFSet_getName = $this => {
    return $rt_s(182);
},
jur_BehindFSet = $rt_classWithoutFields(jur_FSet),
jur_BehindFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if (jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0) != $stringIndex)
        $stringIndex = (-1);
    return $stringIndex;
},
jur_BehindFSet_getName = $this => {
    return $rt_s(183);
};
function jur_AtomicFSet() {
    jur_FSet.call(this);
    this.$index8 = 0;
}
let jur_AtomicFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $gr;
    $gr = $this.$groupIndex0;
    jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
    $this.$index8 = $stringIndex;
    return $stringIndex;
},
jur_AtomicFSet_getName = $this => {
    return $rt_s(184);
},
jur_AtomicFSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jur_FinalSet = $rt_classWithoutFields(jur_FSet),
jur_FinalSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if ($matchResult.$mode0 != 1 && $stringIndex != $matchResult.$rightBound)
        return (-1);
    $matchResult.$valid2 = 1;
    jur_MatchResultImpl_setEnd($matchResult, 0, $stringIndex);
    return $stringIndex;
},
jur_FinalSet_getName = $this => {
    return $rt_s(185);
};
function jur_LeafSet() {
    jur_AbstractSet.call(this);
    this.$charCount0 = 0;
}
let jur_LeafSet__init_ = $this => {
    jur_AbstractSet__init_($this);
    $this.$charCount0 = 1;
},
jur_LeafSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    if (($stringIndex + $this.$charCount() | 0) > $matchResult.$rightBound) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $shift = $this.$accepts($stringIndex, $testString);
    if ($shift < 0)
        return (-1);
    return $this.$next2.$matches($stringIndex + $shift | 0, $testString, $matchResult);
},
jur_LeafSet_charCount = $this => {
    return $this.$charCount0;
},
jur_LeafSet_hasConsumed = ($this, $mr) => {
    return 1;
},
jur_EmptySet = $rt_classWithoutFields(jur_LeafSet),
jur_EmptySet__init_0 = ($this, $next) => {
    jur_AbstractSet__init_0($this, $next);
    $this.$charCount0 = 1;
    $this.$type5 = 1;
    $this.$charCount0 = 0;
},
jur_EmptySet__init_ = var_0 => {
    let var_1 = new jur_EmptySet();
    jur_EmptySet__init_0(var_1, var_0);
    return var_1;
},
jur_EmptySet_accepts = ($this, $stringIndex, $testString) => {
    return 0;
},
jur_EmptySet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $startStr, var$6, $high;
    $strLength = $matchResult.$rightBound;
    $startStr = $matchResult.$leftBound;
    var$6 = $testString;
    while (true) {
        $high = $rt_compare($stringIndex, $strLength);
        if ($high > 0)
            return (-1);
        if ($high < 0 && jl_Character_isLowSurrogate(jl_String_charAt(var$6, $stringIndex)) && $stringIndex > $startStr && jl_Character_isHighSurrogate(jl_String_charAt(var$6, $stringIndex - 1 | 0))) {
            $stringIndex = $stringIndex + 1 | 0;
            continue;
        }
        if ($this.$next2.$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $stringIndex = $stringIndex + 1 | 0;
    }
    return $stringIndex;
},
jur_EmptySet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    let $strLength, $startStr, var$7;
    $strLength = $matchResult.$rightBound;
    $startStr = $matchResult.$leftBound;
    var$7 = $testString;
    while (true) {
        if ($startSearch < $stringIndex)
            return (-1);
        if ($startSearch < $strLength && jl_Character_isLowSurrogate(jl_String_charAt(var$7, $startSearch)) && $startSearch > $startStr && jl_Character_isHighSurrogate(jl_String_charAt(var$7, $startSearch - 1 | 0))) {
            $startSearch = $startSearch + (-1) | 0;
            continue;
        }
        if ($this.$next2.$matches($startSearch, $testString, $matchResult) >= 0)
            break;
        $startSearch = $startSearch + (-1) | 0;
    }
    return $startSearch;
},
jur_EmptySet_getName = $this => {
    return $rt_s(186);
},
jur_EmptySet_hasConsumed = ($this, $mr) => {
    return 0;
};
function jur_JointSet() {
    let a = this; jur_AbstractSet.call(a);
    a.$children = null;
    a.$fSet = null;
    a.$groupIndex = 0;
}
let jur_JointSet__init_ = ($this, $children, $fSet) => {
    jur_AbstractSet__init_($this);
    $this.$children = $children;
    $this.$fSet = $fSet;
    $this.$groupIndex = $fSet.$groupIndex0;
},
jur_JointSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_JointSet();
    jur_JointSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_JointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i, $shift;
    if ($this.$children === null)
        return (-1);
    $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $stringIndex);
    $size = $this.$children.$size3;
    $i = 0;
    while (true) {
        if ($i >= $size) {
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $start);
            return (-1);
        }
        $shift = (ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return $shift;
},
jur_JointSet_setNext = ($this, $next) => {
    $this.$fSet.$next2 = $next;
},
jur_JointSet_getName = $this => {
    return $rt_s(187);
},
jur_JointSet_first = ($this, $set) => {
    let $i, var$3;
    a: {
        $i = $this.$children;
        if ($i !== null) {
            var$3 = ju_AbstractList_iterator($i);
            while (true) {
                if (!ju_AbstractList$1_hasNext(var$3))
                    break a;
                if (!(ju_AbstractList$1_next(var$3)).$first($set))
                    continue;
                else
                    return 1;
            }
        }
    }
    return 0;
},
jur_JointSet_hasConsumed = ($this, $matchResult) => {
    return jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex) >= 0 && jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex) == jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex) ? 0 : 1;
},
jur_JointSet_processSecondPass = $this => {
    let $child, $childrenSize, $i, $set, var$5, var$6, var$7, var$8, var$9;
    $this.$isSecondPassVisited = 1;
    $child = $this.$fSet;
    if ($child !== null && !$child.$isSecondPassVisited)
        jur_AbstractSet_processSecondPass($child);
    a: {
        $child = $this.$children;
        if ($child !== null) {
            $childrenSize = $child.$size3;
            $i = 0;
            while (true) {
                if ($i >= $childrenSize)
                    break a;
                $child = ju_ArrayList_get($this.$children, $i);
                $set = $child.$processBackRefReplacement();
                if ($set === null)
                    $set = $child;
                else {
                    $child.$isSecondPassVisited = 1;
                    ju_ArrayList_remove($this.$children, $i);
                    var$5 = $this.$children;
                    if ($i < 0)
                        break;
                    var$6 = var$5.$size3;
                    if ($i > var$6)
                        break;
                    ju_ArrayList_ensureCapacity(var$5, var$6 + 1 | 0);
                    var$7 = var$5.$size3;
                    var$8 = var$7;
                    while (var$8 > $i) {
                        var$9 = var$5.$array1.data;
                        var$9[var$8] = var$9[var$8 - 1 | 0];
                        var$8 = var$8 + (-1) | 0;
                    }
                    var$5.$array1.data[$i] = $set;
                    var$5.$size3 = var$7 + 1 | 0;
                    var$5.$modCount = var$5.$modCount + 1 | 0;
                }
                if (!$set.$isSecondPassVisited)
                    $set.$processSecondPass();
                $i = $i + 1 | 0;
            }
            $child = new jl_IndexOutOfBoundsException;
            jl_Exception__init_($child);
            $rt_throw($child);
        }
    }
    if ($this.$next2 !== null)
        jur_AbstractSet_processSecondPass($this);
},
jur_NonCapJointSet = $rt_classWithoutFields(jur_JointSet),
jur_NonCapJointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i, $shift;
    $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
    $size = $this.$children.$size3;
    $i = 0;
    while (true) {
        if ($i >= $size) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $start);
            return (-1);
        }
        $shift = (ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return $shift;
},
jur_NonCapJointSet_getName = $this => {
    return $rt_s(188);
},
jur_NonCapJointSet_hasConsumed = ($this, $matchResult) => {
    return !jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex) ? 0 : 1;
},
jur_AtomicJointSet = $rt_classWithoutFields(jur_NonCapJointSet),
jur_AtomicJointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i;
    $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
    $size = $this.$children.$size3;
    $i = 0;
    while ($i < $size) {
        if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
            return $this.$next2.$matches($this.$fSet.$index8, $testString, $matchResult);
        $i = $i + 1 | 0;
    }
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $start);
    return (-1);
},
jur_AtomicJointSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_AtomicJointSet_getName = $this => {
    return $rt_s(188);
},
jur_PositiveLookAhead = $rt_classWithoutFields(jur_AtomicJointSet),
jur_PositiveLookAhead_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i;
    $size = $this.$children.$size3;
    $i = 0;
    while ($i < $size) {
        if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_PositiveLookAhead_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PositiveLookAhead_getName = $this => {
    return $rt_s(189);
},
jur_NegativeLookAhead = $rt_classWithoutFields(jur_AtomicJointSet),
jur_NegativeLookAhead_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i;
    $size = $this.$children.$size3;
    $i = 0;
    while (true) {
        if ($i >= $size)
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if ((ju_ArrayList_get($this.$children, $i)).$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_NegativeLookAhead_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_NegativeLookAhead_getName = $this => {
    return $rt_s(190);
},
jur_PositiveLookBehind = $rt_classWithoutFields(jur_AtomicJointSet),
jur_PositiveLookBehind_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $leftBound, $shift, $i;
    $size = $this.$children.$size3;
    $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound;
    a: {
        $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
            $i = 0;
            while (true) {
                if ($i >= $size)
                    break a;
                if ((ju_ArrayList_get($this.$children, $i)).$findBack($leftBound, $stringIndex, $testString, $matchResult) >= 0) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, (-1));
                    return $shift;
                }
                $i = $i + 1 | 0;
            }
        }
    }
    return (-1);
},
jur_PositiveLookBehind_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PositiveLookBehind_getName = $this => {
    return $rt_s(191);
},
jur_NegativeLookBehind = $rt_classWithoutFields(jur_AtomicJointSet),
jur_NegativeLookBehind_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i;
    $size = $this.$children.$size3;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex, $stringIndex);
    $i = 0;
    while (true) {
        if ($i >= $size)
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if ((ju_ArrayList_get($this.$children, $i)).$findBack(0, $stringIndex, $testString, $matchResult) >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_NegativeLookBehind_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_NegativeLookBehind_getName = $this => {
    return $rt_s(192);
};
function jur_SingleSet() {
    jur_JointSet.call(this);
    this.$kid = null;
}
let jur_SingleSet__init_ = ($this, $child, $fSet) => {
    jur_AbstractSet__init_($this);
    $this.$kid = $child;
    $this.$fSet = $fSet;
    $this.$groupIndex = $fSet.$groupIndex0;
},
jur_SingleSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_SingleSet();
    jur_SingleSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_SingleSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $shift;
    $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $stringIndex);
    $shift = $this.$kid.$matches($stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $start);
    return (-1);
},
jur_SingleSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $res;
    $res = $this.$kid.$find0($stringIndex, $testString, $matchResult);
    if ($res >= 0)
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $res);
    return $res;
},
jur_SingleSet_findBack = ($this, $stringIndex, $lastIndex, $testString, $matchResult) => {
    let $res;
    $res = $this.$kid.$findBack($stringIndex, $lastIndex, $testString, $matchResult);
    if ($res >= 0)
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $res);
    return $res;
},
jur_SingleSet_first = ($this, $set) => {
    return $this.$kid.$first($set);
},
jur_SingleSet_processBackRefReplacement = $this => {
    let $set;
    $set = new jur_BackReferencedSingleSet;
    jur_SingleSet__init_($set, $this.$kid, $this.$fSet);
    $this.$next2 = $set;
    return $set;
},
jur_SingleSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    $set = $this.$fSet;
    if ($set !== null && !$set.$isSecondPassVisited)
        jur_AbstractSet_processSecondPass($set);
    $set = $this.$kid;
    if ($set !== null && !$set.$isSecondPassVisited) {
        $set = $set.$processBackRefReplacement();
        if ($set !== null) {
            $this.$kid.$isSecondPassVisited = 1;
            $this.$kid = $set;
        }
        $this.$kid.$processSecondPass();
    }
},
jl_NegativeArraySizeException = $rt_classWithoutFields(jl_RuntimeException),
jl_ArrayStoreException = $rt_classWithoutFields(jl_RuntimeException),
jur_SpecialToken = $rt_classWithoutFields();
function jur_AbstractCharClass() {
    let a = this; jur_SpecialToken.call(a);
    a.$alt = 0;
    a.$altSurrogates = 0;
    a.$lowHighSurrogates = null;
    a.$charClassWithoutSurrogates = null;
    a.$charClassWithSurrogates = null;
    a.$mayContainSupplCodepoints = 0;
}
let jur_AbstractCharClass_charClasses = null,
jur_AbstractCharClass__init_ = $this => {
    $this.$lowHighSurrogates = ju_BitSet__init_2(2048);
},
jur_AbstractCharClass_getBits = $this => {
    return null;
},
jur_AbstractCharClass_getLowHighSurrogates = $this => {
    return $this.$lowHighSurrogates;
},
jur_AbstractCharClass_hasLowHighSurrogates = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    if (!$this.$altSurrogates)
        var$1 = ju_BitSet_nextSetBit($this.$lowHighSurrogates, 0) >= 2048 ? 0 : 1;
    else {
        a: {
            var$2 = $this.$lowHighSurrogates;
            var$1 = 0;
            var$3 = var$2.$length3;
            if (var$1 < var$3) {
                var$4 = var$2.$data.data;
                var$5 = (var$4[0] ^ (-1)) >>> 0 | 0;
                if (var$5)
                    var$1 = jl_Integer_numberOfTrailingZeros(var$5) + var$1 | 0;
                else {
                    var$1 = (var$3 + 31 | 0) / 32 | 0;
                    var$5 = 1;
                    while (var$5 < var$1) {
                        if (var$4[var$5] != (-1)) {
                            var$1 = (var$5 * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$4[var$5] ^ (-1)) | 0;
                            break a;
                        }
                        var$5 = var$5 + 1 | 0;
                    }
                    var$1 = var$3;
                }
            }
        }
        var$1 = var$1 >= 2048 ? 0 : 1;
    }
    return var$1;
},
jur_AbstractCharClass_mayContainSupplCodepoints = $this => {
    return $this.$mayContainSupplCodepoints;
},
jur_AbstractCharClass_getInstance = $this => {
    return $this;
},
jur_AbstractCharClass_getSurrogates = $this => {
    let $lHS, var$2;
    if ($this.$charClassWithSurrogates === null) {
        $lHS = $this.$getLowHighSurrogates();
        var$2 = new jur_AbstractCharClass$1;
        var$2.$this$044 = $this;
        var$2.$val$lHS = $lHS;
        jur_AbstractCharClass__init_(var$2);
        $this.$charClassWithSurrogates = var$2;
        jur_AbstractCharClass_setNegative(var$2, $this.$altSurrogates);
    }
    return $this.$charClassWithSurrogates;
},
jur_AbstractCharClass_getWithoutSurrogates = $this => {
    let $lHS, var$2;
    if ($this.$charClassWithoutSurrogates === null) {
        $lHS = $this.$getLowHighSurrogates();
        var$2 = new jur_AbstractCharClass$2;
        var$2.$this$041 = $this;
        var$2.$val$lHS0 = $lHS;
        var$2.$val$thisClass = $this;
        jur_AbstractCharClass__init_(var$2);
        $this.$charClassWithoutSurrogates = var$2;
        jur_AbstractCharClass_setNegative(var$2, $this.$alt);
        $this.$charClassWithoutSurrogates.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints;
    }
    return $this.$charClassWithoutSurrogates;
},
jur_AbstractCharClass_hasUCI = $this => {
    return 0;
},
jur_AbstractCharClass_setNegative = ($this, $value) => {
    let var$2;
    var$2 = $this.$alt;
    if (var$2 ^ $value) {
        $this.$alt = var$2 ? 0 : 1;
        $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
    }
    if (!$this.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    return $this;
},
jur_AbstractCharClass_isNegative = $this => {
    return $this.$alt;
},
jur_AbstractCharClass_intersects = ($cc1, $cc2) => {
    let var$3, var$4;
    if ($cc1.$getBits() !== null && $cc2.$getBits() !== null) {
        $cc1 = $cc1.$getBits();
        $cc2 = $cc2.$getBits();
        var$3 = jl_Math_min($cc1.$data.data.length, $cc2.$data.data.length);
        var$4 = 0;
        a: {
            while (var$4 < var$3) {
                if ($cc1.$data.data[var$4] & $cc2.$data.data[var$4]) {
                    var$3 = 1;
                    break a;
                }
                var$4 = var$4 + 1 | 0;
            }
            var$3 = 0;
        }
        return var$3;
    }
    return 1;
},
jur_AbstractCharClass_getPredefinedClass = ($name, $negative) => {
    let var$3, var$4, var$5;
    var$3 = 0;
    while (true) {
        var$4 = jur_AbstractCharClass$PredefinedCharacterClasses_contents.data;
        if (var$3 >= var$4.length) {
            var$5 = new ju_MissingResourceException;
            jl_Throwable__init_(var$5, $rt_s(24));
            var$5.$className = $rt_s(24);
            var$5.$key0 = $name;
            $rt_throw(var$5);
        }
        var$4 = var$4[var$3].data;
        if (jl_String_equals($name, var$4[0]))
            break;
        var$3 = var$3 + 1 | 0;
    }
    return jur_AbstractCharClass$LazyCharClass_getValue(var$4[1], $negative);
},
jur_AbstractCharClass__clinit_ = () => {
    jur_AbstractCharClass_charClasses = new jur_AbstractCharClass$PredefinedCharacterClasses;
};
function ju_MissingResourceException() {
    let a = this; jl_RuntimeException.call(a);
    a.$className = null;
    a.$key0 = null;
}
function jur_CharClass() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$ci = 0;
    a.$uci = 0;
    a.$hasUCI0 = 0;
    a.$invertedSurrogates = 0;
    a.$inverted = 0;
    a.$hideBits = 0;
    a.$bits = null;
    a.$nonBitSet = null;
}
let jur_CharClass__init_2 = $this => {
    jur_AbstractCharClass__init_($this);
    $this.$bits = ju_BitSet__init_0();
},
jur_CharClass__init_ = () => {
    let var_0 = new jur_CharClass();
    jur_CharClass__init_2(var_0);
    return var_0;
},
jur_CharClass__init_1 = ($this, $ci, $uci) => {
    jur_AbstractCharClass__init_($this);
    $this.$bits = ju_BitSet__init_0();
    $this.$ci = $ci;
    $this.$uci = $uci;
},
jur_CharClass__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CharClass();
    jur_CharClass__init_1(var_2, var_0, var_1);
    return var_2;
},
jur_CharClass_add0 = ($this, $ch) => {
    a: {
        if ($this.$ci) {
            b: {
                if (!($ch >= 97 && $ch <= 122)) {
                    if ($ch < 65)
                        break b;
                    if ($ch > 90)
                        break b;
                }
                if ($this.$inverted) {
                    ju_BitSet_clear($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                    break a;
                }
                ju_BitSet_set0($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                break a;
            }
            if ($this.$uci && $ch > 128) {
                $this.$hasUCI0 = 1;
                $ch = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
            }
        }
    }
    if (!(!jur_Lexer_isHighSurrogate($ch) && !jur_Lexer_isLowSurrogate($ch))) {
        if ($this.$invertedSurrogates)
            ju_BitSet_clear($this.$lowHighSurrogates, $ch - 55296 | 0);
        else
            ju_BitSet_set0($this.$lowHighSurrogates, $ch - 55296 | 0);
    }
    if ($this.$inverted)
        ju_BitSet_clear($this.$bits, $ch);
    else
        ju_BitSet_set0($this.$bits, $ch);
    if (!$this.$mayContainSupplCodepoints && jl_Character_isSupplementaryCodePoint($ch))
        $this.$mayContainSupplCodepoints = 1;
    return $this;
},
jur_CharClass_add1 = ($this, $cc) => {
    let $curAlt, $nb, var$4;
    if (!$this.$mayContainSupplCodepoints && $cc.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    if ($this.$invertedSurrogates) {
        if (!$cc.$altSurrogates)
            ju_BitSet_andNot($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        else
            ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
    } else if (!$cc.$altSurrogates)
        ju_BitSet_or($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
        $this.$invertedSurrogates = 1;
    }
    if (!$this.$hideBits && $cc.$getBits() !== null) {
        if ($this.$inverted) {
            if (!$cc.$alt)
                ju_BitSet_andNot($this.$bits, $cc.$getBits());
            else
                ju_BitSet_and($this.$bits, $cc.$getBits());
        } else if (!$cc.$alt)
            ju_BitSet_or($this.$bits, $cc.$getBits());
        else {
            ju_BitSet_xor($this.$bits, $cc.$getBits());
            ju_BitSet_and($this.$bits, $cc.$getBits());
            $this.$alt = $this.$alt ? 0 : 1;
            $this.$inverted = 1;
        }
    } else {
        $curAlt = $this.$alt;
        $nb = $this.$nonBitSet;
        if ($nb !== null) {
            if (!$curAlt) {
                var$4 = new jur_CharClass$5;
                var$4.$this$024 = $this;
                var$4.$val$curAlt10 = $curAlt;
                var$4.$val$nb4 = $nb;
                var$4.$val$cc2 = $cc;
                jur_AbstractCharClass__init_(var$4);
                $this.$nonBitSet = var$4;
            } else {
                var$4 = new jur_CharClass$4;
                var$4.$this$049 = $this;
                var$4.$val$curAlt2 = $curAlt;
                var$4.$val$nb2 = $nb;
                var$4.$val$cc0 = $cc;
                jur_AbstractCharClass__init_(var$4);
                $this.$nonBitSet = var$4;
            }
        } else {
            if ($curAlt && !$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                $nb = new jur_CharClass$1;
                $nb.$this$035 = $this;
                $nb.$val$cc1 = $cc;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else if (!$curAlt) {
                $nb = new jur_CharClass$3;
                $nb.$this$03 = $this;
                $nb.$val$curAlt = $curAlt;
                $nb.$val$cc = $cc;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$2;
                $nb.$this$04 = $this;
                $nb.$val$curAlt0 = $curAlt;
                $nb.$val$cc3 = $cc;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
    return $this;
},
jur_CharClass_add = ($this, $i, $end) => {
    let var$3, var$4, var$5, var$6, var$7;
    if ($i > $end) {
        var$3 = new jl_IllegalArgumentException;
        jl_Exception__init_(var$3);
        $rt_throw(var$3);
    }
    a: {
        b: {
            if (!$this.$ci) {
                if ($end < 55296)
                    break b;
                if ($i > 57343)
                    break b;
            }
            $end = $end + 1 | 0;
            while (true) {
                if ($i >= $end)
                    break a;
                jur_CharClass_add0($this, $i);
                $i = $i + 1 | 0;
            }
        }
        if (!$this.$inverted)
            ju_BitSet_set($this.$bits, $i, $end + 1 | 0);
        else {
            var$3 = $this.$bits;
            $end = $end + 1 | 0;
            if ($i >= 0 && $i <= $end) {
                var$4 = var$3.$length3;
                if ($i < var$4) {
                    var$5 = jl_Math_min(var$4, $end);
                    if ($i != var$5) {
                        var$6 = $i / 32 | 0;
                        $end = var$5 / 32 | 0;
                        if (var$6 == $end) {
                            var$7 = var$3.$data.data;
                            var$7[var$6] = var$7[var$6] & (ju_BitSet_trailingOneBits(var$3, $i) | ju_BitSet_trailingZeroBits(var$3, var$5));
                        } else {
                            var$7 = var$3.$data.data;
                            var$7[var$6] = var$7[var$6] & ju_BitSet_trailingOneBits(var$3, $i);
                            var$4 = var$6 + 1 | 0;
                            while (var$4 < $end) {
                                var$3.$data.data[var$4] = 0;
                                var$4 = var$4 + 1 | 0;
                            }
                            if (var$5 & 31) {
                                var$7 = var$3.$data.data;
                                var$7[$end] = var$7[$end] & ju_BitSet_trailingZeroBits(var$3, var$5);
                            }
                        }
                        ju_BitSet_recalculateLength(var$3);
                    }
                }
            } else {
                var$3 = new jl_IndexOutOfBoundsException;
                jl_Exception__init_(var$3);
                $rt_throw(var$3);
            }
        }
    }
    return $this;
},
jur_CharClass_union = ($this, $clazz) => {
    let var$2, $curAlt, $nb;
    if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    var$2 = $clazz;
    if (var$2.$hasUCI0)
        $this.$hasUCI0 = 1;
    $curAlt = $this.$altSurrogates;
    if (!($curAlt ^ $clazz.$altSurrogates)) {
        if (!$curAlt)
            ju_BitSet_or($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        else
            ju_BitSet_and($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
    } else if ($curAlt)
        ju_BitSet_andNot($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        ju_BitSet_and($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        $this.$altSurrogates = 1;
    }
    if (!$this.$hideBits && jur_CharClass_getBits(var$2) !== null) {
        $curAlt = $this.$alt;
        if (!($curAlt ^ $clazz.$alt)) {
            if (!$curAlt)
                ju_BitSet_or($this.$bits, jur_CharClass_getBits(var$2));
            else
                ju_BitSet_and($this.$bits, jur_CharClass_getBits(var$2));
        } else if ($curAlt)
            ju_BitSet_andNot($this.$bits, jur_CharClass_getBits(var$2));
        else {
            ju_BitSet_xor($this.$bits, jur_CharClass_getBits(var$2));
            ju_BitSet_and($this.$bits, jur_CharClass_getBits(var$2));
            $this.$alt = 1;
        }
    } else {
        $curAlt = $this.$alt;
        $nb = $this.$nonBitSet;
        if ($nb !== null) {
            if (!$curAlt) {
                var$2 = new jur_CharClass$11;
                var$2.$this$021 = $this;
                var$2.$val$curAlt7 = $curAlt;
                var$2.$val$nb3 = $nb;
                var$2.$val$clazz9 = $clazz;
                jur_AbstractCharClass__init_(var$2);
                $this.$nonBitSet = var$2;
            } else {
                var$2 = new jur_CharClass$10;
                var$2.$this$025 = $this;
                var$2.$val$curAlt9 = $curAlt;
                var$2.$val$nb0 = $nb;
                var$2.$val$clazz = $clazz;
                jur_AbstractCharClass__init_(var$2);
                $this.$nonBitSet = var$2;
            }
        } else {
            if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                if (!$curAlt) {
                    $nb = new jur_CharClass$7;
                    $nb.$this$052 = $this;
                    $nb.$val$clazz2 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$6;
                    $nb.$this$026 = $this;
                    $nb.$val$clazz8 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
            } else if (!$curAlt) {
                $nb = new jur_CharClass$9;
                $nb.$this$014 = $this;
                $nb.$val$clazz4 = $clazz;
                $nb.$val$curAlt1 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$8;
                $nb.$this$011 = $this;
                $nb.$val$clazz5 = $clazz;
                $nb.$val$curAlt5 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
},
jur_CharClass_intersection = ($this, $clazz) => {
    let var$2, $curAlt, $nb;
    if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    var$2 = $clazz;
    if (var$2.$hasUCI0)
        $this.$hasUCI0 = 1;
    $curAlt = $this.$altSurrogates;
    if (!($curAlt ^ $clazz.$altSurrogates)) {
        if (!$curAlt)
            ju_BitSet_and($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        else
            ju_BitSet_or($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
    } else if (!$curAlt)
        ju_BitSet_andNot($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        ju_BitSet_and($this.$lowHighSurrogates, var$2.$lowHighSurrogates);
        $this.$altSurrogates = 0;
    }
    if (!$this.$hideBits && jur_CharClass_getBits(var$2) !== null) {
        $curAlt = $this.$alt;
        if (!($curAlt ^ $clazz.$alt)) {
            if (!$curAlt)
                ju_BitSet_and($this.$bits, jur_CharClass_getBits(var$2));
            else
                ju_BitSet_or($this.$bits, jur_CharClass_getBits(var$2));
        } else if (!$curAlt)
            ju_BitSet_andNot($this.$bits, jur_CharClass_getBits(var$2));
        else {
            ju_BitSet_xor($this.$bits, jur_CharClass_getBits(var$2));
            ju_BitSet_and($this.$bits, jur_CharClass_getBits(var$2));
            $this.$alt = 0;
        }
    } else {
        $curAlt = $this.$alt;
        $nb = $this.$nonBitSet;
        if ($nb !== null) {
            if (!$curAlt) {
                var$2 = new jur_CharClass$17;
                var$2.$this$023 = $this;
                var$2.$val$curAlt8 = $curAlt;
                var$2.$val$nb1 = $nb;
                var$2.$val$clazz3 = $clazz;
                jur_AbstractCharClass__init_(var$2);
                $this.$nonBitSet = var$2;
            } else {
                var$2 = new jur_CharClass$16;
                var$2.$this$030 = $this;
                var$2.$val$curAlt6 = $curAlt;
                var$2.$val$nb = $nb;
                var$2.$val$clazz7 = $clazz;
                jur_AbstractCharClass__init_(var$2);
                $this.$nonBitSet = var$2;
            }
        } else {
            if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                if (!$curAlt) {
                    $nb = new jur_CharClass$13;
                    $nb.$this$027 = $this;
                    $nb.$val$clazz0 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$12;
                    $nb.$this$048 = $this;
                    $nb.$val$clazz1 = $clazz;
                    jur_AbstractCharClass__init_($nb);
                    $this.$nonBitSet = $nb;
                }
            } else if (!$curAlt) {
                $nb = new jur_CharClass$15;
                $nb.$this$016 = $this;
                $nb.$val$clazz10 = $clazz;
                $nb.$val$curAlt4 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$14;
                $nb.$this$012 = $this;
                $nb.$val$clazz6 = $clazz;
                $nb.$val$curAlt3 = $curAlt;
                jur_AbstractCharClass__init_($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
},
jur_CharClass_contains = ($this, $ch) => {
    let var$2;
    var$2 = $this.$nonBitSet;
    if (var$2 !== null)
        return $this.$alt ^ var$2.$contains0($ch);
    return $this.$alt ^ ju_BitSet_get($this.$bits, $ch);
},
jur_CharClass_getBits = $this => {
    if (!$this.$hideBits)
        return $this.$bits;
    return null;
},
jur_CharClass_getLowHighSurrogates = $this => {
    return $this.$lowHighSurrogates;
},
jur_CharClass_getInstance = $this => {
    let $bs, $res;
    if ($this.$nonBitSet !== null)
        return $this;
    $bs = jur_CharClass_getBits($this);
    $res = new jur_CharClass$18;
    $res.$this$020 = $this;
    $res.$val$bs = $bs;
    jur_AbstractCharClass__init_($res);
    return jur_AbstractCharClass_setNegative($res, $this.$alt);
},
jur_CharClass_toString = $this => {
    let $temp, $i, var$3;
    $temp = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($temp);
    $i = ju_BitSet_nextSetBit($this.$bits, 0);
    while ($i >= 0) {
        jl_AbstractStringBuilder_append2($temp, jl_Character_toChars($i));
        jl_AbstractStringBuilder_append0($temp, 124);
        $i = ju_BitSet_nextSetBit($this.$bits, $i + 1 | 0);
    }
    var$3 = $temp.$length2;
    if (var$3 > 0)
        jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
    return jl_AbstractStringBuilder_toString($temp);
},
jur_CharClass_hasUCI = $this => {
    return $this.$hasUCI0;
};
function jur_QuantifierSet() {
    jur_AbstractSet.call(this);
    this.$innerSet = null;
}
let jur_QuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_AbstractSet__init_0($this, $next);
    $this.$innerSet = $innerSet;
    $this.$type5 = $type;
},
jur_QuantifierSet_getInnerSet = $this => {
    return $this.$innerSet;
},
jur_QuantifierSet_first = ($this, $set) => {
    return !$this.$innerSet.$first($set) && !$this.$next2.$first($set) ? 0 : 1;
},
jur_QuantifierSet_hasConsumed = ($this, $mr) => {
    return 1;
},
jur_QuantifierSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    $set = $this.$next2;
    if ($set !== null && !$set.$isSecondPassVisited) {
        $set = $set.$processBackRefReplacement();
        if ($set !== null) {
            $this.$next2.$isSecondPassVisited = 1;
            $this.$next2 = $set;
        }
        $this.$next2.$processSecondPass();
    }
    $set = $this.$innerSet;
    if ($set !== null) {
        if (!$set.$isSecondPassVisited) {
            $set = $set.$processBackRefReplacement();
            if ($set !== null) {
                $this.$innerSet.$isSecondPassVisited = 1;
                $this.$innerSet = $set;
            }
            $this.$innerSet.$processSecondPass();
        } else if ($set instanceof jur_SingleSet && $set.$fSet.$isBackReferenced)
            $this.$innerSet = $set.$next2;
    }
};
function jur_LeafQuantifierSet() {
    jur_QuantifierSet.call(this);
    this.$leaf = null;
}
let jur_LeafQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$leaf = $innerSet;
},
jur_LeafQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_LeafQuantifierSet();
    jur_LeafQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_LeafQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $i, var$5;
    $i = 0;
    a: {
        while (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
            var$5 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$5 <= 0)
                break a;
            $stringIndex = $stringIndex + var$5 | 0;
            $i = $i + 1 | 0;
        }
    }
    while (true) {
        if ($i < 0)
            return (-1);
        var$5 = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if (var$5 >= 0)
            break;
        $stringIndex = $stringIndex - $this.$leaf.$charCount() | 0;
        $i = $i + (-1) | 0;
    }
    return var$5;
},
jur_LeafQuantifierSet_getName = $this => {
    return $rt_s(193);
};
function jur_CompositeQuantifierSet() {
    jur_LeafQuantifierSet.call(this);
    this.$quantifier0 = null;
}
let jur_CompositeQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type) => {
    jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$quantifier0 = $quant;
},
jur_CompositeQuantifierSet__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_CompositeQuantifierSet();
    jur_CompositeQuantifierSet__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_CompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, $min, $max, $i, $shift;
    var$4 = $this.$quantifier0;
    $min = var$4.$min1;
    $max = var$4.$max1;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while ($i < $max) {
                    if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound)
                        break a;
                    $shift = $this.$leaf.$accepts($stringIndex, $testString);
                    if ($shift < 1)
                        break a;
                    $stringIndex = $stringIndex + $shift | 0;
                    $i = $i + 1 | 0;
                }
            }
            while (true) {
                if ($i < $min)
                    return (-1);
                $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
                if ($shift >= 0)
                    break;
                $stringIndex = $stringIndex - $this.$leaf.$charCount() | 0;
                $i = $i + (-1) | 0;
            }
            return $shift;
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$leaf.$accepts($stringIndex, $testString);
        if ($shift < 1)
            break;
        $stringIndex = $stringIndex + $shift | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_CompositeQuantifierSet_getName = $this => {
    return jur_Quantifier_toString($this.$quantifier0);
},
jur_GroupQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet),
jur_GroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0)
        return $nextIndex;
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_GroupQuantifierSet_getName = $this => {
    return $rt_s(194);
},
jur_AltQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_AltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    $shift = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
    return $shift;
},
jur_AltQuantifierSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
    $this.$innerSet.$setNext($next);
},
jur_UnifiedQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_UnifiedQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    while (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound && $this.$leaf.$accepts($stringIndex, $testString) > 0) {
        $stringIndex = $stringIndex + $this.$leaf.$charCount() | 0;
    }
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_UnifiedQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $startSearch, $newSearch, $newSearch_0;
    $startSearch = $this.$next2.$find0($stringIndex, $testString, $matchResult);
    if ($startSearch < 0)
        return (-1);
    $newSearch = $startSearch - $this.$leaf.$charCount() | 0;
    while ($newSearch >= $stringIndex && $this.$leaf.$accepts($newSearch, $testString) > 0) {
        $newSearch_0 = $newSearch - $this.$leaf.$charCount() | 0;
        $startSearch = $newSearch;
        $newSearch = $newSearch_0;
    }
    return $startSearch;
},
jur_AbstractCharClass$PredefinedCharacterClasses = $rt_classWithoutFields(),
jur_AbstractCharClass$PredefinedCharacterClasses_space = null,
jur_AbstractCharClass$PredefinedCharacterClasses_digit = null,
jur_AbstractCharClass$PredefinedCharacterClasses_contents = null,
jur_AbstractCharClass$PredefinedCharacterClasses__clinit_ = () => {
    let var$1, var$2, var$3, var$4;
    jur_AbstractCharClass$PredefinedCharacterClasses_space = jur_AbstractCharClass$LazySpace__init_0();
    jur_AbstractCharClass$PredefinedCharacterClasses_digit = jur_AbstractCharClass$LazyDigit__init_();
    var$1 = $rt_createArray($rt_arraycls(jl_Object), 194);
    var$2 = var$1.data;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(195);
    var$4[1] = jur_AbstractCharClass$LazyLower__init_0();
    var$2[0] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(196);
    var$4[1] = jur_AbstractCharClass$LazyUpper__init_();
    var$2[1] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(197);
    var$4[1] = jur_AbstractCharClass$LazyASCII__init_0();
    var$2[2] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(198);
    var$4[1] = jur_AbstractCharClass$LazyAlpha__init_0();
    var$2[3] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(199);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_digit;
    var$2[4] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(200);
    var$4[1] = jur_AbstractCharClass$LazyAlnum__init_0();
    var$2[5] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(201);
    var$4[1] = jur_AbstractCharClass$LazyPunct__init_();
    var$2[6] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(202);
    var$4[1] = jur_AbstractCharClass$LazyGraph__init_();
    var$2[7] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(203);
    var$4[1] = jur_AbstractCharClass$LazyPrint__init_();
    var$2[8] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(204);
    var$4[1] = jur_AbstractCharClass$LazyBlank__init_();
    var$2[9] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(205);
    var$4[1] = jur_AbstractCharClass$LazyCntrl__init_();
    var$2[10] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(206);
    var$4[1] = jur_AbstractCharClass$LazyXDigit__init_();
    var$2[11] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(207);
    var$4[1] = jur_AbstractCharClass$LazyJavaLowerCase__init_0();
    var$2[12] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(208);
    var$4[1] = jur_AbstractCharClass$LazyJavaUpperCase__init_();
    var$2[13] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(209);
    var$4[1] = jur_AbstractCharClass$LazyJavaWhitespace__init_0();
    var$2[14] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(210);
    var$4[1] = jur_AbstractCharClass$LazyJavaMirrored__init_();
    var$2[15] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(211);
    var$4[1] = jur_AbstractCharClass$LazyJavaDefined__init_0();
    var$2[16] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(212);
    var$4[1] = jur_AbstractCharClass$LazyJavaDigit__init_0();
    var$2[17] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(213);
    var$4[1] = jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0();
    var$2[18] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(214);
    var$4[1] = jur_AbstractCharClass$LazyJavaISOControl__init_();
    var$2[19] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(215);
    var$4[1] = jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0();
    var$2[20] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(216);
    var$4[1] = jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0();
    var$2[21] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(217);
    var$4[1] = jur_AbstractCharClass$LazyJavaLetter__init_0();
    var$2[22] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(218);
    var$4[1] = jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0();
    var$2[23] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(219);
    var$4[1] = jur_AbstractCharClass$LazyJavaSpaceChar__init_0();
    var$2[24] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(220);
    var$4[1] = jur_AbstractCharClass$LazyJavaTitleCase__init_0();
    var$2[25] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(221);
    var$4[1] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_();
    var$2[26] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(222);
    var$4[1] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0();
    var$2[27] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(223);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_space;
    var$2[28] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(224);
    var$4[1] = jur_AbstractCharClass$LazyWord__init_0();
    var$2[29] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(225);
    var$4[1] = jur_AbstractCharClass$LazyNonWord__init_();
    var$2[30] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(226);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_space;
    var$2[31] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(227);
    var$4[1] = jur_AbstractCharClass$LazyNonSpace__init_();
    var$2[32] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(228);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_digit;
    var$2[33] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(229);
    var$4[1] = jur_AbstractCharClass$LazyNonDigit__init_();
    var$2[34] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(230);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(0, 127);
    var$2[35] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(231);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(128, 255);
    var$2[36] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(232);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(256, 383);
    var$2[37] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(233);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(384, 591);
    var$2[38] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(234);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(592, 687);
    var$2[39] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(235);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(688, 767);
    var$2[40] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(236);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(768, 879);
    var$2[41] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(237);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(880, 1023);
    var$2[42] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(238);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1024, 1279);
    var$2[43] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(239);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1280, 1327);
    var$2[44] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(240);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1328, 1423);
    var$2[45] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(241);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1424, 1535);
    var$2[46] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(242);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1536, 1791);
    var$2[47] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(243);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1792, 1871);
    var$2[48] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(244);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1872, 1919);
    var$2[49] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(245);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1920, 1983);
    var$2[50] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(246);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2304, 2431);
    var$2[51] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(247);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2432, 2559);
    var$2[52] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(248);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2560, 2687);
    var$2[53] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(249);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2688, 2815);
    var$2[54] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(250);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2816, 2943);
    var$2[55] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(251);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2944, 3071);
    var$2[56] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(252);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3072, 3199);
    var$2[57] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(253);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3200, 3327);
    var$2[58] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(254);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3328, 3455);
    var$2[59] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(255);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3456, 3583);
    var$2[60] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(256);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3584, 3711);
    var$2[61] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(257);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3712, 3839);
    var$2[62] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(258);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3840, 4095);
    var$2[63] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(259);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4096, 4255);
    var$2[64] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(260);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4256, 4351);
    var$2[65] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(261);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4352, 4607);
    var$2[66] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(262);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4608, 4991);
    var$2[67] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(263);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4992, 5023);
    var$2[68] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(264);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5024, 5119);
    var$2[69] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(265);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5120, 5759);
    var$2[70] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(266);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5760, 5791);
    var$2[71] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(267);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5792, 5887);
    var$2[72] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(268);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5888, 5919);
    var$2[73] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(269);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5920, 5951);
    var$2[74] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(270);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5952, 5983);
    var$2[75] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(271);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5984, 6015);
    var$2[76] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(272);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6016, 6143);
    var$2[77] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(273);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6144, 6319);
    var$2[78] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(274);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6400, 6479);
    var$2[79] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(275);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6480, 6527);
    var$2[80] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(276);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6528, 6623);
    var$2[81] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(277);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6624, 6655);
    var$2[82] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(278);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6656, 6687);
    var$2[83] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(279);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7424, 7551);
    var$2[84] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(280);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7552, 7615);
    var$2[85] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(281);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7616, 7679);
    var$2[86] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(282);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7680, 7935);
    var$2[87] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(283);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7936, 8191);
    var$2[88] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(284);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8192, 8303);
    var$2[89] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(285);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8304, 8351);
    var$2[90] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(286);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8352, 8399);
    var$2[91] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(287);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8400, 8447);
    var$2[92] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(288);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8448, 8527);
    var$2[93] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(289);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8528, 8591);
    var$2[94] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(290);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8592, 8703);
    var$2[95] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(291);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8704, 8959);
    var$2[96] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(292);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8960, 9215);
    var$2[97] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(293);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9216, 9279);
    var$2[98] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(294);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9280, 9311);
    var$2[99] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(295);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9312, 9471);
    var$2[100] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(296);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9472, 9599);
    var$2[101] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(297);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9600, 9631);
    var$2[102] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(298);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9632, 9727);
    var$2[103] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(299);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9728, 9983);
    var$2[104] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(300);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9984, 10175);
    var$2[105] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(301);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10176, 10223);
    var$2[106] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(302);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10224, 10239);
    var$2[107] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(303);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10240, 10495);
    var$2[108] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(304);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10496, 10623);
    var$2[109] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(305);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10624, 10751);
    var$2[110] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(306);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10752, 11007);
    var$2[111] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(307);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11008, 11263);
    var$2[112] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(308);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11264, 11359);
    var$2[113] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(309);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11392, 11519);
    var$2[114] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(310);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11520, 11567);
    var$2[115] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(311);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11568, 11647);
    var$2[116] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(312);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11648, 11743);
    var$2[117] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(313);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11776, 11903);
    var$2[118] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(314);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11904, 12031);
    var$2[119] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(315);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12032, 12255);
    var$2[120] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(316);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12272, 12287);
    var$2[121] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(317);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12288, 12351);
    var$2[122] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(318);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12352, 12447);
    var$2[123] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(319);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12448, 12543);
    var$2[124] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(320);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12544, 12591);
    var$2[125] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(321);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12592, 12687);
    var$2[126] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(322);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12688, 12703);
    var$2[127] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(323);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12704, 12735);
    var$2[128] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(324);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12736, 12783);
    var$2[129] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(325);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12784, 12799);
    var$2[130] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(326);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12800, 13055);
    var$2[131] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(327);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(13056, 13311);
    var$2[132] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(328);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(13312, 19893);
    var$2[133] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(329);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(19904, 19967);
    var$2[134] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(330);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(19968, 40959);
    var$2[135] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(331);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(40960, 42127);
    var$2[136] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(332);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(42128, 42191);
    var$2[137] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(333);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(42752, 42783);
    var$2[138] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(334);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(43008, 43055);
    var$2[139] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(335);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(44032, 55203);
    var$2[140] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(336);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(55296, 56191);
    var$2[141] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(337);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(56192, 56319);
    var$2[142] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(338);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(56320, 57343);
    var$2[143] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(339);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(57344, 63743);
    var$2[144] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(340);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(63744, 64255);
    var$2[145] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(341);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(64256, 64335);
    var$2[146] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(342);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(64336, 65023);
    var$2[147] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(343);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65024, 65039);
    var$2[148] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(344);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65040, 65055);
    var$2[149] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(345);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65056, 65071);
    var$2[150] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(346);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65072, 65103);
    var$2[151] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(347);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65104, 65135);
    var$2[152] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(348);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65136, 65279);
    var$2[153] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(349);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65280, 65519);
    var$2[154] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(350);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(0, 1114111);
    var$2[155] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(351);
    var$4[1] = jur_AbstractCharClass$LazySpecialsBlock__init_();
    var$2[156] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(352);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(0, 1);
    var$2[157] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(353);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(62, 1);
    var$2[158] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(354);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(1, 1);
    var$2[159] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(355);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(2, 1);
    var$2[160] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(356);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(3, 0);
    var$2[161] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(357);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(4, 0);
    var$2[162] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(358);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(5, 1);
    var$2[163] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(359);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(448, 1);
    var$2[164] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(360);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(6, 1);
    var$2[165] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(361);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(7, 0);
    var$2[166] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(362);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(8, 1);
    var$2[167] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(363);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(3584, 1);
    var$2[168] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(364);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(9, 1);
    var$2[169] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(365);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(10, 1);
    var$2[170] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(366);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(11, 1);
    var$2[171] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(367);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(28672, 0);
    var$2[172] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(368);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(12, 0);
    var$2[173] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(369);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(13, 0);
    var$2[174] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(370);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(14, 0);
    var$2[175] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(371);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_2(983040, 1, 1);
    var$2[176] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(372);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(15, 0);
    var$2[177] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(373);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(16, 1);
    var$2[178] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(374);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(18, 1);
    var$2[179] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(375);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_1(19, 0, 1);
    var$2[180] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(376);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(1643118592, 1);
    var$2[181] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(377);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(20, 0);
    var$2[182] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(378);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(21, 0);
    var$2[183] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(379);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(22, 0);
    var$2[184] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(380);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(23, 0);
    var$2[185] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(381);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(24, 1);
    var$2[186] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(382);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(2113929216, 1);
    var$2[187] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(383);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(25, 1);
    var$2[188] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(384);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(26, 0);
    var$2[189] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(385);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(27, 0);
    var$2[190] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(386);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(28, 1);
    var$2[191] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(387);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(29, 0);
    var$2[192] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(388);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(30, 0);
    var$2[193] = var$3;
    jur_AbstractCharClass$PredefinedCharacterClasses_contents = var$1;
};
function jur_AbstractCharClass$LazyCharClass() {
    let a = this; jl_Object.call(a);
    a.$posValue = null;
    a.$negValue = null;
}
let jur_AbstractCharClass$LazyCharClass_getValue = ($this, $negative) => {
    if (!$negative && $this.$posValue === null)
        $this.$posValue = $this.$computeValue();
    else if ($negative && $this.$negValue === null)
        $this.$negValue = jur_AbstractCharClass_setNegative($this.$computeValue(), 1);
    if ($negative)
        return $this.$negValue;
    return $this.$posValue;
};
function jur_Quantifier() {
    let a = this; jur_SpecialToken.call(a);
    a.$min1 = 0;
    a.$max1 = 0;
}
let jur_Quantifier_toString = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    var$1 = $this.$min1;
    var$2 = $this.$max1;
    var$3 = var$2 != 2147483647 ? jl_Integer_toString(var$2) : $rt_s(24);
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append0(var$4, 123);
    var$5 = jl_StringBuilder_append1(var$4, var$1);
    jl_AbstractStringBuilder_append0(var$5, 44);
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append(var$5, var$3), 125);
    return jl_AbstractStringBuilder_toString(var$4);
},
jur_FSet$PossessiveFSet = $rt_classWithoutFields(jur_AbstractSet),
jur_FSet$PossessiveFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    return $stringIndex;
},
jur_FSet$PossessiveFSet_getName = $this => {
    return $rt_s(389);
},
jur_FSet$PossessiveFSet_hasConsumed = ($this, $mr) => {
    return 0;
};
function ju_BitSet() {
    let a = this; jl_Object.call(a);
    a.$data = null;
    a.$length3 = 0;
}
let ju_BitSet__init_1 = $this => {
    $this.$data = $rt_createIntArray(2);
},
ju_BitSet__init_0 = () => {
    let var_0 = new ju_BitSet();
    ju_BitSet__init_1(var_0);
    return var_0;
},
ju_BitSet__init_ = ($this, $nbits) => {
    let var$2;
    if ($nbits < 0) {
        var$2 = new jl_NegativeArraySizeException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    $this.$data = $rt_createIntArray((($nbits + 32 | 0) - 1 | 0) / 32 | 0);
},
ju_BitSet__init_2 = var_0 => {
    let var_1 = new ju_BitSet();
    ju_BitSet__init_(var_1, var_0);
    return var_1;
},
ju_BitSet_set0 = ($this, $bitIndex) => {
    let var$2, $index, var$4;
    if ($bitIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    $index = $bitIndex / 32 | 0;
    if ($bitIndex >= $this.$length3) {
        ju_BitSet_ensureCapacity($this, $index + 1 | 0);
        $this.$length3 = $bitIndex + 1 | 0;
    }
    var$4 = $this.$data.data;
    var$4[$index] = var$4[$index] | 1 << ($bitIndex % 32 | 0);
},
ju_BitSet_set = ($this, $fromIndex, $toIndex) => {
    let $fromDataIndex, $toDataIndex, var$5, $i, var$7;
    if ($fromIndex >= 0) {
        $fromDataIndex = $rt_compare($fromIndex, $toIndex);
        if ($fromDataIndex <= 0) {
            if (!$fromDataIndex)
                return;
            $fromDataIndex = $fromIndex / 32 | 0;
            $toDataIndex = $toIndex / 32 | 0;
            if ($toIndex > $this.$length3) {
                ju_BitSet_ensureCapacity($this, $toDataIndex + 1 | 0);
                $this.$length3 = $toIndex;
            }
            if ($fromDataIndex == $toDataIndex) {
                var$5 = $this.$data.data;
                var$5[$fromDataIndex] = var$5[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex) & ju_BitSet_trailingOneBits($this, $toIndex);
            } else {
                var$5 = $this.$data.data;
                var$5[$fromDataIndex] = var$5[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex);
                $i = $fromDataIndex + 1 | 0;
                while ($i < $toDataIndex) {
                    $this.$data.data[$i] = (-1);
                    $i = $i + 1 | 0;
                }
                if ($toIndex & 31) {
                    var$5 = $this.$data.data;
                    var$5[$toDataIndex] = var$5[$toDataIndex] | ju_BitSet_trailingOneBits($this, $toIndex);
                }
            }
            return;
        }
    }
    var$7 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$7);
    $rt_throw(var$7);
},
ju_BitSet_trailingZeroBits = ($this, $num) => {
    return (-1) << ($num % 32 | 0);
},
ju_BitSet_trailingOneBits = ($this, $num) => {
    $num = $num % 32 | 0;
    return !$num ? 0 : (-1) >>> (32 - $num | 0) | 0;
},
ju_BitSet_clear = ($this, $bitIndex) => {
    let var$2, $index, var$4, var$5, var$6;
    if ($bitIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    $index = $bitIndex / 32 | 0;
    var$4 = $this.$data.data;
    if ($index < var$4.length) {
        var$5 = var$4[$index];
        var$6 = ($bitIndex % 32 | 0) & 31;
        var$4[$index] = var$5 & ((-2) << var$6 | ((-2) >>> (32 - var$6 | 0) | 0));
        if ($bitIndex == ($this.$length3 - 1 | 0))
            ju_BitSet_recalculateLength($this);
    }
},
ju_BitSet_get = ($this, $bitIndex) => {
    let var$2, $index, var$4;
    if ($bitIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    $index = $bitIndex / 32 | 0;
    var$4 = $this.$data.data;
    return $index < var$4.length && var$4[$index] & 1 << ($bitIndex % 32 | 0) ? 1 : 0;
},
ju_BitSet_nextSetBit = ($this, $fromIndex) => {
    let var$2, $top, $index, var$5, $i;
    if ($fromIndex < 0) {
        var$2 = new jl_IndexOutOfBoundsException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    $top = $this.$length3;
    if ($fromIndex >= $top)
        return (-1);
    $index = $fromIndex / 32 | 0;
    var$5 = $this.$data.data;
    $i = var$5[$index] >>> ($fromIndex % 32 | 0) | 0;
    if ($i)
        return jl_Integer_numberOfTrailingZeros($i) + $fromIndex | 0;
    $top = ($top + 31 | 0) / 32 | 0;
    $i = $index + 1 | 0;
    while ($i < $top) {
        if (var$5[$i])
            return ($i * 32 | 0) + jl_Integer_numberOfTrailingZeros(var$5[$i]) | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
ju_BitSet_ensureCapacity = ($this, $capacity) => {
    let $newArrayLength, var$3, var$4, var$5;
    $newArrayLength = $this.$data.data.length;
    if ($newArrayLength >= $capacity)
        return;
    $newArrayLength = jl_Math_max(($capacity * 3 | 0) / 2 | 0, ($newArrayLength * 2 | 0) + 1 | 0);
    var$3 = $this.$data.data;
    var$4 = $rt_createIntArray($newArrayLength);
    var$5 = var$4.data;
    $capacity = jl_Math_min($newArrayLength, var$3.length);
    $newArrayLength = 0;
    while ($newArrayLength < $capacity) {
        var$5[$newArrayLength] = var$3[$newArrayLength];
        $newArrayLength = $newArrayLength + 1 | 0;
    }
    $this.$data = var$4;
},
ju_BitSet_recalculateLength = $this => {
    let $top, $i, $sz;
    $top = ($this.$length3 + 31 | 0) / 32 | 0;
    $this.$length3 = $top * 32 | 0;
    $i = $top - 1 | 0;
    a: {
        while (true) {
            if ($i < 0)
                break a;
            $sz = jl_Integer_numberOfLeadingZeros($this.$data.data[$i]);
            if ($sz < 32)
                break;
            $i = $i + (-1) | 0;
            $this.$length3 = $this.$length3 - 32 | 0;
        }
        $this.$length3 = $this.$length3 - $sz | 0;
    }
},
ju_BitSet_and = ($this, $set) => {
    let $i, $i_0, var$4, var$5;
    $i = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i_0 = 0;
    while ($i_0 < $i) {
        var$4 = $this.$data.data;
        var$4[$i_0] = var$4[$i_0] & $set.$data.data[$i_0];
        $i_0 = $i_0 + 1 | 0;
    }
    while (true) {
        var$5 = $this.$data.data;
        if ($i >= var$5.length)
            break;
        var$5[$i] = 0;
        $i = $i + 1 | 0;
    }
    $this.$length3 = jl_Math_min($this.$length3, $set.$length3);
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_andNot = ($this, $set) => {
    let $sz, $i, var$4;
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] & ($set.$data.data[$i] ^ (-1));
        $i = $i + 1 | 0;
    }
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_or = ($this, $set) => {
    let $sz, $i, var$4;
    $sz = jl_Math_max($this.$length3, $set.$length3);
    $this.$length3 = $sz;
    ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] | $set.$data.data[$i];
        $i = $i + 1 | 0;
    }
},
ju_BitSet_xor = ($this, $set) => {
    let $sz, $i, var$4;
    $sz = jl_Math_max($this.$length3, $set.$length3);
    $this.$length3 = $sz;
    ju_BitSet_ensureCapacity($this, ($sz + 31 | 0) / 32 | 0);
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] ^ $set.$data.data[$i];
        $i = $i + 1 | 0;
    }
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_isEmpty = $this => {
    return $this.$length3 ? 0 : 1;
};
function jur_LowHighSurrogateRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$surrChars = null;
    a.$alt1 = 0;
}
let jur_LowHighSurrogateRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt1 ? $rt_s(390) : $rt_s(391);
    var$2 = $this.$surrChars.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(392)), var$1), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
};
function jur_CompositeRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$withoutSurrogates = null;
    a.$withSurrogates = null;
}
let jur_CompositeRangeSet__init_0 = ($this, $withoutSurrogates, $withSurrogates) => {
    jur_AbstractSet__init_($this);
    $this.$withoutSurrogates = $withoutSurrogates;
    $this.$withSurrogates = $withSurrogates;
},
jur_CompositeRangeSet__init_ = (var_0, var_1) => {
    let var_2 = new jur_CompositeRangeSet();
    jur_CompositeRangeSet__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_CompositeRangeSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift, var$5, var$6, var$7, var$8, var$9;
    $shift = $this.$withoutSurrogates.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        a: {
            var$5 = $this.$withSurrogates;
            var$6 = $matchResult.$leftBound;
            $shift = $matchResult.$rightBound;
            var$7 = $stringIndex + 1 | 0;
            $shift = $rt_compare(var$7, $shift);
            if ($shift > 0) {
                $matchResult.$hitEnd = 1;
                $shift = (-1);
            } else {
                var$8 = $testString;
                var$9 = jl_String_charAt(var$8, $stringIndex);
                if (!var$5.$surrChars.$contains0(var$9))
                    $shift = (-1);
                else {
                    if (jl_Character_isHighSurrogate(var$9)) {
                        if ($shift < 0 && jl_Character_isLowSurrogate(jl_String_charAt(var$8, var$7))) {
                            $shift = (-1);
                            break a;
                        }
                    } else if (jl_Character_isLowSurrogate(var$9) && $stringIndex > var$6 && jl_Character_isHighSurrogate(jl_String_charAt(var$8, $stringIndex - 1 | 0))) {
                        $shift = (-1);
                        break a;
                    }
                    $shift = var$5.$next2.$matches(var$7, $testString, $matchResult);
                }
            }
        }
    if ($shift >= 0)
        return $shift;
    return (-1);
},
jur_CompositeRangeSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
    $this.$withSurrogates.$next2 = $next;
    $this.$withoutSurrogates.$setNext($next);
},
jur_CompositeRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = jl_String_valueOf($this.$withoutSurrogates);
    var$2 = jl_String_valueOf($this.$withSurrogates);
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(393)), var$1), $rt_s(394)), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_CompositeRangeSet_hasConsumed = ($this, $matchResult) => {
    return 1;
},
jur_CompositeRangeSet_first = ($this, $set) => {
    return 1;
};
function jur_SupplRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$chars = null;
    a.$alt0 = 0;
}
let jur_SupplRangeSet__init_ = ($this, $cc) => {
    jur_AbstractSet__init_($this);
    $this.$chars = $cc.$getInstance0();
    $this.$alt0 = $cc.$alt;
},
jur_SupplRangeSet__init_0 = var_0 => {
    let var_1 = new jur_SupplRangeSet();
    jur_SupplRangeSet__init_(var_1, var_0);
    return var_1;
},
jur_SupplRangeSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $low, var$6, $high, $offset;
    $strLength = $matchResult.$rightBound;
    if ($stringIndex < $strLength) {
        $low = $stringIndex + 1 | 0;
        var$6 = $testString;
        $high = jl_String_charAt(var$6, $stringIndex);
        if ($this.$contains0($high)) {
            $offset = $this.$next2.$matches($low, $testString, $matchResult);
            if ($offset > 0)
                return $offset;
        }
        if ($low < $strLength) {
            $stringIndex = $low + 1 | 0;
            $low = jl_String_charAt(var$6, $low);
            if (jl_Character_isSurrogatePair($high, $low) && $this.$contains0(jl_Character_toCodePoint($high, $low)))
                return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        }
    }
    return (-1);
},
jur_SupplRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt0 ? $rt_s(390) : $rt_s(391);
    var$2 = $this.$chars.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(392)), var$1), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_SupplRangeSet_contains = ($this, $ch) => {
    return $this.$chars.$contains0($ch);
},
jur_SupplRangeSet_first = ($this, $set) => {
    if ($set instanceof jur_SupplCharSet)
        return $this.$chars.$contains0($set.$ch1);
    if ($set instanceof jur_CharSet)
        return $this.$chars.$contains0($set.$ch0);
    if ($set instanceof jur_SupplRangeSet)
        return jur_AbstractCharClass_intersects($this.$chars, $set.$chars);
    if (!($set instanceof jur_RangeSet))
        return 1;
    return jur_AbstractCharClass_intersects($this.$chars, $set.$chars0);
},
jur_SupplRangeSet_getChars = $this => {
    return $this.$chars;
},
jur_SupplRangeSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_SupplRangeSet_hasConsumed = ($this, $mr) => {
    return 1;
},
jur_UCISupplRangeSet = $rt_classWithoutFields(jur_SupplRangeSet),
jur_UCISupplRangeSet_contains = ($this, $ch) => {
    return $this.$chars.$contains0(jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch)));
},
jur_UCISupplRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt0 ? $rt_s(390) : $rt_s(391);
    var$2 = $this.$chars.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(395)), var$1), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
};
function jur_UCIRangeSet() {
    let a = this; jur_LeafSet.call(a);
    a.$chars1 = null;
    a.$alt2 = 0;
}
let jur_UCIRangeSet__init_0 = ($this, $cc) => {
    jur_LeafSet__init_($this);
    $this.$chars1 = $cc.$getInstance0();
    $this.$alt2 = $cc.$alt;
},
jur_UCIRangeSet__init_ = var_0 => {
    let var_1 = new jur_UCIRangeSet();
    jur_UCIRangeSet__init_0(var_1, var_0);
    return var_1;
},
jur_UCIRangeSet_accepts = ($this, $strIndex, $testString) => {
    return !$this.$chars1.$contains0(jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex)))) ? (-1) : 1;
},
jur_UCIRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt2 ? $rt_s(390) : $rt_s(391);
    var$2 = $this.$chars1.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(395)), var$1), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
};
function jur_RangeSet() {
    let a = this; jur_LeafSet.call(a);
    a.$chars0 = null;
    a.$alt3 = 0;
}
let jur_RangeSet__init_0 = ($this, $cc) => {
    jur_LeafSet__init_($this);
    $this.$chars0 = $cc.$getInstance0();
    $this.$alt3 = $cc.$alt;
},
jur_RangeSet__init_ = var_0 => {
    let var_1 = new jur_RangeSet();
    jur_RangeSet__init_0(var_1, var_0);
    return var_1;
},
jur_RangeSet_accepts = ($this, $strIndex, $testString) => {
    return !$this.$chars0.$contains0(jl_String_charAt($testString, $strIndex)) ? (-1) : 1;
},
jur_RangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt3 ? $rt_s(390) : $rt_s(391);
    var$2 = $this.$chars0.$toString();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(392)), var$1), var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_RangeSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return $this.$chars0.$contains0($set.$ch0);
    if ($set instanceof jur_RangeSet)
        return jur_AbstractCharClass_intersects($this.$chars0, $set.$chars0);
    if (!($set instanceof jur_SupplRangeSet)) {
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return 0;
    }
    return jur_AbstractCharClass_intersects($this.$chars0, $set.$chars);
};
function jur_HangulDecomposedCharSet() {
    let a = this; jur_JointSet.call(a);
    a.$decomposedChar = null;
    a.$decomposedCharUTF160 = null;
    a.$decomposedCharLength = 0;
}
let jur_HangulDecomposedCharSet__init_0 = ($this, $decomposedChar, $decomposedCharLength) => {
    jur_AbstractSet__init_($this);
    $this.$decomposedChar = $decomposedChar;
    $this.$decomposedCharLength = $decomposedCharLength;
},
jur_HangulDecomposedCharSet__init_ = (var_0, var_1) => {
    let var_2 = new jur_HangulDecomposedCharSet();
    jur_HangulDecomposedCharSet__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_HangulDecomposedCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_HangulDecomposedCharSet_getDecomposedChar = $this => {
    if ($this.$decomposedCharUTF160 === null)
        $this.$decomposedCharUTF160 = jl_String__init_0($this.$decomposedChar);
    return $this.$decomposedCharUTF160;
},
jur_HangulDecomposedCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jur_HangulDecomposedCharSet_getDecomposedChar($this);
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(396)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_HangulDecomposedCharSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound, $decompSyllable, $vIndex, $tIndex, var$8, var$9, $curSymb, $i, var$12, $lIndex, $decompCurSymb, var$15, $syllIndex;
    $rightBound = $matchResult.$rightBound;
    $decompSyllable = $rt_createIntArray(3);
    $vIndex = (-1);
    $tIndex = (-1);
    if ($strIndex >= $rightBound)
        return (-1);
    var$8 = $strIndex + 1 | 0;
    var$9 = $testString;
    $curSymb = jl_String_charAt(var$9, $strIndex);
    $i = $curSymb - 44032 | 0;
    if ($i >= 0 && $i < 11172) {
        var$12 = 4352 + ($i / 588 | 0) | 0;
        $lIndex = 4449 + (($i % 588 | 0) / 28 | 0) | 0;
        $strIndex = $i % 28 | 0;
        $decompCurSymb = !$strIndex ? $rt_createIntArrayFromData([var$12, $lIndex]) : $rt_createIntArrayFromData([var$12, $lIndex, 4519 + $strIndex | 0]);
    } else
        $decompCurSymb = null;
    if ($decompCurSymb !== null) {
        var$15 = $decompCurSymb.data;
        $i = 0;
        $strIndex = var$15.length;
        $syllIndex = $this.$decomposedCharLength;
        if ($strIndex != $syllIndex)
            return (-1);
        while (true) {
            if ($i >= $syllIndex)
                return $this.$next2.$matches(var$8, $testString, $matchResult);
            if (var$15[$i] != $this.$decomposedChar.data[$i])
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    $decompSyllable = $decompSyllable.data;
    $decompSyllable[0] = $curSymb;
    $lIndex = $curSymb - 4352 | 0;
    if ($lIndex >= 0 && $lIndex < 19) {
        if (var$8 < $rightBound) {
            $curSymb = jl_String_charAt(var$9, var$8);
            $vIndex = $curSymb - 4449 | 0;
        }
        if ($vIndex >= 0 && $vIndex < 21) {
            $lIndex = var$8 + 1 | 0;
            $decompSyllable[1] = $curSymb;
            if ($lIndex < $rightBound) {
                $curSymb = jl_String_charAt(var$9, $lIndex);
                $tIndex = $curSymb - 4519 | 0;
            }
            if ($tIndex >= 0 && $tIndex < 28) {
                a: {
                    $strIndex = $lIndex + 1 | 0;
                    $decompSyllable[2] = $curSymb;
                    if ($this.$decomposedCharLength == 3) {
                        $lIndex = $decompSyllable[0];
                        var$15 = $this.$decomposedChar.data;
                        if ($lIndex == var$15[0] && $decompSyllable[1] == var$15[1] && $decompSyllable[2] == var$15[2]) {
                            $strIndex = $this.$next2.$matches($strIndex, $testString, $matchResult);
                            break a;
                        }
                    }
                    $strIndex = (-1);
                }
                return $strIndex;
            }
            b: {
                if ($this.$decomposedCharLength == 2) {
                    $syllIndex = $decompSyllable[0];
                    var$15 = $this.$decomposedChar.data;
                    if ($syllIndex == var$15[0] && $decompSyllable[1] == var$15[1]) {
                        $strIndex = $this.$next2.$matches($lIndex, $testString, $matchResult);
                        break b;
                    }
                }
                $strIndex = (-1);
            }
            return $strIndex;
        }
        return (-1);
    }
    return (-1);
},
jur_HangulDecomposedCharSet_first = ($this, $set) => {
    return $set instanceof jur_HangulDecomposedCharSet && !jl_String_equals(jur_HangulDecomposedCharSet_getDecomposedChar($set), jur_HangulDecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
},
jur_HangulDecomposedCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_CharSet() {
    jur_LeafSet.call(this);
    this.$ch0 = 0;
}
let jur_CharSet__init_0 = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch0 = $ch;
},
jur_CharSet__init_ = var_0 => {
    let var_1 = new jur_CharSet();
    jur_CharSet__init_0(var_1, var_0);
    return var_1;
},
jur_CharSet_charCount = $this => {
    return 1;
},
jur_CharSet_accepts = ($this, $strIndex, $testString) => {
    return $this.$ch0 != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
},
jur_CharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $strLength, var$6, var$7;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$6 = jl_String_indexOf($testStr, $this.$ch0, $strIndex);
        if (var$6 < 0)
            return (-1);
        var$7 = $this.$next2;
        $strIndex = var$6 + 1 | 0;
        if (var$7.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$6;
},
jur_CharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $testStr, var$6;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$6 = jl_String_lastIndexOf($testStr, $this.$ch0, $lastIndex);
            if (var$6 < 0)
                break a;
            if (var$6 < $strIndex)
                break a;
            if ($this.$next2.$matches(var$6 + 1 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$6 + (-1) | 0;
        }
        return var$6;
    }
    return (-1);
},
jur_CharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch0;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append0(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_CharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return $set.$ch0 != $this.$ch0 ? 0 : 1;
    if (!($set instanceof jur_RangeSet)) {
        if ($set instanceof jur_SupplRangeSet)
            return $set.$contains0($this.$ch0);
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return 0;
    }
    return jur_RangeSet_accepts($set, 0, jl_Character_toString($this.$ch0)) <= 0 ? 0 : 1;
};
function jur_UCICharSet() {
    jur_LeafSet.call(this);
    this.$ch2 = 0;
}
let jur_UCICharSet__init_0 = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch2 = jl_Character_toLowerCase(jl_Character_toUpperCase($ch));
},
jur_UCICharSet__init_ = var_0 => {
    let var_1 = new jur_UCICharSet();
    jur_UCICharSet__init_0(var_1, var_0);
    return var_1;
},
jur_UCICharSet_accepts = ($this, $strIndex, $testString) => {
    return $this.$ch2 != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($testString, $strIndex))) ? (-1) : 1;
},
jur_UCICharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(397)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_CICharSet() {
    let a = this; jur_LeafSet.call(a);
    a.$ch4 = 0;
    a.$supplement = 0;
}
let jur_CICharSet__init_0 = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch4 = $ch;
    $this.$supplement = jur_Pattern_getSupplement($ch);
},
jur_CICharSet__init_ = var_0 => {
    let var_1 = new jur_CICharSet();
    jur_CICharSet__init_0(var_1, var_0);
    return var_1;
},
jur_CICharSet_accepts = ($this, $strIndex, $testString) => {
    let var$3;
    var$3 = $this.$ch4;
    $testString = $testString;
    return var$3 != jl_String_charAt($testString, $strIndex) && $this.$supplement != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
},
jur_CICharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch4;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(398)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_DecomposedCharSet() {
    let a = this; jur_JointSet.call(a);
    a.$readCharsForCodePoint = 0;
    a.$decomposedCharUTF16 = null;
    a.$decomposedChar0 = null;
    a.$decomposedCharLength0 = 0;
}
let jur_DecomposedCharSet__init_ = ($this, $decomposedChar, $decomposedCharLength) => {
    jur_AbstractSet__init_($this);
    $this.$readCharsForCodePoint = 1;
    $this.$decomposedChar0 = $decomposedChar;
    $this.$decomposedCharLength0 = $decomposedCharLength;
},
jur_DecomposedCharSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_DecomposedCharSet();
    jur_DecomposedCharSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_DecomposedCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_DecomposedCharSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $decCodePoint, $rightBound, $curChar, var$7, $decCurCodePoint, var$9, var$10, $readCodePoints;
    $decCodePoint = $rt_createIntArray(4);
    $rightBound = $matchResult.$rightBound;
    if ($strIndex >= $rightBound)
        return (-1);
    $curChar = jur_DecomposedCharSet_codePointAt($this, $strIndex, $testString, $rightBound);
    var$7 = $strIndex + $this.$readCharsForCodePoint | 0;
    $decCurCodePoint = jur_Lexer_getDecomposition($curChar);
    if ($decCurCodePoint === null) {
        $decCurCodePoint = $decCodePoint.data;
        $strIndex = 1;
        $decCurCodePoint[0] = $curChar;
    } else {
        $strIndex = $decCurCodePoint.data.length;
        jl_System_fastArraycopy($decCurCodePoint, 0, $decCodePoint, 0, $strIndex);
        $strIndex = 0 + $strIndex | 0;
    }
    a: {
        if (var$7 < $rightBound) {
            var$9 = $decCodePoint.data;
            $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
            while ($strIndex < 4) {
                if (!(($curChar != 832 ? 0 : 1) | ($curChar != 833 ? 0 : 1) | ($curChar != 835 ? 0 : 1) | ($curChar != 836 ? 0 : 1))) {
                    var$10 = $strIndex + 1 | 0;
                    var$9[$strIndex] = $curChar;
                } else {
                    $decCurCodePoint = (jur_Lexer_getDecomposition($curChar)).data;
                    if ($decCurCodePoint.length != 2) {
                        var$10 = $strIndex + 1 | 0;
                        var$9[$strIndex] = $decCurCodePoint[0];
                    } else {
                        $readCodePoints = $strIndex + 1 | 0;
                        var$9[$strIndex] = $decCurCodePoint[0];
                        var$10 = $readCodePoints + 1 | 0;
                        var$9[$readCodePoints] = $decCurCodePoint[1];
                    }
                }
                var$7 = var$7 + $this.$readCharsForCodePoint | 0;
                if (var$7 >= $rightBound) {
                    $strIndex = var$10;
                    break a;
                }
                $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
                $strIndex = var$10;
            }
        }
    }
    if ($strIndex != $this.$decomposedCharLength0)
        return (-1);
    $decCurCodePoint = $decCodePoint.data;
    $curChar = 0;
    while (true) {
        if ($curChar >= $strIndex)
            return $this.$next2.$matches(var$7, $testString, $matchResult);
        if ($decCurCodePoint[$curChar] != $this.$decomposedChar0.data[$curChar])
            break;
        $curChar = $curChar + 1 | 0;
    }
    return (-1);
},
jur_DecomposedCharSet_getDecomposedChar = $this => {
    let $strBuff, $i;
    if ($this.$decomposedCharUTF16 === null) {
        $strBuff = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($strBuff);
        $i = 0;
        while ($i < $this.$decomposedCharLength0) {
            jl_AbstractStringBuilder_append2($strBuff, jl_Character_toChars($this.$decomposedChar0.data[$i]));
            $i = $i + 1 | 0;
        }
        $this.$decomposedCharUTF16 = jl_AbstractStringBuilder_toString($strBuff);
    }
    return $this.$decomposedCharUTF16;
},
jur_DecomposedCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jur_DecomposedCharSet_getDecomposedChar($this);
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(399)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_DecomposedCharSet_codePointAt = ($this, $strIndex, $testString, $rightBound) => {
    let $curChar, $low, $curCodePointUTF16;
    $this.$readCharsForCodePoint = 1;
    if ($strIndex >= ($rightBound - 1 | 0))
        $curChar = jl_String_charAt($testString, $strIndex);
    else {
        $rightBound = $strIndex + 1 | 0;
        $testString = $testString;
        $curChar = jl_String_charAt($testString, $strIndex);
        $low = jl_String_charAt($testString, $rightBound);
        if (jl_Character_isSurrogatePair($curChar, $low)) {
            $curCodePointUTF16 = $rt_createCharArray(2).data;
            $curCodePointUTF16[0] = $curChar;
            $curCodePointUTF16[1] = $low;
            $rightBound = $curCodePointUTF16.length;
            if (0 < $rightBound && $rightBound <= $rightBound) {
                $curChar = 0 < ($rightBound - 1 | 0) && jl_Character_isHighSurrogate($curCodePointUTF16[0]) && jl_Character_isLowSurrogate($curCodePointUTF16[1]) ? jl_Character_toCodePoint($curCodePointUTF16[0], $curCodePointUTF16[1]) : $curCodePointUTF16[0];
                $this.$readCharsForCodePoint = 2;
            } else {
                $testString = new jl_IndexOutOfBoundsException;
                jl_Exception__init_($testString);
                $rt_throw($testString);
            }
        }
    }
    return $curChar;
},
jur_DecomposedCharSet_first = ($this, $set) => {
    return $set instanceof jur_DecomposedCharSet && !jl_String_equals(jur_DecomposedCharSet_getDecomposedChar($set), jur_DecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
},
jur_DecomposedCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
},
jur_UCIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet),
jur_CIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet),
jur_PossessiveGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_PossessiveGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $stringIndex_0;
    while (true) {
        $stringIndex_0 = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($stringIndex_0 <= 0)
            break;
        $stringIndex = $stringIndex_0;
    }
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_PosPlusGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_PosPlusGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex < 0)
        return (-1);
    if ($nextIndex > $stringIndex) {
        while (true) {
            $stringIndex = $this.$innerSet.$matches($nextIndex, $testString, $matchResult);
            if ($stringIndex <= $nextIndex)
                break;
            $nextIndex = $stringIndex;
        }
        $stringIndex = $nextIndex;
    }
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_AltGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_AltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0)
        return $nextIndex;
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_AltGroupQuantifierSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
    $this.$innerSet.$setNext($next);
},
jur_PosAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet),
jur_PosAltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex <= 0)
        $nextIndex = $stringIndex;
    return $this.$next2.$matches($nextIndex, $testString, $matchResult);
},
jur_PosAltGroupQuantifierSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
};
function jur_CompositeGroupQuantifierSet() {
    let a = this; jur_GroupQuantifierSet.call(a);
    a.$quantifier = null;
    a.$setCounter = 0;
}
let jur_CompositeGroupQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type, $setCounter) => {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$quantifier = $quant;
    $this.$setCounter = $setCounter;
},
jur_CompositeGroupQuantifierSet__init_0 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jur_CompositeGroupQuantifierSet();
    jur_CompositeGroupQuantifierSet__init_(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jur_CompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $enterCounter, $nextIndex;
    $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    if ($enterCounter >= $this.$quantifier.$max1)
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$setCounter;
    $enterCounter = $enterCounter + 1 | 0;
    jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
        return $nextIndex;
    }
    $nextIndex = $this.$setCounter;
    $enterCounter = $enterCounter + (-1) | 0;
    jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
    if ($enterCounter >= $this.$quantifier.$min1)
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
    return (-1);
},
jur_CompositeGroupQuantifierSet_getName = $this => {
    return jur_Quantifier_toString($this.$quantifier);
},
jur_PosCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet),
jur_PosCompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $counter, $max, $nextIndex;
    $counter = 0;
    $max = $this.$quantifier.$max1;
    a: {
        while (true) {
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
            if ($nextIndex <= $stringIndex)
                break a;
            if ($counter >= $max)
                break;
            $counter = $counter + 1 | 0;
            $stringIndex = $nextIndex;
        }
    }
    if ($nextIndex < 0 && $counter < $this.$quantifier.$min1)
        return (-1);
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_ReluctantGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_ReluctantGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $res;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    $res = $this.$next2.$matches($stringIndex, $testString, $matchResult);
    if ($res >= 0)
        return $res;
    return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
},
jur_RelAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet),
jur_RelAltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$next2.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex < 0)
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    return $nextIndex;
},
jur_RelCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet),
jur_RelCompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $enterCounter, var$5, $nextIndex;
    $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    var$5 = $this.$quantifier;
    if ($enterCounter >= var$5.$max1) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    if ($enterCounter < var$5.$min1) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    } else {
        $nextIndex = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
            return $nextIndex;
        }
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    }
    return $nextIndex;
},
jur_DotAllQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet),
jur_DotAllQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength;
    $strLength = $matchResult.$rightBound;
    if ($strLength > $stringIndex)
        return $this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult);
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_DotAllQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength;
    $strLength = $matchResult.$rightBound;
    if ($this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult) >= 0)
        return $stringIndex;
    return (-1);
},
jur_DotAllQuantifierSet_getName = $this => {
    return $rt_s(400);
};
function jur_DotQuantifierSet() {
    jur_QuantifierSet.call(this);
    this.$lt = null;
}
let jur_DotQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $startSearch;
    $strLength = $matchResult.$rightBound;
    $startSearch = jur_DotQuantifierSet_findLineTerminator($this, $stringIndex, $strLength, $testString);
    if ($startSearch >= 0)
        $strLength = $startSearch;
    if ($strLength > $stringIndex)
        return $this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult);
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_DotQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $res, $nextSearch, $leftBound;
    $strLength = $matchResult.$rightBound;
    $res = $this.$next2.$find0($stringIndex, $testString, $matchResult);
    if ($res < 0)
        return (-1);
    $nextSearch = jur_DotQuantifierSet_findLineTerminator($this, $res, $strLength, $testString);
    if ($nextSearch >= 0)
        $strLength = $nextSearch;
    $strLength = jl_Math_max($res, $this.$next2.$findBack($res, $strLength, $testString, $matchResult));
    if ($strLength <= 0)
        $leftBound = $strLength ? (-1) : 0;
    else {
        $leftBound = $strLength - 1 | 0;
        $matchResult = $testString;
        a: {
            while (true) {
                if ($leftBound < $stringIndex) {
                    $leftBound = (-1);
                    break a;
                }
                if ($this.$lt.$isLineTerminator(jl_String_charAt($matchResult, $leftBound)))
                    break;
                $leftBound = $leftBound + (-1) | 0;
            }
        }
    }
    if ($leftBound >= $stringIndex)
        $stringIndex = $leftBound >= $strLength ? $leftBound : $leftBound + 1 | 0;
    return $stringIndex;
},
jur_DotQuantifierSet_findLineTerminator = ($this, $i, $to, $testString) => {
    let var$4;
    var$4 = $testString;
    while (true) {
        if ($i >= $to)
            return (-1);
        if ($this.$lt.$isLineTerminator(jl_String_charAt(var$4, $i)))
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
jur_DotQuantifierSet_getName = $this => {
    return $rt_s(401);
},
jur_AbstractLineTerminator = $rt_classWithoutFields(),
jur_AbstractLineTerminator_unixLT = null,
jur_AbstractLineTerminator_unicodeLT = null,
jur_AbstractLineTerminator_getInstance = $flag => {
    let var$2;
    if (!($flag & 1)) {
        var$2 = jur_AbstractLineTerminator_unicodeLT;
        if (var$2 !== null)
            return var$2;
        var$2 = new jur_AbstractLineTerminator$2;
        jur_AbstractLineTerminator_unicodeLT = var$2;
        return var$2;
    }
    var$2 = jur_AbstractLineTerminator_unixLT;
    if (var$2 !== null)
        return var$2;
    var$2 = new jur_AbstractLineTerminator$1;
    jur_AbstractLineTerminator_unixLT = var$2;
    return var$2;
},
jur_PossessiveQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_PossessiveQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    a: {
        while (true) {
            if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound)
                break a;
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$4 < 1)
                break;
            $stringIndex = $stringIndex + var$4 | 0;
        }
    }
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_PossessiveAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet),
jur_PossessiveAltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
        var$4 = $this.$leaf.$accepts($stringIndex, $testString);
        if (var$4 >= 1)
            $stringIndex = $stringIndex + var$4 | 0;
    }
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_PossessiveCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet),
jur_PossessiveCompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, $min, $max, $i, $shift;
    var$4 = $this.$quantifier0;
    $min = var$4.$min1;
    $max = var$4.$max1;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while (true) {
                    if ($i >= $max)
                        break a;
                    if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound)
                        break a;
                    $shift = $this.$leaf.$accepts($stringIndex, $testString);
                    if ($shift < 1)
                        break;
                    $stringIndex = $stringIndex + $shift | 0;
                    $i = $i + 1 | 0;
                }
            }
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$leaf.$accepts($stringIndex, $testString);
        if ($shift < 1)
            break;
        $stringIndex = $stringIndex + $shift | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_ReluctantQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_ReluctantQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    while (true) {
        var$4 = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if (var$4 >= 0)
            break;
        if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            $stringIndex = $stringIndex + var$4 | 0;
        }
        if (var$4 < 1)
            return (-1);
    }
    return var$4;
},
jur_ReluctantAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet),
jur_ReluctantAltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
},
jur_ReluctantCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet),
jur_ReluctantCompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, $min, $max, $i, var$8, var$9;
    var$4 = $this.$quantifier0;
    $min = var$4.$min1;
    $max = var$4.$max1;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while (true) {
                    var$8 = $this.$next2.$matches($stringIndex, $testString, $matchResult);
                    if (var$8 >= 0)
                        break;
                    if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$rightBound) {
                        var$8 = $this.$leaf.$accepts($stringIndex, $testString);
                        $stringIndex = $stringIndex + var$8 | 0;
                        $i = $i + 1 | 0;
                    }
                    if (var$8 < 1)
                        break a;
                    if ($i > $max)
                        break a;
                }
                return var$8;
            }
            return (-1);
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$rightBound) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        var$9 = $this.$leaf.$accepts($stringIndex, $testString);
        if (var$9 < 1)
            break;
        $stringIndex = $stringIndex + var$9 | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_SOLSet = $rt_classWithoutFields(jur_AbstractSet),
jur_SOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    if ($strIndex && !($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound))
        return (-1);
    return $this.$next2.$matches($strIndex, $testString, $matchResult);
},
jur_SOLSet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_SOLSet_getName = $this => {
    return $rt_s(402);
};
function jur_WordBoundary() {
    jur_AbstractSet.call(this);
    this.$positive0 = 0;
}
let jur_WordBoundary__init_0 = ($this, $positive) => {
    jur_AbstractSet__init_($this);
    $this.$positive0 = $positive;
},
jur_WordBoundary__init_ = var_0 => {
    let var_1 = new jur_WordBoundary();
    jur_WordBoundary__init_0(var_1, var_0);
    return var_1;
},
jur_WordBoundary_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $ch1, $ch2, $left, $leftBound;
    $ch1 = $stringIndex >= $matchResult.$rightBound ? 32 : jl_String_charAt($testString, $stringIndex);
    if (!$stringIndex)
        $ch2 = 32;
    else {
        $left = $stringIndex - 1 | 0;
        $ch2 = jl_String_charAt($testString, $left);
    }
    $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound;
    return ($ch1 != 32 && !jur_WordBoundary_isSpace($this, $ch1, $stringIndex, $leftBound, $testString) ? 0 : 1) ^ ($ch2 != 32 && !jur_WordBoundary_isSpace($this, $ch2, $stringIndex - 1 | 0, $leftBound, $testString) ? 0 : 1) ^ $this.$positive0 ? (-1) : $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_WordBoundary_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_WordBoundary_getName = $this => {
    return $rt_s(403);
},
jur_WordBoundary_isSpace = ($this, $ch, $index, $leftBound, $testString) => {
    if (!jl_Character_isLetterOrDigit($ch) && $ch != 95) {
        a: {
            if (jl_Character_getType($ch) == 6) {
                $testString = $testString;
                while (true) {
                    $index = $index + (-1) | 0;
                    if ($index < $leftBound)
                        break a;
                    $ch = jl_String_charAt($testString, $index);
                    if (jl_Character_isLetterOrDigit($ch))
                        return 0;
                    if (jl_Character_getType($ch) != 6)
                        return 1;
                }
            }
        }
        return 1;
    }
    return 0;
},
jur_PreviousMatch = $rt_classWithoutFields(jur_AbstractSet),
jur_PreviousMatch_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if ($stringIndex != $matchResult.$previousMatch)
        return (-1);
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_PreviousMatch_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PreviousMatch_getName = $this => {
    return $rt_s(404);
};
function jur_EOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter0 = 0;
}
let jur_EOLSet__init_ = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter0 = $counter;
},
jur_EOLSet__init_0 = var_0 => {
    let var_1 = new jur_EOLSet();
    jur_EOLSet__init_(var_1, var_0);
    return var_1;
},
jur_EOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound, var$5, var$6, $ch;
    $rightBound = $matchResult.$anchoringBounds ? $matchResult.$rightBound : $testString.$nativeString.length;
    if ($strIndex >= $rightBound) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
        return $this.$next2.$matches($strIndex, $testString, $matchResult);
    }
    var$5 = $rightBound - $strIndex | 0;
    if (var$5 == 2) {
        var$6 = $testString;
        if (jl_String_charAt(var$6, $strIndex) == 13 && jl_String_charAt(var$6, $strIndex + 1 | 0) == 10) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
            return $this.$next2.$matches($strIndex, $testString, $matchResult);
        }
    }
    a: {
        if (var$5 == 1) {
            $ch = jl_String_charAt($testString, $strIndex);
            if ($ch == 10)
                break a;
            if ($ch == 13)
                break a;
            if ($ch == 133)
                break a;
            if (($ch | 1) == 8233)
                break a;
        }
        return (-1);
    }
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
    return $this.$next2.$matches($strIndex, $testString, $matchResult);
},
jur_EOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter0) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, (-1));
    return $res;
},
jur_EOLSet_getName = $this => {
    return $rt_s(405);
},
jur_EOISet = $rt_classWithoutFields(jur_AbstractSet),
jur_EOISet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if ($stringIndex < (!$matchResult.$transparentBounds ? $matchResult.$rightBound : $testString.$nativeString.length))
        return (-1);
    $matchResult.$hitEnd = 1;
    $matchResult.$requireEnd = 1;
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_EOISet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_EOISet_getName = $this => {
    return $rt_s(406);
};
function jur_MultiLineSOLSet() {
    jur_AbstractSet.call(this);
    this.$lt1 = null;
}
let jur_MultiLineSOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let var$4, var$5, var$6;
    a: {
        if ($strIndex != $matchResult.$rightBound) {
            if (!$strIndex)
                break a;
            if ($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound)
                break a;
            var$4 = $this.$lt1;
            var$5 = $strIndex - 1 | 0;
            var$6 = $testString;
            if (var$4.$isAfterLineTerminator(jl_String_charAt(var$6, var$5), jl_String_charAt(var$6, $strIndex)))
                break a;
        }
        return (-1);
    }
    return $this.$next2.$matches($strIndex, $testString, $matchResult);
},
jur_MultiLineSOLSet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_MultiLineSOLSet_getName = $this => {
    return $rt_s(407);
},
jur_DotAllSet = $rt_classWithoutFields(jur_JointSet),
jur_DotAllSet__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_DotAllSet__init_0 = () => {
    let var_0 = new jur_DotAllSet();
    jur_DotAllSet__init_(var_0);
    return var_0;
},
jur_DotAllSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, var$6, $high;
    $strLength = $matchResult.$rightBound;
    var$5 = $stringIndex + 1 | 0;
    if (var$5 > $strLength) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    var$6 = $testString;
    $high = jl_String_charAt(var$6, $stringIndex);
    if (jl_Character_isHighSurrogate($high)) {
        $stringIndex = $stringIndex + 2 | 0;
        if ($stringIndex <= $strLength && jl_Character_isSurrogatePair($high, jl_String_charAt(var$6, var$5)))
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    return $this.$next2.$matches(var$5, $testString, $matchResult);
},
jur_DotAllSet_getName = $this => {
    return $rt_s(408);
},
jur_DotAllSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_DotAllSet_getType = $this => {
    return (-2147483602);
},
jur_DotAllSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_DotSet() {
    jur_JointSet.call(this);
    this.$lt0 = null;
}
let jur_DotSet__init_ = ($this, $lt) => {
    jur_AbstractSet__init_($this);
    $this.$lt0 = $lt;
},
jur_DotSet__init_0 = var_0 => {
    let var_1 = new jur_DotSet();
    jur_DotSet__init_(var_1, var_0);
    return var_1;
},
jur_DotSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, var$6, $high, $low;
    $strLength = $matchResult.$rightBound;
    var$5 = $stringIndex + 1 | 0;
    if (var$5 > $strLength) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    var$6 = $testString;
    $high = jl_String_charAt(var$6, $stringIndex);
    if (jl_Character_isHighSurrogate($high)) {
        $stringIndex = $stringIndex + 2 | 0;
        if ($stringIndex <= $strLength) {
            $low = jl_String_charAt(var$6, var$5);
            if (jl_Character_isSurrogatePair($high, $low))
                return $this.$lt0.$isLineTerminator(jl_Character_toCodePoint($high, $low)) ? (-1) : $this.$next2.$matches($stringIndex, $testString, $matchResult);
        }
    }
    return $this.$lt0.$isLineTerminator($high) ? (-1) : $this.$next2.$matches(var$5, $testString, $matchResult);
},
jur_DotSet_getName = $this => {
    return $rt_s(148);
},
jur_DotSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_DotSet_getType = $this => {
    return (-2147483602);
},
jur_DotSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_UEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter2 = 0;
}
let jur_UEOLSet__init_ = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter2 = $counter;
},
jur_UEOLSet__init_0 = var_0 => {
    let var_1 = new jur_UEOLSet();
    jur_UEOLSet__init_(var_1, var_0);
    return var_1;
},
jur_UEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound;
    $rightBound = $matchResult.$anchoringBounds ? $matchResult.$rightBound : $testString.$nativeString.length;
    if ($strIndex >= $rightBound) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
        return $this.$next2.$matches($strIndex, $testString, $matchResult);
    }
    if (($rightBound - $strIndex | 0) == 1 && jl_String_charAt($testString, $strIndex) == 10) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 1);
        return $this.$next2.$matches($strIndex + 1 | 0, $testString, $matchResult);
    }
    return (-1);
},
jur_UEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter2) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, (-1));
    return $res;
},
jur_UEOLSet_getName = $this => {
    return $rt_s(405);
};
function jur_UMultiLineEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter3 = 0;
}
let jur_UMultiLineEOLSet__init_ = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter3 = $counter;
},
jur_UMultiLineEOLSet__init_0 = var_0 => {
    let var_1 = new jur_UMultiLineEOLSet();
    jur_UMultiLineEOLSet__init_(var_1, var_0);
    return var_1;
},
jur_UMultiLineEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    if (($matchResult.$anchoringBounds ? $matchResult.$rightBound - $strIndex | 0 : $testString.$nativeString.length - $strIndex | 0) <= 0) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, 0);
        return $this.$next2.$matches($strIndex, $testString, $matchResult);
    }
    if (jl_String_charAt($testString, $strIndex) != 10)
        return (-1);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, 1);
    return $this.$next2.$matches($strIndex + 1 | 0, $testString, $matchResult);
},
jur_UMultiLineEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter3) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, (-1));
    return $res;
},
jur_UMultiLineEOLSet_getName = $this => {
    return $rt_s(409);
};
function jur_MultiLineEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter = 0;
}
let jur_MultiLineEOLSet__init_0 = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter = $counter;
},
jur_MultiLineEOLSet__init_ = var_0 => {
    let var_1 = new jur_MultiLineEOLSet();
    jur_MultiLineEOLSet__init_0(var_1, var_0);
    return var_1;
},
jur_MultiLineEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $strDif, $ch1, $ch2, var$7;
    $strDif = $matchResult.$anchoringBounds ? $matchResult.$rightBound - $strIndex | 0 : $testString.$nativeString.length - $strIndex | 0;
    if (!$strDif) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
        return $this.$next2.$matches($strIndex, $testString, $matchResult);
    }
    if ($strDif < 2) {
        $ch1 = jl_String_charAt($testString, $strIndex);
        $ch2 = 97;
    } else {
        var$7 = $testString;
        $ch1 = jl_String_charAt(var$7, $strIndex);
        $ch2 = jl_String_charAt(var$7, $strIndex + 1 | 0);
    }
    switch ($ch1) {
        case 10:
        case 133:
        case 8232:
        case 8233:
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next2.$matches($strIndex, $testString, $matchResult);
        case 13:
            if ($ch2 != 10) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
                return $this.$next2.$matches($strIndex, $testString, $matchResult);
            }
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
            return $this.$next2.$matches($strIndex, $testString, $matchResult);
        default:
    }
    return (-1);
},
jur_MultiLineEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, (-1));
    return $res;
},
jur_MultiLineEOLSet_getName = $this => {
    return $rt_s(410);
};
function jur_CIBackReferenceSet() {
    let a = this; jur_JointSet.call(a);
    a.$referencedGroup = 0;
    a.$consCounter1 = 0;
}
let jur_CIBackReferenceSet__init_ = ($this, $groupIndex, $consCounter) => {
    jur_AbstractSet__init_($this);
    $this.$referencedGroup = $groupIndex;
    $this.$consCounter1 = $consCounter;
},
jur_CIBackReferenceSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CIBackReferenceSet();
    jur_CIBackReferenceSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_CIBackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $i, var$6, var$7, var$8;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + $group.$nativeString.length | 0) <= $matchResult.$rightBound) {
        $i = 0;
        var$6 = $testString;
        while (true) {
            if ($i >= $group.$nativeString.length) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, $group.$nativeString.length);
                return $this.$next2.$matches($stringIndex + $group.$nativeString.length | 0, $testString, $matchResult);
            }
            var$7 = jl_String_charAt($group, $i);
            var$8 = $stringIndex + $i | 0;
            if (var$7 != jl_String_charAt(var$6, var$8) && jur_Pattern_getSupplement(jl_String_charAt($group, $i)) != jl_String_charAt(var$6, var$8))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    return (-1);
},
jur_CIBackReferenceSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_CIBackReferenceSet_getString = ($this, $matchResult) => {
    let var$2, var$3;
    var$2 = $this.$referencedGroup;
    var$3 = jur_MatchResultImpl_getStart($matchResult, var$2);
    var$2 = jur_MatchResultImpl_getEnd($matchResult, var$2);
    return (var$2 | var$3 | (var$2 - var$3 | 0)) >= 0 && var$2 <= $matchResult.$string3.$nativeString.length ? jl_String_substring($matchResult.$string3, var$3, var$2) : null;
},
jur_CIBackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append1(jl_StringBuilder_append(var$2, $rt_s(411)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_CIBackReferenceSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter1) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, (-1));
    return $res;
},
jur_BackReferenceSet = $rt_classWithoutFields(jur_CIBackReferenceSet),
jur_BackReferenceSet__init_0 = ($this, $groupIndex, $consCounter) => {
    jur_CIBackReferenceSet__init_($this, $groupIndex, $consCounter);
},
jur_BackReferenceSet__init_ = (var_0, var_1) => {
    let var_2 = new jur_BackReferenceSet();
    jur_BackReferenceSet__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_BackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $shift;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + $group.$nativeString.length | 0) <= $matchResult.$rightBound) {
        $shift = !jl_String_startsWith0($testString, $group, $stringIndex) ? (-1) : $group.$nativeString.length;
        if ($shift < 0)
            return (-1);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, $shift);
        return $this.$next2.$matches($stringIndex + $shift | 0, $testString, $matchResult);
    }
    return (-1);
},
jur_BackReferenceSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $group, $strLength, $testStr;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    $strLength = $matchResult.$leftBound;
    if ($group !== null && ($strIndex + $group.$nativeString.length | 0) <= $strLength) {
        $testStr = $testString;
        while (true) {
            if ($strIndex > $strLength)
                return (-1);
            $strIndex = jl_String_indexOf0($testStr, $group, $strIndex);
            if ($strIndex < 0)
                return (-1);
            if ($this.$next2.$matches($strIndex + $group.$nativeString.length | 0, $testString, $matchResult) >= 0)
                break;
            $strIndex = $strIndex + 1 | 0;
        }
        return $strIndex;
    }
    return (-1);
},
jur_BackReferenceSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $group, $testStr, var$7;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group === null)
        return (-1);
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$7 = jl_String_lastIndexOf0($testStr, $group, $lastIndex);
            if (var$7 < 0)
                break a;
            if (var$7 < $strIndex)
                break a;
            if ($this.$next2.$matches(var$7 + $group.$nativeString.length | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$7 + (-1) | 0;
        }
        return var$7;
    }
    return (-1);
},
jur_BackReferenceSet_first = ($this, $set) => {
    return 1;
},
jur_BackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append1(jl_StringBuilder_append(var$2, $rt_s(412)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_UCIBackReferenceSet() {
    jur_CIBackReferenceSet.call(this);
    this.$groupIndex1 = 0;
}
let jur_UCIBackReferenceSet__init_ = ($this, $groupIndex, $consCounter) => {
    jur_CIBackReferenceSet__init_($this, $groupIndex, $consCounter);
},
jur_UCIBackReferenceSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_UCIBackReferenceSet();
    jur_UCIBackReferenceSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_UCIBackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $i, var$6;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + $group.$nativeString.length | 0) <= $matchResult.$rightBound) {
        $i = 0;
        var$6 = $testString;
        while (true) {
            if ($i >= $group.$nativeString.length) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, $group.$nativeString.length);
                return $this.$next2.$matches($stringIndex + $group.$nativeString.length | 0, $testString, $matchResult);
            }
            if (jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt($group, $i))) != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt(var$6, $stringIndex + $i | 0))))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    return (-1);
},
jur_UCIBackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex1;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append1(jl_StringBuilder_append(var$2, $rt_s(413)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jl_StringBuffer = $rt_classWithoutFields(jl_AbstractStringBuilder),
jl_StringBuffer_insert0 = ($this, var$1, var$2, var$3, var$4) => {
    jl_AbstractStringBuilder_insert0($this, var$1, var$2, var$3, var$4);
    return $this;
},
jl_StringBuffer_append = ($this, var$1, var$2, var$3) => {
    jl_AbstractStringBuilder_append3($this, var$1, var$2, var$3);
    return $this;
},
jl_StringBuffer_insert1 = ($this, var$1, var$2, var$3, var$4) => {
    jl_AbstractStringBuilder_insert1($this, var$1, var$2, var$3, var$4);
    return $this;
},
jl_StringBuffer_append0 = ($this, var$1, var$2, var$3) => {
    jl_AbstractStringBuilder_append5($this, var$1, var$2, var$3);
    return $this;
},
jl_StringBuffer_ensureCapacity = ($this, var$1) => {
    jl_AbstractStringBuilder_ensureCapacity($this, var$1);
},
jl_StringBuffer_insert2 = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert2($this, var$1, var$2);
    return $this;
},
jl_StringBuffer_insert = ($this, var$1, var$2) => {
    jl_AbstractStringBuilder_insert($this, var$1, var$2);
    return $this;
};
function jur_SequenceSet() {
    let a = this; jur_LeafSet.call(a);
    a.$string = null;
    a.$leftToRight = null;
    a.$rightToLeft = null;
}
let jur_SequenceSet_accepts = ($this, $strIndex, $testString) => {
    return !jur_SequenceSet_startsWith($this, $testString, $strIndex) ? (-1) : $this.$charCount0;
},
jur_SequenceSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $strLength, var$5, var$6, var$7;
    $strLength = $matchResult.$rightBound;
    var$5 = $testString;
    while (true) {
        if ($strIndex > $strLength)
            return (-1);
        var$6 = jl_String_charAt($this.$string, $this.$charCount0 - 1 | 0);
        a: {
            while (true) {
                var$7 = $this.$charCount0;
                if ($strIndex > ($strLength - var$7 | 0)) {
                    $strIndex = (-1);
                    break a;
                }
                var$7 = jl_String_charAt(var$5, ($strIndex + var$7 | 0) - 1 | 0);
                if (var$7 == var$6 && jur_SequenceSet_startsWith($this, $testString, $strIndex))
                    break;
                $strIndex = $strIndex + jur_SequenceSet$IntHash_get($this.$leftToRight, var$7) | 0;
            }
        }
        if ($strIndex < 0)
            return (-1);
        if ($this.$next2.$matches($strIndex + $this.$charCount0 | 0, $testString, $matchResult) >= 0)
            break;
        $strIndex = $strIndex + 1 | 0;
    }
    return $strIndex;
},
jur_SequenceSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let var$5, var$6, var$7;
    var$5 = $testString;
    while (true) {
        if ($lastIndex < $strIndex)
            return (-1);
        var$6 = jl_String_charAt($this.$string, 0);
        var$7 = (var$5.$nativeString.length - $lastIndex | 0) - $this.$charCount0 | 0;
        if (var$7 <= 0)
            $lastIndex = $lastIndex + var$7 | 0;
        a: {
            while (true) {
                if ($lastIndex < $strIndex) {
                    $lastIndex = (-1);
                    break a;
                }
                var$7 = jl_String_charAt(var$5, $lastIndex);
                if (var$7 == var$6 && jur_SequenceSet_startsWith($this, $testString, $lastIndex))
                    break;
                $lastIndex = $lastIndex - jur_SequenceSet$IntHash_get($this.$rightToLeft, var$7) | 0;
            }
        }
        if ($lastIndex < 0)
            return (-1);
        if ($this.$next2.$matches($lastIndex + $this.$charCount0 | 0, $testString, $matchResult) >= 0)
            break;
        $lastIndex = $lastIndex + (-1) | 0;
    }
    return $lastIndex;
},
jur_SequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(414)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_SequenceSet_first = ($this, $set) => {
    let var$2;
    if ($set instanceof jur_CharSet)
        return $set.$ch0 != jl_String_charAt($this.$string, 0) ? 0 : 1;
    if ($set instanceof jur_RangeSet)
        return jur_RangeSet_accepts($set, 0, jl_String_substring($this.$string, 0, 1)) <= 0 ? 0 : 1;
    if (!($set instanceof jur_SupplRangeSet)) {
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return $this.$string.$nativeString.length > 1 && $set.$ch1 == jl_Character_toCodePoint(jl_String_charAt($this.$string, 0), jl_String_charAt($this.$string, 1)) ? 1 : 0;
    }
    a: {
        b: {
            $set = $set;
            if (!$set.$contains0(jl_String_charAt($this.$string, 0))) {
                if ($this.$string.$nativeString.length <= 1)
                    break b;
                if (!$set.$contains0(jl_Character_toCodePoint(jl_String_charAt($this.$string, 0), jl_String_charAt($this.$string, 1))))
                    break b;
            }
            var$2 = 1;
            break a;
        }
        var$2 = 0;
    }
    return var$2;
},
jur_SequenceSet_startsWith = ($this, $str, $from) => {
    let $i;
    $i = 0;
    $str = $str;
    while ($i < $this.$charCount0) {
        if (jl_String_charAt($str, $i + $from | 0) != jl_String_charAt($this.$string, $i))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
};
function jur_UCISequenceSet() {
    jur_LeafSet.call(this);
    this.$string2 = null;
}
let jur_UCISequenceSet__init_ = ($this, $substring) => {
    let $res, $i;
    jur_LeafSet__init_($this);
    $res = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($res);
    $i = 0;
    while ($i < $substring.$length2) {
        jl_AbstractStringBuilder_append0($res, jl_Character_toLowerCase(jl_Character_toUpperCase(jl_AbstractStringBuilder_charAt($substring, $i))));
        $i = $i + 1 | 0;
    }
    $this.$string2 = jl_AbstractStringBuilder_toString($res);
    $this.$charCount0 = $res.$length2;
},
jur_UCISequenceSet__init_0 = var_0 => {
    let var_1 = new jur_UCISequenceSet();
    jur_UCISequenceSet__init_(var_1, var_0);
    return var_1;
},
jur_UCISequenceSet_accepts = ($this, $strIndex, $testString) => {
    let $i, var$4;
    $i = 0;
    var$4 = $testString;
    while (true) {
        if ($i >= $this.$string2.$nativeString.length)
            return $this.$string2.$nativeString.length;
        if (jl_String_charAt($this.$string2, $i) != jl_Character_toLowerCase(jl_Character_toUpperCase(jl_String_charAt(var$4, $strIndex + $i | 0))))
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_UCISequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(415)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_CISequenceSet() {
    jur_LeafSet.call(this);
    this.$string1 = null;
}
let jur_CISequenceSet__init_ = ($this, $substring) => {
    jur_LeafSet__init_($this);
    $this.$string1 = jl_AbstractStringBuilder_toString($substring);
    $this.$charCount0 = $substring.$length2;
},
jur_CISequenceSet__init_0 = var_0 => {
    let var_1 = new jur_CISequenceSet();
    jur_CISequenceSet__init_(var_1, var_0);
    return var_1;
},
jur_CISequenceSet_accepts = ($this, $strIndex, $testString) => {
    let $i, var$4, var$5;
    $i = 0;
    $testString = $testString;
    while (true) {
        if ($i >= $this.$string1.$nativeString.length)
            return $this.$string1.$nativeString.length;
        var$4 = jl_String_charAt($this.$string1, $i);
        var$5 = $strIndex + $i | 0;
        if (var$4 != jl_String_charAt($testString, var$5) && jur_Pattern_getSupplement(jl_String_charAt($this.$string1, $i)) != jl_String_charAt($testString, var$5))
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_CISequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string1;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(416)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_UCISupplCharSet() {
    jur_LeafSet.call(this);
    this.$ch3 = 0;
}
let jur_UCISupplCharSet_accepts = ($this, $strIndex, $testString) => {
    let $low, $high;
    $low = $strIndex + 1 | 0;
    $testString = $testString;
    $high = jl_String_charAt($testString, $strIndex);
    $low = jl_String_charAt($testString, $low);
    return $this.$ch3 != jl_Character_toLowerCase0(jl_Character_toUpperCase0(jl_Character_toCodePoint($high, $low))) ? (-1) : 2;
},
jur_UCISupplCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jl_String__init_0(jl_Character_toChars($this.$ch3));
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(397)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jur_LowSurrogateCharSet() {
    jur_JointSet.call(this);
    this.$low = 0;
}
let jur_LowSurrogateCharSet__init_0 = ($this, $low) => {
    jur_AbstractSet__init_($this);
    $this.$low = $low;
},
jur_LowSurrogateCharSet__init_ = var_0 => {
    let var_1 = new jur_LowSurrogateCharSet();
    jur_LowSurrogateCharSet__init_0(var_1, var_0);
    return var_1;
},
jur_LowSurrogateCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_LowSurrogateCharSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, var$5, $low;
    var$4 = $stringIndex + 1 | 0;
    if (var$4 > $matchResult.$rightBound) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    var$5 = $testString;
    $low = jl_String_charAt(var$5, $stringIndex);
    if ($stringIndex > $matchResult.$leftBound && jl_Character_isHighSurrogate(jl_String_charAt(var$5, $stringIndex - 1 | 0)))
        return (-1);
    if ($this.$low != $low)
        return (-1);
    return $this.$next2.$matches(var$4, $testString, $matchResult);
},
jur_LowSurrogateCharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $startStr, $strLength, var$7, var$8;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $startStr = $matchResult.$leftBound;
    $strLength = $matchResult.$rightBound;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$7 = jl_String_indexOf($testStr, $this.$low, $strIndex);
        if (var$7 < 0)
            return (-1);
        if (var$7 > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, var$7 - 1 | 0))) {
            $strIndex = var$7 + 1 | 0;
            continue;
        }
        var$8 = $this.$next2;
        $strIndex = var$7 + 1 | 0;
        if (var$8.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$7;
},
jur_LowSurrogateCharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $startStr, $testStr;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $startStr = $matchResult.$leftBound;
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            $lastIndex = jl_String_lastIndexOf($testStr, $this.$low, $lastIndex);
            if ($lastIndex < 0)
                break a;
            if ($lastIndex < $strIndex)
                break a;
            if ($lastIndex > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, $lastIndex - 1 | 0))) {
                $lastIndex = $lastIndex + (-2) | 0;
                continue;
            }
            if ($this.$next2.$matches($lastIndex + 1 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    return (-1);
},
jur_LowSurrogateCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$low;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append0(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_LowSurrogateCharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return 0;
    if ($set instanceof jur_RangeSet)
        return 0;
    if ($set instanceof jur_SupplRangeSet)
        return 0;
    if ($set instanceof jur_SupplCharSet)
        return 0;
    if ($set instanceof jur_HighSurrogateCharSet)
        return 0;
    if (!($set instanceof jur_LowSurrogateCharSet))
        return 1;
    return $set.$low != $this.$low ? 0 : 1;
},
jur_LowSurrogateCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_HighSurrogateCharSet() {
    jur_JointSet.call(this);
    this.$high = 0;
}
let jur_HighSurrogateCharSet__init_0 = ($this, $high) => {
    jur_AbstractSet__init_($this);
    $this.$high = $high;
},
jur_HighSurrogateCharSet__init_ = var_0 => {
    let var_1 = new jur_HighSurrogateCharSet();
    jur_HighSurrogateCharSet__init_0(var_1, var_0);
    return var_1;
},
jur_HighSurrogateCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_HighSurrogateCharSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, $low, var$7, $high;
    $strLength = $matchResult.$rightBound;
    var$5 = $stringIndex + 1 | 0;
    $low = $rt_compare(var$5, $strLength);
    if ($low > 0) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    var$7 = $testString;
    $high = jl_String_charAt(var$7, $stringIndex);
    if ($low < 0 && jl_Character_isLowSurrogate(jl_String_charAt(var$7, var$5)))
        return (-1);
    if ($this.$high != $high)
        return (-1);
    return $this.$next2.$matches(var$5, $testString, $matchResult);
},
jur_HighSurrogateCharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $strLength, var$6;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$6 = jl_String_indexOf($testStr, $this.$high, $strIndex);
        if (var$6 < 0)
            return (-1);
        $strIndex = var$6 + 1 | 0;
        if ($strIndex < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, $strIndex))) {
            $strIndex = var$6 + 2 | 0;
            continue;
        }
        if ($this.$next2.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$6;
},
jur_HighSurrogateCharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $testStr, $strLength, var$7;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            $lastIndex = jl_String_lastIndexOf($testStr, $this.$high, $lastIndex);
            if ($lastIndex < 0)
                break a;
            if ($lastIndex < $strIndex)
                break a;
            var$7 = $lastIndex + 1 | 0;
            if (var$7 < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, var$7))) {
                $lastIndex = $lastIndex + (-1) | 0;
                continue;
            }
            if ($this.$next2.$matches(var$7, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    return (-1);
},
jur_HighSurrogateCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$high;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append0(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
jur_HighSurrogateCharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return 0;
    if ($set instanceof jur_RangeSet)
        return 0;
    if ($set instanceof jur_SupplRangeSet)
        return 0;
    if ($set instanceof jur_SupplCharSet)
        return 0;
    if ($set instanceof jur_LowSurrogateCharSet)
        return 0;
    if (!($set instanceof jur_HighSurrogateCharSet))
        return 1;
    return $set.$high != $this.$high ? 0 : 1;
},
jur_HighSurrogateCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_SupplCharSet() {
    let a = this; jur_LeafSet.call(a);
    a.$high0 = 0;
    a.$low0 = 0;
    a.$ch1 = 0;
}
let jur_SupplCharSet_accepts = ($this, $strIndex, $testString) => {
    let $low, $high;
    $low = $strIndex + 1 | 0;
    $testString = $testString;
    $high = jl_String_charAt($testString, $strIndex);
    $low = jl_String_charAt($testString, $low);
    return $this.$high0 == $high && $this.$low0 == $low ? 2 : (-1);
},
jur_SupplCharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $strLength, $ch;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound;
    while ($strIndex < $strLength) {
        $strIndex = jl_String_indexOf($testStr, $this.$high0, $strIndex);
        if ($strIndex < 0)
            return (-1);
        $strIndex = $strIndex + 1 | 0;
        if ($strIndex >= $strLength)
            continue;
        $ch = jl_String_charAt($testStr, $strIndex);
        if ($this.$low0 == $ch && $this.$next2.$matches($strIndex + 1 | 0, $testString, $matchResult) >= 0)
            return $strIndex + (-1) | 0;
        $strIndex = $strIndex + 1 | 0;
    }
    return (-1);
},
jur_SupplCharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $testStr;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            $lastIndex = jl_String_lastIndexOf($testStr, $this.$low0, $lastIndex) + (-1) | 0;
            if ($lastIndex < 0)
                break a;
            if ($lastIndex < $strIndex)
                break a;
            if ($this.$high0 == jl_String_charAt($testStr, $lastIndex) && $this.$next2.$matches($lastIndex + 2 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    return (-1);
},
jur_SupplCharSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$high0;
    var$2 = $this.$low0;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append0(var$3, var$1);
    jl_AbstractStringBuilder_append0(var$3, var$2);
    return jl_AbstractStringBuilder_toString(var$3);
},
jur_SupplCharSet_first = ($this, $set) => {
    if ($set instanceof jur_SupplCharSet)
        return $set.$ch1 != $this.$ch1 ? 0 : 1;
    if ($set instanceof jur_SupplRangeSet)
        return $set.$contains0($this.$ch1);
    if ($set instanceof jur_CharSet)
        return 0;
    if (!($set instanceof jur_RangeSet))
        return 1;
    return 0;
},
jur_AbstractLineTerminator$1 = $rt_classWithoutFields(jur_AbstractLineTerminator),
jur_AbstractLineTerminator$1_isLineTerminator = ($this, $ch) => {
    return $ch != 10 ? 0 : 1;
},
jur_AbstractLineTerminator$1_isAfterLineTerminator = ($this, $ch, $ch2) => {
    return $ch != 10 ? 0 : 1;
},
jur_AbstractLineTerminator$2 = $rt_classWithoutFields(jur_AbstractLineTerminator),
jur_AbstractLineTerminator$2_isLineTerminator = ($this, $ch) => {
    return $ch != 10 && $ch != 13 && $ch != 133 && ($ch | 1) != 8233 ? 0 : 1;
},
jur_AbstractLineTerminator$2_isAfterLineTerminator = ($this, $ch, $ch2) => {
    a: {
        b: {
            if ($ch != 10 && $ch != 133 && ($ch | 1) != 8233) {
                if ($ch != 13)
                    break b;
                if ($ch2 == 10)
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = 0;
    }
    return $ch;
};
function jur_SequenceSet$IntHash() {
    let a = this; jl_Object.call(a);
    a.$table = null;
    a.$values9 = null;
    a.$mask0 = 0;
    a.$size15 = 0;
}
let jur_SequenceSet$IntHash__init_0 = ($this, $size) => {
    let var$2, var$3;
    while (true) {
        var$2 = $this.$mask0;
        if ($size < var$2)
            break;
        $this.$mask0 = var$2 << 1 | 1;
    }
    var$3 = var$2 << 1 | 1;
    $this.$mask0 = var$3;
    var$3 = var$3 + 1 | 0;
    $this.$table = $rt_createIntArray(var$3);
    $this.$values9 = $rt_createIntArray(var$3);
    $this.$size15 = $size;
},
jur_SequenceSet$IntHash__init_ = var_0 => {
    let var_1 = new jur_SequenceSet$IntHash();
    jur_SequenceSet$IntHash__init_0(var_1, var_0);
    return var_1;
},
jur_SequenceSet$IntHash_put = ($this, $key, $value) => {
    let $i, var$4, $hashCode, var$6;
    $i = 0;
    var$4 = $this.$mask0;
    $hashCode = $key & var$4;
    while (true) {
        var$6 = $this.$table.data;
        if (!var$6[$hashCode])
            break;
        if (var$6[$hashCode] == $key)
            break;
        $i = ($i + 1 | 0) & var$4;
        $hashCode = ($hashCode + $i | 0) & var$4;
    }
    var$6[$hashCode] = $key;
    $this.$values9.data[$hashCode] = $value;
},
jur_SequenceSet$IntHash_get = ($this, $key) => {
    let var$2, $hashCode, $i, $storedKey;
    var$2 = $this.$mask0;
    $hashCode = $key & var$2;
    $i = 0;
    while (true) {
        $storedKey = $this.$table.data[$hashCode];
        if (!$storedKey)
            break;
        if ($storedKey == $key)
            return $this.$values9.data[$hashCode];
        $i = ($i + 1 | 0) & var$2;
        $hashCode = ($hashCode + $i | 0) & var$2;
    }
    return $this.$size15;
},
jur_AbstractCharClass$LazySpace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazySpace__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazySpace__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazySpace();
    jur_AbstractCharClass$LazySpace__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazySpace_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add(jur_CharClass__init_(), 9, 13), 32);
},
jur_AbstractCharClass$LazyDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyDigit__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyDigit__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyDigit();
    jur_AbstractCharClass$LazyDigit__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyDigit_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 48, 57);
},
jur_AbstractCharClass$LazyLower = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyLower__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyLower__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyLower();
    jur_AbstractCharClass$LazyLower__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyLower_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 97, 122);
},
jur_AbstractCharClass$LazyUpper = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyUpper__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyUpper__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyUpper();
    jur_AbstractCharClass$LazyUpper__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyUpper_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 65, 90);
},
jur_AbstractCharClass$LazyASCII = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyASCII__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyASCII__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyASCII();
    jur_AbstractCharClass$LazyASCII__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyASCII_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), 0, 127);
},
jur_AbstractCharClass$LazyAlpha = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyAlpha__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyAlpha__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyAlpha();
    jur_AbstractCharClass$LazyAlpha__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyAlpha_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 97, 122), 65, 90);
},
jur_AbstractCharClass$LazyAlnum = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlpha),
jur_AbstractCharClass$LazyAlnum__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyAlnum__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyAlnum();
    jur_AbstractCharClass$LazyAlnum__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyAlnum_computeValue = $this => {
    return jur_CharClass_add(jur_AbstractCharClass$LazyAlpha_computeValue($this), 48, 57);
},
jur_AbstractCharClass$LazyPunct = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyPunct__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyPunct__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyPunct();
    jur_AbstractCharClass$LazyPunct__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyPunct_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 33, 64), 91, 96), 123, 126);
},
jur_AbstractCharClass$LazyGraph = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlnum),
jur_AbstractCharClass$LazyGraph__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyGraph__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyGraph();
    jur_AbstractCharClass$LazyGraph__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyGraph_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_AbstractCharClass$LazyAlnum_computeValue($this), 33, 64), 91, 96), 123, 126);
},
jur_AbstractCharClass$LazyPrint = $rt_classWithoutFields(jur_AbstractCharClass$LazyGraph),
jur_AbstractCharClass$LazyPrint__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyPrint__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyPrint();
    jur_AbstractCharClass$LazyPrint__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyPrint_computeValue = $this => {
    return jur_CharClass_add0(jur_AbstractCharClass$LazyGraph_computeValue($this), 32);
},
jur_AbstractCharClass$LazyBlank = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyBlank__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyBlank__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyBlank();
    jur_AbstractCharClass$LazyBlank__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyBlank_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_(), 32), 9);
},
jur_AbstractCharClass$LazyCntrl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyCntrl__init_0 = $this => {
    return;
};
let jur_AbstractCharClass$LazyCntrl__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyCntrl();
    jur_AbstractCharClass$LazyCntrl__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyCntrl_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add(jur_CharClass__init_(), 0, 31), 127);
},
jur_AbstractCharClass$LazyXDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyXDigit__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyXDigit__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyXDigit();
    jur_AbstractCharClass$LazyXDigit__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyXDigit_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 48, 57), 97, 102), 65, 70);
},
jur_AbstractCharClass$LazyJavaLowerCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLowerCase__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaLowerCase__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLowerCase();
    jur_AbstractCharClass$LazyJavaLowerCase__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLowerCase_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLowerCase$1;
    $chCl.$this$033 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaUpperCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUpperCase__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaUpperCase__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUpperCase();
    jur_AbstractCharClass$LazyJavaUpperCase__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUpperCase_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUpperCase$1;
    $chCl.$this$036 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaWhitespace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaWhitespace__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaWhitespace__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaWhitespace();
    jur_AbstractCharClass$LazyJavaWhitespace__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaWhitespace_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaWhitespace$1;
    var$1.$this$031 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaMirrored = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaMirrored__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaMirrored__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaMirrored();
    jur_AbstractCharClass$LazyJavaMirrored__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaMirrored_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaMirrored$1;
    var$1.$this$028 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaDefined = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaDefined__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaDefined__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaDefined();
    jur_AbstractCharClass$LazyJavaDefined__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaDefined_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaDefined$1;
    $chCl.$this$043 = $this;
    jur_AbstractCharClass__init_($chCl);
    ju_BitSet_set($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaDigit__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaDigit();
    jur_AbstractCharClass$LazyJavaDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaDigit_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaDigit$1;
    $chCl.$this$037 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable();
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1;
    $chCl.$this$047 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaISOControl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaISOControl__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaISOControl__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaISOControl();
    jur_AbstractCharClass$LazyJavaISOControl__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaISOControl_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaISOControl$1;
    var$1.$this$034 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart();
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1;
    $chCl.$this$018 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart();
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1;
    $chCl.$this$038 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaLetter = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLetter__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaLetter__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLetter();
    jur_AbstractCharClass$LazyJavaLetter__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLetter_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLetter$1;
    $chCl.$this$042 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
};
let jur_AbstractCharClass$LazyJavaLetterOrDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLetterOrDigit__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLetterOrDigit();
    jur_AbstractCharClass$LazyJavaLetterOrDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLetterOrDigit$1;
    $chCl.$this$045 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaSpaceChar = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaSpaceChar__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaSpaceChar__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaSpaceChar();
    jur_AbstractCharClass$LazyJavaSpaceChar__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaSpaceChar_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaSpaceChar$1;
    var$1.$this$032 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaTitleCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaTitleCase__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaTitleCase__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaTitleCase();
    jur_AbstractCharClass$LazyJavaTitleCase__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaTitleCase_computeValue = $this => {
    let var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaTitleCase$1;
    var$1.$this$040 = $this;
    jur_AbstractCharClass__init_(var$1);
    return var$1;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1;
    $chCl.$this$019 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue = $this => {
    let $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1;
    $chCl.$this$053 = $this;
    jur_AbstractCharClass__init_($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyWord__init_ = $this => {
    return;
},
jur_AbstractCharClass$LazyWord__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyWord();
    jur_AbstractCharClass$LazyWord__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyWord_computeValue = $this => {
    return jur_CharClass_add0(jur_CharClass_add(jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 97, 122), 65, 90), 48, 57), 95);
},
jur_AbstractCharClass$LazyNonWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyWord),
jur_AbstractCharClass$LazyNonWord__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyNonWord__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonWord();
    jur_AbstractCharClass$LazyNonWord__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonWord_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyWord_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyNonSpace = $rt_classWithoutFields(jur_AbstractCharClass$LazySpace),
jur_AbstractCharClass$LazyNonSpace__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyNonSpace__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonSpace();
    jur_AbstractCharClass$LazyNonSpace__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonSpace_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazySpace_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
},
jur_AbstractCharClass$LazyNonDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyDigit),
jur_AbstractCharClass$LazyNonDigit__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazyNonDigit__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonDigit();
    jur_AbstractCharClass$LazyNonDigit__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonDigit_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyDigit_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
};
function jur_AbstractCharClass$LazyRange() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$start4 = 0;
    a.$end3 = 0;
}
let jur_AbstractCharClass$LazyRange__init_0 = ($this, $start, $end) => {
    $this.$start4 = $start;
    $this.$end3 = $end;
},
jur_AbstractCharClass$LazyRange__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyRange();
    jur_AbstractCharClass$LazyRange__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyRange_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass__init_(), $this.$start4, $this.$end3);
},
jur_AbstractCharClass$LazySpecialsBlock = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazySpecialsBlock__init_0 = $this => {
    return;
},
jur_AbstractCharClass$LazySpecialsBlock__init_ = () => {
    let var_0 = new jur_AbstractCharClass$LazySpecialsBlock();
    jur_AbstractCharClass$LazySpecialsBlock__init_0(var_0);
    return var_0;
},
jur_AbstractCharClass$LazySpecialsBlock_computeValue = $this => {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_(), 65279, 65279), 65520, 65533);
};
function jur_AbstractCharClass$LazyCategory() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$category1 = 0;
    a.$mayContainSupplCodepoints0 = 0;
    a.$containsAllSurrogates0 = 0;
}
let jur_AbstractCharClass$LazyCategory__init_0 = ($this, $cat, $mayContainSupplCodepoints) => {
    $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
    $this.$category1 = $cat;
},
jur_AbstractCharClass$LazyCategory__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyCategory();
    jur_AbstractCharClass$LazyCategory__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyCategory__init_2 = ($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) => {
    $this.$containsAllSurrogates0 = $containsAllSurrogates;
    $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
    $this.$category1 = $cat;
},
jur_AbstractCharClass$LazyCategory__init_1 = (var_0, var_1, var_2) => {
    let var_3 = new jur_AbstractCharClass$LazyCategory();
    jur_AbstractCharClass$LazyCategory__init_2(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AbstractCharClass$LazyCategory_computeValue = $this => {
    let $chCl;
    $chCl = jur_UnicodeCategory__init_0($this.$category1);
    if ($this.$containsAllSurrogates0)
        ju_BitSet_set($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints0;
    return $chCl;
};
function jur_AbstractCharClass$LazyCategoryScope() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$category0 = 0;
    a.$mayContainSupplCodepoints1 = 0;
    a.$containsAllSurrogates = 0;
}
let jur_AbstractCharClass$LazyCategoryScope__init_1 = ($this, $cat, $mayContainSupplCodepoints) => {
    $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
    $this.$category0 = $cat;
},
jur_AbstractCharClass$LazyCategoryScope__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyCategoryScope();
    jur_AbstractCharClass$LazyCategoryScope__init_1(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyCategoryScope__init_0 = ($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) => {
    $this.$containsAllSurrogates = $containsAllSurrogates;
    $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
    $this.$category0 = $cat;
},
jur_AbstractCharClass$LazyCategoryScope__init_2 = (var_0, var_1, var_2) => {
    let var_3 = new jur_AbstractCharClass$LazyCategoryScope();
    jur_AbstractCharClass$LazyCategoryScope__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AbstractCharClass$LazyCategoryScope_computeValue = $this => {
    let $chCl;
    $chCl = new jur_UnicodeCategoryScope;
    jur_UnicodeCategory__init_($chCl, $this.$category0);
    if ($this.$containsAllSurrogates)
        ju_BitSet_set($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints1;
    return $chCl;
},
jur_IntHash = $rt_classWithoutFields(),
otpp_ResourceAccessor = $rt_classWithoutFields(),
otciu_UnicodeHelper = $rt_classWithoutFields(),
otciu_UnicodeHelper_decodeCaseMapping = $text => {
    let $flow, $sz, $data, var$5, $last, $i, var$8;
    $flow = otci_CharFlow__init_(jl_String_toCharArray($text));
    $sz = otci_Base46_decodeUnsigned($flow);
    $data = $rt_createIntArray($sz * 2 | 0);
    var$5 = $data.data;
    $last = 0;
    $i = 0;
    while ($i < $sz) {
        $last = $last + otci_Base46_decodeUnsigned($flow) | 0;
        var$8 = $i * 2 | 0;
        var$5[var$8] = $last;
        var$5[var$8 + 1 | 0] = otci_Base46_decode($flow);
        $i = $i + 1 | 0;
    }
    return $data;
},
otciu_UnicodeHelper_createCharMapping = $data => {
    let $result, var$3, $last, $lastValue, $i, var$7, $key, $value, var$10, var$11;
    $result = $rt_createIntArray(65536);
    var$3 = $result.data;
    $last = 0;
    $lastValue = 0;
    $i = 0;
    a: {
        while (true) {
            var$7 = $data.data;
            if ($i >= var$7.length)
                break a;
            $key = var$7[$i];
            $value = var$7[$i + 1 | 0];
            var$10 = var$3.length;
            if ($key < var$10)
                var$10 = $key;
            else if ($key == $last)
                break;
            ju_Arrays_fill2($result, $last, var$10, $lastValue);
            $i = $i + 2 | 0;
            $last = var$10;
            $lastValue = $value;
        }
    }
    var$11 = new otciu_CharMapping;
    var$11.$binarySearchTable = $data;
    var$11.$fastTable = $result;
    return var$11;
},
otciu_UnicodeHelper_decodeByte = $c => {
    if ($c > 92)
        return (($c - 32 | 0) - 2 | 0) << 24 >> 24;
    if ($c <= 34)
        return ($c - 32 | 0) << 24 >> 24;
    return (($c - 32 | 0) - 1 | 0) << 24 >> 24;
};
function otciu_CharMapping() {
    let a = this; jl_Object.call(a);
    a.$binarySearchTable = null;
    a.$fastTable = null;
}
function otciu_UnicodeHelper$Range() {
    let a = this; jl_Object.call(a);
    a.$start3 = 0;
    a.$end4 = 0;
    a.$data12 = null;
}
let otciu_UnicodeHelper$Range__init_0 = ($this, $start, $end, $data) => {
    $this.$start3 = $start;
    $this.$end4 = $end;
    $this.$data12 = $data;
},
otciu_UnicodeHelper$Range__init_ = (var_0, var_1, var_2) => {
    let var_3 = new otciu_UnicodeHelper$Range();
    otciu_UnicodeHelper$Range__init_0(var_3, var_0, var_1, var_2);
    return var_3;
};
function otci_CharFlow() {
    let a = this; jl_Object.call(a);
    a.$characters = null;
    a.$pointer = 0;
}
let otci_CharFlow__init_0 = ($this, $characters) => {
    $this.$characters = $characters;
},
otci_CharFlow__init_ = var_0 => {
    let var_1 = new otci_CharFlow();
    otci_CharFlow__init_0(var_1, var_0);
    return var_1;
},
otci_Base46 = $rt_classWithoutFields(),
otci_Base46_decodeUnsigned = $seq => {
    let $number, $pos, var$4, $hasMore, $digit;
    $number = 0;
    $pos = 1;
    while (true) {
        var$4 = $seq.$characters.data;
        $hasMore = $seq.$pointer;
        $seq.$pointer = $hasMore + 1 | 0;
        $digit = var$4[$hasMore];
        $digit = $digit < 34 ? $digit - 32 | 0 : $digit >= 92 ? ($digit - 32 | 0) - 2 | 0 : ($digit - 32 | 0) - 1 | 0;
        $hasMore = ($digit % 2 | 0) != 1 ? 0 : 1;
        $number = $number + $rt_imul($pos, $digit / 2 | 0) | 0;
        $pos = $pos * 46 | 0;
        if (!$hasMore)
            break;
    }
    return $number;
},
otci_Base46_decode = $seq => {
    let $number, $result;
    $number = otci_Base46_decodeUnsigned($seq);
    $result = $number / 2 | 0;
    if ($number % 2 | 0)
        $result =  -$result | 0;
    return $result;
},
otcir_Flags = $rt_classWithoutFields(),
cbgu_NumberUtils = $rt_classWithoutFields(),
cbgu_NumberUtils_floatToIntBits = $value => {
    return jl_Float_floatToIntBits($value);
},
cbgu_NumberUtils_intToFloatColor = $value => {
    return $rt_intBitsToFloat($value & (-16777217));
},
cbgu_NumberUtils_intBitsToFloat = $value => {
    return $rt_intBitsToFloat($value);
},
cgxgbtd_StyleWrapper$Unit = $rt_classWithoutFields(jl_Enum),
cgxgbtd_StyleWrapper$Unit_PX = null,
cgxgbtd_StyleWrapper$Unit_PCT = null,
cgxgbtd_StyleWrapper$Unit_EM = null,
cgxgbtd_StyleWrapper$Unit_EX = null,
cgxgbtd_StyleWrapper$Unit_PT = null,
cgxgbtd_StyleWrapper$Unit_PC = null,
cgxgbtd_StyleWrapper$Unit_IN = null,
cgxgbtd_StyleWrapper$Unit_CM = null,
cgxgbtd_StyleWrapper$Unit_MM = null,
cgxgbtd_StyleWrapper$Unit_$VALUES = null,
cgxgbtd_StyleWrapper$Unit_$callClinit = () => {
    cgxgbtd_StyleWrapper$Unit_$callClinit = $rt_eraseClinit(cgxgbtd_StyleWrapper$Unit);
    cgxgbtd_StyleWrapper$Unit__clinit_();
},
cgxgbtd_StyleWrapper$Unit_values = () => {
    cgxgbtd_StyleWrapper$Unit_$callClinit();
    return cgxgbtd_StyleWrapper$Unit_$VALUES.$clone0();
},
cgxgbtd_StyleWrapper$Unit__init_ = ($this, var$1, var$2) => {
    cgxgbtd_StyleWrapper$Unit_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
},
cgxgbtd_StyleWrapper$Unit__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cgxgbtd_StyleWrapper$Unit$1;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(417), 0);
    cgxgbtd_StyleWrapper$Unit_PX = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$2;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(418), 1);
    cgxgbtd_StyleWrapper$Unit_PCT = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$3;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(419), 2);
    cgxgbtd_StyleWrapper$Unit_EM = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$4;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(420), 3);
    cgxgbtd_StyleWrapper$Unit_EX = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$5;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(421), 4);
    cgxgbtd_StyleWrapper$Unit_PT = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$6;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(422), 5);
    cgxgbtd_StyleWrapper$Unit_PC = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$7;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(423), 6);
    cgxgbtd_StyleWrapper$Unit_IN = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$8;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(424), 7);
    cgxgbtd_StyleWrapper$Unit_CM = var$1;
    var$1 = new cgxgbtd_StyleWrapper$Unit$9;
    cgxgbtd_StyleWrapper$Unit__init_(var$1, $rt_s(425), 8);
    cgxgbtd_StyleWrapper$Unit_MM = var$1;
    var$2 = $rt_createArray(cgxgbtd_StyleWrapper$Unit, 9);
    var$3 = var$2.data;
    var$3[0] = cgxgbtd_StyleWrapper$Unit_PX;
    var$3[1] = cgxgbtd_StyleWrapper$Unit_PCT;
    var$3[2] = cgxgbtd_StyleWrapper$Unit_EM;
    var$3[3] = cgxgbtd_StyleWrapper$Unit_EX;
    var$3[4] = cgxgbtd_StyleWrapper$Unit_PT;
    var$3[5] = cgxgbtd_StyleWrapper$Unit_PC;
    var$3[6] = cgxgbtd_StyleWrapper$Unit_IN;
    var$3[7] = cgxgbtd_StyleWrapper$Unit_CM;
    var$3[8] = var$1;
    cgxgbtd_StyleWrapper$Unit_$VALUES = var$2;
};
function ju_HashMap$HashEntry() {
    let a = this; ju_MapEntry.call(a);
    a.$origKeyHash = 0;
    a.$next4 = null;
}
let ju_HashMap$HashEntry__init_ = ($this, $theKey, $hash) => {
    ju_MapEntry__init_($this, $theKey, null);
    $this.$origKeyHash = $hash;
},
ju_HashMap$HashEntry__init_0 = (var_0, var_1) => {
    let var_2 = new ju_HashMap$HashEntry();
    ju_HashMap$HashEntry__init_(var_2, var_0, var_1);
    return var_2;
},
jl_StringIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException);
function jur_AbstractCharClass$1() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$lHS = null;
    a.$this$044 = null;
}
let jur_AbstractCharClass$1_contains = ($this, $ch) => {
    let $index;
    $index = $ch - 55296 | 0;
    return $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS, $index) : 0;
};
function jur_AbstractCharClass$2() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$lHS0 = null;
    a.$val$thisClass = null;
    a.$this$041 = null;
}
let jur_AbstractCharClass$2_contains = ($this, $ch) => {
    let $index, $containslHS;
    $index = $ch - 55296 | 0;
    $containslHS = $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS0, $index) : 0;
    return $this.$val$thisClass.$contains0($ch) && !$containslHS ? 1 : 0;
};
function jur_CharClass$18() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$bs = null;
    a.$this$020 = null;
}
let jur_CharClass$18_contains = ($this, $ch) => {
    return $this.$alt ^ ju_BitSet_get($this.$val$bs, $ch);
},
jur_CharClass$18_toString = $this => {
    let $temp, $i, var$3;
    $temp = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($temp);
    $i = ju_BitSet_nextSetBit($this.$val$bs, 0);
    while ($i >= 0) {
        jl_AbstractStringBuilder_append2($temp, jl_Character_toChars($i));
        jl_AbstractStringBuilder_append0($temp, 124);
        $i = ju_BitSet_nextSetBit($this.$val$bs, $i + 1 | 0);
    }
    var$3 = $temp.$length2;
    if (var$3 > 0)
        jl_StringBuilder_deleteCharAt($temp, var$3 - 1 | 0);
    return jl_AbstractStringBuilder_toString($temp);
};
function jur_CharClass$1() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$cc1 = null;
    a.$this$035 = null;
}
let jur_CharClass$1_contains = ($this, $ch) => {
    return $this.$val$cc1.$contains0($ch);
};
function jur_CharClass$3() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt = 0;
    a.$val$cc = null;
    a.$this$03 = null;
}
let jur_CharClass$3_contains = ($this, $ch) => {
    return !($this.$val$curAlt ^ ju_BitSet_get($this.$this$03.$bits, $ch)) && !($this.$val$curAlt ^ $this.$this$03.$inverted ^ $this.$val$cc.$contains0($ch)) ? 0 : 1;
};
function jur_CharClass$2() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt0 = 0;
    a.$val$cc3 = null;
    a.$this$04 = null;
}
let jur_CharClass$2_contains = ($this, $ch) => {
    return !($this.$val$curAlt0 ^ ju_BitSet_get($this.$this$04.$bits, $ch)) && !($this.$val$curAlt0 ^ $this.$this$04.$inverted ^ $this.$val$cc3.$contains0($ch)) ? 1 : 0;
};
function jur_CharClass$5() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt10 = 0;
    a.$val$nb4 = null;
    a.$val$cc2 = null;
    a.$this$024 = null;
}
let jur_CharClass$5_contains = ($this, $ch) => {
    return $this.$val$curAlt10 ^ (!$this.$val$nb4.$contains0($ch) && !$this.$val$cc2.$contains0($ch) ? 0 : 1);
};
function jur_CharClass$4() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt2 = 0;
    a.$val$nb2 = null;
    a.$val$cc0 = null;
    a.$this$049 = null;
}
let jur_CharClass$4_contains = ($this, $ch) => {
    return $this.$val$curAlt2 ^ (!$this.$val$nb2.$contains0($ch) && !$this.$val$cc0.$contains0($ch) ? 0 : 1) ? 0 : 1;
};
function jur_CharClass$7() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz2 = null;
    a.$this$052 = null;
}
let jur_CharClass$7_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz2, $ch);
};
function jur_CharClass$6() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz8 = null;
    a.$this$026 = null;
}
let jur_CharClass$6_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz8, $ch) ? 0 : 1;
};
function jur_CharClass$9() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz4 = null;
    a.$val$curAlt1 = 0;
    a.$this$014 = null;
}
let jur_CharClass$9_contains = ($this, $ch) => {
    return !jur_CharClass_contains($this.$val$clazz4, $ch) && !($this.$val$curAlt1 ^ ju_BitSet_get($this.$this$014.$bits, $ch)) ? 0 : 1;
};
function jur_CharClass$8() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz5 = null;
    a.$val$curAlt5 = 0;
    a.$this$011 = null;
}
let jur_CharClass$8_contains = ($this, $ch) => {
    return !jur_CharClass_contains($this.$val$clazz5, $ch) && !($this.$val$curAlt5 ^ ju_BitSet_get($this.$this$011.$bits, $ch)) ? 1 : 0;
};
function jur_CharClass$11() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt7 = 0;
    a.$val$nb3 = null;
    a.$val$clazz9 = null;
    a.$this$021 = null;
}
let jur_CharClass$11_contains = ($this, $ch) => {
    return !($this.$val$curAlt7 ^ $this.$val$nb3.$contains0($ch)) && !jur_CharClass_contains($this.$val$clazz9, $ch) ? 0 : 1;
};
function jur_CharClass$10() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt9 = 0;
    a.$val$nb0 = null;
    a.$val$clazz = null;
    a.$this$025 = null;
}
let jur_CharClass$10_contains = ($this, $ch) => {
    return !($this.$val$curAlt9 ^ $this.$val$nb0.$contains0($ch)) && !jur_CharClass_contains($this.$val$clazz, $ch) ? 1 : 0;
};
function jur_CharClass$13() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz0 = null;
    a.$this$027 = null;
}
let jur_CharClass$13_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz0, $ch);
};
function jur_CharClass$12() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz1 = null;
    a.$this$048 = null;
}
let jur_CharClass$12_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz1, $ch) ? 0 : 1;
};
function jur_CharClass$15() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz10 = null;
    a.$val$curAlt4 = 0;
    a.$this$016 = null;
}
let jur_CharClass$15_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz10, $ch) && $this.$val$curAlt4 ^ ju_BitSet_get($this.$this$016.$bits, $ch) ? 1 : 0;
};
function jur_CharClass$14() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz6 = null;
    a.$val$curAlt3 = 0;
    a.$this$012 = null;
}
let jur_CharClass$14_contains = ($this, $ch) => {
    return jur_CharClass_contains($this.$val$clazz6, $ch) && $this.$val$curAlt3 ^ ju_BitSet_get($this.$this$012.$bits, $ch) ? 0 : 1;
};
function jur_CharClass$17() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt8 = 0;
    a.$val$nb1 = null;
    a.$val$clazz3 = null;
    a.$this$023 = null;
}
let jur_CharClass$17_contains = ($this, $ch) => {
    return $this.$val$curAlt8 ^ $this.$val$nb1.$contains0($ch) && jur_CharClass_contains($this.$val$clazz3, $ch) ? 1 : 0;
};
function jur_CharClass$16() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt6 = 0;
    a.$val$nb = null;
    a.$val$clazz7 = null;
    a.$this$030 = null;
}
let jur_CharClass$16_contains = ($this, $ch) => {
    return $this.$val$curAlt6 ^ $this.$val$nb.$contains0($ch) && jur_CharClass_contains($this.$val$clazz7, $ch) ? 0 : 1;
};
function jl_Thread() {
    let a = this; jl_Object.call(a);
    a.$id = Long_ZERO;
    a.$timeSliceStart = Long_ZERO;
    a.$finishedLock = null;
    a.$name5 = null;
    a.$alive = 0;
    a.$target0 = null;
}
let jl_Thread_mainThread = null,
jl_Thread_currentThread = null,
jl_Thread_nextId = 0,
jl_Thread_activeCount = 0,
jl_Thread_defaultUncaughtExceptionHandler = null,
jl_Thread_setCurrentThread = $thread_0 => {
    if (jl_Thread_currentThread !== $thread_0)
        jl_Thread_currentThread = $thread_0;
    jl_Thread_currentThread.$timeSliceStart = jl_System_currentTimeMillis();
},
jl_Thread_currentThread0 = () => {
    return jl_Thread_currentThread;
},
jl_Thread__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new jl_Thread;
    var$2 = null;
    var$1.$finishedLock = new jl_Object;
    var$1.$alive = 1;
    var$1.$name5 = $rt_s(426);
    var$1.$target0 = var$2;
    var$3 = jl_Thread_nextId;
    jl_Thread_nextId = var$3 + 1 | 0;
    var$1.$id = Long_fromInt(var$3);
    jl_Thread_mainThread = var$1;
    jl_Thread_currentThread = var$1;
    jl_Thread_nextId = 1;
    jl_Thread_activeCount = 1;
    jl_Thread_defaultUncaughtExceptionHandler = new jl_DefaultUncaughtExceptionHandler;
};
function jl_Object$Monitor() {
    let a = this; jl_Object.call(a);
    a.$enteringThreads = null;
    a.$notifyListeners = null;
    a.$owner = null;
    a.$count0 = 0;
}
let jl_IllegalMonitorStateException = $rt_classWithoutFields(jl_RuntimeException),
otjf_JSMapping = $rt_classWithoutFields(0);
function cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0() {
    jl_Object.call(this);
    this.$_017 = null;
}
let cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0_apply$exported$0 = (var$1, var$2) => {
    let var$3, var$4, var$5, var$6;
    var$2 = otji_JSWrapper_jsToJava(var$2);
    var$1 = var$1;
    var$2 = otji_JSWrapper_unwrap(var$2);
    var$1 = var$1.$_017;
    var$3 = var$2.length;
    var$4 = $rt_createArray(cgxgbtf_FileData, var$3);
    var$5 = var$4.data;
    var$6 = 0;
    while (var$6 < var$3) {
        var$5[var$6] = var$2[var$6];
        var$6 = var$6 + 1 | 0;
    }
    var$1.$windowListener.$filesDropped(var$4);
    return otji_JSWrapper_javaToJs($rt_s(427));
},
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1 = $rt_classWithoutFields(),
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1_apply$exported$0 = (var$1, var$2) => {
    otji_JSWrapper_jsToJava(var$2);
    var$1;
    return otji_JSWrapper_javaToJs($rt_s(428));
},
otjf_JSSupplier = $rt_classWithoutFields(0),
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2 = $rt_classWithoutFields(),
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2_get$exported$0 = var$1 => {
    var$1;
    return otji_JSWrapper_javaToJs(null);
};
function jl_Float() {
    jl_Number.call(this);
    this.$value1 = 0.0;
}
let jl_Float_TYPE = null,
jl_Float_valueOf = $d => {
    let var$2;
    var$2 = new jl_Float;
    var$2.$value1 = $d;
    return var$2;
},
jl_Float_parseFloat = $string => {
    let $start, $end, $negative, $c, $mantissa, $exp, $mantissaPos, $hasOneDigit, var$10, $negativeExp, $numExp;
    if (jl_String_isEmpty($string)) {
        $string = new jl_NumberFormatException;
        jl_Exception__init_($string);
        $rt_throw($string);
    }
    $start = 0;
    $end = $string.$nativeString.length;
    while (true) {
        if (jl_String_charAt($string, $start) > 32) {
            while (jl_String_charAt($string, $end - 1 | 0) <= 32) {
                $end = $end + (-1) | 0;
            }
            $negative = 0;
            if (jl_String_charAt($string, $start) == 45) {
                $start = $start + 1 | 0;
                $negative = 1;
            } else if (jl_String_charAt($string, $start) == 43)
                $start = $start + 1 | 0;
            if ($start == $end) {
                $string = new jl_NumberFormatException;
                jl_Exception__init_($string);
                $rt_throw($string);
            }
            a: {
                $c = jl_String_charAt($string, $start);
                $mantissa = 0;
                $exp = (-1);
                $mantissaPos = 100000000;
                $hasOneDigit = 0;
                if ($c != 46) {
                    $hasOneDigit = 1;
                    if ($c >= 48 && $c <= 57) {
                        b: {
                            while ($start < $end) {
                                if (jl_String_charAt($string, $start) != 48)
                                    break b;
                                $start = $start + 1 | 0;
                            }
                        }
                        while ($start < $end) {
                            var$10 = jl_String_charAt($string, $start);
                            if (var$10 < 48)
                                break a;
                            if (var$10 > 57)
                                break a;
                            if ($mantissaPos > 0) {
                                $mantissa = $mantissa + $rt_imul($mantissaPos, var$10 - 48 | 0) | 0;
                                $mantissaPos = $rt_udiv($mantissaPos, 10);
                            }
                            $exp = $exp + 1 | 0;
                            $start = $start + 1 | 0;
                        }
                    } else {
                        $string = new jl_NumberFormatException;
                        jl_Exception__init_($string);
                        $rt_throw($string);
                    }
                }
            }
            if ($start < $end && jl_String_charAt($string, $start) == 46) {
                $start = $start + 1 | 0;
                c: {
                    while (true) {
                        if ($start >= $end)
                            break c;
                        $c = jl_String_charAt($string, $start);
                        var$10 = $rt_compare($c, 48);
                        if (var$10 < 0)
                            break c;
                        if ($c > 57)
                            break;
                        if (!$mantissa && !var$10)
                            $exp = $exp + (-1) | 0;
                        else if ($mantissaPos > 0) {
                            $mantissa = $mantissa + $rt_imul($mantissaPos, $c - 48 | 0) | 0;
                            $mantissaPos = $rt_udiv($mantissaPos, 10);
                        }
                        $start = $start + 1 | 0;
                        $hasOneDigit = 1;
                    }
                }
                if (!$hasOneDigit) {
                    $string = new jl_NumberFormatException;
                    jl_Exception__init_($string);
                    $rt_throw($string);
                }
            }
            if ($start < $end) {
                $c = jl_String_charAt($string, $start);
                if ($c != 101 && $c != 69) {
                    $string = new jl_NumberFormatException;
                    jl_Exception__init_($string);
                    $rt_throw($string);
                }
                $c = $start + 1 | 0;
                $negativeExp = 0;
                if ($c == $end) {
                    $string = new jl_NumberFormatException;
                    jl_Exception__init_($string);
                    $rt_throw($string);
                }
                if (jl_String_charAt($string, $c) == 45) {
                    $c = $c + 1 | 0;
                    $negativeExp = 1;
                } else if (jl_String_charAt($string, $c) == 43)
                    $c = $c + 1 | 0;
                $numExp = 0;
                $start = 0;
                d: {
                    while (true) {
                        if ($c >= $end)
                            break d;
                        $mantissaPos = jl_String_charAt($string, $c);
                        if ($mantissaPos < 48)
                            break d;
                        if ($mantissaPos > 57)
                            break;
                        $numExp = (10 * $numExp | 0) + ($mantissaPos - 48 | 0) | 0;
                        $start = 1;
                        $c = $c + 1 | 0;
                    }
                }
                if (!$start) {
                    $string = new jl_NumberFormatException;
                    jl_Exception__init_($string);
                    $rt_throw($string);
                }
                if ($negativeExp)
                    $numExp =  -$numExp | 0;
                $exp = $exp + $numExp | 0;
            }
            return otcit_FloatSynthesizer_synthesizeFloat($mantissa, $exp, $negative);
        }
        $start = $start + 1 | 0;
        if ($start == $end)
            break;
    }
    $string = new jl_NumberFormatException;
    jl_Exception__init_($string);
    $rt_throw($string);
},
jl_Float_floatToIntBits = $value => {
    if (isNaN($value) ? 1 : 0)
        return 2143289344;
    return $rt_floatToRawIntBits($value);
},
jl_Float__clinit_ = () => {
    jl_Float_TYPE = $rt_cls($rt_floatcls);
},
cgxgbtu_KeyCodes = $rt_classWithoutFields(),
cgxgbtu_KeyCodes_keyForCode = $keyCode => {
    a: {
        switch ($keyCode) {
            case 8:
                break;
            case 9:
                return 61;
            case 10:
            case 11:
            case 12:
            case 14:
            case 15:
            case 21:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 28:
            case 29:
            case 30:
            case 31:
            case 41:
            case 42:
            case 43:
            case 44:
            case 47:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 93:
            case 94:
            case 95:
            case 108:
            case 124:
            case 125:
            case 126:
            case 127:
            case 128:
            case 129:
            case 130:
            case 131:
            case 132:
            case 133:
            case 134:
            case 135:
            case 136:
            case 137:
            case 138:
            case 139:
            case 140:
            case 141:
            case 142:
            case 143:
            case 146:
            case 147:
            case 148:
            case 149:
            case 150:
            case 151:
            case 152:
            case 153:
            case 154:
            case 155:
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
            case 167:
            case 168:
            case 169:
            case 170:
            case 171:
            case 172:
            case 173:
            case 174:
            case 175:
            case 176:
            case 177:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
            case 184:
            case 185:
            case 193:
            case 194:
            case 195:
            case 196:
            case 197:
            case 198:
            case 199:
            case 200:
            case 201:
            case 202:
            case 203:
            case 204:
            case 205:
            case 206:
            case 207:
            case 208:
            case 209:
            case 210:
            case 211:
            case 212:
            case 213:
            case 214:
            case 215:
            case 216:
            case 217:
            case 218:
                break a;
            case 13:
                return 66;
            case 16:
                return 59;
            case 17:
                return 129;
            case 18:
                return 57;
            case 19:
                return 0;
            case 20:
                return 0;
            case 27:
                return 111;
            case 32:
                return 62;
            case 33:
                return 92;
            case 34:
                return 93;
            case 35:
                return 123;
            case 36:
                return 3;
            case 37:
                return 21;
            case 38:
                return 19;
            case 39:
                return 22;
            case 40:
                return 20;
            case 45:
                return 124;
            case 46:
                return 112;
            case 48:
                return 7;
            case 49:
                return 8;
            case 50:
                return 9;
            case 51:
                return 10;
            case 52:
                return 11;
            case 53:
                return 12;
            case 54:
                return 13;
            case 55:
                return 14;
            case 56:
                return 15;
            case 57:
                return 16;
            case 65:
                return 29;
            case 66:
                return 30;
            case 67:
                return 31;
            case 68:
                return 32;
            case 69:
                return 33;
            case 70:
                return 34;
            case 71:
                return 35;
            case 72:
                return 36;
            case 73:
                return 37;
            case 74:
                return 38;
            case 75:
                return 39;
            case 76:
                return 40;
            case 77:
                return 41;
            case 78:
                return 42;
            case 79:
                return 43;
            case 80:
                return 44;
            case 81:
                return 45;
            case 82:
                return 46;
            case 83:
                return 47;
            case 84:
                return 48;
            case 85:
                return 49;
            case 86:
                return 50;
            case 87:
                return 51;
            case 88:
                return 52;
            case 89:
                return 53;
            case 90:
                return 54;
            case 91:
                return 0;
            case 92:
                return 0;
            case 96:
                return 144;
            case 97:
                return 145;
            case 98:
                return 146;
            case 99:
                return 147;
            case 100:
                return 148;
            case 101:
                return 149;
            case 102:
                return 150;
            case 103:
                return 151;
            case 104:
                return 152;
            case 105:
                return 153;
            case 106:
                return 0;
            case 107:
                return 81;
            case 109:
                return 69;
            case 110:
                return 56;
            case 111:
                return 0;
            case 112:
                return 131;
            case 113:
                return 132;
            case 114:
                return 133;
            case 115:
                return 134;
            case 116:
                return 135;
            case 117:
                return 136;
            case 118:
                return 137;
            case 119:
                return 138;
            case 120:
                return 139;
            case 121:
                return 140;
            case 122:
                return 141;
            case 123:
                return 142;
            case 144:
                return 78;
            case 145:
                return 0;
            case 186:
                return 74;
            case 187:
                return 70;
            case 188:
                return 55;
            case 189:
                return 69;
            case 190:
                return 56;
            case 191:
                return 76;
            case 192:
                return 0;
            case 219:
                return 71;
            case 220:
                return 73;
            case 221:
                return 72;
            case 222:
                return 75;
            default:
                break a;
        }
        return 67;
    }
    return 0;
},
cgxgbtu_KeyCodes_getButton = $button => {
    if (!$button)
        return 0;
    if ($button == 2)
        return 1;
    if ($button != 1)
        return 0;
    return 2;
},
cbgu_TimeUtils = $rt_classWithoutFields(),
cbgu_TimeUtils_nanoTime = () => {
    return Long_fromNumber(performance.now() * 1000000.0);
},
otp_PlatformQueue = $rt_classWithoutFields(),
otp_PlatformQueue_isEmpty$static = $this => {
    return $this.length ? 0 : 1;
},
otp_PlatformRunnable = $rt_classWithoutFields(0);
function jl_Object$monitorExit$lambda$_8_0() {
    jl_Object.call(this);
    this.$_09 = null;
}
let cgxgbt_TeaWindowListener = $rt_classWithoutFields(0),
otjc_JSPromise$Executor = $rt_classWithoutFields(0);
function cgxgbta_AssetLoadImpl$getFile$lambda$_2_0() {
    let a = this; jl_Object.call(a);
    a.$_04 = null;
    a.$_11 = null;
    a.$_21 = null;
}
let cgxgbta_AssetLoadImpl$getFile$lambda$_2_0_onExecute$exported$0 = (var$1, var$2, var$3) => {
    let var$4, var$5;
    var$2 = otji_JS_functionAsObject(var$2, "accept");
    otji_JS_functionAsObject(var$3, "accept");
    var$1 = var$1;
    var$3 = var$1.$_04;
    var$4 = var$1.$_11;
    var$1 = var$1.$_21;
    var$5 = new FileReader();
    var$5.readAsArrayBuffer(var$4);
    var$4 = new cgxgbta_AssetLoadImpl$4;
    var$4.$this$051 = var$3;
    var$4.$val$name = var$1;
    var$4.$val$resolve = var$2;
    var$5.addEventListener("load", otji_JS_function(otji_JSWrapper_unwrap(var$4), "handleEvent"));
},
otji_IDBObjectStoreParameters = $rt_classWithoutFields(),
otji_IDBObjectStoreParameters_create$js_body$_1 = () => {
    return {  };
};
function cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0() {
    let a = this; jl_Object.call(a);
    a.$_07 = null;
    a.$_13 = null;
}
let cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0_handleEvent$exported$0 = var$1 => {
    let var$2, var$3, var$4;
    var$1 = var$1;
    var$2 = var$1.$_07;
    var$3 = var$1.$_13.result;
    if (var$3 !== null) {
        var$1 = cgxgbtf_MemoryFileStorage_fixPath(var$2, $rt_str(var$3.key));
        var$4 = var$3.value;
        if (var$4.type == 1)
            cgxgbtf_MemoryFileStorage_putFolderInternal0(var$2, var$1, 0);
        else
            cgxgbtf_MemoryFileStorage_putFileInternal(var$2, var$1, cgxgbtdt_TypedArrays_toByteArray(var$4.contents), 0);
        var$3.continue();
    }
};
function cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1() {
    jl_Object.call(this);
    this.$_018 = null;
}
let cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1_handleEvent$exported$0 = var$1 => {
    var$1 = var$1.$_018;
    var$1.$delayInitCount = var$1.$delayInitCount - 1 | 0;
};
function cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2() {
    jl_Object.call(this);
    this.$_0 = null;
}
let cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2_handleEvent$exported$0 = var$1 => {
    var$1 = var$1.$_0;
    otcic_JsConsolePrintStream_println(jl_System_err(), $rt_s(429));
    var$1.$delayInitCount = var$1.$delayInitCount - 1 | 0;
},
jl_AutoCloseable = $rt_classWithoutFields(0),
ji_Closeable = $rt_classWithoutFields(0),
ji_Flushable = $rt_classWithoutFields(0),
ji_OutputStream = $rt_classWithoutFields();
function ji_FilterOutputStream() {
    ji_OutputStream.call(this);
    this.$out5 = null;
}
function ji_PrintStream() {
    let a = this; ji_FilterOutputStream.call(a);
    a.$autoFlush = 0;
    a.$sb0 = null;
    a.$buffer7 = null;
    a.$charset1 = null;
}
let otcic_JsConsolePrintStream = $rt_classWithoutFields(ji_PrintStream),
otcic_JsConsolePrintStream__init_ = $this => {
    let var$1, var$2;
    var$1 = null;
    var$2 = null;
    $this.$out5 = var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    $this.$sb0 = var$1;
    $this.$buffer7 = $rt_createCharArray(32);
    $this.$autoFlush = 0;
    $this.$charset1 = var$2;
},
otcic_JsConsolePrintStream_println = ($this, $s) => {
    $this.$print($s);
    $this.$print($rt_s(28));
},
otcic_JSStderrPrintStream = $rt_classWithoutFields(otcic_JsConsolePrintStream),
otcic_JSStderrPrintStream_print = ($this, $s) => {
    if ($s === null)
        $s = $rt_s(30);
    $rt_putStderr($rt_ustr($s));
},
cgxgbtd_StyleWrapper$Unit$1 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$2 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$3 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$4 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$5 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$6 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$7 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$8 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
cgxgbtd_StyleWrapper$Unit$9 = $rt_classWithoutFields(cgxgbtd_StyleWrapper$Unit),
jl_Thread$UncaughtExceptionHandler = $rt_classWithoutFields(0),
jl_DefaultUncaughtExceptionHandler = $rt_classWithoutFields();
function jnc_Charset() {
    let a = this; jl_Object.call(a);
    a.$canonicalName = null;
    a.$aliases = null;
}
let jnc_Charset__init_ = ($this, $canonicalName, $aliases) => {
    let var$3, var$4, var$5;
    var$3 = $aliases.data;
    jnc_Charset_checkCanonicalName($canonicalName);
    var$4 = var$3.length;
    var$5 = 0;
    while (var$5 < var$4) {
        jnc_Charset_checkCanonicalName(var$3[var$5]);
        var$5 = var$5 + 1 | 0;
    }
    $this.$canonicalName = $canonicalName;
    $this.$aliases = $aliases.$clone0();
},
jnc_Charset_checkCanonicalName = $name => {
    let $i, $c;
    if (jl_String_isEmpty($name))
        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
    if (!jnc_Charset_isValidCharsetStart(jl_String_charAt($name, 0)))
        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
    $i = 1;
    while ($i < $name.$nativeString.length) {
        a: {
            $c = jl_String_charAt($name, $i);
            switch ($c) {
                case 43:
                case 45:
                case 46:
                case 58:
                case 95:
                    break;
                default:
                    if (jnc_Charset_isValidCharsetStart($c))
                        break a;
                    else
                        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
            }
        }
        $i = $i + 1 | 0;
    }
},
jnc_Charset_isValidCharsetStart = $c => {
    a: {
        b: {
            if (!($c >= 48 && $c <= 57) && !($c >= 97 && $c <= 122)) {
                if ($c < 65)
                    break b;
                if ($c > 90)
                    break b;
            }
            $c = 1;
            break a;
        }
        $c = 0;
    }
    return $c;
},
jnc_Charset_forName = $charsetName => {
    let $charset, var$3;
    if ($charsetName === null) {
        $charsetName = new jl_IllegalArgumentException;
        jl_Throwable__init_($charsetName, $rt_s(430));
        $rt_throw($charsetName);
    }
    jnc_Charset_checkCanonicalName($charsetName);
    jnc_Charset$Charsets_$callClinit();
    $charset = jnc_Charset$Charsets_value;
    var$3 = jl_String_toUpperCase($charsetName);
    $charset = ju_HashMap_get($charset, var$3);
    if ($charset !== null)
        return $charset;
    $charset = new jnc_UnsupportedCharsetException;
    jl_Exception__init_($charset);
    $charset.$charsetName0 = $charsetName;
    $rt_throw($charset);
},
oti_AsyncCallback = $rt_classWithoutFields(0);
function otpp_AsyncCallbackWrapper() {
    jl_Object.call(this);
    this.$realAsyncCallback = null;
}
let otpp_AsyncCallbackWrapper_create = $realAsyncCallback => {
    let var$2;
    var$2 = new otpp_AsyncCallbackWrapper;
    var$2.$realAsyncCallback = $realAsyncCallback;
    return var$2;
},
otpp_AsyncCallbackWrapper_complete = ($this, $result) => {
    $this.$realAsyncCallback.$complete($result);
},
otpp_AsyncCallbackWrapper_error = ($this, $e) => {
    $this.$realAsyncCallback.$error0($e);
};
function jl_Object$monitorEnterWait$lambda$_6_0() {
    let a = this; jl_Object.call(a);
    a.$_08 = null;
    a.$_14 = null;
    a.$_23 = 0;
    a.$_31 = null;
}
let otjc_JSObjects = $rt_classWithoutFields(),
otji_JSWrapper$Helper = $rt_classWithoutFields(),
otji_JSWrapper$Helper_hashCodes = null,
otji_JSWrapper$Helper_wrappers = null,
otji_JSWrapper$Helper_stringWrappers = null,
otji_JSWrapper$Helper_numberWrappers = null,
otji_JSWrapper$Helper_undefinedWrapper = null,
otji_JSWrapper$Helper_stringFinalizationRegistry = null,
otji_JSWrapper$Helper_numberFinalizationRegistry = null,
otji_JSWrapper$Helper_$callClinit = () => {
    otji_JSWrapper$Helper_$callClinit = $rt_eraseClinit(otji_JSWrapper$Helper);
    otji_JSWrapper$Helper__clinit_();
},
otji_JSWrapper$Helper__clinit_ = () => {
    let var$1;
    otji_JSWrapper$Helper_hashCodes = new WeakMap();
    otji_JSWrapper$Helper_wrappers = !(typeof WeakRef !== 'undefined' ? 1 : 0) ? null : new WeakMap();
    otji_JSWrapper$Helper_stringWrappers = !(typeof WeakRef !== 'undefined' ? 1 : 0) ? null : new Map();
    otji_JSWrapper$Helper_numberWrappers = !(typeof WeakRef !== 'undefined' ? 1 : 0) ? null : new Map();
    if (otji_JSWrapper$Helper_stringWrappers === null)
        var$1 = null;
    else {
        var$1 = new otji_JSWrapper$Helper$_clinit_$lambda$_3_0;
        var$1 = new FinalizationRegistry(otji_JS_function(otji_JSWrapper_unwrap(var$1), "accept"));
    }
    otji_JSWrapper$Helper_stringFinalizationRegistry = var$1;
    if (otji_JSWrapper$Helper_numberWrappers === null)
        var$1 = null;
    else {
        var$1 = new otji_JSWrapper$Helper$_clinit_$lambda$_3_1;
        var$1 = new FinalizationRegistry(otji_JS_function(otji_JSWrapper_unwrap(var$1), "accept"));
    }
    otji_JSWrapper$Helper_numberFinalizationRegistry = var$1;
},
otjc_JSUndefined = $rt_classWithoutFields(),
otjc_JSWeakRef = $rt_classWithoutFields(),
otjc_JSFinalizationRegistryConsumer = $rt_classWithoutFields(0),
otji_JSWrapper$Helper$_clinit_$lambda$_3_0 = $rt_classWithoutFields(),
otji_JSWrapper$Helper$_clinit_$lambda$_3_0_accept$exported$0 = (var$1, var$2) => {
    var$2 = otji_JSWrapper_jsToJava(var$2);
    var$1;
    otji_JSWrapper$Helper_$callClinit();
    var$1 = otji_JSWrapper$Helper_stringWrappers;
    var$2 = otji_JSWrapper_unwrap(var$2);
    var$1.delete(var$2);
},
otji_JSWrapper$Helper$_clinit_$lambda$_3_1 = $rt_classWithoutFields(),
otji_JSWrapper$Helper$_clinit_$lambda$_3_1_accept$exported$0 = (var$1, var$2) => {
    var$2 = otji_JSWrapper_jsToJava(var$2);
    var$1;
    otji_JSWrapper$Helper_$callClinit();
    var$1 = otji_JSWrapper$Helper_numberWrappers;
    var$2 = otji_JSWrapper_unwrap(var$2);
    var$1.delete(var$2);
},
jur_BackReferencedSingleSet = $rt_classWithoutFields(jur_SingleSet),
jur_BackReferencedSingleSet_find = ($this, $startSearch, $testString, $matchResult) => {
    let $res, $lastIndex, $saveStart;
    $res = 0;
    $lastIndex = $matchResult.$rightBound;
    a: {
        while (true) {
            if ($startSearch > $lastIndex) {
                $startSearch = $res;
                break a;
            }
            $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $startSearch);
            $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
            if ($res >= 0)
                break;
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $saveStart);
            $startSearch = $startSearch + 1 | 0;
        }
    }
    return $startSearch;
},
jur_BackReferencedSingleSet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    let $res, $saveStart;
    $res = 0;
    a: {
        while (true) {
            if ($startSearch < $stringIndex) {
                $startSearch = $res;
                break a;
            }
            $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex);
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $startSearch);
            $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
            if ($res >= 0)
                break;
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex, $saveStart);
            $startSearch = $startSearch + (-1) | 0;
        }
    }
    return $startSearch;
},
jur_BackReferencedSingleSet_processBackRefReplacement = $this => {
    return null;
},
cgxgbt_TeaApplication$6 = $rt_classWithoutFields(),
cgxgbt_TeaApplication$6_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$TeaApplication$AppState = null,
cgxgbt_TeaApplication$6_$callClinit = () => {
    cgxgbt_TeaApplication$6_$callClinit = $rt_eraseClinit(cgxgbt_TeaApplication$6);
    cgxgbt_TeaApplication$6__clinit_();
},
cgxgbt_TeaApplication$6__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((cgxgbt_TeaApplication$AppState_values()).data.length);
    var$2 = var$1.data;
    cgxgbt_TeaApplication$6_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$TeaApplication$AppState = var$1;
    var$2[cgxgbt_TeaApplication$AppState_INIT.$ordinal0] = 1;
    var$2[cgxgbt_TeaApplication$AppState_PRELOAD_ASSETS.$ordinal0] = 2;
    var$2[cgxgbt_TeaApplication$AppState_DOWNLOAD_ASSETS.$ordinal0] = 3;
    var$2[cgxgbt_TeaApplication$AppState_APP_LOOP.$ordinal0] = 4;
};
function jur_AbstractCharClass$LazyJavaLowerCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$033 = null;
}
let jur_AbstractCharClass$LazyJavaLowerCase$1_contains = ($this, $ch) => {
    return jl_Character_getType($ch) != 2 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaUpperCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$036 = null;
}
let jur_AbstractCharClass$LazyJavaUpperCase$1_contains = ($this, $ch) => {
    return jl_Character_getType($ch) != 1 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaWhitespace$1() {
    jur_AbstractCharClass.call(this);
    this.$this$031 = null;
}
let jur_AbstractCharClass$LazyJavaWhitespace$1_contains = ($this, $ch) => {
    return jl_Character_isWhitespace($ch);
};
function jur_AbstractCharClass$LazyJavaMirrored$1() {
    jur_AbstractCharClass.call(this);
    this.$this$028 = null;
}
let jur_AbstractCharClass$LazyJavaMirrored$1_contains = ($this, $ch) => {
    return 0;
};
function jur_AbstractCharClass$LazyJavaDefined$1() {
    jur_AbstractCharClass.call(this);
    this.$this$043 = null;
}
let jur_AbstractCharClass$LazyJavaDefined$1_contains = ($this, $ch) => {
    return !jl_Character_getType($ch) ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaDigit$1() {
    jur_AbstractCharClass.call(this);
    this.$this$037 = null;
}
let jur_AbstractCharClass$LazyJavaDigit$1_contains = ($this, $ch) => {
    return jl_Character_isDigit($ch);
};
function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1() {
    jur_AbstractCharClass.call(this);
    this.$this$047 = null;
}
let jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains = ($this, $ch) => {
    return jl_Character_isIdentifierIgnorable($ch);
};
function jur_AbstractCharClass$LazyJavaISOControl$1() {
    jur_AbstractCharClass.call(this);
    this.$this$034 = null;
}
let jur_AbstractCharClass$LazyJavaISOControl$1_contains = ($this, $ch) => {
    a: {
        b: {
            if (!($ch >= 0 && $ch <= 31)) {
                if ($ch < 127)
                    break b;
                if ($ch > 159)
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = 0;
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$018 = null;
}
let jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 23:
                case 26:
                    break;
                case 7:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 24:
                case 25:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$038 = null;
}
let jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 10:
                case 23:
                case 26:
                    break;
                case 6:
                case 7:
                case 8:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 24:
                case 25:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaLetter$1() {
    jur_AbstractCharClass.call(this);
    this.$this$042 = null;
}
let jur_AbstractCharClass$LazyJavaLetter$1_contains = ($this, $ch) => {
    a: {
        switch (jl_Character_getType($ch)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            default:
                $ch = 0;
                break a;
        }
        $ch = 1;
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaLetterOrDigit$1() {
    jur_AbstractCharClass.call(this);
    this.$this$045 = null;
}
let jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains = ($this, $ch) => {
    return jl_Character_isLetterOrDigit($ch);
};
function jur_AbstractCharClass$LazyJavaSpaceChar$1() {
    jur_AbstractCharClass.call(this);
    this.$this$032 = null;
}
let jur_AbstractCharClass$LazyJavaSpaceChar$1_contains = ($this, $ch) => {
    return jl_Character_isSpaceChar($ch);
};
function jur_AbstractCharClass$LazyJavaTitleCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$040 = null;
}
let jur_AbstractCharClass$LazyJavaTitleCase$1_contains = ($this, $ch) => {
    return jl_Character_getType($ch) != 3 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$019 = null;
}
let jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 23:
                    break;
                case 7:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$053 = null;
}
let jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains = ($this, $ch) => {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 10:
                    break;
                case 6:
                case 7:
                case 8:
                case 9:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
};
function jur_UnicodeCategory() {
    jur_AbstractCharClass.call(this);
    this.$category = 0;
}
let jur_UnicodeCategory__init_ = ($this, $category) => {
    jur_AbstractCharClass__init_($this);
    $this.$category = $category;
},
jur_UnicodeCategory__init_0 = var_0 => {
    let var_1 = new jur_UnicodeCategory();
    jur_UnicodeCategory__init_(var_1, var_0);
    return var_1;
},
jur_UnicodeCategory_contains = ($this, $ch) => {
    return $this.$alt ^ ($this.$category != jl_Character_getType($ch & 65535) ? 0 : 1);
},
jur_UnicodeCategoryScope = $rt_classWithoutFields(jur_UnicodeCategory),
jur_UnicodeCategoryScope_contains = ($this, $ch) => {
    return $this.$alt ^ (!($this.$category >> jl_Character_getType($ch & 65535) & 1) ? 0 : 1);
};
function ju_AbstractList$1() {
    let a = this; jl_Object.call(a);
    a.$index7 = 0;
    a.$modCount2 = 0;
    a.$size14 = 0;
    a.$removeIndex0 = 0;
    a.$this$08 = null;
}
let ju_AbstractList$1_hasNext = $this => {
    return $this.$index7 >= $this.$size14 ? 0 : 1;
},
ju_AbstractList$1_next = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$modCount2;
    var$2 = $this.$this$08;
    if (var$1 < var$2.$modCount) {
        var$2 = new ju_ConcurrentModificationException;
        jl_Exception__init_(var$2);
        $rt_throw(var$2);
    }
    var$3 = $this.$index7;
    $this.$removeIndex0 = var$3;
    $this.$index7 = var$3 + 1 | 0;
    return ju_ArrayList_get(var$2, var$3);
};
function cgxgbta_AssetDownloadImpl$2() {
    let a = this; jl_Object.call(a);
    a.$val$url = null;
    a.$val$listener1 = null;
    a.$this$05 = null;
}
let cgxgbta_AssetDownloadImpl$2_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4;
    var$1 = var$1;
    cgxgbta_AssetDownloadImpl_subtractQueue(var$1.$this$05);
    if (var$1.$this$05.$showLogs) {
        var$2 = jl_System_out();
        var$3 = var$1.$val$url;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(431)), var$3);
        var$3 = jl_AbstractStringBuilder_toString(var$4);
        otcic_JsConsolePrintStream_println(var$2, var$3);
    }
};
function cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0() {
    let a = this; jl_Object.call(a);
    a.$_05 = null;
    a.$_12 = null;
    a.$_22 = null;
}
let cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4;
    var$1 = var$1;
    var$2 = var$1.$_05;
    var$3 = var$1.$_12;
    var$1 = var$1.$_22;
    cgxgbta_AssetDownloadImpl_subtractQueue(var$2);
    if (var$2.$showLogs) {
        var$2 = jl_System_err();
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(432)), var$3);
        var$3 = jl_AbstractStringBuilder_toString(var$4);
        otcic_JsConsolePrintStream_println(var$2, var$3);
    }
},
cbgu_Collections = $rt_classWithoutFields(),
cbgu_Collections_allocateIterators = 0;
function cbgu_Array$ArrayIterator() {
    let a = this; jl_Object.call(a);
    a.$array4 = null;
    a.$allowRemove0 = 0;
    a.$index2 = 0;
    a.$valid = 0;
}
let cbgu_Array$ArrayIterator__init_0 = ($this, $array, $allowRemove) => {
    $this.$valid = 1;
    $this.$array4 = $array;
    $this.$allowRemove0 = $allowRemove;
},
cbgu_Array$ArrayIterator__init_ = (var_0, var_1) => {
    let var_2 = new cbgu_Array$ArrayIterator();
    cbgu_Array$ArrayIterator__init_0(var_2, var_0, var_1);
    return var_2;
},
cbgu_Array$ArrayIterator_hasNext = $this => {
    let var$1;
    if (!$this.$valid) {
        var$1 = new cbgu_GdxRuntimeException;
        jl_Throwable__init_(var$1, $rt_s(433));
        $rt_throw(var$1);
    }
    return $this.$index2 >= $this.$array4.$size0 ? 0 : 1;
},
cbgu_Array$ArrayIterator_next = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$index2;
    var$2 = $this.$array4;
    if (var$1 >= var$2.$size0) {
        var$2 = new ju_NoSuchElementException;
        jl_Throwable__init_(var$2, jl_String_valueOf0(var$1));
        $rt_throw(var$2);
    }
    if ($this.$valid) {
        var$3 = var$2.$items.data;
        $this.$index2 = var$1 + 1 | 0;
        return var$3[var$1];
    }
    var$2 = new cbgu_GdxRuntimeException;
    jl_Throwable__init_(var$2, $rt_s(433));
    $rt_throw(var$2);
};
function cbgu_Array$ArrayIterable() {
    let a = this; jl_Object.call(a);
    a.$array2 = null;
    a.$allowRemove = 0;
    a.$iterator1 = null;
    a.$iterator2 = null;
}
let otcic_JSStdoutPrintStream = $rt_classWithoutFields(otcic_JsConsolePrintStream),
otcic_JSStdoutPrintStream_print = ($this, $s) => {
    if ($s === null)
        $s = $rt_s(30);
    $rt_putStdout($rt_ustr($s));
},
cgxgbtd_EventTargetWrapper = $rt_classWithoutFields(0),
cgxgbtd_FileReaderWrapper = $rt_classWithoutFields();
function cgxgbta_AssetLoadImpl$4() {
    let a = this; jl_Object.call(a);
    a.$val$name = null;
    a.$val$resolve = null;
    a.$this$051 = null;
}
let cgxgbta_AssetLoadImpl$4_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3;
    var$1 = var$1;
    var$3 = cgxgbtdt_TypedArrays_toByteArray(new Int8Array(var$2.target.result));
    var$2 = cgxgbtf_FileData__init_0(var$1.$val$name, var$3);
    var$1.$val$resolve.accept(otji_JSWrapper_javaToJs(var$2));
},
cgxgbtdt_TypedArrays = $rt_classWithoutFields(),
cgxgbtdt_TypedArrays_toByteArray = $array => {
    return $rt_wrapArray($rt_bytecls, new Int8Array($array));
},
cgxgbtdt_TypedArrays_getTypedArray = $buffer => {
    let var$2, var$3;
    a: {
        if ($buffer instanceof jn_ByteBuffer)
            $buffer = jn_JSBufferHelper_toInt8Array(jn_JSBufferHelper_getArrayBufferView($buffer));
        else if ($buffer instanceof jn_ShortBuffer) {
            $buffer = jn_JSBufferHelper_getArrayBufferView($buffer);
            $buffer = new Int16Array($buffer.buffer, $buffer.byteOffset, $buffer.byteLength / 2 | 0);
        } else {
            if (!($buffer instanceof jn_IntBuffer)) {
                if ($buffer instanceof jn_FloatBuffer) {
                    $buffer = cgxgbtdt_TypedArrays_getFloat32Array($buffer);
                    break a;
                }
                var$2 = new cbgu_GdxRuntimeException;
                $buffer = jl_String_valueOf(jl_Object_getClass($buffer));
                var$3 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$3);
                jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(434)), $buffer);
                jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
                $rt_throw(var$2);
            }
            $buffer = jn_JSBufferHelper_getArrayBufferView($buffer);
            $buffer = new Int32Array($buffer.buffer, $buffer.byteOffset, $buffer.byteLength / 4 | 0);
        }
    }
    return $buffer;
},
cgxgbtdt_TypedArrays_getUint8Array = $buff => {
    $buff = jn_JSBufferHelper_getArrayBufferView($buff);
    return new Uint8Array($buff.buffer, $buff.byteOffset, $buff.byteLength);
},
cgxgbtdt_TypedArrays_getUint16Array = $buff => {
    $buff = jn_JSBufferHelper_getArrayBufferView($buff);
    return new Uint16Array($buff.buffer, $buff.byteOffset, $buff.byteLength / 2 | 0);
},
cgxgbtdt_TypedArrays_getFloat32Array = $buff => {
    $buff = jn_JSBufferHelper_getArrayBufferView($buff);
    return new Float32Array($buff.buffer, $buff.byteOffset, $buff.byteLength / 4 | 0);
},
jur_IntArrHash = $rt_classWithoutFields();
function cgxgbtf_FileData() {
    let a = this; jl_Object.call(a);
    a.$path0 = null;
    a.$bytes = null;
    a.$type6 = 0;
}
let cgxgbtf_FileData__init_2 = ($this, $path) => {
    cgxgbtf_FileData__init_($this, $path, 1, null);
},
cgxgbtf_FileData__init_1 = var_0 => {
    let var_1 = new cgxgbtf_FileData();
    cgxgbtf_FileData__init_2(var_1, var_0);
    return var_1;
},
cgxgbtf_FileData__init_3 = ($this, $path, $bytes) => {
    cgxgbtf_FileData__init_($this, $path, 2, $bytes);
},
cgxgbtf_FileData__init_0 = (var_0, var_1) => {
    let var_2 = new cgxgbtf_FileData();
    cgxgbtf_FileData__init_3(var_2, var_0, var_1);
    return var_2;
},
cgxgbtf_FileData__init_ = ($this, $path, $type, $bytes) => {
    if ($bytes !== null && jl_String_endsWith($path, $rt_s(94)))
        $path = jl_String_substring($path, 0, $path.$nativeString.length - 1 | 0);
    $this.$path0 = $path;
    $this.$bytes = $bytes;
    $this.$type6 = $type;
},
cgxgbtf_FileData__init_4 = (var_0, var_1, var_2) => {
    let var_3 = new cgxgbtf_FileData();
    cgxgbtf_FileData__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
cgxgbtf_FileData_isDirectory = $this => {
    return $this.$type6 != 1 ? 0 : 1;
},
otjt_ArrayBufferView = $rt_classWithoutFields(),
otjt_TypedArray = $rt_classWithoutFields(otjt_ArrayBufferView),
otjt_Int8Array = $rt_classWithoutFields(otjt_TypedArray),
cbgu_GdxRuntimeException = $rt_classWithoutFields(jl_RuntimeException),
cbgu_GdxRuntimeException__init_0 = ($this, $message, $t) => {
    jl_Throwable__init_0($this, $message, $t);
},
cbgu_GdxRuntimeException__init_ = (var_0, var_1) => {
    let var_2 = new cbgu_GdxRuntimeException();
    cbgu_GdxRuntimeException__init_0(var_2, var_0, var_1);
    return var_2;
},
ju_NoSuchElementException = $rt_classWithoutFields(jl_RuntimeException);
function cgxgbta_AssetLoadImpl$5() {
    let a = this; jl_Object.call(a);
    a.$val$config = null;
    a.$val$assetFileUrl = null;
    a.$this$02 = null;
}
let cgxgbta_AssetLoadImpl$5_onSuccess = ($this, var$1, var$2) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, $$je;
    var$3 = cgxgbtdt_TypedArrays_toByteArray(var$2.$data11);
    var$4 = var$3.data;
    var$1 = new jl_String;
    var$5 = var$4.length;
    jnci_UTF8Charset_$callClinit();
    var$2 = jnci_UTF8Charset_INSTANCE;
    var$6 = jn_ByteBuffer_wrap0(var$3, 0, var$5);
    a: {
        try {
            var$2 = jnc_CharsetDecoder_decode0(jnc_CharsetDecoder_onUnmappableCharacter(jnc_CharsetDecoder_onMalformedInput(jnci_UTF8Charset_newDecoder(var$2), jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE), var$6);
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jnc_CharacterCodingException) {
                var$2 = $$je;
            } else {
                throw $$e;
            }
        }
        var$6 = new jl_AssertionError;
        jl_Throwable__init_0(var$6, $rt_s(435), var$2);
        $rt_throw(var$6);
    }
    var$7 = var$2.$array5 === null ? 0 : 1;
    if (var$7 && !var$2.$position0 && var$2.$limit0 == var$2.$capacityImpl())
        var$3 = jn_CharBuffer_array(var$2);
    else {
        var$3 = $rt_createCharArray(jn_Buffer_remaining(var$2));
        jn_CharBuffer_get(var$2, var$3, 0, var$3.data.length);
    }
    var$1.$nativeString = $rt_fullArrayToString(var$3.data);
    var$3 = (jl_String_split(var$1, $rt_s(28))).data;
    var$1 = $this.$this$02;
    var$7 = var$3.length;
    var$1.$assetTotal = var$7;
    var$8 = 0;
    while (var$8 < var$7) {
        var$1 = var$3[var$8];
        var$4 = (jl_String_split(var$1, $rt_s(96))).data;
        var$5 = var$4.length;
        if (var$5 != 5) {
            var$2 = new cbgu_GdxRuntimeException;
            var$6 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$6);
            var$9 = jl_StringBuilder_append1(jl_StringBuilder_append(var$6, $rt_s(436)), var$5);
            jl_AbstractStringBuilder_append0(var$9, 32);
            jl_StringBuilder_append(var$9, var$1);
            jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$6));
            $rt_throw(var$2);
        }
        var$10 = var$4[0];
        var$1 = var$4[1];
        var$2 = jl_String_trim(var$4[2]);
        var$5 = jl_String_equals(var$4[4], $rt_s(437));
        var$2 = jl_String_trim(var$2);
        if (!jl_String_isEmpty(var$2)) {
            var$6 = cbg_Files$FileType_Internal;
            if (jl_String_equals(var$10, $rt_s(438)))
                var$6 = cbg_Files$FileType_Classpath;
            else if (jl_String_equals(var$10, $rt_s(439)))
                var$6 = cbg_Files$FileType_Local;
            var$9 = cgxgbta_AssetType_Binary;
            if (jl_String_equals(var$1, $rt_s(228)))
                var$9 = cgxgbta_AssetType_Directory;
            if (!(!$this.$val$config.$preloadAssets && var$6 !== cbg_Files$FileType_Classpath)) {
                var$10 = $this.$this$02;
                var$1 = null;
                var$11 = jl_String_replace(jl_String_trim(var$2), $rt_s(440), $rt_s(94));
                if (jl_String_startsWith(var$11, $rt_s(94)))
                    var$11 = jl_String_substring0(var$11, 1);
                if (!jl_String_isEmpty(var$11) && !(ju_HashMap_entryByKey(var$10.$assetInQueue.$backingMap, var$11) === null ? 0 : 1)) {
                    var$2 = cbg_Gdx_files;
                    if (var$6 === cbg_Files$FileType_Internal)
                        var$6 = cgxgbt_TeaFiles_internal(var$2, var$11);
                    else {
                        var$12 = cbg_Files$FileType_Classpath;
                        if (var$6 === var$12)
                            var$6 = cgxgbt_TeaFileHandle__init_(var$2, var$11, var$12);
                        else {
                            var$12 = cbg_Files$FileType_Local;
                            if (var$6 !== var$12) {
                                var$1 = new cbgu_GdxRuntimeException;
                                var$2 = jl_String_valueOf(var$6);
                                var$6 = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_(var$6);
                                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$6, $rt_s(441)), var$2), $rt_s(442));
                                jl_Throwable__init_(var$1, jl_AbstractStringBuilder_toString(var$6));
                                $rt_throw(var$1);
                            }
                            var$6 = cgxgbt_TeaFileHandle__init_(var$2, var$11, var$12);
                        }
                    }
                    var$12 = var$6;
                    var$13 = cgxgbt_TeaFileHandle_exists(var$12);
                    if (!(!var$5 && var$13)) {
                        if (var$9 !== cgxgbta_AssetType_Directory) {
                            var$6 = var$10.$assetInQueue;
                            ju_HashMap_put(var$6.$backingMap, var$11, var$6);
                            var$9 = var$10.$assetDownloader;
                            var$6 = cgxgbta_AssetLoadImpl_getAssetUrl(var$10);
                            var$2 = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_(var$2);
                            jl_StringBuilder_append(jl_StringBuilder_append(var$2, var$6), var$11);
                            var$2 = jl_AbstractStringBuilder_toString(var$2);
                            var$14 = cgxgbta_AssetType_Binary;
                            var$6 = new cgxgbta_AssetLoadImpl$6;
                            var$6.$this$09 = var$10;
                            var$6.$val$listener0 = var$1;
                            var$6.$val$path1 = var$11;
                            var$6.$val$fileHandle = var$12;
                            cgxgbta_AssetDownloadImpl_load(var$9, 1, var$2, var$14, var$6);
                        } else if (!var$13)
                            cgxgbtf_MemoryFileStorage_mkdirs(cgxgbt_TeaFiles_getFileDB(var$12.$teaFiles, var$12.$type1), var$12);
                    }
                }
            }
        }
        var$8 = var$8 + 1 | 0;
    }
};
function cgxgbta_AssetType() {
    jl_Enum.call(this);
    this.$code = null;
}
let cgxgbta_AssetType_Binary = null,
cgxgbta_AssetType_Directory = null,
cgxgbta_AssetType_$VALUES = null,
cgxgbta_AssetType_values = () => {
    return cgxgbta_AssetType_$VALUES.$clone0();
},
cgxgbta_AssetType__init_0 = ($this, var$1, var$2, $code) => {
    jl_Enum__init_($this, var$1, var$2);
    $this.$code = $code;
},
cgxgbta_AssetType__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cgxgbta_AssetType();
    cgxgbta_AssetType__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cgxgbta_AssetType__clinit_ = () => {
    let var$1, var$2, var$3;
    cgxgbta_AssetType_Binary = cgxgbta_AssetType__init_($rt_s(443), 0, $rt_s(444));
    var$1 = cgxgbta_AssetType__init_($rt_s(445), 1, $rt_s(228));
    cgxgbta_AssetType_Directory = var$1;
    var$2 = $rt_createArray(cgxgbta_AssetType, 2);
    var$3 = var$2.data;
    var$3[0] = cgxgbta_AssetType_Binary;
    var$3[1] = var$1;
    cgxgbta_AssetType_$VALUES = var$2;
},
cbggg_Batch = $rt_classWithoutFields(0);
function cbggg_SpriteBatch() {
    let a = this; jl_Object.call(a);
    a.$currentDataType = null;
    a.$mesh = null;
    a.$vertices2 = null;
    a.$idx = 0;
    a.$lastTexture = null;
    a.$invTexWidth = 0.0;
    a.$invTexHeight = 0.0;
    a.$drawing = 0;
    a.$transformMatrix = null;
    a.$projectionMatrix = null;
    a.$combinedMatrix = null;
    a.$blendingDisabled = 0;
    a.$blendSrcFunc = 0;
    a.$blendDstFunc = 0;
    a.$blendSrcFuncAlpha = 0;
    a.$blendDstFuncAlpha = 0;
    a.$shader0 = null;
    a.$customShader = null;
    a.$ownsShader = 0;
    a.$color5 = null;
    a.$colorPacked = 0.0;
    a.$renderCalls = 0;
    a.$totalRenderCalls = 0;
    a.$maxSpritesInBatch = 0;
}
let cbggg_SpriteBatch_defaultVertexDataType = null,
cbggg_SpriteBatch_overrideVertexType = null,
cbggg_SpriteBatch_$callClinit = () => {
    cbggg_SpriteBatch_$callClinit = $rt_eraseClinit(cbggg_SpriteBatch);
    cbggg_SpriteBatch__clinit_();
},
cbggg_SpriteBatch__init_ = ($this, $size, $defaultShader) => {
    let $vertexDataType, var$4, var$5, var$6, var$7, $indices, $j, var$10, var$11, var$12, var$13, var$14, $i;
    cbggg_SpriteBatch_$callClinit();
    $this.$idx = 0;
    $this.$lastTexture = null;
    $this.$invTexWidth = 0.0;
    $this.$invTexHeight = 0.0;
    $this.$drawing = 0;
    $this.$transformMatrix = cbgm_Matrix4__init_();
    $this.$projectionMatrix = cbgm_Matrix4__init_();
    $this.$combinedMatrix = cbgm_Matrix4__init_();
    $this.$blendingDisabled = 0;
    $this.$blendSrcFunc = 770;
    $this.$blendDstFunc = 771;
    $this.$blendSrcFuncAlpha = 770;
    $this.$blendDstFuncAlpha = 771;
    $this.$customShader = null;
    $this.$color5 = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    $this.$colorPacked = cbgg_Color_WHITE_FLOAT_BITS;
    $this.$renderCalls = 0;
    $this.$totalRenderCalls = 0;
    $this.$maxSpritesInBatch = 0;
    if ($size > 8191) {
        $defaultShader = new jl_IllegalArgumentException;
        $vertexDataType = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($vertexDataType);
        jl_AbstractStringBuilder_append($vertexDataType, $rt_s(446));
        jl_Throwable__init_($defaultShader, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1($vertexDataType, $size)));
        $rt_throw($defaultShader);
    }
    $vertexDataType = cbg_Gdx_gl30 === null ? cbggg_SpriteBatch_defaultVertexDataType : cbgg_Mesh$VertexDataType_VertexBufferObjectWithVAO;
    var$4 = cbggg_SpriteBatch_overrideVertexType;
    if (var$4 === null)
        var$4 = $vertexDataType;
    $this.$currentDataType = var$4;
    var$5 = new cbgg_Mesh;
    var$6 = $size * 4 | 0;
    var$7 = $size * 6 | 0;
    $indices = $rt_createArray(cbgg_VertexAttribute, 3).data;
    $indices[0] = cbgg_VertexAttribute__init_(1, 2, $rt_s(447));
    $indices[1] = cbgg_VertexAttribute__init_(4, 4, $rt_s(448));
    $indices[2] = cbgg_VertexAttribute__init_(16, 2, $rt_s(449));
    cbgg_Mesh_$callClinit();
    $vertexDataType = new cbgg_VertexAttributes;
    $vertexDataType.$mask8 = Long_fromInt(-1);
    $vertexDataType.$boneWeightUnits = (-1);
    $vertexDataType.$textureCoordinates = (-1);
    $j = $indices.length;
    if (!$j) {
        $defaultShader = new jl_IllegalArgumentException;
        jl_Throwable__init_($defaultShader, $rt_s(450));
        $rt_throw($defaultShader);
    }
    var$10 = $rt_createArray(cbgg_VertexAttribute, $j);
    var$11 = var$10.data;
    var$12 = 0;
    while (var$12 < $j) {
        var$11[var$12] = $indices[var$12];
        var$12 = var$12 + 1 | 0;
    }
    $vertexDataType.$attributes3 = var$10;
    $j = 0;
    var$12 = 0;
    while (var$12 < var$11.length) {
        a: {
            b: {
                var$13 = var$11[var$12];
                var$13.$offset0 = $j;
                switch (var$13.$type4) {
                    case 5120:
                    case 5121:
                        break;
                    case 5122:
                    case 5123:
                        var$14 = 2 * var$13.$numComponents | 0;
                        break a;
                    case 5124:
                    case 5125:
                    case 5127:
                    case 5128:
                    case 5129:
                    case 5130:
                    case 5131:
                        break b;
                    case 5126:
                    case 5132:
                        var$14 = 4 * var$13.$numComponents | 0;
                        break a;
                    default:
                        break b;
                }
                var$14 = var$13.$numComponents;
                break a;
            }
            var$14 = 0;
        }
        $j = $j + var$14 | 0;
        var$12 = var$12 + 1 | 0;
    }
    c: {
        d: {
            $vertexDataType.$vertexSize = $j;
            var$5.$autoBind = 1;
            var$5.$isInstanced = 0;
            var$5.$tmpV = cbgm_Vector3__init_();
            cbgg_Mesh$1_$callClinit();
            switch (cbgg_Mesh$1_$SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType.data[var$4.$ordinal0]) {
                case 1:
                    break;
                case 2:
                    var$5.$vertices1 = cbggg_VertexBufferObjectSubData__init_0(0, var$6, $vertexDataType);
                    var$5.$indices = cbggg_IndexBufferObjectSubData__init_(0, var$7);
                    var$5.$isVertexArray = 0;
                    break c;
                case 3:
                    var$5.$vertices1 = cbggg_VertexBufferObjectWithVAO__init_0(0, var$6, $vertexDataType);
                    var$5.$indices = cbggg_IndexBufferObjectSubData__init_(0, var$7);
                    var$5.$isVertexArray = 0;
                    break c;
                case 4:
                    break d;
                default:
                    break d;
            }
            var$5.$vertices1 = cbggg_VertexBufferObject__init_0(0, var$6, $vertexDataType);
            var$5.$indices = cbggg_IndexBufferObject__init_1(0, var$7);
            var$5.$isVertexArray = 0;
            break c;
        }
        var$13 = new cbggg_VertexArray;
        cbggg_VertexBufferObject__init_(var$13, 0, var$6, $vertexDataType);
        var$5.$vertices1 = var$13;
        $vertexDataType = new cbggg_IndexArray;
        cbggg_IndexBufferObject__init_($vertexDataType, var$7);
        var$5.$indices = $vertexDataType;
        var$5.$isVertexArray = 1;
    }
    cbgg_Mesh_addManagedMesh(cbg_Gdx_app, var$5);
    $this.$mesh = var$5;
    cbgm_Matrix4_setToOrtho2D($this.$projectionMatrix, 0.0, 0.0, cgxgbt_TeaGraphics_getWidth(cbg_Gdx_graphics), cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics));
    $this.$vertices2 = $rt_createFloatArray($size * 20 | 0);
    $indices = $rt_createShortArray(var$7);
    var$10 = $indices.data;
    $j = 0;
    $i = 0;
    while ($i < var$7) {
        var$10[$i] = $j;
        var$10[$i + 1 | 0] = ($j + 1 | 0) << 16 >> 16;
        $size = $i + 2 | 0;
        var$6 = ($j + 2 | 0) << 16 >> 16;
        var$10[$size] = var$6;
        var$10[$i + 3 | 0] = var$6;
        var$10[$i + 4 | 0] = ($j + 3 | 0) << 16 >> 16;
        var$10[$i + 5 | 0] = $j;
        $i = $i + 6 | 0;
        $j = ($j + 4 | 0) << 16 >> 16;
    }
    cbgg_Mesh_setIndices($this.$mesh, $indices);
    if ($defaultShader !== null)
        $this.$shader0 = $defaultShader;
    else {
        $this.$shader0 = cbggg_SpriteBatch_createDefaultShader();
        $this.$ownsShader = 1;
    }
    if (var$4 !== cbgg_Mesh$VertexDataType_VertexArray) {
        $this.$mesh.$indices.$bind();
        (cbgg_Mesh_getIndexData($this.$mesh)).$unbind();
    }
},
cbggg_SpriteBatch__init_0 = (var_0, var_1) => {
    let var_2 = new cbggg_SpriteBatch();
    cbggg_SpriteBatch__init_(var_2, var_0, var_1);
    return var_2;
},
cbggg_SpriteBatch_createDefaultShader = () => {
    let $shader, $vertexShader, $fragmentShader;
    cbggg_SpriteBatch_$callClinit();
    $shader = cbggg_ShaderProgram__init_($rt_s(451), $rt_s(452));
    if ($shader.$isCompiled)
        return $shader;
    $vertexShader = new jl_IllegalArgumentException;
    $fragmentShader = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($fragmentShader);
    jl_AbstractStringBuilder_append($fragmentShader, $rt_s(453));
    jl_AbstractStringBuilder_append($fragmentShader, cbggg_ShaderProgram_getLog($shader));
    jl_Throwable__init_($vertexShader, jl_AbstractStringBuilder_toString($fragmentShader));
    $rt_throw($vertexShader);
},
cbggg_SpriteBatch_begin = $this => {
    let var$1, var$2;
    if ($this.$drawing) {
        var$1 = new jl_IllegalStateException;
        jl_Throwable__init_(var$1, $rt_s(454));
        $rt_throw(var$1);
    }
    $this.$renderCalls = 0;
    cbg_Gdx_gl.$glDepthMask(0);
    var$2 = $this.$customShader;
    if (var$2 !== null)
        cbggg_ShaderProgram_bind(var$2);
    else
        cbggg_ShaderProgram_bind($this.$shader0);
    cbggg_SpriteBatch_setupMatrices($this);
    $this.$drawing = 1;
},
cbggg_SpriteBatch_end = $this => {
    let var$1, $gl;
    if (!$this.$drawing) {
        var$1 = new jl_IllegalStateException;
        jl_Throwable__init_(var$1, $rt_s(455));
        $rt_throw(var$1);
    }
    if ($this.$idx > 0)
        cbggg_SpriteBatch_flush($this);
    $this.$lastTexture = null;
    $this.$drawing = 0;
    $gl = cbg_Gdx_gl;
    $gl.$glDepthMask(1);
    if ($this.$blendingDisabled ? 0 : 1)
        $gl.$glDisable(3042);
},
cbggg_SpriteBatch_setColor = ($this, $tint) => {
    cbgg_Color_set($this.$color5, $tint);
    $this.$colorPacked = cbgg_Color_toFloatBits($tint);
},
cbggg_SpriteBatch_getColor = $this => {
    return $this.$color5;
},
cbggg_SpriteBatch_draw = ($this, $texture, $spriteVertices, $offset, $count) => {
    let $verticesLength, $copyCount;
    if (!$this.$drawing) {
        $texture = new jl_IllegalStateException;
        jl_Throwable__init_($texture, $rt_s(456));
        $rt_throw($texture);
    }
    $verticesLength = $this.$vertices2.data.length;
    if ($texture !== $this.$lastTexture) {
        cbggg_SpriteBatch_flush($this);
        $this.$lastTexture = $texture;
        $this.$invTexWidth = 1.0 / cbgg_Texture_getWidth($texture);
        $this.$invTexHeight = 1.0 / cbgg_Texture_getHeight($texture);
        $copyCount = $verticesLength;
    } else {
        $copyCount = $verticesLength - $this.$idx | 0;
        if (!$copyCount) {
            cbggg_SpriteBatch_flush($this);
            $copyCount = $verticesLength;
        }
    }
    $copyCount = jl_Math_min($copyCount, $count);
    jl_System_fastArraycopy($spriteVertices, $offset, $this.$vertices2, $this.$idx, $copyCount);
    $this.$idx = $this.$idx + $copyCount | 0;
    $count = $count - $copyCount | 0;
    while ($count > 0) {
        $offset = $offset + $copyCount | 0;
        cbggg_SpriteBatch_flush($this);
        $copyCount = jl_Math_min($verticesLength, $count);
        jl_System_fastArraycopy($spriteVertices, $offset, $this.$vertices2, 0, $copyCount);
        $this.$idx = $this.$idx + $copyCount | 0;
        $count = $count - $copyCount | 0;
    }
},
cbggg_SpriteBatch_flush = $this => {
    let $count, $spritesInBatch, $mesh, var$4, var$5, $indicesBuffer, var$7, var$8, var$9, var$10;
    $count = $this.$idx;
    if (!$count)
        return;
    $this.$renderCalls = $this.$renderCalls + 1 | 0;
    $this.$totalRenderCalls = $this.$totalRenderCalls + 1 | 0;
    $spritesInBatch = $count / 20 | 0;
    if ($spritesInBatch > $this.$maxSpritesInBatch)
        $this.$maxSpritesInBatch = $spritesInBatch;
    $count = $spritesInBatch * 6 | 0;
    cbgg_GLTexture_bind($this.$lastTexture);
    $mesh = $this.$mesh;
    var$4 = $this.$vertices2;
    var$5 = $this.$idx;
    $mesh.$vertices1.$setVertices(var$4, 0, var$5);
    if ($this.$currentDataType === cbgg_Mesh$VertexDataType_VertexArray) {
        $indicesBuffer = $mesh.$indices.$getBuffer(1);
        jn_Buffer_position($indicesBuffer, 0);
        jn_Buffer_limit($indicesBuffer, $count);
    }
    if ($this.$blendingDisabled)
        cbg_Gdx_gl.$glDisable(3042);
    else {
        cbg_Gdx_gl.$glEnable(3042);
        $spritesInBatch = $this.$blendSrcFunc;
        if ($spritesInBatch != (-1))
            cbg_Gdx_gl.$glBlendFuncSeparate($spritesInBatch, $this.$blendDstFunc, $this.$blendSrcFuncAlpha, $this.$blendDstFuncAlpha);
    }
    var$7 = $this.$customShader;
    if (var$7 === null)
        var$7 = $this.$shader0;
    var$8 = $mesh.$autoBind;
    if ($count) {
        if (var$8) {
            $indicesBuffer = null;
            var$9 = null;
            $mesh.$vertices1.$bind0(var$7, $indicesBuffer);
            $indicesBuffer = $mesh.$instances;
            if ($indicesBuffer !== null && $indicesBuffer.$getNumInstances() > 0)
                $mesh.$instances.$bind0(var$7, var$9);
            if ($mesh.$indices.$getNumIndices() > 0)
                $mesh.$indices.$bind();
        }
        if ($mesh.$isVertexArray) {
            if ($mesh.$indices.$getNumIndices() <= 0)
                cbg_Gdx_gl20.$glDrawArrays(4, 0, $count);
            else {
                $indicesBuffer = $mesh.$indices.$getBuffer(0);
                var$5 = $indicesBuffer.$position0;
                var$10 = $indicesBuffer;
                jn_Buffer_position(var$10, 0);
                cbg_Gdx_gl20.$glDrawElements(4, $count, 5123, $indicesBuffer);
                jn_Buffer_position(var$10, var$5);
            }
        } else {
            $spritesInBatch = 0;
            if ($mesh.$isInstanced)
                $spritesInBatch = $mesh.$instances.$getNumInstances();
            if ($mesh.$indices.$getNumIndices() <= 0) {
                if ($mesh.$isInstanced && $spritesInBatch > 0)
                    cbg_Gdx_gl30.$glDrawArraysInstanced(4, 0, $count, $spritesInBatch);
                else
                    cbg_Gdx_gl20.$glDrawArrays(4, 0, $count);
            } else {
                if (($count + 0 | 0) > $mesh.$indices.$getNumMaxIndices()) {
                    var$9 = new cbgu_GdxRuntimeException;
                    $indicesBuffer = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($indicesBuffer);
                    jl_AbstractStringBuilder_append($indicesBuffer, $rt_s(457));
                    $indicesBuffer = jl_StringBuilder_append1($indicesBuffer, $count);
                    jl_AbstractStringBuilder_append($indicesBuffer, $rt_s(458));
                    var$10 = jl_StringBuilder_append1($indicesBuffer, 0);
                    jl_AbstractStringBuilder_append(var$10, $rt_s(459));
                    $mesh = jl_StringBuilder_append1(var$10, $mesh.$indices.$getNumMaxIndices());
                    jl_AbstractStringBuilder_append($mesh, $rt_s(17));
                    jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString($mesh));
                    $rt_throw(var$9);
                }
                if ($mesh.$isInstanced && $spritesInBatch > 0)
                    cbg_Gdx_gl30.$glDrawElementsInstanced(4, $count, 5123, 0, $spritesInBatch);
                else
                    cbg_Gdx_gl20.$glDrawElements0(4, $count, 5123, 0);
            }
        }
        if (var$8) {
            $indicesBuffer = null;
            var$9 = null;
            $mesh.$vertices1.$unbind0(var$7, $indicesBuffer);
            $indicesBuffer = $mesh.$instances;
            if ($indicesBuffer !== null && $indicesBuffer.$getNumInstances() > 0)
                $mesh.$instances.$unbind0(var$7, var$9);
            if ($mesh.$indices.$getNumIndices() > 0)
                $mesh.$indices.$unbind();
        }
    }
    $this.$idx = 0;
},
cbggg_SpriteBatch_setBlendFunction = ($this, $srcFunc, $dstFunc) => {
    if (!($this.$blendSrcFunc == $srcFunc && $this.$blendDstFunc == $dstFunc && $this.$blendSrcFuncAlpha == $srcFunc && $this.$blendDstFuncAlpha == $dstFunc)) {
        cbggg_SpriteBatch_flush($this);
        $this.$blendSrcFunc = $srcFunc;
        $this.$blendDstFunc = $dstFunc;
        $this.$blendSrcFuncAlpha = $srcFunc;
        $this.$blendDstFuncAlpha = $dstFunc;
    }
},
cbggg_SpriteBatch_getProjectionMatrix = $this => {
    return $this.$projectionMatrix;
},
cbggg_SpriteBatch_setupMatrices = $this => {
    let var$1;
    cbgm_Matrix4_mul(cbgm_Matrix4_set($this.$combinedMatrix, $this.$projectionMatrix.$val), $this.$transformMatrix);
    var$1 = $this.$customShader;
    if (var$1 !== null) {
        cbggg_ShaderProgram_setUniformMatrix(var$1, $rt_s(460), $this.$combinedMatrix);
        cbggg_ShaderProgram_setUniformi($this.$customShader, $rt_s(461), 0);
    } else {
        cbggg_ShaderProgram_setUniformMatrix($this.$shader0, $rt_s(460), $this.$combinedMatrix);
        cbggg_ShaderProgram_setUniformi($this.$shader0, $rt_s(461), 0);
    }
},
cbggg_SpriteBatch_setShader = ($this, $shader) => {
    if ($shader === $this.$customShader)
        return;
    if ($this.$drawing)
        cbggg_SpriteBatch_flush($this);
    $this.$customShader = $shader;
    if ($this.$drawing) {
        if ($shader !== null)
            cbggg_ShaderProgram_bind($shader);
        else
            cbggg_ShaderProgram_bind($this.$shader0);
        cbggg_SpriteBatch_setupMatrices($this);
    }
},
cbggg_SpriteBatch_getShader = $this => {
    let var$1;
    var$1 = $this.$customShader;
    if (var$1 !== null)
        return var$1;
    return $this.$shader0;
},
cbggg_SpriteBatch__clinit_ = () => {
    cbggg_SpriteBatch_defaultVertexDataType = cbgg_Mesh$VertexDataType_VertexBufferObject;
    cbggg_SpriteBatch_overrideVertexType = null;
};
function cbggg_ParticleEffect() {
    let a = this; jl_Object.call(a);
    a.$emitters = null;
    a.$ownsTexture = 0;
    a.$xSizeScale = 0.0;
    a.$ySizeScale = 0.0;
    a.$motionScale = 0.0;
}
let cbggg_ParticleEffect_start = $this => {
    let $i, $n, var$3;
    $i = 0;
    $n = $this.$emitters.$size0;
    while ($i < $n) {
        var$3 = cbgu_Array_get($this.$emitters, $i);
        var$3.$firstUpdate = 1;
        var$3.$allowCompletion = 0;
        cbggg_ParticleEmitter_restart(var$3);
        $i = $i + 1 | 0;
    }
},
cbggg_ParticleEffect_draw = ($this, $spriteBatch) => {
    let $i, $n, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    $i = 0;
    $n = $this.$emitters.$size0;
    var$4 = $spriteBatch;
    while ($i < $n) {
        var$5 = cbgu_Array_get($this.$emitters, $i);
        if (var$5.$premultipliedAlpha)
            cbggg_SpriteBatch_setBlendFunction(var$4, 1, 771);
        else if (!var$5.$additive)
            cbggg_SpriteBatch_setBlendFunction(var$4, 770, 771);
        else
            cbggg_SpriteBatch_setBlendFunction(var$4, 770, 1);
        var$6 = var$5.$particles;
        var$7 = var$5.$active0.data;
        var$8 = 0;
        var$9 = var$7.length;
        while (var$8 < var$9) {
            if (var$7[var$8]) {
                var$10 = var$6.data[var$8];
                cbggg_SpriteBatch_draw(var$4, var$10.$texture, cbggg_Sprite_getVertices(var$10), 0, 20);
            }
            var$8 = var$8 + 1 | 0;
        }
        if (var$5.$cleansUpBlendFunction && !(!var$5.$additive && !var$5.$premultipliedAlpha))
            cbggg_SpriteBatch_setBlendFunction(var$4, 770, 771);
        $i = $i + 1 | 0;
    }
},
cbggg_ParticleEffect_setPosition = ($this, $x, $y) => {
    let $i, $n, var$5, var$6, var$7, var$8, var$9, var$10;
    $i = 0;
    $n = $this.$emitters.$size0;
    while ($i < $n) {
        a: {
            var$5 = cbgu_Array_get($this.$emitters, $i);
            if (var$5.$attached) {
                var$6 = $x - var$5.$x7;
                var$7 = $y - var$5.$y7;
                var$8 = var$5.$active0.data;
                var$9 = 0;
                var$10 = var$8.length;
                while (true) {
                    if (var$9 >= var$10)
                        break a;
                    if (var$8[var$9])
                        cbggg_Sprite_translate(var$5.$particles.data[var$9], var$6, var$7);
                    var$9 = var$9 + 1 | 0;
                }
            }
        }
        var$5.$x7 = $x;
        var$5.$y7 = $y;
        $i = $i + 1 | 0;
    }
},
cbggg_ParticleEffect_newEmitter = ($this, $reader) => {
    let var$2, var$3, var$4;
    var$2 = new cbggg_ParticleEmitter;
    var$2.$delayValue = new cbggg_ParticleEmitter$RangedNumericValue;
    var$3 = new cbggg_ParticleEmitter$IndependentScaledNumericValue;
    cbggg_ParticleEmitter$ScaledNumericValue__init_0(var$3);
    var$2.$lifeOffsetValue = var$3;
    var$2.$durationValue = new cbggg_ParticleEmitter$RangedNumericValue;
    var$3 = new cbggg_ParticleEmitter$IndependentScaledNumericValue;
    cbggg_ParticleEmitter$ScaledNumericValue__init_0(var$3);
    var$2.$lifeValue = var$3;
    var$2.$emissionValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$2.$xScaleValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$2.$yScaleValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$2.$rotationValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$2.$velocityValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$2.$angleValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$2.$windValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$2.$gravityValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$2.$transparencyValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$3 = new cbggg_ParticleEmitter$GradientColorValue;
    var$3.$colors = $rt_createFloatArrayFromData([1.0, 1.0, 1.0]);
    var$4 = $rt_createFloatArray(1);
    var$4.data[0] = 0.0;
    var$3.$timeline0 = var$4;
    var$3.$alwaysActive = 1;
    var$2.$tintValue = var$3;
    var$2.$xOffsetValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$2.$yOffsetValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$2.$spawnWidthValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$2.$spawnHeightValue = cbggg_ParticleEmitter$ScaledNumericValue__init_();
    var$3 = new cbggg_ParticleEmitter$SpawnShapeValue;
    var$3.$shape = cbggg_ParticleEmitter$SpawnShape_point;
    var$3.$side = cbggg_ParticleEmitter$SpawnEllipseSide_both;
    var$2.$spawnShapeValue = var$3;
    var$2.$spriteMode = cbggg_ParticleEmitter$SpriteMode_single;
    var$2.$maxParticleCount = 4;
    var$2.$duration0 = 1.0;
    var$2.$additive = 1;
    var$2.$premultipliedAlpha = 0;
    var$2.$cleansUpBlendFunction = 1;
    var$2.$sprites = cbgu_Array__init_();
    var$2.$imagePaths = cbgu_Array__init_();
    var$2.$durationValue.$alwaysActive = 1;
    var$2.$emissionValue.$alwaysActive = 1;
    var$2.$lifeValue.$alwaysActive = 1;
    var$2.$xScaleValue.$alwaysActive = 1;
    var$2.$transparencyValue.$alwaysActive = 1;
    var$2.$spawnShapeValue.$alwaysActive = 1;
    var$2.$spawnWidthValue.$alwaysActive = 1;
    var$2.$spawnHeightValue.$alwaysActive = 1;
    cbggg_ParticleEmitter_load(var$2, $reader);
    return var$2;
};
function cvd_Trail() {
    let a = this; jl_Object.call(a);
    a.$drawer = null;
    a.$segments = null;
    a.$lifetime = 0.0;
    a.$width4 = 0.0;
    a.$length5 = 0;
    a.$anchorX = 0.0;
    a.$anchorY = 0.0;
    a.$anchorAngle = 0.0;
    a.$pool = null;
    a.$startColor = null;
    a.$endColor = null;
    a.$col1 = null;
    a.$col2 = null;
}
let cvd_Trail__init_ = ($this, $batch, $life, $width, $length) => {
    let var$5, $p, var$7, var$8, var$9, var$10;
    var$5 = new cvd_Trail$SegmentPool;
    var$5.$this$07 = $this;
    cbgu_Pool__init_(var$5, 16, 2147483647);
    $this.$pool = var$5;
    $p = cbgg_Pixmap__init_(1, 1, cbgg_Pixmap$Format_RGBA4444);
    var$5 = $p.$nativePixmap.$nativePixmap0;
    Gdx.Gdx.prototype.g2d_set_pixel(var$5.$basePtr, 0, 0, (-1));
    cbggg_Gdx2DPixmapNative_copyHeapToBuffer(var$5);
    var$7 = new ses_ShapeDrawer;
    var$8 = new cbggg_TextureRegion;
    var$9 = new cbgg_Texture;
    cbgg_Texture_$callClinit();
    cbgg_Texture__init_(var$9, cbggg_PixmapTextureData__init_($p, null, 0, 0));
    cbggg_TextureRegion__init_(var$8, var$9);
    var$5 = new ses_DefaultSideEstimator;
    var$5.$minimumSides = 20;
    var$5.$maximumSides = 4000;
    var$5.$sideMultiplier = 1.0;
    ses_AbstractShapeDrawer_$callClinit();
    var$7.$defaultLineWidth = 1.0;
    var$7.$defaultSnap = 0;
    if (!$rt_isInstance($batch, cbggg_PolygonBatch)) {
        var$10 = ses_BatchManager__init_0($batch, var$8);
        var$7.$batchManager0 = var$10;
        $batch = new ses_FilledPolygonDrawer$BatchFilledPolygonDrawer;
        ses_DrawerTemplate__init_($batch, var$10, var$7);
        var$7.$filledPolygonDrawer = $batch;
    } else {
        var$10 = new ses_PolygonBatchManager;
        ses_BatchManager__init_(var$10, $batch, var$8);
        var$10.$triangleCount = 0;
        var$10.$triangles = $rt_createShortArray(jl_Math_ceil((var$10.$verts.data.length / 5 | 0) * 3 | 0) | 0);
        $batch = new ses_FilledPolygonDrawer$PolygonBatchFilledPolygonDrawer;
        ses_DrawerTemplate__init_($batch, var$10, var$7);
        var$7.$filledPolygonDrawer = $batch;
        var$7.$batchManager0 = var$10;
    }
    $batch = new ses_LineDrawer;
    ses_DrawerTemplate__init_($batch, var$7.$batchManager0, var$7);
    var$7.$lineDrawer = $batch;
    $batch = new ses_PathDrawer;
    ses_DrawerTemplate__init_($batch, var$7.$batchManager0, var$7);
    $batch.$path = cbgu_FloatArray__init_();
    $batch.$tempPath = cbgu_FloatArray__init_();
    var$7.$pathDrawer = $batch;
    $batch = new ses_PolygonDrawer;
    ses_DrawerTemplate__init_($batch, var$7.$batchManager0, var$7);
    var$7.$polygonDrawer = $batch;
    var$7.$sideEstimator = var$5;
    var$7.$rectangleCorners = $rt_createFloatArray(8);
    $this.$drawer = var$7;
    $batch = new cbgu_DelayedRemovalArray;
    cbgu_Array__init_3($batch, 1, $length, $rt_cls(cvd_Trail$Segment));
    $batch.$remove2 = cbgu_IntArray__init_(0);
    $this.$segments = $batch;
    $this.$lifetime = $life;
    $this.$width4 = $width;
    $this.$length5 = $length;
    cbgg_Pixmap_dispose($p);
    $this.$startColor = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    $this.$endColor = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    $this.$col1 = new cbgg_Color;
    $this.$col2 = new cbgg_Color;
},
cvd_Trail__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new cvd_Trail();
    cvd_Trail__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
cvd_Trail_setAnchor = ($this, $x, $y) => {
    let var$3, var$4, var$5, var$6, var$7;
    var$3 = $y - $this.$anchorY;
    var$4 = $x - $this.$anchorX;
    var$5 = var$3 / var$4;
    if (var$5 === var$5) {
        var$6 = var$5 - var$5;
        if (var$6 !== var$6)
            var$4 = 0.0;
    } else
        var$5 = var$3 !== var$4 ? (-1.0) : 1.0;
    var$7 = $rt_compare(var$4, 0.0);
    if (var$7 > 0)
        var$6 = cbgm_MathUtils_atanUnchecked(var$5);
    else if (var$7 < 0)
        var$6 = var$3 < 0.0 ? cbgm_MathUtils_atanUnchecked(var$5) - 3.1415927410125732 : cbgm_MathUtils_atanUnchecked(var$5) + 3.1415927410125732;
    else {
        var$7 = $rt_compare(var$3, 0.0);
        var$6 = var$7 > 0 ? var$4 + 1.5707963705062866 : var$7 >= 0 ? var$4 + var$3 : var$4 - 1.5707963705062866;
    }
    $this.$anchorAngle = var$6 * 57.2957763671875 + 90.0;
    $this.$anchorX = $x;
    $this.$anchorY = $y;
},
cvd_Trail_draw = $this => {
    let $i, $a, var$3, $b, $sin, $cos, $halfWidth, $dX, $dY, $x1, $y1, $x2, $y2, $x3, $y3, $x4, $y4;
    $i = 0;
    while (true) {
        $a = $this.$segments;
        if ($i >= ($a.$size0 - 1 | 0))
            break;
        $a = cbgu_Array_get($a, $i);
        var$3 = $this.$segments;
        $i = $i + 1 | 0;
        $b = cbgu_Array_get(var$3, $i);
        if ($a !== null && $b !== null) {
            $sin = cbgm_MathUtils_sinDeg($a.$angle);
            $cos = cbgm_MathUtils_cosDeg($a.$angle);
            $halfWidth = cbgm_MathUtils_lerp($this.$width4 / 2.0, 0.0, $a.$life / $this.$lifetime);
            $dX = $halfWidth * $cos;
            $dY = $halfWidth * $sin;
            $cos = $a.$x5;
            $x1 = $cos + $dX;
            $halfWidth = $a.$y5;
            $y1 = $halfWidth + $dY;
            $x2 = $cos - $dX;
            $y2 = $halfWidth - $dY;
            $cos = cbgm_MathUtils_sinDeg($b.$angle);
            $halfWidth = cbgm_MathUtils_cosDeg($b.$angle);
            $dX = cbgm_MathUtils_lerp($this.$width4 / 2.0, 0.0, $b.$life / $this.$lifetime);
            $halfWidth = $dX * $halfWidth;
            $cos = $dX * $cos;
            $dX = $b.$x5;
            $x3 = $dX - $halfWidth;
            $dY = $b.$y5;
            $y3 = $dY - $cos;
            $x4 = $dX + $halfWidth;
            $y4 = $dY + $cos;
            cbgg_Color_lerp(cbgg_Color_set($this.$col1, $this.$startColor), $this.$endColor, $a.$life / $this.$lifetime);
            cbgg_Color_lerp(cbgg_Color_set($this.$col2, $this.$startColor), $this.$endColor, $b.$life / $this.$lifetime);
            $a = $this.$drawer;
            var$3 = $this.$col1;
            ses_ShapeDrawer_filledTriangle($a, $x1, $y1, $x2, $y2, $x3, $y3, var$3, var$3, $this.$col2);
            $a = $this.$drawer;
            var$3 = $this.$col2;
            ses_ShapeDrawer_filledTriangle($a, $x3, $y3, $x4, $y4, $x1, $y1, var$3, var$3, $this.$col1);
        }
    }
};
function cgtt_Font() {
    let a = this; jl_Object.call(a);
    a.$sharing = 0;
    a.$mapping = null;
    a.$nameLookup = null;
    a.$namesByCharCode = null;
    a.$defaultValue = null;
    a.$parents = null;
    a.$distanceField = null;
    a.$isMono = 0;
    a.$kerning = null;
    a.$actualCrispness = 0.0;
    a.$distanceFieldCrispness = 0.0;
    a.$cellWidth = 0.0;
    a.$cellHeight = 0.0;
    a.$originalCellWidth = 0.0;
    a.$originalCellHeight = 0.0;
    a.$scaleX = 0.0;
    a.$scaleY = 0.0;
    a.$descent = 0.0;
    a.$solidBlock = 0;
    a.$family = null;
    a.$colorLookup = null;
    a.$integerPosition = 0;
    a.$obliqueStrength = 0.0;
    a.$boldStrength = 0.0;
    a.$outlineStrength = 0.0;
    a.$boxDrawingBreadth = 0.0;
    a.$dropShadowOffset = null;
    a.$name9 = null;
    a.$whiteBlock = null;
    a.$PACKED_BLACK = 0.0;
    a.$PACKED_WHITE = 0.0;
    a.$PACKED_ERROR_COLOR = 0.0;
    a.$PACKED_WARN_COLOR = 0.0;
    a.$PACKED_NOTE_COLOR = 0.0;
    a.$PACKED_SHADOW_COLOR = 0.0;
    a.$xAdjust = 0.0;
    a.$yAdjust = 0.0;
    a.$widthAdjust = 0.0;
    a.$heightAdjust = 0.0;
    a.$underX = 0.0;
    a.$underY = 0.0;
    a.$underLength = 0.0;
    a.$underBreadth = 0.0;
    a.$strikeX = 0.0;
    a.$strikeY = 0.0;
    a.$strikeLength = 0.0;
    a.$strikeBreadth = 0.0;
    a.$fancyX = 0.0;
    a.$fancyY = 0.0;
    a.$inlineImageOffsetX = 0.0;
    a.$inlineImageOffsetY = 0.0;
    a.$inlineImageXAdvance = 0.0;
    a.$inlineImageStretch = 0.0;
    a.$omitCurlyBraces = 0;
    a.$enableSquareBrackets = 0;
    a.$vertices = null;
    a.$tempLayout = null;
    a.$glyphBuffer = null;
    a.$historyBuffer = null;
    a.$labeledStates = null;
    a.$storedStates = null;
    a.$breakChars = null;
    a.$spaceChars = null;
    a.$shader = null;
}
let cgtt_Font_canUseTextures = 0,
cgtt_Font_smoothingValues = null,
cgtt_Font_latestTexture = null,
cgtt_Font_CJK_SPACE_INSERTER = null,
cgtt_Font_$callClinit = () => {
    cgtt_Font_$callClinit = $rt_eraseClinit(cgtt_Font);
    cgtt_Font__clinit_();
},
cgtt_Font__init_1 = ($this, $fntName) => {
    cgtt_Font_$callClinit();
    cgtt_Font__init_($this, $fntName, cgtt_Font$DistanceFieldType_STANDARD, 0.0, 0.0, 0.0, 0.0, 0);
},
cgtt_Font__init_0 = var_0 => {
    let var_1 = new cgtt_Font();
    cgtt_Font__init_1(var_1, var_0);
    return var_1;
},
cgtt_Font__init_ = ($this, $fntName, $distanceField, $xAdjust, $yAdjust, $widthAdjust, $heightAdjust, $makeGridGlyphs) => {
    let var$8;
    cgtt_Font_$callClinit();
    $this.$sharing = 0;
    $this.$distanceField = cgtt_Font$DistanceFieldType_STANDARD;
    $this.$actualCrispness = 1.0;
    $this.$distanceFieldCrispness = 1.0;
    $this.$cellWidth = 1.0;
    $this.$cellHeight = 1.0;
    $this.$originalCellWidth = 1.0;
    $this.$originalCellHeight = 1.0;
    $this.$scaleX = 1.0;
    $this.$scaleY = 1.0;
    $this.$descent = 0.0;
    $this.$solidBlock = 9608;
    $this.$colorLookup = cgtt_ColorLookup_DESCRIPTIVE;
    $this.$integerPosition = 0;
    $this.$obliqueStrength = 1.0;
    $this.$boldStrength = 1.0;
    $this.$outlineStrength = 1.0;
    $this.$boxDrawingBreadth = 1.0;
    $this.$dropShadowOffset = cbgm_Vector2__init_(1.0, (-2.0));
    $this.$name9 = $rt_s(462);
    $this.$whiteBlock = null;
    $this.$PACKED_BLACK = cbgu_NumberUtils_intBitsToFloat((-33554432));
    $this.$PACKED_WHITE = cbgg_Color_WHITE_FLOAT_BITS;
    $this.$PACKED_ERROR_COLOR = (-4.253658886872954E37);
    $this.$PACKED_WARN_COLOR = (-4.812999065958618E37);
    $this.$PACKED_NOTE_COLOR = (-1.2264253857642312E38);
    $this.$PACKED_SHADOW_COLOR = 5.354443060930501E37;
    $this.$inlineImageOffsetX = 0.0;
    $this.$inlineImageOffsetY = 0.0;
    $this.$inlineImageXAdvance = 0.0;
    $this.$inlineImageStretch = 1.0;
    $this.$omitCurlyBraces = 1;
    $this.$enableSquareBrackets = 1;
    $this.$vertices = $rt_createFloatArray(20);
    $this.$tempLayout = cgtt_Layout__init_();
    $this.$glyphBuffer = cbgu_LongArray__init_(128);
    $this.$historyBuffer = cbgu_LongArray__init_(64);
    $this.$labeledStates = cbgu_ObjectLongMap__init_(16);
    $this.$storedStates = cbgu_ObjectLongMap__init_(16);
    $this.$breakChars = cbgu_CharArray_with($rt_createCharArrayFromData([9, 13, 32, 45, 173, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8200, 8201, 8202, 8203, 8208, 8210, 8211, 8212, 8231]));
    $this.$spaceChars = cbgu_CharArray_with($rt_createCharArrayFromData([9, 13, 32, 8192, 8193, 8194, 8195, 8196, 8197, 8198, 8200, 8201, 8202, 8203]));
    $this.$shader = null;
    cgtt_Font_setDistanceField($this, $distanceField);
    $distanceField = cgxgbt_TeaFiles_internal(cbg_Gdx_files, $fntName);
    if (cgxgbt_TeaFileHandle_exists($distanceField)) {
        cgtt_Font_loadFNT($this, $distanceField, $xAdjust, $yAdjust, $widthAdjust, $heightAdjust, $makeGridGlyphs);
        return;
    }
    $distanceField = new jl_RuntimeException;
    var$8 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$8);
    jl_AbstractStringBuilder_append(var$8, $rt_s(463));
    jl_AbstractStringBuilder_append(var$8, $fntName);
    jl_Throwable__init_($distanceField, jl_AbstractStringBuilder_toString(var$8));
    $rt_throw($distanceField);
},
cgtt_Font__init_2 = (var_0, var_1, var_2, var_3, var_4, var_5, var_6) => {
    let var_7 = new cgtt_Font();
    cgtt_Font__init_(var_7, var_0, var_1, var_2, var_3, var_4, var_5, var_6);
    return var_7;
},
cgtt_Font_loadFNT = ($this, $fntHandle, $xAdjust, $yAdjust, $widthAdjust, $heightAdjust, $makeGridGlyphs) => {
    let $fnt, $idx, $i, $size, $baseline, $p, $pages, $i_0, $textureName, $gr, $minWidth, $c, $x, $y, $w, $h, $xo, $yo, $a, $kernings, $first, $second, $amount, $newline, $temp, $block;
    a: {
        $fnt = cgxgbt_TeaFileHandle_readString($fntHandle, $rt_s(464));
        $this.$xAdjust = $xAdjust;
        $this.$yAdjust = $yAdjust;
        $this.$widthAdjust = $widthAdjust;
        $this.$heightAdjust = $heightAdjust;
        $idx = cgttu_StringUtils_indexAfter($fnt, $rt_s(465), 0);
        $i = cgttu_StringUtils_indexAfter($fnt, $rt_s(466), $idx + 1 | 0);
        cgttu_StringUtils_intFromDec($fnt, $idx, $i);
        $size = cgttu_StringUtils_indexAfter($fnt, $rt_s(466), $i + 1 | 0);
        cgttu_StringUtils_intFromDec($fnt, $i, $size);
        $i = cgttu_StringUtils_indexAfter($fnt, $rt_s(466), $size + 1 | 0);
        cgttu_StringUtils_intFromDec($fnt, $size, $i);
        $size = cgttu_StringUtils_indexAfter($fnt, $rt_s(467), $i + 1 | 0);
        cgttu_StringUtils_intFromDec($fnt, $i, $size);
        $i = cgttu_StringUtils_indexAfter($fnt, $rt_s(468), $size);
        cgttu_StringUtils_floatFromDec($fnt, $size, $i);
        $size = cgttu_StringUtils_indexAfter($fnt, $rt_s(469), $i);
        $baseline = cgttu_StringUtils_floatFromDec($fnt, $i, $size);
        $this.$descent = 0.0;
        $p = cgttu_StringUtils_indexAfter($fnt, $rt_s(470), $size);
        $pages = cgttu_StringUtils_intFromDec($fnt, $size, $p);
        $fntHandle = $this.$parents;
        if (!($fntHandle !== null && $fntHandle.$size0 >= $pages)) {
            if ($fntHandle !== null)
                cbgu_Array_clear($fntHandle);
            else
                $this.$parents = cbgu_Array__init_4(1, $pages, $rt_cls(cbggg_TextureRegion));
            $i_0 = 0;
            while (true) {
                if ($i_0 >= $pages)
                    break a;
                $size = cgttu_StringUtils_indexAfter($fnt, $rt_s(471), $p);
                $p = jl_String_indexOf($fnt, 34, $size);
                $textureName = jl_String_substring($fnt, $size, $p);
                cgtt_Font_$callClinit();
                if (!cgtt_Font_canUseTextures) {
                    $fntHandle = cbgu_Array_of(1, 1, $rt_cls(cbggg_TextureRegion));
                    $this.$parents = $fntHandle;
                    cbgu_Array_add($fntHandle, cgtt_Font$TexturelessRegion__init_());
                } else {
                    $fntHandle = cgxgbt_TeaFiles_internal(cbg_Gdx_files, $textureName);
                    if (!cgxgbt_TeaFileHandle_exists($fntHandle))
                        break;
                    cbgu_Array_add($this.$parents, cbggg_TextureRegion__init_1(cbgg_Texture__init_3($fntHandle)));
                    if (cgtt_Font_getDistanceField($this) !== cgtt_Font$DistanceFieldType_STANDARD) {
                        $fntHandle = cbggg_TextureRegion_getTexture(cbgu_Array_peek($this.$parents));
                        $gr = cbgg_Texture$TextureFilter_Linear;
                        cbgg_GLTexture_setFilter($fntHandle, $gr, $gr);
                    }
                }
                $i_0 = $i_0 + 1 | 0;
            }
            $rt_throw(jl_RuntimeException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(472)), $textureName))));
        }
    }
    $size = cgttu_StringUtils_indexAfter($fnt, $rt_s(473), $p);
    $i = cgttu_StringUtils_indexAfter($fnt, $rt_s(474), $size);
    $size = cgttu_StringUtils_intFromDec($fnt, $size, $i);
    $this.$mapping = cbgu_IntMap__init_($size);
    $minWidth = 2.147483648E9;
    $i_0 = 0;
    b: {
        while (true) {
            if ($i_0 >= $size)
                break b;
            if ($i == jl_String_length($fnt))
                break;
            $p = cgttu_StringUtils_indexAfter($fnt, $rt_s(475), $i);
            $c = cgttu_StringUtils_intFromDec($fnt, $i, $p);
            $i = cgttu_StringUtils_indexAfter($fnt, $rt_s(476), $p);
            $x = cgttu_StringUtils_floatFromDec($fnt, $p, $i);
            $p = cgttu_StringUtils_indexAfter($fnt, $rt_s(477), $i);
            $y = cgttu_StringUtils_floatFromDec($fnt, $i, $p);
            $i = cgttu_StringUtils_indexAfter($fnt, $rt_s(478), $p);
            $w = cgttu_StringUtils_floatFromDec($fnt, $p, $i);
            $p = cgttu_StringUtils_indexAfter($fnt, $rt_s(479), $i);
            $h = cgttu_StringUtils_floatFromDec($fnt, $i, $p);
            $i = cgttu_StringUtils_indexAfter($fnt, $rt_s(480), $p);
            $xo = cgttu_StringUtils_floatFromDec($fnt, $p, $i);
            $p = cgttu_StringUtils_indexAfter($fnt, $rt_s(481), $i);
            $yo = cgttu_StringUtils_floatFromDec($fnt, $i, $p);
            $pages = cgttu_StringUtils_indexAfter($fnt, $rt_s(482), $p);
            $a = cgttu_StringUtils_floatFromDec($fnt, $p, $pages);
            $i = cgttu_StringUtils_indexAfter($fnt, $rt_s(474), $pages);
            $p = cgttu_StringUtils_intFromDec($fnt, $pages, $i);
            if ($c != 9608)
                $minWidth = jl_Math_min0($minWidth, $a + $widthAdjust);
            $gr = cgtt_Font$GlyphRegion__init_3(cbgu_Array_get($this.$parents, $p), $x, $y, $w, $h);
            if ($c == 10) {
                $a = 0.0;
                $gr.$offsetX = 0.0;
            } else if ($makeGridGlyphs && cgttu_BlockUtils_isBlockGlyph($c))
                $gr.$offsetX = NaN;
            else
                $gr.$offsetX = $xo + $xAdjust;
            $gr.$offsetY = $yo + $yAdjust;
            $a = $a + $widthAdjust;
            $gr.$xAdvance0 = $a;
            $this.$cellWidth = jl_Math_max0($a, $this.$cellWidth);
            $this.$cellHeight = jl_Math_max0($h + $heightAdjust, $this.$cellHeight);
            if ($w * $h > 1.0)
                $this.$descent = jl_Math_min0($baseline - $h - $yo, $this.$descent);
            cbgu_IntMap_put($this.$mapping, $c, $gr);
            if ($c == 91)
                cbgu_IntMap_put($this.$mapping, 2, $gr);
            $i_0 = $i_0 + 1 | 0;
        }
    }
    c: {
        $size = cgttu_StringUtils_indexAfter($fnt, $rt_s(483), 0);
        if ($size < jl_String_length($fnt)) {
            $i = cgttu_StringUtils_indexAfter($fnt, $rt_s(484), $size);
            $kernings = cgttu_StringUtils_intFromDec($fnt, $size, $i);
            if ($kernings >= 1) {
                $this.$kerning = cbgu_IntFloatMap__init_3($kernings);
                $i_0 = 0;
                while (true) {
                    if ($i_0 >= $kernings)
                        break c;
                    $size = cgttu_StringUtils_indexAfter($fnt, $rt_s(485), $i);
                    $first = cgttu_StringUtils_intFromDec($fnt, $i, $size);
                    $p = cgttu_StringUtils_indexAfter($fnt, $rt_s(486), $size);
                    $second = cgttu_StringUtils_intFromDec($fnt, $size, $p);
                    $i = cgttu_StringUtils_indexAfter($fnt, $rt_s(484), $p);
                    $amount = cgttu_StringUtils_floatFromDec($fnt, $p, $i);
                    $fntHandle = $this.$kerning;
                    $size = $first << 16;
                    cbgu_IntFloatMap_put($fntHandle, $size | $second, $amount);
                    if ($first == 91)
                        cbgu_IntFloatMap_put($this.$kerning, 131072 | $second, $amount);
                    if ($second == 91)
                        cbgu_IntFloatMap_put($this.$kerning, $size | 2, $amount);
                    $i_0 = $i_0 + 1 | 0;
                }
            }
        }
    }
    if (!cbgu_IntMap_containsKey($this.$mapping, 32)) {
        cgxgbt_TeaApplication_error(cbg_Gdx_app, $rt_s(487), $rt_s(488));
        $rt_throw(jl_RuntimeException__init_($rt_s(489)));
    }
    $fntHandle = $this.$mapping;
    cbgu_IntMap_put($fntHandle, 13, cbgu_IntMap_get0($fntHandle, 32));
    $fntHandle = $this.$mapping;
    cbgu_IntMap_put($fntHandle, 8203, cgtt_Font$GlyphRegion__init_6(cbgu_IntMap_get0($fntHandle, 32), 0.0, 0.0, 0.0));
    if (cbgu_IntMap_containsKey($this.$mapping, 10)) {
        $gr = cbgu_IntMap_get0($this.$mapping, 10);
        $fntHandle = $gr;
        cbggg_TextureRegion_setRegionWidth($fntHandle, 0);
        cbggg_TextureRegion_setRegionHeight($fntHandle, 0);
        $gr.$xAdvance0 = 0.0;
    } else {
        $newline = cgtt_Font$GlyphRegion__init_0(cbgu_IntMap_get0($this.$mapping, 8203));
        $fntHandle = $newline;
        cbggg_TextureRegion_setRegionWidth($fntHandle, 0);
        cbggg_TextureRegion_setRegionHeight($fntHandle, 0);
        $newline.$xAdvance0 = 0.0;
        cbgu_IntMap_put($this.$mapping, 10, $newline);
    }
    $size = !cbgu_IntMap_containsKey($this.$mapping, 9608) ? 65535 : 9608;
    $this.$solidBlock = $size;
    if (!$makeGridGlyphs) {
        cgtt_Font_$callClinit();
        if (!cgtt_Font_canUseTextures) {
            $this.$solidBlock = 9608;
            cbgu_IntMap_put($this.$mapping, 9608, cgtt_Font$GlyphRegion__init_(cgtt_Font$TexturelessRegion__init_()));
        } else if (!cbgu_IntMap_containsKey($this.$mapping, $size)) {
            $temp = cbgg_Pixmap__init_(3, 3, cbgg_Pixmap$Format_RGBA8888);
            cbgg_Pixmap_setColor($temp, cbgg_Color_WHITE);
            cbgg_Pixmap_fill($temp);
            $fntHandle = cbgg_Texture__init_1(3, 3, cbgg_Pixmap$Format_RGBA8888);
            $this.$whiteBlock = $fntHandle;
            cbgg_Texture_draw($fntHandle, $temp, 0, 0);
            $this.$solidBlock = 9608;
            cbgu_IntMap_put($this.$mapping, 9608, cgtt_Font$GlyphRegion__init_(cbggg_TextureRegion__init_0($this.$whiteBlock, 1, 1, 1, 1)));
            cbgg_Pixmap_dispose($temp);
        }
    } else {
        $block = cbgu_IntMap_get($this.$mapping, $size, null);
        if ($block === null) {
            cgtt_Font_$callClinit();
            if (cgtt_Font_canUseTextures) {
                $temp = cbgg_Pixmap__init_(3, 3, cbgg_Pixmap$Format_RGBA8888);
                cbgg_Pixmap_setColor($temp, cbgg_Color_WHITE);
                cbgg_Pixmap_fill($temp);
                $fntHandle = cbgg_Texture__init_1(3, 3, cbgg_Pixmap$Format_RGBA8888);
                $this.$whiteBlock = $fntHandle;
                cbgg_Texture_draw($fntHandle, $temp, 0, 0);
                $this.$solidBlock = 9608;
                $fntHandle = $this.$mapping;
                $block = cgtt_Font$GlyphRegion__init_(cbggg_TextureRegion__init_0($this.$whiteBlock, 1, 1, 1, 1));
                cbgu_IntMap_put($fntHandle, 9608, $block);
                cbgg_Pixmap_dispose($temp);
            }
        }
        $i = 9472;
        while ($i < (9472 + cgttu_BlockUtils_BOX_DRAWING.data.length | 0)) {
            if (cgttu_BlockUtils_isBlockGlyph($i)) {
                $gr = cgtt_Font$GlyphRegion__init_0($block);
                $gr.$offsetX = NaN;
                $gr.$xAdvance0 = $this.$cellWidth;
                $gr.$offsetY = $this.$cellHeight;
                cbgu_IntMap_put($this.$mapping, $i, $gr);
            }
            $i = $i + 1 | 0;
        }
    }
    $fntHandle = $this.$mapping;
    $this.$defaultValue = cbgu_IntMap_get($fntHandle, 32, cbgu_IntMap_get0($fntHandle, 0));
    $xAdjust = $this.$cellWidth;
    $this.$originalCellWidth = $xAdjust;
    $yAdjust = $this.$cellHeight - $this.$descent * 0.25;
    $this.$cellHeight = $yAdjust;
    $this.$originalCellHeight = $yAdjust;
    $this.$isMono = $minWidth === $xAdjust && $this.$kerning === null ? 1 : 0;
    $this.$inlineImageOffsetX = 0.0;
    $this.$inlineImageOffsetY = 0.0;
    $this.$inlineImageXAdvance = 0.0;
    $this.$inlineImageStretch = 1.0;
},
cgtt_Font_getDistanceField = $this => {
    return $this.$distanceField;
},
cgtt_Font_setDistanceField = ($this, $distanceField) => {
    let var$2;
    cgtt_Font_$callClinit();
    if (!cgtt_Font_canUseTextures)
        return $this;
    if ($distanceField === null)
        $distanceField = cgtt_Font$DistanceFieldType_STANDARD;
    $this.$distanceField = $distanceField;
    if ($distanceField === cgtt_Font$DistanceFieldType_MSDF) {
        $distanceField = cbggg_ShaderProgram__init_($rt_s(490), $rt_s(491));
        $this.$shader = $distanceField;
        if (!$distanceField.$isCompiled) {
            $distanceField = cbg_Gdx_app;
            var$2 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$2);
            jl_AbstractStringBuilder_append(var$2, $rt_s(492));
            jl_AbstractStringBuilder_append(var$2, cbggg_ShaderProgram_getLog($this.$shader));
            var$2 = jl_AbstractStringBuilder_toString(var$2);
            cgxgbt_TeaApplication_error($distanceField, $rt_s(493), var$2);
        }
    } else if ($distanceField === cgtt_Font$DistanceFieldType_SDF) {
        $distanceField = cbggg_ShaderProgram__init_($rt_s(490), cbg_Application$ApplicationType_WebGL !== cbg_Application$ApplicationType_Desktop ? $rt_s(494) : $rt_s(495));
        $this.$shader = $distanceField;
        if (!$distanceField.$isCompiled) {
            $distanceField = cbg_Gdx_app;
            var$2 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$2);
            jl_AbstractStringBuilder_append(var$2, $rt_s(496));
            jl_AbstractStringBuilder_append(var$2, cbggg_ShaderProgram_getLog($this.$shader));
            var$2 = jl_AbstractStringBuilder_toString(var$2);
            cgxgbt_TeaApplication_error($distanceField, $rt_s(493), var$2);
        }
    } else if ($distanceField !== cgtt_Font$DistanceFieldType_SDF_OUTLINE)
        $this.$shader = null;
    else {
        var$2 = cbggg_ShaderProgram__init_($rt_s(490), cbg_Application$ApplicationType_WebGL !== cbg_Application$ApplicationType_Desktop ? $rt_s(497) : $rt_s(498));
        $this.$shader = var$2;
        if (!var$2.$isCompiled) {
            $distanceField = cbg_Gdx_app;
            var$2 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$2);
            jl_AbstractStringBuilder_append(var$2, $rt_s(499));
            jl_AbstractStringBuilder_append(var$2, cbggg_ShaderProgram_getLog($this.$shader));
            var$2 = jl_AbstractStringBuilder_toString(var$2);
            cgxgbt_TeaApplication_error($distanceField, $rt_s(493), var$2);
        }
    }
    return $this;
},
cgtt_Font_scale = ($this, $both) => {
    $this.$scaleX = $this.$scaleX * $both;
    $this.$scaleY = $this.$scaleY * $both;
    $this.$cellWidth = $this.$cellWidth * $both;
    $this.$cellHeight = $this.$cellHeight * $both;
    return $this;
},
cgtt_Font_enableShader = ($this, $batch) => {
    let var$2, var$3, var$4, $smoothing;
    var$2 = $batch;
    var$3 = cbggg_SpriteBatch_getShader(var$2);
    var$4 = $this.$shader;
    if (var$3 !== var$4) {
        var$3 = $this.$distanceField;
        if (var$3 === cgtt_Font$DistanceFieldType_MSDF) {
            cbggg_SpriteBatch_setShader(var$2, var$4);
            $smoothing = 8.0 * $this.$actualCrispness * jl_Math_max0($this.$cellHeight / $this.$originalCellHeight, $this.$cellWidth / $this.$originalCellWidth);
            cbggg_SpriteBatch_flush(var$2);
            cbggg_ShaderProgram_setUniformf($this.$shader, $rt_s(500), $smoothing);
            cgtt_Font_$callClinit();
            ju_IdentityHashMap_put(cgtt_Font_smoothingValues, $batch, jl_Float_valueOf($smoothing));
        } else if (var$3 !== cgtt_Font$DistanceFieldType_SDF && var$3 !== cgtt_Font$DistanceFieldType_SDF_OUTLINE) {
            cbggg_SpriteBatch_setShader(var$2, null);
            cgtt_Font_$callClinit();
            ju_IdentityHashMap_put(cgtt_Font_smoothingValues, $batch, jl_Float_valueOf(0.0));
        } else {
            cbggg_SpriteBatch_setShader(var$2, var$4);
            $smoothing = 4.0 * $this.$actualCrispness * jl_Math_max0($this.$cellHeight / $this.$originalCellHeight, $this.$cellWidth / $this.$originalCellWidth);
            cbggg_SpriteBatch_flush(var$2);
            cbggg_ShaderProgram_setUniformf($this.$shader, $rt_s(500), $smoothing);
            cgtt_Font_$callClinit();
            ju_IdentityHashMap_put(cgtt_Font_smoothingValues, $batch, jl_Float_valueOf($smoothing));
        }
    }
},
cgtt_Font_resumeDistanceFieldShader = ($this, $batch) => {
    let var$2, var$3, var$4, $smoothing;
    var$2 = $batch;
    var$3 = cbggg_SpriteBatch_getShader(var$2);
    var$4 = $this.$shader;
    if (var$3 === var$4) {
        var$3 = $this.$distanceField;
        if (var$3 === cgtt_Font$DistanceFieldType_MSDF) {
            $smoothing = 8.0 * $this.$actualCrispness * jl_Math_max0($this.$cellHeight / $this.$originalCellHeight, $this.$cellWidth / $this.$originalCellWidth);
            cbggg_SpriteBatch_flush(var$2);
            cbggg_ShaderProgram_setUniformf($this.$shader, $rt_s(500), $smoothing);
            cgtt_Font_$callClinit();
            ju_IdentityHashMap_put(cgtt_Font_smoothingValues, $batch, jl_Float_valueOf($smoothing));
        } else if (!(var$3 !== cgtt_Font$DistanceFieldType_SDF && var$3 !== cgtt_Font$DistanceFieldType_SDF_OUTLINE)) {
            $smoothing = 4.0 * $this.$actualCrispness * jl_Math_max0($this.$cellHeight / $this.$originalCellHeight, $this.$cellWidth / $this.$originalCellWidth);
            cbggg_SpriteBatch_flush(var$2);
            cbggg_ShaderProgram_setUniformf($this.$shader, $rt_s(500), $smoothing);
            cgtt_Font_$callClinit();
            ju_IdentityHashMap_put(cgtt_Font_smoothingValues, $batch, jl_Float_valueOf($smoothing));
        }
    } else if (var$4 === null) {
        cbggg_SpriteBatch_flush(var$2);
        if (cbgu_ObjectIntMap_containsKey((cbggg_SpriteBatch_getShader(var$2)).$uniforms, $rt_s(500)))
            cbggg_ShaderProgram_setUniformf(cbggg_SpriteBatch_getShader(var$2), $rt_s(500), 0.0);
        cgtt_Font_$callClinit();
        ju_IdentityHashMap_put(cgtt_Font_smoothingValues, $batch, jl_Float_valueOf(0.0));
    } else {
        cbggg_SpriteBatch_setShader(var$2, var$4);
        var$3 = $this.$distanceField;
        if (var$3 === cgtt_Font$DistanceFieldType_MSDF) {
            $smoothing = 0.4000000059604645 * $this.$actualCrispness * jl_Math_max0($this.$cellHeight, $this.$cellWidth);
            cbggg_SpriteBatch_flush(var$2);
            cbggg_ShaderProgram_setUniformf($this.$shader, $rt_s(500), $smoothing);
            cgtt_Font_$callClinit();
            ju_IdentityHashMap_put(cgtt_Font_smoothingValues, $batch, jl_Float_valueOf($smoothing));
        } else if (!(var$3 !== cgtt_Font$DistanceFieldType_SDF && var$3 !== cgtt_Font$DistanceFieldType_SDF_OUTLINE)) {
            $smoothing = 0.20000000298023224 * $this.$actualCrispness * jl_Math_max0($this.$cellHeight, $this.$cellWidth);
            cbggg_SpriteBatch_flush(var$2);
            cbggg_ShaderProgram_setUniformf($this.$shader, $rt_s(500), $smoothing);
            cgtt_Font_$callClinit();
            ju_IdentityHashMap_put(cgtt_Font_smoothingValues, $batch, jl_Float_valueOf($smoothing));
        }
    }
},
cgtt_Font_pauseDistanceFieldShader = ($this, $batch) => {
    let var$2, $smoothing, var$4;
    var$2 = $batch;
    if (cbggg_SpriteBatch_getShader(var$2) === $this.$shader) {
        cgtt_Font_$callClinit();
        $smoothing = cgtt_Font_smoothingValues;
        if ($batch === null)
            $smoothing = ju_IdentityHashMap_findNullKeyEntry($smoothing);
        else {
            var$4 = ju_IdentityHashMap_computeHashCode($batch);
            $smoothing = ju_IdentityHashMap_findNonNullKeyEntry($smoothing, $batch, var$4 & ($smoothing.$elementData0.data.length - 1 | 0), var$4);
        }
        $smoothing = $smoothing === null ? null : $smoothing.$value;
        if ($smoothing !== null && $smoothing.$value1 !== 0.0) {
            cbggg_SpriteBatch_flush(var$2);
            cbggg_ShaderProgram_setUniformf($this.$shader, $rt_s(500), 0.0);
            ju_IdentityHashMap_put(cgtt_Font_smoothingValues, $batch, jl_Float_valueOf(0.0));
        } else
            return;
    }
},
cgtt_Font_drawBlockSequence = ($this, $batch, $sequence, $block, $color, $x, $y, $width, $height, $rotation) => {
    cgtt_Font_drawBlockSequence0($this, $batch, $sequence, $block, $color, $x, $y, $width, $height, $rotation, 1.0);
},
cgtt_Font_drawBlockSequence0 = ($this, $batch, $sequence, $block, $color, $x, $y, $width, $height, $rotation, $breadth) => {
    let var$11, $parent, $ipw, $iph, $halfWidth, $halfHeight, $u, $v, $u2, $v2, $sn, $cs, $adjustment, var$24, $b, var$26, $thinAcross, $wideAcross, $startX, $startY, $sizeX, $sizeY, var$33, var$34, $p0y, $p2x, var$37;
    var$11 = $sequence.data;
    $parent = $block.$texture;
    $ipw = 1.0 / cbgg_Texture_getWidth($parent);
    $iph = 1.0 / cbgg_Texture_getHeight($parent);
    $halfWidth = $width * 0.5;
    $halfHeight = $height * 0.5;
    $u = $block.$u;
    $v = cbggg_TextureRegion_getV($block);
    $u2 = $u + $ipw;
    $v2 = $v - $iph;
    $sn = cbgm_MathUtils_sinDeg($rotation);
    $cs = cbgm_MathUtils_cosDeg($rotation);
    $adjustment = 0.0;
    var$24 = var$11.length;
    if (var$24 == 8 && $breadth !== 1.0 && var$11[0] === 0.0 && var$11[5] === 0.0)
        $adjustment = 0.10000000149011612 - 0.10000000149011612 * $breadth;
    $b = 0;
    var$26 = $rt_compare($breadth, 1.0);
    $thinAcross = 0.10000000149011612 * $breadth;
    $wideAcross = 0.20000000298023224 * $breadth;
    $ipw = $thinAcross * 0.5;
    $iph = $wideAcross * 0.5;
    while ($b < var$24) {
        $startX = var$11[$b];
        $startY = var$11[$b + 1 | 0];
        $sizeX = var$11[$b + 2 | 0];
        $sizeY = var$11[$b + 3 | 0];
        if (var$26) {
            if ($sizeX === 0.10000000149011612)
                $sizeX = $thinAcross;
            else if ($sizeX === 0.20000000298023224)
                $sizeX = $wideAcross;
            else {
                var$33 = $rt_compare($startX, 0.0);
                if (!var$33) {
                    if ($sizeX === 0.550000011920929)
                        $sizeX = $sizeX - ($ipw + $adjustment);
                    else if ($sizeX === 0.6000000238418579)
                        $sizeX = $sizeX - ($iph + $adjustment);
                } else if (var$33 > 0) {
                    if ($sizeX === 0.550000011920929)
                        $sizeX = $sizeX + $ipw;
                    else if ($sizeX === 0.6000000238418579)
                        $sizeX = $sizeX + $iph;
                }
            }
            if ($sizeY === 0.10000000149011612)
                $sizeY = $thinAcross;
            else if ($sizeY === 0.20000000298023224)
                $sizeY = $wideAcross;
            else {
                var$33 = $rt_compare($startY, 0.0);
                if (!var$33) {
                    if ($sizeY === 0.550000011920929)
                        $sizeY = $sizeY - ($ipw + $adjustment);
                    else if ($sizeY === 0.6000000238418579)
                        $sizeY = $sizeY - ($iph + $adjustment);
                } else if (var$33 > 0) {
                    if ($sizeY === 0.550000011920929)
                        $sizeY = $sizeY + $ipw;
                    else if ($sizeY === 0.6000000238418579)
                        $sizeY = $sizeY + $iph;
                }
            }
            if ($startX === 0.44999998807907104)
                $startX = $startX - $ipw;
            else if ($startX === 0.4000000059604645)
                $startX = $startX - $iph;
            if ($startY === 0.44999998807907104)
                $startY = $startY - $ipw;
            else if ($startY === 0.4000000059604645)
                $startY = $startY - $iph;
        }
        var$34 = $startX * $width - $halfWidth;
        $startY = $startY * $height - $halfHeight;
        $rotation = $sizeX * $width;
        $p0y = $startY + $sizeY * $height;
        $p2x = var$34 + $rotation;
        var$37 = $this.$vertices;
        $sequence = var$37.data;
        $rotation = $x + $cs * var$34;
        $breadth = $rotation - $sn * $p0y;
        $sequence[0] = $breadth;
        $startX = $sn * $startY;
        $rotation = $rotation - $startX;
        $sequence[5] = $rotation;
        $rotation = $breadth - $rotation;
        $breadth = $x + $cs * $p2x - $startX;
        $sequence[10] = $breadth;
        $sequence[15] = $rotation + $breadth;
        $rotation = $y + $sn * var$34;
        $breadth = $rotation + $cs * $p0y;
        $sequence[1] = $breadth;
        $startX = $cs * $startY;
        $rotation = $rotation + $startX;
        $sequence[6] = $rotation;
        $rotation = $breadth - $rotation;
        $breadth = $y + $sn * $p2x + $startX;
        $sequence[11] = $breadth;
        $sequence[16] = $rotation + $breadth;
        $sequence[2] = $color;
        $sequence[3] = $u;
        $sequence[4] = $v;
        $sequence[7] = $color;
        $sequence[8] = $u;
        $sequence[9] = $v2;
        $sequence[12] = $color;
        $sequence[13] = $u2;
        $sequence[14] = $v2;
        $sequence[17] = $color;
        $sequence[18] = $u2;
        $sequence[19] = $v;
        cgtt_Font_drawVertices($this, $batch, $parent, var$37);
        $b = $b + 4 | 0;
    }
},
cgtt_Font_drawFancyLine = ($this, $batch, $mode, $x, $y, $width, $xPx, $yPx, $rotation) => {
    let $block, $parent, $ipw, $iph, $u, $v, $u2, $v2, $sn, $cs, var$19, var$20, $index, $startX, var$23, $p2y, $p0y, $p2x, $color, var$28, var$29, var$30;
    $block = cbgu_IntMap_get0($this.$mapping, $this.$solidBlock);
    $parent = $block.$texture;
    $ipw = 1.0 / cbgg_Texture_getWidth($parent);
    $iph = 1.0 / cbgg_Texture_getHeight($parent);
    $u = $block.$u;
    $v = $block.$v;
    $u2 = $u + $ipw;
    $v2 = $v + $iph;
    $sn = cbgm_MathUtils_sinDeg($rotation);
    $cs = cbgm_MathUtils_cosDeg($rotation);
    var$19 = Long_compare($mode, Long_fromInt(27262976));
    var$20 = cgttu_ColorUtils_multiplyAlpha(!var$19 ? $this.$PACKED_ERROR_COLOR : Long_ne($mode, Long_fromInt(29360128)) ? $this.$PACKED_NOTE_COLOR : $this.$PACKED_WARN_COLOR, $batch.$color5.$a);
    $index = 0;
    $startX = 0.0;
    var$23 = Long_compare($mode, Long_fromInt(29360128));
    while ($startX <= $width) {
        if (!var$19) {
            $p2y = ($index & 1) * $yPx;
            $p0y = $p2y + $yPx;
            $p2x = $startX + $xPx;
            $rotation = $startX;
            $iph = $startX;
            $color = $p2y;
        } else if (var$23) {
            $p2y = (($index >>> 1 | 0) & 1) * $yPx;
            $p0y = $p2y + $yPx;
            $p2x = $startX + $xPx;
            $rotation = $startX;
            $iph = $startX;
            $color = $p2y;
        } else {
            $ipw = ($index ^ (-1)) & 1;
            $iph = $startX + $ipw * $xPx;
            $p2y = $ipw * $yPx;
            $p0y = $p2y + $yPx;
            $p2x = $iph + $xPx;
            $rotation = $iph;
            $color = $p2y;
        }
        var$28 = $this.$vertices;
        var$29 = var$28.data;
        $ipw = $x + $cs * $rotation - $sn * $p0y;
        var$29[0] = $ipw;
        var$30 = $x + $cs * $iph - $sn * $color;
        var$29[5] = var$30;
        $ipw = $ipw - var$30;
        var$30 = $x + $cs * $p2x - $sn * $p2y;
        var$29[10] = var$30;
        var$29[15] = $ipw + var$30;
        $rotation = $y + $sn * $rotation + $cs * $p0y;
        var$29[1] = $rotation;
        $ipw = $y + $sn * $iph + $cs * $color;
        var$29[6] = $ipw;
        $ipw = $rotation - $ipw;
        $rotation = $y + $sn * $p2x + $cs * $p2y;
        var$29[11] = $rotation;
        var$29[16] = $ipw + $rotation;
        var$29[2] = var$20;
        var$29[3] = $u;
        var$29[4] = $v;
        var$29[7] = var$20;
        var$29[8] = $u;
        var$29[9] = $v2;
        var$29[12] = var$20;
        var$29[13] = $u2;
        var$29[14] = $v2;
        var$29[17] = var$20;
        var$29[18] = $u2;
        var$29[19] = $v;
        cgtt_Font_drawVertices($this, $batch, $parent, var$28);
        $startX = $startX + $xPx;
        $index = $index + 1 | 0;
    }
},
cgtt_Font_xAdvance = ($font, $scale, $glyph) => {
    let $ch, $tr, $changedW;
    cgtt_Font_$callClinit();
    if (Long_eq(Long_shru($glyph, 32), Long_ZERO))
        return 0.0;
    $ch = Long_lo($glyph) & 65535;
    if (Long_eq(Long_and($glyph, Long_fromInt(17825792)), Long_fromInt(17825792)))
        $ch = r_Category_caseUp($ch);
    $tr = cbgu_IntMap_get0($font.$mapping, $ch);
    if ($tr === null)
        return 0.0;
    $changedW = $tr.$xAdvance0 * $scale;
    if (!$font.$isMono && Long_ne(Long_and($glyph, Long_fromInt(100663296)), Long_ZERO))
        $changedW = $changedW * 0.5;
    return $changedW;
},
cgtt_Font_calculateSize = ($this, $layout) => {
    let $w, $currentHeight, $ln, $drawn, $line, $glyphs, $curly, $initial, $kern, $i, $n, $glyph, $ch, $font, $tr, $scale, $scaleX, $changedW, $amt, $ox;
    $w = 0.0;
    $currentHeight = 0.0;
    $ln = 0;
    while ($ln < cgtt_Layout_lines($layout)) {
        $drawn = 0.0;
        $line = cgtt_Layout_getLine($layout, $ln);
        $glyphs = $line.$glyphs;
        $curly = 0;
        $initial = 1;
        $kern = (-1);
        $line.$height = $currentHeight;
        $i = 0;
        $n = $glyphs.$size1;
        while ($i < $n) {
            $glyph = cbgu_LongArray_get($glyphs, $i);
            $ch = Long_lo($glyph) & 65535;
            if (Long_eq(Long_and($glyph, Long_fromInt(17825792)), Long_fromInt(17825792)))
                $ch = r_Category_caseUp($ch);
            a: {
                if ($this.$omitCurlyBraces) {
                    if ($curly) {
                        if ($ch == 125) {
                            $curly = 0;
                            break a;
                        }
                        if ($ch != 123)
                            break a;
                        $curly = 0;
                    } else if ($ch == 123) {
                        $curly = 1;
                        break a;
                    }
                }
                $font = null;
                $tr = $this.$family;
                if ($tr !== null)
                    $font = $tr.$connected.data[Long_lo(Long_and(Long_shru($glyph, 16), Long_fromInt(15)))];
                if ($font === null)
                    $font = $this;
                $tr = cbgu_IntMap_get0($font.$mapping, $ch);
                if ($tr !== null) {
                    $scale = !$font.$isMono ? cgtt_Font_extractScale($glyph) : 1.0;
                    if ($font.$kerning !== null) {
                        $kern = $kern << 16 | $ch;
                        $scaleX = $ch >= 57344 && $ch < 63488 ? $scale * $font.$cellHeight / cgtt_Font$GlyphRegion_getMaxDimension($tr) * $font.$inlineImageStretch : $font.$scaleX * $scale * (1.0 + 0.5 * Long_toNumber(Long_shr(Long_neg(Long_and($glyph, Long_fromInt(100663296))), 63)));
                        $changedW = $line.$height;
                        $currentHeight = $font.$cellHeight * $scale;
                        $line.$height = jl_Math_max0($changedW, $currentHeight);
                        $amt = cbgu_IntFloatMap_get($font.$kerning, $kern, 0.0) * $scaleX;
                        $changedW = $tr.$xAdvance0 * $scaleX;
                        if (isNaN($tr.$offsetX) ? 1 : 0)
                            $changedW = $font.$cellWidth * $scale;
                        else if ($initial && !$font.$isMono) {
                            $ox = $tr.$offsetX * $scaleX;
                            if ($ox < 0.0)
                                $changedW = $changedW - $ox;
                        }
                        $initial = 0;
                        $drawn = $drawn + $changedW + $amt;
                    } else {
                        $scaleX = $line.$height;
                        $currentHeight = $font.$cellHeight * $scale;
                        $line.$height = jl_Math_max0($scaleX, $currentHeight);
                        $scaleX = $ch >= 57344 && $ch < 63488 ? $scale * $font.$cellHeight / cgtt_Font$GlyphRegion_getMaxDimension($tr) * $font.$inlineImageStretch : $font.$scaleX * $scale * (Long_ne(Long_and($glyph, Long_fromInt(100663296)), Long_ZERO) && !$font.$isMono ? 0.5 : 1.0);
                        $changedW = $tr.$xAdvance0 * $scaleX;
                        if (isNaN($tr.$offsetX) ? 1 : 0)
                            $changedW = $font.$cellWidth * $scale;
                        else if ($initial && !$font.$isMono) {
                            $ox = $tr.$offsetX * $scaleX;
                            if ($ox < 0.0)
                                $changedW = $changedW - $ox;
                        }
                        $initial = 0;
                        $drawn = $drawn + $changedW;
                    }
                }
            }
            $i = $i + 1 | 0;
        }
        $line.$width = $drawn;
        $w = jl_Math_max0($w, $drawn);
        $ln = $ln + 1 | 0;
    }
    return $w;
},
cgtt_Font_handleIntegerPosition = ($this, $p) => {
    return $p;
},
cgtt_Font_drawGlyph = ($this, $batch, $glyph, $x, $y, $rotation, $sizingX, $sizingY, $backgroundColor) => {
    let $sin, $cos, $font, $under, $c, $squashed, $jostled, var$16, $tr, $dash, var$19, $located, $p, $batchAlpha, $batchAlpha2, $batchAlpha1_5, $color, $scale, $fsx, $scaleX, $scaleY, $shine, $osx, $osy, $centerX, $xa, $centerY, $oCenterX, $oCenterY, $scaleCorrection, $dashU, $ix, $iy, $xShift, $yShift, $stretchShift, $dashV, $dashU2, $tex, $scaledHeight, $x0, $x1, $x2, $y0, $y1, $y2, $iw, $w, $xAdvance, $changedW, $xc, $trrh, $yt, $h, $xPx, $yPx, $yOutline, $u, $v, $u2, $v2, $ych, $amount, $script, $batchAlpha3,
    $code, $p0x, $p0y, $p1x, $p1y, $p2x, $p2y, $boxes, var$82, $shadow, var$84, $widthAdj, $xi, $ya, $xch, $leftStrength, $underU2, $underV2, $addW, $underU, $underV, $widthAdj_0, $outline, $yi, $rightStrength, $dashV2;
    $sin = cbgm_MathUtils_sinDeg($rotation);
    $cos = cbgm_MathUtils_cosDeg($rotation);
    $font = null;
    $under = $this.$family;
    if ($under !== null)
        $font = $under.$connected.data[Long_lo(Long_and(Long_shru($glyph, 16), Long_fromInt(15)))];
    if ($font === null)
        $font = $this;
    $c = Long_lo($glyph) & 65535;
    $squashed = 0;
    $jostled = 0;
    if (Long_ne(Long_and($glyph, Long_fromInt(17825792)), Long_fromInt(17825792))) {
        $jostled = Long_ne(Long_and($glyph, Long_fromInt(31457280)), Long_fromInt(16777216)) ? 0 : 1;
        var$16 = $c;
    } else {
        var$16 = r_Category_caseUp($c);
        $squashed = $c == var$16 ? 0 : 1;
        $glyph = Long_or(Long_and($glyph, Long_fromInt(-65536)), Long_fromInt(var$16));
    }
    $tr = cbgu_IntMap_get0($font.$mapping, var$16);
    if ($tr !== null) {
        cgtt_Font_$callClinit();
        $under = cgtt_Font_latestTexture;
        $dash = $tr;
        var$19 = cbggg_TextureRegion_getTexture($dash);
        cgtt_Font_latestTexture = var$19;
        if ($under !== var$19) {
            $located = 0;
            $p = 0;
            a: {
                while (true) {
                    $under = $font.$parents;
                    if ($p >= $under.$size0)
                        break;
                    if (cbggg_TextureRegion_getTexture(cbgu_Array_get($under, $p)) === cgtt_Font_latestTexture) {
                        cgtt_Font_resumeDistanceFieldShader($font, $batch);
                        $located = 1;
                        break a;
                    }
                    $p = $p + 1 | 0;
                }
            }
            if (!$located)
                cgtt_Font_pauseDistanceFieldShader($font, $batch);
        }
        if ($squashed)
            $sizingY = $sizingY * 0.699999988079071;
        var$19 = $batch;
        $batchAlpha = (cbggg_SpriteBatch_getColor(var$19)).$a;
        $batchAlpha2 = $batchAlpha * $batchAlpha;
        $batchAlpha1_5 = jl_Math_sqrt($batchAlpha2 * $batchAlpha);
        $located = Long_compare(Long_and($glyph, Long_fromInt(1073741824)), Long_ZERO);
        if ($located)
            $batchAlpha = $batchAlpha1_5;
        $color = cbgu_NumberUtils_intBitsToFloat(($batchAlpha * Long_toNumber(Long_and(Long_shru($glyph, 33), Long_fromInt(127))) | 0) << 25 | (cbggg_SpriteBatch_getColor(var$19)).$r * Long_toNumber(Long_shru($glyph, 56)) | 0 | ((cbggg_SpriteBatch_getColor(var$19)).$g * Long_toNumber(Long_and(Long_shru($glyph, 48), Long_fromInt(255))) | 0) << 8 | ((cbggg_SpriteBatch_getColor(var$19)).$b * Long_toNumber(Long_and(Long_shru($glyph, 40), Long_fromInt(255))) | 0) << 16);
        $scale = cgtt_Font_extractScale($glyph);
        $c = $rt_compare(var$16, 57344);
        if ($c >= 0 && var$16 < 63488) {
            $fsx = $font.$cellHeight / cgtt_Font$GlyphRegion_getMaxDimension($tr) * $font.$inlineImageStretch;
            $scaleX = $scale * $fsx;
            $batchAlpha = $fsx;
            $scaleY = $scaleX;
        } else {
            $batchAlpha = $font.$scaleX;
            $scaleX = $batchAlpha * $scale;
            $fsx = $font.$scaleY;
            $scaleY = $fsx * $scale;
        }
        $shine = $scale + 1.0;
        $osx = $batchAlpha * $shine * 0.5;
        $osy = $fsx * $shine * 0.5;
        $shine = $tr.$xAdvance0;
        $centerX = $shine * $scaleX * 0.5;
        $xa = $font.$originalCellHeight;
        $centerY = $xa * $scaleY * 0.5;
        $oCenterX = $shine * $osx * 0.5;
        $oCenterY = $xa * $osy * 0.5;
        $scaleCorrection = $font.$descent * $font.$scaleY * 2.0;
        $dashU = $scaleCorrection * $scale;
        $xa = $y + $dashU;
        $y = $x + $centerX;
        $ix = cgtt_Font_handleIntegerPosition($font, $y);
        $shine = $xa + $centerY;
        $iy = cgtt_Font_handleIntegerPosition($font, $shine);
        $xShift = $y - $ix;
        $yShift = $shine - $iy;
        $y = cgtt_Font_handleIntegerPosition($font, $ix - $xShift);
        $stretchShift = cgtt_Font_handleIntegerPosition($font, $iy - $yShift);
        $shine = $centerX - $xShift * 0.5;
        $dashV = $centerY - $yShift * 0.5;
        if (isNaN($tr.$offsetX) ? 1 : 0) {
            if ($backgroundColor)
                cgtt_Font_drawBlockSequence($this, $batch, cgttu_BlockUtils_BOX_DRAWING.data[136], cbgu_IntMap_get($font.$mapping, $this.$solidBlock, $tr), cbgu_NumberUtils_intToFloatColor(jl_Integer_reverseBytes($backgroundColor)), $y, $stretchShift, $font.$cellWidth * $sizingX, $font.$cellHeight * $scale * $sizingY, $rotation);
            cgtt_Font_drawBlockSequence0($this, $batch, cgttu_BlockUtils_BOX_DRAWING.data[var$16 - 9472 | 0], cbgu_IntMap_get($font.$mapping, $this.$solidBlock, $tr), $color, $y, $stretchShift, $font.$cellWidth * $sizingX, $font.$cellHeight * $scale * $sizingY, $rotation, var$16 >= 9600 ? 1.0 : $this.$boxDrawingBreadth);
            return $font.$cellWidth;
        }
        $dashU2 = $y + $font.$cellWidth * 0.5;
        $tex = cbggg_TextureRegion_getTexture($dash);
        $scaledHeight = $font.$cellHeight * $scale * $sizingY;
        $x0 = 0.0;
        $x1 = 0.0;
        $x2 = 0.0;
        $y0 = 0.0;
        $y1 = 0.0;
        $y2 = 0.0;
        $iw = 1.0 / cbgg_Texture_getWidth($tex);
        $w = cbggg_TextureRegion_getRegionWidth($dash) * $scaleX * $sizingX;
        $xAdvance = $tr.$xAdvance0;
        $changedW = $xAdvance * $scaleX;
        $xc = $tr.$offsetX * $scaleX * $sizingX - $cos * $shine - $font.$cellWidth * 0.5;
        $trrh = cbggg_TextureRegion_getRegionHeight($dash);
        $yt = ($font.$originalCellHeight - ($trrh + $tr.$offsetY)) * $scaleY * $sizingY + $sin * $shine - $dashV;
        if ($squashed)
            $yt = $yt - $font.$descent * $scaleY * $sizingY * 0.4285714328289032;
        $h = $trrh * $scaleY * $sizingY;
        $xPx = 2.0 / (cgxgbt_TeaGraphics_getBackBufferWidth(cbg_Gdx_graphics) * (cbggg_SpriteBatch_getProjectionMatrix(var$19)).$val.data[0]);
        $yPx = 2.0 / (cgxgbt_TeaGraphics_getBackBufferHeight(cbg_Gdx_graphics) * (cbggg_SpriteBatch_getProjectionMatrix(var$19)).$val.data[5]);
        $yOutline = $this.$outlineStrength * $this.$cellHeight / 32.0;
        $u = cbggg_TextureRegion_getU($dash);
        $v = cbggg_TextureRegion_getV($dash);
        $u2 = cbggg_TextureRegion_getU2($dash);
        $v2 = cbggg_TextureRegion_getV2($dash);
        if ($c >= 0 && var$16 < 63488) {
            $stretchShift = ($trrh * $font.$inlineImageStretch - $trrh) * $scaleX * $sizingX * 0.5;
            $y = $tr.$offsetX * $scaleX * $sizingX + $stretchShift;
            $xc = $xc - $y;
            $dashU2 = $dashU2 + $y;
            $ych = $tr.$offsetY * $scaleY * $sizingY;
            $yt = ($sin * $scaledHeight - $scaledHeight) * 0.5 - $ych - $stretchShift;
            if ($squashed)
                $yt = $yt - $font.$descent * $font.$scaleY * $scale * $sizingY * 0.4285714328289032;
            $stretchShift = $xa + $scaledHeight * 0.5 - $ych;
        }
        if (Long_ne(Long_and($glyph, Long_fromInt(536870912)), Long_ZERO)) {
            $amount = $h * $this.$obliqueStrength * 0.20000000298023224;
            $x0 = $x0 + $amount;
            $x2 = $x1 - $amount;
            $x1 = $x2;
        }
        $script = Long_and($glyph, Long_fromInt(100663296));
        if (Long_eq($script, Long_fromInt(100663296))) {
            $w = $w * 0.5;
            $h = $h * 0.5;
            $yt = $yt * 0.625;
            $y0 = $y1 + $scaledHeight * 0.375;
            if ($font.$isMono) {
                $y1 = $y0;
                $y2 = $y0;
                $batchAlpha3 = $changedW;
            } else {
                $batchAlpha3 = $changedW * 0.5;
                $y1 = $y0;
                $y2 = $y0;
            }
        } else if (Long_eq($script, Long_fromInt(33554432))) {
            $w = $w * 0.5;
            $h = $h * 0.5;
            $yt = $yt * 0.625;
            $y0 = $y1 - $scaledHeight * 0.375;
            if ($font.$isMono) {
                $y1 = $y0;
                $y2 = $y0;
                $batchAlpha3 = $changedW;
            } else {
                $batchAlpha3 = $changedW * 0.5;
                $y1 = $y0;
                $y2 = $y0;
            }
        } else if (Long_ne($script, Long_fromInt(67108864)))
            $batchAlpha3 = $changedW;
        else {
            $w = $w * 0.5;
            $h = $h * 0.5;
            $yt = $yt * 0.625;
            $batchAlpha3 = $font.$isMono ? $changedW : $changedW * 0.5;
        }
        if ($backgroundColor)
            cgtt_Font_drawBlockSequence($this, $batch, cgttu_BlockUtils_BOX_DRAWING.data[136], cbgu_IntMap_get($font.$mapping, $font.$solidBlock, $tr), cbgu_NumberUtils_intToFloatColor(jl_Integer_reverseBytes($backgroundColor)), $dashU2 - $font.$cellWidth * $scale * 0.5, $stretchShift + $font.$descent * $scaleY * $sizingY, $changedW * $sizingX + 5.0, $font.$cellHeight * $scale * $sizingY, $rotation);
        if ($jostled) {
            $code = cbgu_NumberUtils_floatToIntBits($dashU2 * 1.8191725015640259 + $stretchShift * 1.6710436344146729 + var$16 * 1.5497004985809326) & 16777215;
            $xc = $xc + ($code % 5 | 0) - 2.0;
            $yt = $yt + (($code >>> 6 | 0) % 5 | 0) - 2.0;
        }
        b: {
            $p0x = $xc + $x0;
            $p0y = $yt + $y0 + $h;
            $p1x = $xc + $x1;
            $p1y = $yt + $y1;
            $p2x = $xc + $x2 + $w;
            $p2y = $yt + $y2;
            $boxes = $this.$vertices.data;
            $boxes[3] = $u;
            $boxes[4] = $v;
            $boxes[8] = $u;
            $boxes[9] = $v2;
            $boxes[13] = $u2;
            $boxes[14] = $v2;
            $boxes[18] = $u2;
            $boxes[19] = $v;
            var$82 = Long_and($glyph, Long_fromInt(31457280));
            if (Long_eq(var$82, Long_fromInt(23068672))) {
                $shadow = cgttu_ColorUtils_multiplyAlpha($this.$PACKED_SHADOW_COLOR, $batchAlpha1_5);
                $boxes = $this.$vertices;
                var$84 = $boxes.data;
                var$84[2] = $shadow;
                var$84[7] = $shadow;
                var$84[12] = $shadow;
                var$84[17] = $shadow;
                $y = $dashU2 + $cos * $p0x - $sin * $p0y;
                $under = $this.$dropShadowOffset;
                $sizingX = $under.$x;
                $y = $y + $sizingX;
                var$84[0] = $y;
                $shine = $dashU2 + $cos * $p1x - $sin * $p1y + $sizingX;
                var$84[5] = $shine;
                $y = $y - $shine;
                $sizingX = $dashU2 + $cos * $p2x - $sin * $p2y + $sizingX;
                var$84[10] = $sizingX;
                var$84[15] = $y + $sizingX;
                $y = $stretchShift + $sin * $p0x + $cos * $p0y;
                $sizingX = $under.$y;
                $y = $y + $sizingX;
                var$84[1] = $y;
                $shine = $stretchShift + $sin * $p1x + $cos * $p1y + $sizingX;
                var$84[6] = $shine;
                $y = $y - $shine;
                $sizingX = $stretchShift + $sin * $p2x + $cos * $p2y + $sizingX;
                var$84[11] = $sizingX;
                var$84[16] = $y + $sizingX;
                cgtt_Font_drawVertices($this, $batch, $tex, $boxes);
            } else {
                $widthAdj = Long_compare(var$82, Long_fromInt(18874368));
                if ($widthAdj && Long_ne(var$82, Long_fromInt(20971520))) {
                    if (Long_ne(var$82, Long_fromInt(25165824)))
                        break b;
                    $widthAdj = !$located ? 0 : 1;
                    $y = $this.$PACKED_WHITE;
                    if (!$widthAdj)
                        $batchAlpha2 = $batchAlpha1_5;
                    $shine = cgttu_ColorUtils_multiplyAlpha($y, $batchAlpha2);
                    $boxes = $this.$vertices.data;
                    $boxes[2] = $shine;
                    $boxes[7] = $shine;
                    $boxes[12] = $shine;
                    $boxes[17] = $shine;
                    $xi =  -$widthAdj | 0;
                    $ya = 1.5 * $yOutline;
                    $sizingX = $cos * $p0x;
                    $amount = $sin * $p0y;
                    $xch = $cos * $p1x;
                    $ych = $sin * $p1y;
                    $leftStrength = $cos * $p2x;
                    $batchAlpha2 = $sin * $p2y;
                    $batchAlpha1_5 = $sin * $p0x;
                    $underU2 = $cos * $p0y;
                    $underV2 = $sin * $p1x;
                    $addW = $cos * $p1y;
                    $shine = $sin * $p2x;
                    $underU = $cos * $p2y;
                    while (true) {
                        if ($xi > $widthAdj)
                            break b;
                        $xa = $xi * $yOutline;
                        if ($widthAdj == 1 && !($xi <= 0 && $this.$boldStrength < 1.0))
                            $xa = $xa * $this.$boldStrength;
                        $boxes = $this.$vertices;
                        var$84 = $boxes.data;
                        $y = $dashU2 + $sizingX - $amount + $xa;
                        var$84[0] = $y;
                        $underV = $dashU2 + $xch - $ych + $xa;
                        var$84[5] = $underV;
                        $y = $y - $underV;
                        $xa = $dashU2 + $leftStrength - $batchAlpha2 + $xa;
                        var$84[10] = $xa;
                        var$84[15] = $y + $xa;
                        $y = $stretchShift + $batchAlpha1_5 + $underU2 + $ya;
                        var$84[1] = $y;
                        $xa = $stretchShift + $underV2 + $addW + $ya;
                        var$84[6] = $xa;
                        $xa = $y - $xa;
                        $y = $stretchShift + $shine + $underU + $ya;
                        var$84[11] = $y;
                        var$84[16] = $xa + $y;
                        cgtt_Font_drawVertices($this, $batch, $tex, $boxes);
                        $xi = $xi + 1 | 0;
                    }
                }
                $widthAdj_0 = !$located ? 1 : 2;
                $y = $widthAdj ? $this.$PACKED_WHITE : $this.$PACKED_BLACK;
                if ($widthAdj_0 == 1)
                    $batchAlpha2 = $batchAlpha1_5;
                $outline = cgttu_ColorUtils_multiplyAlpha($y, $batchAlpha2);
                $boxes = $this.$vertices.data;
                $boxes[2] = $outline;
                $boxes[7] = $outline;
                $boxes[12] = $outline;
                $boxes[17] = $outline;
                $xi =  -$widthAdj_0 | 0;
                $batchAlpha2 = $cos * $p0x;
                $batchAlpha1_5 = $sin * $p0y;
                $shine = $cos * $p1x;
                $underU = $sin * $p1y;
                $underV = $cos * $p2x;
                $underU2 = $sin * $p2y;
                $underV2 = $sin * $p0x;
                $addW = $cos * $p0y;
                $amount = $sin * $p1x;
                $xch = $cos * $p1y;
                $ych = $sin * $p2x;
                $leftStrength = $cos * $p2y;
                while ($xi <= $widthAdj_0) {
                    $xa = $xi * $yOutline;
                    if ($widthAdj_0 == 2 && !($xi <= 0 && $this.$boldStrength <= 1.0))
                        $xa = $xa * $this.$boldStrength;
                    $yi = (-1);
                    while ($yi <= 1) {
                        if (!(!$xi && !$yi)) {
                            $ya = $yi * $yOutline;
                            $boxes = $this.$vertices.data;
                            $y = cgtt_Font_handleIntegerPosition($font, $dashU2 + $batchAlpha2 - $batchAlpha1_5 + $xa);
                            $boxes[0] = $y;
                            var$84 = $this.$vertices.data;
                            $sizingX = cgtt_Font_handleIntegerPosition($font, $dashU2 + $shine - $underU + $xa);
                            var$84[5] = $sizingX;
                            $y = $y - $sizingX;
                            var$84 = $this.$vertices.data;
                            $sizingX = cgtt_Font_handleIntegerPosition($font, $dashU2 + $underV - $underU2 + $xa);
                            var$84[10] = $sizingX;
                            $boxes[15] = $y + $sizingX;
                            $boxes = $this.$vertices.data;
                            $y = cgtt_Font_handleIntegerPosition($font, $stretchShift + $underV2 + $addW + $ya);
                            $boxes[1] = $y;
                            var$84 = $this.$vertices.data;
                            $sizingX = cgtt_Font_handleIntegerPosition($font, $stretchShift + $amount + $xch + $ya);
                            var$84[6] = $sizingX;
                            $y = $y - $sizingX;
                            var$84 = $this.$vertices.data;
                            $sizingX = cgtt_Font_handleIntegerPosition($font, $stretchShift + $ych + $leftStrength + $ya);
                            var$84[11] = $sizingX;
                            $boxes[16] = $y + $sizingX;
                            cgtt_Font_drawVertices($this, $batch, $tex, $this.$vertices);
                        }
                        $yi = $yi + 1 | 0;
                    }
                    $xi = $xi + 1 | 0;
                }
            }
        }
        $boxes = $this.$vertices.data;
        $boxes[2] = $color;
        $boxes[7] = $color;
        $boxes[12] = $color;
        $boxes[17] = $color;
        $y = $dashU2 + $cos * $p0x;
        $underU = $sin * $p0y;
        $y = cgtt_Font_handleIntegerPosition($font, $y - $underU);
        $boxes[0] = $y;
        var$84 = $this.$vertices.data;
        $sizingX = $dashU2 + $cos * $p1x;
        $underV = $sin * $p1y;
        $sizingX = cgtt_Font_handleIntegerPosition($font, $sizingX - $underV);
        var$84[5] = $sizingX;
        $y = $y - $sizingX;
        var$84 = $this.$vertices.data;
        $sizingX = $dashU2 + $cos * $p2x;
        $underU2 = $sin * $p2y;
        $sizingX = cgtt_Font_handleIntegerPosition($font, $sizingX - $underU2);
        var$84[10] = $sizingX;
        $boxes[15] = $y + $sizingX;
        $boxes = $this.$vertices.data;
        $y = $stretchShift + $sin * $p0x;
        $underV2 = $cos * $p0y;
        $y = cgtt_Font_handleIntegerPosition($font, $y + $underV2);
        $boxes[1] = $y;
        var$84 = $this.$vertices.data;
        $sizingX = $stretchShift + $sin * $p1x;
        $addW = $cos * $p1y;
        $sizingX = cgtt_Font_handleIntegerPosition($font, $sizingX + $addW);
        var$84[6] = $sizingX;
        $y = $y - $sizingX;
        var$84 = $this.$vertices.data;
        $sizingX = $stretchShift + $sin * $p2x;
        $amount = $cos * $p2y;
        $sizingX = cgtt_Font_handleIntegerPosition($font, $sizingX + $amount);
        var$84[11] = $sizingX;
        $boxes[16] = $y + $sizingX;
        cgtt_Font_drawVertices($this, $batch, $tex, $this.$vertices);
        if ($located) {
            $y = $this.$boldStrength;
            $leftStrength = $y < 1.0 ? 0.0 : $y;
            $rightStrength = $y < 0.0 ? 0.0 : 1.0;
            if ($rightStrength !== 0.0) {
                $y = $p0x + $rightStrength;
                $sizingX = $p1x + $rightStrength;
                $shine = $p2x + $rightStrength;
                $boxes = $this.$vertices;
                var$84 = $boxes.data;
                $xa = $dashU2 + $cos * $y - $underU;
                var$84[0] = $xa;
                $ya = $dashU2 + $cos * $sizingX - $underV;
                var$84[5] = $ya;
                $xa = $xa - $ya;
                $ya = $dashU2 + $cos * $shine - $underU2;
                var$84[10] = $ya;
                var$84[15] = $xa + $ya;
                $y = $stretchShift + $sin * $y + $underV2;
                var$84[1] = $y;
                $sizingX = $stretchShift + $sin * $sizingX + $addW;
                var$84[6] = $sizingX;
                $y = $y - $sizingX;
                $sizingX = $stretchShift + $sin * $shine + $amount;
                var$84[11] = $sizingX;
                var$84[16] = $y + $sizingX;
                cgtt_Font_drawVertices($this, $batch, $tex, $boxes);
                $y = $rightStrength * 0.5;
                $sizingX = $p0x + $y;
                $shine = $p1x + $y;
                $y = $p2x + $y;
                $boxes = $this.$vertices;
                var$84 = $boxes.data;
                $xa = $dashU2 + $cos * $sizingX - $underU;
                var$84[0] = $xa;
                $ya = $dashU2 + $cos * $shine - $underV;
                var$84[5] = $ya;
                $xa = $xa - $ya;
                $ya = $dashU2 + $cos * $y - $underU2;
                var$84[10] = $ya;
                var$84[15] = $xa + $ya;
                $sizingX = $stretchShift + $sin * $sizingX + $underV2;
                var$84[1] = $sizingX;
                $shine = $stretchShift + $sin * $shine + $addW;
                var$84[6] = $shine;
                $sizingX = $sizingX - $shine;
                $y = $stretchShift + $sin * $y + $amount;
                var$84[11] = $y;
                var$84[16] = $sizingX + $y;
                cgtt_Font_drawVertices($this, $batch, $tex, $boxes);
            }
            if ($leftStrength !== 0.0) {
                $y = $p0x - $leftStrength;
                $sizingX = $p1x - $leftStrength;
                $shine = $p2x - $leftStrength;
                $boxes = $this.$vertices;
                var$84 = $boxes.data;
                $xa = $dashU2 + $cos * $y - $underU;
                var$84[0] = $xa;
                $ya = $dashU2 + $cos * $sizingX - $underV;
                var$84[5] = $ya;
                $xa = $xa - $ya;
                $ya = $dashU2 + $cos * $shine - $underU2;
                var$84[10] = $ya;
                var$84[15] = $xa + $ya;
                $y = $stretchShift + $sin * $y + $underV2;
                var$84[1] = $y;
                $sizingX = $stretchShift + $sin * $sizingX + $addW;
                var$84[6] = $sizingX;
                $y = $y - $sizingX;
                $sizingX = $stretchShift + $sin * $shine + $amount;
                var$84[11] = $sizingX;
                var$84[16] = $y + $sizingX;
                cgtt_Font_drawVertices($this, $batch, $tex, $boxes);
                $y = $leftStrength * 0.5;
                $sizingX = $p0x - $y;
                $shine = $p1x - $y;
                $xa = $p2x - $y;
                var$84 = $this.$vertices;
                $boxes = var$84.data;
                $y = $dashU2 + $cos * $sizingX - $underU;
                $boxes[0] = $y;
                $ya = $dashU2 + $cos * $shine - $underV;
                $boxes[5] = $ya;
                $y = $y - $ya;
                $ya = $dashU2 + $cos * $xa - $underU2;
                $boxes[10] = $ya;
                $boxes[15] = $y + $ya;
                $y = $stretchShift + $sin * $sizingX + $underV2;
                $boxes[1] = $y;
                $sizingX = $stretchShift + $sin * $shine + $addW;
                $boxes[6] = $sizingX;
                $y = $y - $sizingX;
                $sizingX = $stretchShift + $sin * $xa + $amount;
                $boxes[11] = $sizingX;
                $boxes[16] = $y + $sizingX;
                cgtt_Font_drawVertices($this, $batch, $tex, var$84);
            }
        }
        $stretchShift = $stretchShift + ($dashU + $scaledHeight) * (-0.5) + $dashV * 0.25 + $scaleCorrection;
        if (Long_ne(Long_and($glyph, Long_fromInt(268435456)), Long_ZERO) && !($c >= 0 && var$16 < 63488)) {
            $y = $x + $oCenterX;
            $sizingX = cgtt_Font_handleIntegerPosition($font, $y);
            $shine = $stretchShift + $oCenterY;
            $xa = cgtt_Font_handleIntegerPosition($font, $shine);
            $y = $y - $sizingX;
            $shine = $shine - $xa;
            $sizingX = cgtt_Font_handleIntegerPosition($font, $sizingX + $y);
            $xch = cgtt_Font_handleIntegerPosition($font, $xa + $shine);
            $ych = $oCenterX + $y * 0.5;
            $ya = $oCenterY + $shine * 0.5;
            $leftStrength = $sizingX + $font.$cellWidth * 0.5;
            $under = cbgu_IntMap_get0($font.$mapping, 9472);
            if ($under !== null && (isNaN($under.$offsetX) ? 1 : 0)) {
                $y = $font.$cellWidth * (-0.5);
                $sizingX = $font.$scaleX;
                $y = $y - $scale * $sizingX + $xAdvance * $font.$underX * $scale * $sizingX;
                $sizingX = ($font.$underY - 0.8125) * $font.$cellHeight * $scale * $sizingY + $ya + $font.$descent * $font.$scaleY;
                $y = $y + $xPx + $ych - $cos * $ych;
                $sizingX = $sizingX + $sin * $ych;
                cgtt_Font_drawBlockSequence($this, $batch, cgttu_BlockUtils_BOX_DRAWING.data[0], cbgu_IntMap_get($font.$mapping, $font.$solidBlock, $tr), $color, $leftStrength + $cos * $y - $sin * $sizingX, $xch + $sin * $y + $cos * $sizingX, $xAdvance * ($font.$underLength + 1.0) * $scaleX + $xPx * 5.0, $font.$cellHeight * $scale * $sizingY * (1.0 + $font.$underBreadth), $rotation);
            } else {
                $under = cbgu_IntMap_get0($font.$mapping, 95);
                if ($under !== null) {
                    $dash = $under;
                    $y = cbggg_TextureRegion_getRegionHeight($dash);
                    $sizingX = $y * $osy * $sizingY;
                    $shine = $this.$cellHeight;
                    $sizingX = $sizingX + $shine * $font.$underBreadth * $scale * $sizingY;
                    $y = ($ya - ($y + $under.$offsetY) * $font.$scaleY) * $scale * $sizingY + $shine * $font.$underY * $scale * $sizingY;
                    if ($squashed)
                        $y = $y - $font.$descent * $scaleY * $sizingY * 0.4285714328289032;
                    $underU = (cbggg_TextureRegion_getU($dash) + cbggg_TextureRegion_getU2($dash)) * 0.5 - $iw;
                    $underV = cbggg_TextureRegion_getV($dash);
                    $underU2 = $underU + $iw;
                    $underV2 = cbggg_TextureRegion_getV2($dash);
                    $shine = (-0.5) * $font.$cellWidth + $batchAlpha3 * $font.$underX - $scale * $batchAlpha;
                    $xa = (-2.0) * $xPx;
                    $addW = $xPx * 2.0;
                    $xa = $xa + $xPx + $ych - $cos * $ych;
                    $y = $y + $sin * $ych;
                    $boxes = $this.$vertices.data;
                    $boxes[2] = $color;
                    $boxes[3] = $underU;
                    $boxes[4] = $underV;
                    $boxes[7] = $color;
                    $boxes[8] = $underU;
                    $boxes[9] = $underV2;
                    $boxes[12] = $color;
                    $boxes[13] = $underU2;
                    $boxes[14] = $underV2;
                    $boxes[17] = $color;
                    $boxes[18] = $underU2;
                    $boxes[19] = $underV;
                    $shine = $shine + $xa;
                    $xa = $shine - $addW;
                    $sizingX = $y + $y0 + $sizingX;
                    $ya = $y + $y1;
                    $shine = $shine + $batchAlpha3 * ($font.$underLength + 1.0) + $addW;
                    $y = $y + $y2;
                    $underU = $leftStrength + $cos * $xa;
                    $underV = $underU - $sin * $sizingX;
                    $boxes[0] = $underV;
                    $underU = $underU - $sin * $ya;
                    $boxes[5] = $underU;
                    $underU = $underV - $underU;
                    $underV = $leftStrength + $cos * $shine - $sin * $y;
                    $boxes[10] = $underV;
                    $boxes[15] = $underU + $underV;
                    $xa = $xch + $sin * $xa;
                    $sizingX = $xa + $cos * $sizingX;
                    $boxes[1] = $sizingX;
                    $xa = $xa + $cos * $ya;
                    $boxes[6] = $xa;
                    $sizingX = $sizingX - $xa;
                    $y = $xch + $sin * $shine + $cos * $y;
                    $boxes[11] = $y;
                    $boxes[16] = $sizingX + $y;
                    cgtt_Font_drawVertices($this, $batch, cbggg_TextureRegion_getTexture($dash), $this.$vertices);
                }
            }
        }
        if (Long_ne(Long_and($glyph, Long_fromInt(134217728)), Long_ZERO) && !($c >= 0 && var$16 < 63488)) {
            $y = $x + $oCenterX;
            $sizingX = cgtt_Font_handleIntegerPosition($font, $y);
            $shine = $stretchShift + $oCenterY;
            $xa = cgtt_Font_handleIntegerPosition($font, $shine);
            $y = $y - $sizingX;
            $shine = $shine - $xa;
            $sizingX = cgtt_Font_handleIntegerPosition($font, $sizingX + $y);
            $xa = cgtt_Font_handleIntegerPosition($font, $xa + $shine);
            $y = $oCenterX + $y * 0.5;
            $shine = $oCenterY + $shine * 0.5;
            $sizingX = $sizingX + $font.$cellWidth * 0.5;
            $dash = cbgu_IntMap_get0($font.$mapping, 9472);
            if ($dash !== null && (isNaN($dash.$offsetX) ? 1 : 0)) {
                $ya = $font.$cellWidth * (-0.5);
                $underU = $font.$scaleX;
                $ya = $ya - $scale * $underU + $xAdvance * $font.$strikeX * $scale * $underU;
                $shine = $shine + ($font.$strikeY - 0.44999998807907104) * $font.$cellHeight * $scale * $sizingY + $font.$descent * $font.$scaleY;
                $ya = $ya + $xPx + $y - $cos * $y;
                $y = $shine + $sin * $y;
                cgtt_Font_drawBlockSequence($this, $batch, cgttu_BlockUtils_BOX_DRAWING.data[0], cbgu_IntMap_get($font.$mapping, $font.$solidBlock, $tr), $color, $sizingX + $cos * $ya - $sin * $y, $xa + $sin * $ya + $cos * $y, $xAdvance * ($font.$strikeLength + 1.0) * $scaleX + $xPx * 5.0, (1.0 + $font.$strikeBreadth) * $font.$cellHeight * $scale * $sizingY, $rotation);
            } else {
                $under = cbgu_IntMap_get0($font.$mapping, 45);
                if ($under !== null) {
                    $dash = $under;
                    $ya = cbggg_TextureRegion_getRegionHeight($dash);
                    $underU = $ya * $osy * $sizingY * (1.0 + $font.$strikeBreadth);
                    $shine = ($shine - ($ya + $under.$offsetY) * $font.$scaleY) * $scale * $sizingY + $font.$cellHeight * $font.$strikeY * $scale * $sizingY;
                    if ($squashed)
                        $shine = $shine - $font.$descent * $scaleY * $sizingY * 0.4285714328289032;
                    $dashU = (cbggg_TextureRegion_getU($dash) + cbggg_TextureRegion_getU2($dash)) * 0.5 - $iw;
                    $dashV = cbggg_TextureRegion_getV($dash);
                    $dashU2 = $dashU + $iw;
                    $dashV2 = cbggg_TextureRegion_getV2($dash);
                    $ya =  -$this.$cellWidth * 0.5 + $batchAlpha3 * $font.$strikeX - $scale * $batchAlpha;
                    $underV = (-2.0) * $xPx;
                    $addW = $xPx * 2.0;
                    $underV = $underV + $xPx + $y - $cos * $y;
                    $y = $shine + $sin * $y;
                    $boxes = $this.$vertices.data;
                    $boxes[2] = $color;
                    $boxes[3] = $dashU;
                    $boxes[4] = $dashV;
                    $boxes[7] = $color;
                    $boxes[8] = $dashU;
                    $boxes[9] = $dashV2;
                    $boxes[12] = $color;
                    $boxes[13] = $dashU2;
                    $boxes[14] = $dashV2;
                    $boxes[17] = $color;
                    $boxes[18] = $dashU2;
                    $boxes[19] = $dashV;
                    $shine = $ya + $underV;
                    $ya = $shine - $addW;
                    $underU = $y + $y0 + $underU;
                    $underV = $y + $y1;
                    $shine = $shine + $batchAlpha3 * ($font.$strikeLength + 1.0) + $addW;
                    $y = $y + $y2;
                    $underU2 = $sizingX + $cos * $ya;
                    $underV2 = $underU2 - $sin * $underU;
                    $boxes[0] = $underV2;
                    $underU2 = $underU2 - $sin * $underV;
                    $boxes[5] = $underU2;
                    $underU2 = $underV2 - $underU2;
                    $sizingX = $sizingX + $cos * $shine - $sin * $y;
                    $boxes[10] = $sizingX;
                    $boxes[15] = $underU2 + $sizingX;
                    $sizingX = $xa + $sin * $ya;
                    $ya = $sizingX + $cos * $underU;
                    $boxes[1] = $ya;
                    $sizingX = $sizingX + $cos * $underV;
                    $boxes[6] = $sizingX;
                    $sizingX = $ya - $sizingX;
                    $y = $xa + $sin * $shine + $cos * $y;
                    $boxes[11] = $y;
                    $boxes[16] = $sizingX + $y;
                    cgtt_Font_drawVertices($this, $batch, cbggg_TextureRegion_getTexture($dash), $this.$vertices);
                }
            }
        }
        if (!(!(Long_ge(var$82, Long_fromInt(27262976)) && $c < 0) && var$16 < 63488)) {
            $x = $x + $oCenterX;
            $y = cgtt_Font_handleIntegerPosition($font, $x);
            $sizingX = $stretchShift + $oCenterY;
            $shine = cgtt_Font_handleIntegerPosition($font, $sizingX);
            $x = $x - $y;
            $sizingX = $sizingX - $shine;
            $y = cgtt_Font_handleIntegerPosition($font, $y + $x);
            $shine = cgtt_Font_handleIntegerPosition($font, $shine + $sizingX);
            $x = $oCenterX + $x * 0.5;
            $sizingX = $oCenterY + $sizingX * 0.5;
            $xa =  -$cos * $x + $batchAlpha3 * $font.$fancyX;
            $x = $font.$descent * $font.$scaleY * 0.5 * ($scale * $sizingY - $font.$fancyY) - $sizingX + $sin * $x;
            cgtt_Font_drawFancyLine($this, $batch, var$82, $y + $cos * $xa - $sin * $x, $shine + $sin * $xa + $cos * $x, $batchAlpha3 * (1.0 + $this.$underLength), $xPx, $yPx, $rotation);
        }
        return $batchAlpha3;
    }
    return 0.0;
},
cgtt_Font_markup = ($this, $text, $appendTo) => {
    let $capitalize, $previousWasLetter, $capsLock, $lowerCase, $initial, $scale, $fontIndex, $baseColor, var$11, $targetWidth, $kern, $i, $n, var$16, var$17, $next, var$19, $scaleX, var$21, $len, $sizeChange, $fontChange, $innerSquareStart, $end, $eq, $c, $ch, $after, $modes, var$32, var$33, $lookupColor, $gdxColor, $adv, $ox, $ox_0, $w, $earlier, $later, $j, $leading, $hyphenated, $change, $changeNext, $curly, $k, $k2, $k3, $showCh, $change_0;
    $capitalize = 0;
    $previousWasLetter = 0;
    $capsLock = 0;
    $lowerCase = 0;
    $initial = 1;
    $scale = 3;
    $fontIndex = (-1);
    $baseColor = Long_and(jl_Long_reverseBytes(Long_fromInt(cbgu_NumberUtils_floatToIntBits(cgtt_Layout_getBaseColor($appendTo)))), Long_create(0, 4294967294));
    var$11 = $appendTo.$font1;
    if (!(var$11 !== null && jl_Object_equals(var$11, $this))) {
        cgtt_Layout_clear($appendTo);
        cgtt_Layout_font($appendTo, $this);
    }
    (cgtt_Layout_peekLine($appendTo)).$height = 0.0;
    $targetWidth = cgtt_Layout_getTargetWidth($appendTo);
    $kern = (-1);
    cbgu_LongArray_clear($this.$historyBuffer);
    cbgu_ObjectLongMap_clear($this.$labeledStates);
    cbgu_ObjectLongMap_putAll($this.$labeledStates, $this.$storedStates);
    $i = 0;
    $n = jl_String_length($text);
    var$16 = Long_and($baseColor, Long_fromInt(-100663297));
    var$17 = $rt_compare($targetWidth, 0.0);
    $next = $baseColor;
    var$19 = $this;
    a: {
        b: while (true) {
            if ($i >= $n)
                break a;
            c: {
                $scaleX = var$19.$scaleX;
                var$21 = $scale + 1 | 0;
                $scaleX = $scaleX * var$21 * 0.25;
                if ($this.$omitCurlyBraces && jl_String_charAt($text, $i) == 123) {
                    $len = $i + 1 | 0;
                    if ($len < $n && jl_String_charAt($text, $len) != 123) {
                        $sizeChange = (-1);
                        $fontChange = (-1);
                        $innerSquareStart = (-1);
                        $end = jl_String_indexOf($text, 125, $i);
                        if ($end == (-1))
                            $end = jl_String_length($text);
                        $eq = $end;
                        while ($i < $n && $i <= $end) {
                            d: {
                                $c = jl_String_charAt($text, $i);
                                if ($this.$enableSquareBrackets && $c == 91) {
                                    $ch = $i + 1 | 0;
                                    if ($ch < $end && jl_String_charAt($text, $ch) == 43) {
                                        $innerSquareStart = $i;
                                        break d;
                                    }
                                }
                                if ($innerSquareStart == (-1))
                                    cgtt_Layout_add($appendTo, Long_or($next, Long_fromInt($c)));
                            }
                            if ($this.$enableSquareBrackets && $c == 93 && $innerSquareStart != (-1)) {
                                var$11 = var$19.$nameLookup;
                                if (var$11 !== null && ($i - $innerSquareStart | 0) >= 2) {
                                    $c = var$11.$get10(cgttu_StringUtils_safeSubstring($text, $innerSquareStart + 2 | 0, $i), 43);
                                    $innerSquareStart = (-1);
                                    cgtt_Layout_add($appendTo, Long_or($next, Long_fromInt($c)));
                                }
                            }
                            if ($c == 64)
                                $fontChange = $i;
                            else if ($c == 37)
                                $sizeChange = $i;
                            else if ($c == 63)
                                $sizeChange = (-1);
                            else if ($c == 94)
                                $sizeChange = (-1);
                            else if ($c == 61)
                                $eq = jl_Math_min($eq, $i);
                            $i = $i + 1 | 0;
                        }
                        $ch = $eq + 1 | 0;
                        $after = $ch < $end ? jl_String_charAt($text, $ch) : 0;
                        e: {
                            if ($len != $end && !jl_String_equalsIgnoreCase($rt_s(501), cgttu_StringUtils_safeSubstring($text, $len, $end))) {
                                if ($after != 94 && $after != 61 && $after != 46) {
                                    if ($fontChange >= 0) {
                                        var$11 = $this.$family;
                                        if (var$11 !== null) {
                                            $fontIndex = var$11.$fontAliases.$get10(cgttu_StringUtils_safeSubstring($text, $fontChange + 1 | 0, $end), (-1));
                                            if ($fontIndex == (-1)) {
                                                $fontIndex = 0;
                                                var$19 = $this;
                                                $modes = $next;
                                                break e;
                                            }
                                            var$19 = $this.$family.$connected.data[$fontIndex];
                                            if (var$19 !== null) {
                                                $modes = $next;
                                                break e;
                                            }
                                            $fontIndex = 0;
                                            var$19 = $this;
                                            $modes = $next;
                                            break e;
                                        }
                                    }
                                    if ($sizeChange < 0)
                                        $modes = $next;
                                    else {
                                        $len = $sizeChange + 1 | 0;
                                        if ($len != $end) {
                                            $scale = ((cgttu_StringUtils_intFromDec($text, $len, $end) - 24 | 0) / 25 | 0) & 15;
                                            $modes = $next;
                                        } else if ($ch == $sizeChange) {
                                            $scale = 3;
                                            $modes = $next;
                                        } else {
                                            $scale = ((cgttu_StringUtils_intFromDec($text, $ch, $sizeChange) - 24 | 0) / 25 | 0) & 15;
                                            $modes = $next;
                                        }
                                    }
                                } else
                                    f: {
                                        switch ($after) {
                                            case 46:
                                                if (Long_eq(Long_and($next, Long_fromInt(100663296)), Long_fromInt(33554432))) {
                                                    $modes = Long_and($next, Long_fromInt(-33554433));
                                                    break f;
                                                }
                                                $modes = Long_or(Long_and($next, Long_fromInt(-100663297)), Long_fromInt(33554432));
                                                break f;
                                            case 61:
                                                if (Long_eq(Long_and($next, Long_fromInt(100663296)), Long_fromInt(67108864))) {
                                                    $modes = Long_and($next, Long_fromInt(-67108865));
                                                    break f;
                                                }
                                                $modes = Long_or(Long_and($next, Long_fromInt(-100663297)), Long_fromInt(67108864));
                                                break f;
                                            case 94:
                                                if (Long_ne(Long_and($next, Long_fromInt(100663296)), Long_fromInt(100663296))) {
                                                    $modes = Long_or($next, Long_fromInt(100663296));
                                                    break f;
                                                }
                                                $modes = Long_and($next, Long_fromInt(-100663297));
                                                break f;
                                            default:
                                        }
                                        $modes = $next;
                                    }
                            } else {
                                cbgu_LongArray_add($this.$historyBuffer, $next);
                                $scale = 3;
                                $fontIndex = 0;
                                $modes = Long_and($next, Long_fromInt(-100663297));
                                var$19 = $this;
                            }
                        }
                        $next = Long_or(Long_or(Long_and($modes, Long_fromInt(-16711681)), Long_fromInt((($scale - 3 | 0) & 15) << 20)), Long_fromInt(($fontIndex & 15) << 16));
                        if (Long_ne($modes, $next))
                            cbgu_LongArray_add($this.$historyBuffer, $modes);
                        $i = $i + (-1) | 0;
                        break c;
                    }
                }
                if ($this.$enableSquareBrackets && jl_String_charAt($text, $i) == 91) {
                    $c = 91;
                    $i = $i + 1 | 0;
                    if ($i < $n) {
                        $c = jl_String_charAt($text, $i);
                        if ($c != 91 && $c != 43) {
                            if ($c == 93) {
                                if (cbgu_LongArray_isEmpty($this.$historyBuffer)) {
                                    $scale = 3;
                                    $capitalize = 0;
                                    $capsLock = 0;
                                    $lowerCase = 0;
                                    $next = var$16;
                                    var$19 = $this;
                                    break c;
                                }
                                $next = cbgu_LongArray_pop($this.$historyBuffer);
                                $scale = Long_lo(Long_shru(Long_and($next, Long_fromInt(32505856)), 20));
                                var$11 = $this.$family;
                                if (var$11 === null) {
                                    $fontIndex = 0;
                                    var$19 = $this;
                                    break c;
                                }
                                $fontIndex = Long_lo(Long_shru(Long_and($next, Long_fromInt(983040)), 16));
                                var$19 = var$11.$connected.data[$fontIndex & 15];
                                if (var$19 !== null)
                                    break c;
                                var$19 = $this;
                                break c;
                            }
                            $len = jl_String_indexOf($text, 93, $i) - $i | 0;
                            if ($len < 0)
                                break a;
                            $ch = $rt_compare($len, 1);
                            if (!(!$ch && $c == 32))
                                cbgu_LongArray_add($this.$historyBuffer, $next);
                            g: {
                                switch ($c) {
                                    case 32:
                                        $capitalize = 0;
                                        $capsLock = 0;
                                        $lowerCase = 0;
                                        if ($ch <= 0) {
                                            $scale = 3;
                                            $next = var$16;
                                            var$19 = $this;
                                            break g;
                                        }
                                        $next = cbgu_ObjectLongMap_get($this.$labeledStates, cgttu_StringUtils_safeSubstring($text, $i + 1 | 0, $i + $len | 0), $next);
                                        $scale = Long_lo(Long_add(Long_and(Long_shru($next, 20), Long_fromInt(15)), Long_fromInt(3)));
                                        var$11 = $this.$family;
                                        if (var$11 === null)
                                            break g;
                                        var$19 = var$11.$connected.data[Long_lo(Long_and(Long_shru($next, 16), Long_fromInt(15)))];
                                        if (var$19 !== null)
                                            break g;
                                        var$19 = $this;
                                        break g;
                                    case 33:
                                        $capsLock = $capsLock ? 0 : 1;
                                        $capitalize = 0;
                                        $lowerCase = 0;
                                        break g;
                                    case 35:
                                        if ($len >= 4 && $len < 7) {
                                            $modes = cgttu_StringUtils_longFromHex($text, $i + 1 | 0, $i + 4 | 0);
                                            var$32 = Long_and(Long_shl($modes, 52), Long_create(0, 4026531840));
                                            var$33 = Long_shl($modes, 48);
                                            var$32 = Long_or(Long_or(var$32, Long_and(var$33, Long_create(0, 251658240))), Long_and(var$33, Long_create(0, 15728640)));
                                            var$33 = Long_shl($modes, 44);
                                            $modes = Long_or(Long_or(Long_or(Long_or(var$32, Long_and(var$33, Long_create(0, 983040))), Long_and(var$33, Long_create(0, 61440))), Long_and(Long_shl($modes, 40), Long_create(0, 3840))), Long_create(0, 254));
                                        } else
                                            $modes = $len >= 7 && $len < 9 ? Long_or(Long_shl(cgttu_StringUtils_longFromHex($text, $i + 1 | 0, $i + 7 | 0), 40), Long_create(0, 254)) : $len < 9 ? $baseColor : Long_and(Long_shl(cgttu_StringUtils_longFromHex($text, $i + 1 | 0, $i + 9 | 0), 32), Long_create(0, 4294967294));
                                        $next = Long_or(Long_and($next, Long_create(4294967295, 0)), $modes);
                                        break g;
                                    case 37:
                                        if ($len < 2) {
                                            $next = Long_and($next, Long_fromInt(-32505857));
                                            $scale = 3;
                                            break g;
                                        }
                                        $ch = $i + 1 | 0;
                                        if (jl_String_charAt($text, $ch) != 63 && jl_String_charAt($text, $ch) != 94) {
                                            $modes = Long_and($next, Long_fromInt(-32505857));
                                            $scale = ((cgttu_StringUtils_intFromDec($text, $ch, $i + $len | 0) - 24 | 0) / 25 | 0) & 15;
                                            $next = Long_or($modes, Long_fromInt((($scale - 3 | 0) & 15) << 20));
                                            break g;
                                        }
                                        $modes = jl_String_charAt($text, $ch) != 94 ? Long_fromInt(16777216) : Long_fromInt(17825792);
                                        if ($len >= 5) {
                                            $ch = r_Category_caseUp(jl_String_charAt($text, $i + 2 | 0));
                                            if ($ch == 66)
                                                $modes = Long_or($modes, Long_fromInt(18874368));
                                            else if ($ch == 87)
                                                $modes = r_Category_caseUp(jl_String_charAt($text, $i + 3 | 0)) != 72 ? Long_or($modes, Long_fromInt(29360128)) : Long_or($modes, Long_fromInt(20971520));
                                            else if ($ch == 83) {
                                                if (r_Category_caseUp(jl_String_charAt($text, $i + 4 | 0)) == 73)
                                                    $modes = Long_or($modes, Long_fromInt(25165824));
                                                else if (r_Category_caseUp(jl_String_charAt($text, $i + 3 | 0)) == 72)
                                                    $modes = Long_or($modes, Long_fromInt(23068672));
                                            } else if ($ch == 68)
                                                $modes = Long_or($modes, Long_fromInt(23068672));
                                            else if ($ch == 69)
                                                $modes = Long_or($modes, Long_fromInt(27262976));
                                            else if ($ch == 78)
                                                $modes = Long_or($modes, Long_fromInt(31457280));
                                        }
                                        $next = Long_xor(Long_and($next, Long_xor(Long_fromInt(-32505857), Long_shru(Long_and($next, Long_fromInt(16777216)), 4))), $modes);
                                        $scale = 3;
                                        break g;
                                    case 40:
                                        if (($len - 2 | 0) <= 0)
                                            break g;
                                        cbgu_ObjectLongMap_put($this.$labeledStates, cgttu_StringUtils_safeSubstring($text, $i + 1 | 0, ($i + $len | 0) - 1 | 0), Long_and($next, Long_fromInt(-65536)));
                                        break g;
                                    case 42:
                                        break;
                                    case 44:
                                        $lowerCase = $lowerCase ? 0 : 1;
                                        $capitalize = 0;
                                        $capsLock = 0;
                                        break g;
                                    case 46:
                                        if (Long_eq(Long_and($next, Long_fromInt(100663296)), Long_fromInt(33554432))) {
                                            $next = Long_and($next, Long_fromInt(-33554433));
                                            break g;
                                        }
                                        $next = Long_or(Long_and($next, Long_fromInt(-100663297)), Long_fromInt(33554432));
                                        break g;
                                    case 47:
                                        $next = Long_xor($next, Long_fromInt(536870912));
                                        break g;
                                    case 59:
                                        $capitalize = $capitalize ? 0 : 1;
                                        $capsLock = 0;
                                        $lowerCase = 0;
                                        break g;
                                    case 61:
                                        if (Long_eq(Long_and($next, Long_fromInt(100663296)), Long_fromInt(67108864))) {
                                            $next = Long_and($next, Long_fromInt(-67108865));
                                            break g;
                                        }
                                        $next = Long_or(Long_and($next, Long_fromInt(-100663297)), Long_fromInt(67108864));
                                        break g;
                                    case 64:
                                        var$11 = $this.$family;
                                        if (var$11 === null) {
                                            $fontIndex = 0;
                                            var$19 = $this;
                                            break g;
                                        }
                                        $fontIndex = var$11.$fontAliases.$get10(cgttu_StringUtils_safeSubstring($text, $i + 1 | 0, $i + $len | 0), 0);
                                        $next = Long_or(Long_and($next, Long_fromInt(-983041)), Long_shl(Long_and(Long_fromInt($fontIndex), Long_fromInt(15)), 16));
                                        var$19 = $this.$family.$connected.data[$fontIndex & 15];
                                        if (var$19 !== null)
                                            break g;
                                        var$19 = $this;
                                        break g;
                                    case 94:
                                        if (Long_ne(Long_and($next, Long_fromInt(100663296)), Long_fromInt(100663296))) {
                                            $next = Long_or($next, Long_fromInt(100663296));
                                            break g;
                                        }
                                        $next = Long_and($next, Long_fromInt(-100663297));
                                        break g;
                                    case 95:
                                        $next = Long_xor($next, Long_fromInt(268435456));
                                        break g;
                                    case 124:
                                        var$11 = $this.$colorLookup;
                                        $ch = $i + 1 | 0;
                                        $lookupColor = $i + $len | 0;
                                        $lookupColor = cgtt_ColorLookup$_clinit_$lambda$_2_1_getRgba(var$11, $text, $ch, $lookupColor) & (-2);
                                        $next = Long_or(Long_and($next, Long_create(4294967295, 0)), $lookupColor == 256 ? $baseColor : Long_shl(Long_fromInt($lookupColor), 32));
                                        break g;
                                    case 126:
                                        $next = Long_xor($next, Long_fromInt(134217728));
                                        break g;
                                    default:
                                        var$11 = $this.$colorLookup;
                                        $ch = $i + $len | 0;
                                        $gdxColor = cgtt_ColorLookup$_clinit_$lambda$_2_1_getRgba(var$11, $text, $i, $ch) & (-2);
                                        $next = Long_or(Long_and($next, Long_create(4294967295, 0)), $gdxColor == 256 ? $baseColor : Long_shl(Long_fromInt($gdxColor), 32));
                                        break g;
                                }
                                $next = Long_xor($next, Long_fromInt(1073741824));
                            }
                            $i = $i + $len | 0;
                            break c;
                        }
                    }
                    if ($c == 43 && var$19.$nameLookup !== null) {
                        $len = jl_String_indexOf($text, 93, $i) - $i | 0;
                        if ($len >= 0) {
                            var$11 = var$19.$nameLookup;
                            $ch = $i + 1 | 0;
                            $i = $i + $len | 0;
                            $c = var$11.$get10(cgttu_StringUtils_safeSubstring($text, $ch, $i), 43);
                            $scaleX = var$21 * 0.25 * var$19.$cellHeight / cgtt_Font$GlyphRegion_getMaxDimension(cbgu_IntMap_get(var$19.$mapping, $c, var$19.$defaultValue)) * var$19.$inlineImageStretch;
                        }
                    }
                    if (var$19.$kerning === null) {
                        var$11 = cgtt_Layout_peekLine($appendTo);
                        $adv = var$11.$width + cgtt_Font_xAdvance(var$19, $scaleX, Long_or($next, Long_fromInt($c)));
                        var$11.$width = $adv;
                        if ($initial && !$this.$isMono && !($c >= 57344 && $c < 63488)) {
                            $ox = (cbgu_IntMap_get(var$19.$mapping, $c, var$19.$defaultValue)).$offsetX;
                            $ox = !(isNaN($ox) ? 1 : 0) ? $ox * $scaleX : 0.0;
                            if ($ox < 0.0) {
                                var$11 = cgtt_Layout_peekLine($appendTo);
                                $adv = var$11.$width - $ox;
                                var$11.$width = $adv;
                            }
                        }
                        $initial = 0;
                    } else {
                        $kern = $kern << 16 | $c;
                        var$11 = cgtt_Layout_peekLine($appendTo);
                        $adv = var$11.$width;
                        $ox_0 = cgtt_Font_xAdvance(var$19, $scaleX, Long_or($next, Long_fromInt($c)));
                        $w = cbgu_IntFloatMap_get(var$19.$kerning, $kern, 0.0) * $scaleX;
                        $ox = 1.0 + 0.5 * Long_toNumber(Long_shr(Long_neg(Long_and($next, Long_fromInt(100663296))), 63));
                        $adv = $adv + $ox_0 + $w * $ox;
                        var$11.$width = $adv;
                        if ($initial && !$this.$isMono && !($c >= 57344 && $c < 63488)) {
                            $ox_0 = (cbgu_IntMap_get(var$19.$mapping, $c, var$19.$defaultValue)).$offsetX;
                            $ox = (!(isNaN($ox_0) ? 1 : 0) ? $ox_0 * $scaleX : 0.0) * $ox;
                            if ($ox < 0.0) {
                                var$11 = cgtt_Layout_peekLine($appendTo);
                                $adv = var$11.$width - $ox;
                                var$11.$width = $adv;
                            }
                        }
                        $initial = 0;
                    }
                    if ($c != 91)
                        cgtt_Layout_add($appendTo, Long_or($next, Long_fromInt($c)));
                    else
                        cgtt_Layout_add($appendTo, Long_or($next, Long_fromInt(2)));
                    if (var$17 > 0 && $adv > $targetWidth) {
                        $earlier = cgtt_Layout_peekLine($appendTo);
                        $later = cgtt_Layout_pushLine($appendTo);
                        if ($later !== null) {
                            $j = $earlier.$glyphs.$size1 - 2 | 0;
                            h: {
                                while ($j >= 0) {
                                    i: {
                                        $modes = cbgu_LongArray_get($earlier.$glyphs, $j);
                                        if (Long_ne(Long_shru($modes, 32), Long_ZERO)) {
                                            var$11 = $this.$breakChars;
                                            if (ju_Arrays_binarySearch(var$11.$items2, 0, var$11.$size5, Long_lo($modes) & 65535) < 0)
                                                break i;
                                        }
                                        $leading = 0;
                                        $hyphenated = 1;
                                        while ($j > 0) {
                                            $modes = cbgu_LongArray_get($earlier.$glyphs, $j);
                                            if (Long_ne(Long_shru($modes, 32), Long_ZERO)) {
                                                var$11 = $this.$spaceChars;
                                                if (ju_Arrays_binarySearch(var$11.$items2, 0, var$11.$size5, Long_lo($modes) & 65535) < 0)
                                                    break;
                                            }
                                            $leading = $leading + 1 | 0;
                                            $j = $j + (-1) | 0;
                                            $hyphenated = 0;
                                        }
                                        cbgu_LongArray_clear($this.$glyphBuffer);
                                        $change = 0.0;
                                        $changeNext = 0.0;
                                        if (var$19.$kerning === null) {
                                            $curly = 0;
                                            $k = $j + 1 | 0;
                                            while (true) {
                                                var$11 = $earlier.$glyphs;
                                                if ($k >= var$11.$size1)
                                                    break;
                                                j: {
                                                    $modes = cbgu_LongArray_get(var$11, $k);
                                                    if ($this.$omitCurlyBraces && $curly) {
                                                        cbgu_LongArray_add($this.$glyphBuffer, $modes);
                                                        $len = Long_lo($modes) & 65535;
                                                        if ($len != 123) {
                                                            if ($len != 125)
                                                                break j;
                                                            $curly = 0;
                                                            break j;
                                                        }
                                                        $curly = 0;
                                                    }
                                                    $len = Long_lo($modes) & 65535;
                                                    if ($len == 123) {
                                                        cbgu_LongArray_add($this.$glyphBuffer, $modes);
                                                        $curly = $this.$omitCurlyBraces;
                                                    } else {
                                                        $adv = cgtt_Font_xAdvance(var$19, $scaleX, $modes);
                                                        $change = $change + $adv;
                                                        $leading = $leading + (-1) | 0;
                                                        if ($leading < 0) {
                                                            cbgu_LongArray_add($this.$glyphBuffer, $modes);
                                                            $changeNext = $changeNext + $adv;
                                                            if ($this.$glyphBuffer.$size1 == 1) {
                                                                if (!$this.$isMono && !($c >= 57344 && $c < 63488)) {
                                                                    $ox = (cbgu_IntMap_get(var$19.$mapping, $len, var$19.$defaultValue)).$offsetX;
                                                                    $adv = (!(isNaN($ox) ? 1 : 0) ? $ox * $scaleX : 0.0) * (1.0 + 0.5 * Long_toNumber(Long_shr(Long_neg(Long_and($next, Long_fromInt(100663296))), 63)));
                                                                    if ($adv < 0.0)
                                                                        $changeNext = $changeNext - $adv;
                                                                }
                                                                $initial = 0;
                                                            }
                                                        }
                                                    }
                                                }
                                                $k = $k + 1 | 0;
                                            }
                                        } else {
                                            $k2 = Long_lo((cbgu_LongArray_get($earlier.$glyphs, $j))) & 65535;
                                            $k3 = (-1);
                                            $curly = 0;
                                            $k = $j + 1 | 0;
                                            while (true) {
                                                var$11 = $earlier.$glyphs;
                                                if ($k >= var$11.$size1)
                                                    break;
                                                k: {
                                                    var$32 = cbgu_LongArray_get(var$11, $k);
                                                    if ($this.$omitCurlyBraces && $curly) {
                                                        cbgu_LongArray_add($this.$glyphBuffer, var$32);
                                                        $len = Long_lo(var$32) & 65535;
                                                        if ($len != 123) {
                                                            if ($len != 125)
                                                                break k;
                                                            $curly = 0;
                                                            break k;
                                                        }
                                                        $curly = 0;
                                                    }
                                                    $ch = Long_lo(var$32) & 65535;
                                                    if ($ch == 123) {
                                                        cbgu_LongArray_add($this.$glyphBuffer, var$32);
                                                        $curly = $this.$omitCurlyBraces;
                                                    } else {
                                                        $k2 = $k2 << 16 | $ch;
                                                        $adv = cgtt_Font_xAdvance(var$19, $scaleX, var$32);
                                                        $ox = cbgu_IntFloatMap_get(var$19.$kerning, $k2, 0.0) * $scaleX;
                                                        $ox_0 = 1.0 + 0.5 * Long_toNumber(Long_shr(Long_neg(Long_and(var$32, Long_fromInt(100663296))), 63));
                                                        $change = $change + $adv + $ox * $ox_0;
                                                        $leading = $leading + (-1) | 0;
                                                        if ($leading < 0) {
                                                            $k3 = $k3 << 16 | $ch;
                                                            $changeNext = $changeNext + $adv + cbgu_IntFloatMap_get(var$19.$kerning, $k3, 0.0) * $scaleX * $ox_0;
                                                            cbgu_LongArray_add($this.$glyphBuffer, var$32);
                                                            if ($this.$glyphBuffer.$size1 == 1) {
                                                                if (!$this.$isMono && !($c >= 57344 && $c < 63488)) {
                                                                    $ox = (cbgu_IntMap_get(var$19.$mapping, $ch, var$19.$defaultValue)).$offsetX;
                                                                    $adv = (!(isNaN($ox) ? 1 : 0) ? $ox * $scaleX : 0.0) * (1.0 + 0.5 * Long_toNumber(Long_shr(Long_neg(Long_and($next, Long_fromInt(100663296))), 63)));
                                                                    if ($adv < 0.0)
                                                                        $changeNext = $changeNext - $adv;
                                                                }
                                                                $initial = 0;
                                                            }
                                                        }
                                                    }
                                                }
                                                $k = $k + 1 | 0;
                                            }
                                        }
                                        if ($earlier.$width - $change <= $targetWidth) {
                                            cbgu_LongArray_truncate($earlier.$glyphs, $j + 1 | 0);
                                            if (!$hyphenated) {
                                                var$11 = $earlier.$glyphs;
                                                cbgu_LongArray_add(var$11, cgtt_Font_applyChar(cbgu_LongArray_isEmpty(var$11) ? Long_ZERO : cbgu_LongArray_peek($earlier.$glyphs), 32));
                                            }
                                            $later.$width = $changeNext;
                                            $earlier.$width = $earlier.$width - $change;
                                            cbgu_LongArray_addAll($later.$glyphs, $this.$glyphBuffer);
                                            $later.$height = jl_Math_max0($later.$height, var$19.$cellHeight * var$21 * 0.25);
                                            break h;
                                        }
                                    }
                                    $j = $j + (-1) | 0;
                                }
                            }
                            if (cbgu_LongArray_isEmpty($later.$glyphs))
                                cbgu_Array_pop($appendTo.$lines0);
                        } else if (cgtt_Font_handleEllipsis($this, $appendTo))
                            return $appendTo;
                    } else
                        (cgtt_Layout_peekLine($appendTo)).$height = jl_Math_max0((cgtt_Layout_peekLine($appendTo)).$height, var$19.$cellHeight * var$21 * 0.25);
                } else {
                    $ch = jl_String_charAt($text, $i);
                    if (cgttu_StringUtils_isLowerCase($ch)) {
                        if (!(!($capitalize && !$previousWasLetter) && !$capsLock))
                            $ch = r_Category_caseUp($ch);
                        $previousWasLetter = 1;
                    } else if (!cgttu_StringUtils_isUpperCase($ch))
                        $previousWasLetter = 0;
                    else {
                        if (!(!($capitalize && $previousWasLetter) && !$lowerCase))
                            $ch = r_Category_caseDown($ch);
                        $previousWasLetter = 1;
                    }
                    $showCh = Long_ne(Long_and($next, Long_fromInt(17825792)), Long_fromInt(17825792)) ? $ch : r_Category_caseUp($ch);
                    if ($ch >= 57344 && $ch < 63488)
                        $scaleX = var$21 * 0.25 * var$19.$cellHeight / cgtt_Font$GlyphRegion_getMaxDimension(cbgu_IntMap_get(var$19.$mapping, $ch, var$19.$defaultValue)) * var$19.$inlineImageStretch;
                    if (var$19.$kerning === null) {
                        var$11 = cgtt_Layout_peekLine($appendTo);
                        $w = var$11.$width + cgtt_Font_xAdvance(var$19, $scaleX, Long_or($next, Long_fromInt($showCh)));
                        var$11.$width = $w;
                    } else {
                        $kern = $kern << 16 | $showCh;
                        var$11 = cgtt_Layout_peekLine($appendTo);
                        $ox = var$11.$width;
                        $modes = Long_or($next, Long_fromInt($showCh));
                        $w = $ox + cgtt_Font_xAdvance(var$19, $scaleX, $modes) + cbgu_IntFloatMap_get(var$19.$kerning, $kern, 0.0) * $scaleX * (1.0 + 0.5 * Long_toNumber(Long_shr(Long_neg(Long_and($modes, Long_fromInt(100663296))), 63)));
                        var$11.$width = $w;
                    }
                    if ($initial && !$this.$isMono && !($showCh >= 57344 && $showCh < 63488)) {
                        $ox = (cbgu_IntMap_get(var$19.$mapping, $showCh, var$19.$defaultValue)).$offsetX;
                        $adv = (!(isNaN($ox) ? 1 : 0) ? $ox * $scaleX : 0.0) * (1.0 + 0.5 * Long_toNumber(Long_shr(Long_neg(Long_and($next, Long_fromInt(100663296))), 63)));
                        if ($adv < 0.0) {
                            var$11 = cgtt_Layout_peekLine($appendTo);
                            $w = var$11.$width - $adv;
                            var$11.$width = $w;
                        }
                    }
                    $initial = 0;
                    if ($ch == 10) {
                        (cgtt_Layout_peekLine($appendTo)).$height = jl_Math_max0((cgtt_Layout_peekLine($appendTo)).$height, var$19.$cellHeight * var$21 * 0.25);
                        $initial = 1;
                    }
                    cgtt_Layout_add($appendTo, Long_or($next, Long_fromInt($ch)));
                    if (!(var$17 > 0 && $w > $targetWidth) && !$appendTo.$atLimit)
                        (cgtt_Layout_peekLine($appendTo)).$height = jl_Math_max0((cgtt_Layout_peekLine($appendTo)).$height, var$19.$cellHeight * var$21 * 0.25);
                    else {
                        $earlier = cgtt_Layout_peekLine($appendTo);
                        if ($appendTo.$lines0.$size0 >= $appendTo.$maxLines)
                            $later = null;
                        else {
                            $later = cgtt_Line__init_();
                            $later.$height = 0.0;
                            cbgu_Array_add($appendTo.$lines0, $later);
                            $initial = 1;
                        }
                        if ($later !== null) {
                            $j = $earlier.$glyphs.$size1 - 2 | 0;
                            l: {
                                while ($j >= 0) {
                                    m: {
                                        $modes = cbgu_LongArray_get($earlier.$glyphs, $j);
                                        if (Long_ne(Long_shru($modes, 32), Long_ZERO)) {
                                            var$11 = $this.$breakChars;
                                            if (ju_Arrays_binarySearch(var$11.$items2, 0, var$11.$size5, Long_lo($modes) & 65535) < 0)
                                                break m;
                                        }
                                        $leading = 0;
                                        $hyphenated = 1;
                                        while ($j > 0) {
                                            $modes = cbgu_LongArray_get($earlier.$glyphs, $j);
                                            if (Long_ne(Long_shru($modes, 32), Long_ZERO)) {
                                                var$11 = $this.$spaceChars;
                                                if (ju_Arrays_binarySearch(var$11.$items2, 0, var$11.$size5, Long_lo($modes) & 65535) < 0)
                                                    break;
                                            }
                                            $leading = $leading + 1 | 0;
                                            $j = $j + (-1) | 0;
                                            $hyphenated = 0;
                                        }
                                        cbgu_LongArray_clear($this.$glyphBuffer);
                                        $change_0 = 0.0;
                                        $changeNext = 0.0;
                                        if (var$19.$kerning === null) {
                                            $curly = 0;
                                            $k = $j + 1 | 0;
                                            while (true) {
                                                var$11 = $earlier.$glyphs;
                                                if ($k >= var$11.$size1)
                                                    break;
                                                $modes = cbgu_LongArray_get(var$11, $k);
                                                $len = Long_ne(Long_and($modes, Long_fromInt(17825792)), Long_fromInt(17825792)) ? Long_lo($modes) & 65535 : r_Category_caseUp(Long_lo($modes) & 65535);
                                                n: {
                                                    if ($this.$omitCurlyBraces && $curly) {
                                                        cbgu_LongArray_add($this.$glyphBuffer, $modes);
                                                        $ch = Long_lo($modes) & 65535;
                                                        if ($ch != 123) {
                                                            if ($ch != 125)
                                                                break n;
                                                            $curly = 0;
                                                            break n;
                                                        }
                                                        $curly = 0;
                                                    }
                                                    if ($len == 123) {
                                                        cbgu_LongArray_add($this.$glyphBuffer, $modes);
                                                        $curly = $this.$omitCurlyBraces;
                                                    } else {
                                                        $adv = cgtt_Font_xAdvance(var$19, $scaleX, $modes);
                                                        $change_0 = $change_0 + $adv;
                                                        $leading = $leading + (-1) | 0;
                                                        if ($leading < 0) {
                                                            cbgu_LongArray_add($this.$glyphBuffer, $modes);
                                                            $changeNext = $changeNext + $adv;
                                                            if ($this.$glyphBuffer.$size1 == 1) {
                                                                if (!$this.$isMono && !($len >= 57344 && $len < 63488)) {
                                                                    $ox = (cbgu_IntMap_get(var$19.$mapping, $len, var$19.$defaultValue)).$offsetX;
                                                                    $adv = (isNaN($ox) ? 1 : 0) ? 0.0 : $ox * $scaleX * (1.0 + 0.5 * Long_toNumber(Long_shr(Long_neg(Long_and($next, Long_fromInt(100663296))), 63)));
                                                                    if ($adv < 0.0)
                                                                        $changeNext = $changeNext - $adv;
                                                                }
                                                                $initial = 0;
                                                            }
                                                        }
                                                    }
                                                }
                                                $k = $k + 1 | 0;
                                            }
                                        } else {
                                            $k2 = Long_lo((cbgu_LongArray_get($earlier.$glyphs, $j))) & 65535;
                                            $kern = (-1);
                                            $curly = 0;
                                            $k = $j + 1 | 0;
                                            while (true) {
                                                var$11 = $earlier.$glyphs;
                                                if ($k >= var$11.$size1)
                                                    break;
                                                var$33 = cbgu_LongArray_get(var$11, $k);
                                                $lookupColor = Long_ne(Long_and(var$33, Long_fromInt(17825792)), Long_fromInt(17825792)) ? Long_lo(var$33) & 65535 : r_Category_caseUp(Long_lo(var$33) & 65535);
                                                o: {
                                                    if ($this.$omitCurlyBraces && $curly) {
                                                        cbgu_LongArray_add($this.$glyphBuffer, var$33);
                                                        $len = Long_lo(var$33) & 65535;
                                                        if ($len != 123) {
                                                            if ($len != 125)
                                                                break o;
                                                            $curly = 0;
                                                            break o;
                                                        }
                                                        $curly = 0;
                                                    }
                                                    if ($lookupColor == 123) {
                                                        cbgu_LongArray_add($this.$glyphBuffer, var$33);
                                                        $curly = $this.$omitCurlyBraces;
                                                    } else {
                                                        $k2 = $k2 << 16 | $lookupColor;
                                                        $adv = cgtt_Font_xAdvance(var$19, $scaleX, var$33);
                                                        $change_0 = $change_0 + $adv + cbgu_IntFloatMap_get(var$19.$kerning, $k2, 0.0) * $scaleX * (!$this.$isMono && Long_ne(Long_and(var$33, Long_fromInt(100663296)), Long_ZERO) ? 0.5 : 1.0);
                                                        $leading = $leading + (-1) | 0;
                                                        if ($leading < 0) {
                                                            $kern = $kern << 16 | $lookupColor;
                                                            $changeNext = $changeNext + $adv + cbgu_IntFloatMap_get(var$19.$kerning, $kern, 0.0) * $scaleX * (!$this.$isMono && Long_ne(Long_and(var$33, Long_fromInt(100663296)), Long_ZERO) ? 0.5 : 1.0);
                                                            cbgu_LongArray_add($this.$glyphBuffer, var$33);
                                                            if ($this.$glyphBuffer.$size1 == 1) {
                                                                if (!$this.$isMono && !($lookupColor >= 57344 && $lookupColor < 63488)) {
                                                                    $ox = (cbgu_IntMap_get(var$19.$mapping, $lookupColor, var$19.$defaultValue)).$offsetX;
                                                                    $adv = (isNaN($ox) ? 1 : 0) ? 0.0 : $ox * $scaleX * (1.0 + 0.5 * Long_toNumber(Long_shr(Long_neg(Long_and($next, Long_fromInt(100663296))), 63)));
                                                                    if ($adv < 0.0)
                                                                        $changeNext = $changeNext - $adv;
                                                                }
                                                                $initial = 0;
                                                            }
                                                        }
                                                    }
                                                }
                                                $k = $k + 1 | 0;
                                            }
                                        }
                                        if ($earlier.$width - $change_0 <= $targetWidth) {
                                            cbgu_LongArray_truncate($earlier.$glyphs, $j + 1 | 0);
                                            if (!$hyphenated) {
                                                var$11 = $earlier.$glyphs;
                                                cbgu_LongArray_add(var$11, cgtt_Font_applyChar(cbgu_LongArray_isEmpty(var$11) ? Long_ZERO : cbgu_LongArray_peek($earlier.$glyphs), 32));
                                            }
                                            $later.$width = $changeNext;
                                            $earlier.$width = $earlier.$width - $change_0;
                                            cbgu_LongArray_addAll($later.$glyphs, $this.$glyphBuffer);
                                            $later.$height = jl_Math_max0($later.$height, var$19.$cellHeight * var$21 * 0.25);
                                            break l;
                                        }
                                    }
                                    $j = $j + (-1) | 0;
                                }
                            }
                            if (cbgu_LongArray_isEmpty($later.$glyphs))
                                cbgu_Array_pop($appendTo.$lines0);
                        } else if (cgtt_Font_handleEllipsis($this, $appendTo))
                            break b;
                    }
                }
            }
            $i = $i + 1 | 0;
        }
        return $appendTo;
    }
    return $appendTo;
},
cgtt_Font_handleEllipsis = ($this, $appendTo) => {
    let $font, $earlier, $ellipsis, $j, var$6, var$7, $change, $curly, $k, $e, $k2, $curly_0, $k_0;
    $font = null;
    $earlier = cgtt_Layout_peekLine($appendTo);
    $ellipsis = $appendTo.$ellipsis;
    if ($ellipsis === null)
        $ellipsis = $rt_s(24);
    $j = $earlier.$glyphs.$size1 - 2 | 0;
    while ($j >= 0) {
        a: {
            var$6 = cbgu_LongArray_get($earlier.$glyphs, $j);
            if (Long_ne(Long_shru(var$6, 32), Long_ZERO)) {
                var$7 = $this.$breakChars;
                if (ju_Arrays_binarySearch(var$7.$items2, 0, var$7.$size5, Long_lo(var$6) & 65535) < 0)
                    break a;
            }
            b: {
                while ($j > 0) {
                    var$6 = cbgu_LongArray_get($earlier.$glyphs, $j);
                    if (Long_ne(Long_shru(var$6, 32), Long_ZERO)) {
                        var$7 = $this.$spaceChars;
                        if (ju_Arrays_binarySearch(var$7.$items2, 0, var$7.$size5, Long_lo(var$6) & 65535) < 0)
                            break b;
                    }
                    $j = $j + (-1) | 0;
                }
            }
            var$7 = $this.$family;
            if (var$7 !== null)
                $font = var$7.$connected.data[Long_lo(Long_and(Long_shru(var$6, 16), Long_fromInt(15)))];
            if ($font === null)
                $font = $this;
            $change = 0.0;
            if ($font.$kerning === null) {
                $curly = 0;
                $k = $j + 1 | 0;
                while (true) {
                    var$7 = $earlier.$glyphs;
                    if ($k >= var$7.$size1)
                        break;
                    var$6 = cbgu_LongArray_get(var$7, $k);
                    var$7 = $this.$family;
                    if (var$7 !== null)
                        $font = var$7.$connected.data[Long_lo(Long_and(Long_shru(var$6, 16), Long_fromInt(15)))];
                    if ($font === null)
                        $font = $this;
                    c: {
                        $e = $this.$omitCurlyBraces;
                        if ($e && $curly) {
                            $k2 = Long_lo(var$6) & 65535;
                            if ($k2 != 123) {
                                if ($k2 != 125)
                                    break c;
                                $curly = 0;
                                break c;
                            }
                            $curly = 0;
                        }
                        if ((Long_lo(var$6) & 65535) == 123)
                            $curly = $e;
                        else
                            $change = $change + cgtt_Font_xAdvance($font, $this.$scaleX, var$6);
                    }
                    $k = $k + 1 | 0;
                }
                $e = 0;
                while ($e < $ellipsis.$nativeString.length) {
                    var$6 = Long_or(Long_and(var$6, Long_fromInt(-2113994752)), Long_fromInt(jl_String_charAt($ellipsis, $e)));
                    $change = $change - cgtt_Font_xAdvance($font, $this.$scaleX, var$6);
                    $e = $e + 1 | 0;
                }
            } else {
                $k2 = Long_lo((cbgu_LongArray_get($earlier.$glyphs, $j))) & 65535;
                $curly_0 = 0;
                $k_0 = $j + 1 | 0;
                while (true) {
                    var$7 = $earlier.$glyphs;
                    if ($k_0 >= var$7.$size1)
                        break;
                    var$6 = cbgu_LongArray_get(var$7, $k_0);
                    var$7 = $this.$family;
                    if (var$7 !== null)
                        $font = var$7.$connected.data[Long_lo(Long_and(Long_shru(var$6, 16), Long_fromInt(15)))];
                    if ($font === null)
                        $font = $this;
                    d: {
                        $curly = $this.$omitCurlyBraces;
                        if ($curly && $curly_0) {
                            $e = Long_lo(var$6) & 65535;
                            if ($e != 123) {
                                if ($e == 125) {
                                    $curly = 0;
                                    break d;
                                }
                                $curly = $curly_0;
                                break d;
                            }
                            $curly_0 = 0;
                        }
                        $k = Long_lo(var$6) & 65535;
                        if ($k != 123) {
                            $k2 = $k2 << 16 | $k;
                            $change = $change + cgtt_Font_xAdvance($font, $this.$scaleX, var$6) + cbgu_IntFloatMap_get($font.$kerning, $k2, 0.0) * $this.$scaleX * (!$this.$isMono && Long_ne(Long_and(var$6, Long_fromInt(100663296)), Long_ZERO) ? 0.5 : 1.0);
                            $curly = $curly_0;
                        }
                    }
                    $k_0 = $k_0 + 1 | 0;
                    $curly_0 = $curly;
                }
                $e = 0;
                while ($e < $ellipsis.$nativeString.length) {
                    var$6 = Long_or(Long_and(var$6, Long_fromInt(-2113994752)), Long_fromInt(jl_String_charAt($ellipsis, $e)));
                    $k2 = $k2 << 16 | Long_lo(var$6) & 65535;
                    $change = $change - (cgtt_Font_xAdvance($font, $this.$scaleX, var$6) + cbgu_IntFloatMap_get($font.$kerning, $k2, 0.0) * $this.$scaleX * (!$this.$isMono && Long_ne(Long_and(var$6, Long_fromInt(100663296)), Long_ZERO) ? 0.5 : 1.0));
                    $e = $e + 1 | 0;
                }
            }
            if ($earlier.$width - $change <= $appendTo.$targetWidth) {
                cbgu_LongArray_truncate($earlier.$glyphs, $j + 1 | 0);
                $e = 0;
                while ($e < $ellipsis.$nativeString.length) {
                    cbgu_LongArray_add($earlier.$glyphs, Long_or(Long_and(var$6, Long_fromInt(-2113994752)), Long_fromInt(jl_String_charAt($ellipsis, $e))));
                    $e = $e + 1 | 0;
                }
                $earlier.$width = $earlier.$width - $change;
                return 1;
            }
        }
        $j = $j + (-1) | 0;
    }
    return 0;
},
cgtt_Font_regenerateLayout = ($this, $changing) => {
    let $glyphs, $font, $targetWidth, $oldLength, $firstLine, $i, $curly, $ln, var$10, $line, $drawn, $visibleWidth, $breakPoint, $spacingPoint, $kern, $n, $glyph, $ch, $nextSize, $next, $scale, $ox, $scaleX, $scaleX_0, $tr, $changedW, $cutoff, $arr, var$30, $amt;
    $glyphs = $changing.$font1;
    if ($glyphs === null)
        return $changing;
    if (!jl_Object_equals($glyphs, $this))
        $changing.$font1 = $this;
    $font = null;
    $targetWidth = cgtt_Layout_getTargetWidth($changing);
    $oldLength = $changing.$lines0.$size0;
    $firstLine = cgtt_Layout_getLine($changing, 0);
    $i = 1;
    while ($i < $oldLength) {
        cbgu_LongArray_addAll($firstLine.$glyphs, (cgtt_Layout_getLine($changing, $i)).$glyphs);
        $i = $i + 1 | 0;
    }
    cbgu_Array_truncate($changing.$lines0, 1);
    $curly = 0;
    $ln = 0;
    var$10 = $targetWidth + 1.0;
    while ($ln < cgtt_Layout_lines($changing)) {
        $line = cgtt_Layout_getLine($changing, $ln);
        $line.$height = 0.0;
        $drawn = 0.0;
        $visibleWidth = 0.0;
        $breakPoint = (-2);
        $spacingPoint = (-2);
        $glyphs = $line.$glyphs;
        $kern = (-1);
        $i = 0;
        $n = $glyphs.$size1;
        a: {
            while ($i < $n) {
                $glyph = cbgu_LongArray_get($glyphs, $i);
                $ch = Long_lo($glyph) & 65535;
                if ($ch == 123 && !$curly)
                    $curly = 1;
                $nextSize = Long_eq(Long_and($glyph, Long_fromInt(17825792)), Long_fromInt(17825792)) ? r_Category_caseUp($ch) : $ch;
                $next = $this.$family;
                if ($next !== null)
                    $font = $next.$connected.data[Long_lo(Long_and(Long_shru($glyph, 16), Long_fromInt(15)))];
                if ($font === null)
                    $font = $this;
                if ($font.$kerning === null) {
                    $scale = cgtt_Font_extractIntScale($glyph);
                    $ox = $line.$height;
                    $targetWidth = $font.$cellHeight;
                    $scaleX = $scale;
                    $line.$height = jl_Math_max0($ox, $targetWidth * $scaleX * 0.25);
                    $oldLength = $rt_compare($nextSize, 57344);
                    $scaleX_0 = $oldLength >= 0 && $nextSize < 63488 ? $scaleX * 0.25 * $font.$cellHeight / cgtt_Font$GlyphRegion_getMaxDimension(cbgu_IntMap_get($font.$mapping, $nextSize, $font.$defaultValue)) * $font.$inlineImageStretch : $font.$scaleX * $scaleX * 0.25;
                    $tr = cbgu_IntMap_get0($font.$mapping, $nextSize);
                    if ($tr !== null) {
                        $changedW = cgtt_Font_xAdvance($font, $scaleX_0, $glyph);
                        if (!$i && !$this.$isMono && !($oldLength >= 0 && $nextSize < 63488)) {
                            $ox = $tr.$offsetX;
                            $ox = (isNaN($ox) ? 1 : 0) ? 0.0 : $ox * $scaleX_0 * (1.0 + 0.5 * Long_toNumber(Long_shr(Long_neg(Long_and($glyph, Long_fromInt(100663296))), 63)));
                            if ($ox < 0.0)
                                $changedW = $changedW - $ox;
                        }
                        if ($curly) {
                            $changedW = 0.0;
                            if ($nextSize == 125)
                                $curly = 0;
                        }
                        if ($breakPoint >= 0 && $visibleWidth + ($breakPoint != $spacingPoint ? $changedW : 0.0) > var$10) {
                            $cutoff = $breakPoint + 1 | 0;
                            $breakPoint = cgtt_Layout_lines($changing);
                            $spacingPoint = $ln + 1 | 0;
                            if ($breakPoint != $spacingPoint)
                                $next = cgtt_Layout_getLine($changing, $spacingPoint);
                            else {
                                $next = cgtt_Layout_pushLine($changing);
                                cbgu_LongArray_pop($glyphs);
                            }
                            if ($next === null) {
                                cbgu_LongArray_truncate($glyphs, $cutoff);
                                if (cgtt_Font_handleEllipsis($this, $changing)) {
                                    cgtt_Font_calculateSize($this, $changing);
                                    return $changing;
                                }
                                break a;
                            }
                            $next.$height = jl_Math_max0($next.$height, $font.$cellHeight * $scaleX * 0.25);
                            $next = $next.$glyphs;
                            $nextSize = $next.$size1;
                            $arr = cbgu_LongArray_setSize($next, ($nextSize + $glyphs.$size1 | 0) - $cutoff | 0);
                            jl_System_fastArraycopy($arr, 0, $arr, $glyphs.$size1 - $cutoff | 0, $nextSize);
                            jl_System_fastArraycopy($glyphs.$items0, $cutoff, $arr, 0, $glyphs.$size1 - $cutoff | 0);
                            cbgu_LongArray_truncate($glyphs, $cutoff);
                            break a;
                        }
                        if ($nextSize == 10) {
                            $next = cgtt_Layout_pushLine($changing);
                            cbgu_LongArray_pop($glyphs);
                            if ($next === null) {
                                if (cgtt_Font_handleEllipsis($this, $changing)) {
                                    cgtt_Font_calculateSize($this, $changing);
                                    return $changing;
                                }
                                break a;
                            }
                            $next.$height = jl_Math_max0($next.$height, $font.$cellHeight * $scaleX * 0.25);
                            $arr = cbgu_LongArray_setSize($next.$glyphs, ($glyphs.$size1 - $i | 0) - 1 | 0);
                            jl_System_fastArraycopy($glyphs.$items0, $i + 1 | 0, $arr, 0, ($glyphs.$size1 - $i | 0) - 1 | 0);
                            cbgu_LongArray_truncate($glyphs, $i);
                            cbgu_LongArray_add($glyphs, cgtt_Font_applyChar(!cbgu_LongArray_isEmpty($glyphs) ? cbgu_LongArray_peek($glyphs) : Long_ZERO, 10));
                            break a;
                        }
                        if (Long_eq(Long_shru($glyph, 32), Long_ZERO)) {
                            $visibleWidth = $visibleWidth - $changedW;
                            $breakPoint = $i;
                            $spacingPoint = $i;
                        } else {
                            $next = $this.$breakChars;
                            if (ju_Arrays_binarySearch($next.$items2, 0, $next.$size5, $ch) < 0)
                                $visibleWidth = $drawn;
                            else {
                                $next = $this.$spaceChars;
                                if (ju_Arrays_binarySearch($next.$items2, 0, $next.$size5, $ch) < 0) {
                                    $breakPoint = $i;
                                    $visibleWidth = $drawn;
                                } else {
                                    $visibleWidth = $visibleWidth - $changedW;
                                    $breakPoint = $i;
                                    $spacingPoint = $i;
                                }
                            }
                        }
                        $drawn = $drawn + $changedW;
                        $visibleWidth = $visibleWidth + $changedW;
                    }
                } else {
                    $scale = cgtt_Font_extractIntScale($glyph);
                    $ox = $line.$height;
                    $targetWidth = $font.$cellHeight;
                    var$30 = $scale;
                    $line.$height = jl_Math_max0($ox, $targetWidth * var$30 * 0.25);
                    $oldLength = $rt_compare($nextSize, 57344);
                    $scaleX = $oldLength >= 0 && $nextSize < 63488 ? var$30 * 0.25 * $font.$cellHeight / cgtt_Font$GlyphRegion_getMaxDimension(cbgu_IntMap_get($font.$mapping, $nextSize, $font.$defaultValue)) * $font.$inlineImageStretch : $font.$scaleX * var$30 * 0.25;
                    $kern = $kern << 16 | $nextSize;
                    $amt = cbgu_IntFloatMap_get($font.$kerning, $kern, 0.0) * $scaleX;
                    $tr = cbgu_IntMap_get0($font.$mapping, $nextSize);
                    if ($tr !== null) {
                        $changedW = cgtt_Font_xAdvance($font, $scaleX, $glyph);
                        if (!$i && !$this.$isMono && !($oldLength >= 0 && $nextSize < 63488)) {
                            $ox = $tr.$offsetX;
                            $ox = (isNaN($ox) ? 1 : 0) ? 0.0 : $ox * $scaleX * (1.0 + 0.5 * Long_toNumber(Long_shr(Long_neg(Long_and($glyph, Long_fromInt(100663296))), 63)));
                            if ($ox < 0.0)
                                $changedW = $changedW - $ox;
                        }
                        if ($curly) {
                            $changedW = 0.0;
                            if ($nextSize == 125)
                                $curly = 0;
                        }
                        if ($breakPoint >= 0 && $visibleWidth + ($breakPoint != $spacingPoint ? $changedW + $amt : 0.0) > var$10) {
                            $cutoff = $breakPoint + 1 | 0;
                            $breakPoint = cgtt_Layout_lines($changing);
                            $spacingPoint = $ln + 1 | 0;
                            if ($breakPoint != $spacingPoint)
                                $next = cgtt_Layout_getLine($changing, $spacingPoint);
                            else {
                                $next = cgtt_Layout_pushLine($changing);
                                cbgu_LongArray_pop($glyphs);
                            }
                            if ($next === null) {
                                cbgu_LongArray_truncate($glyphs, $cutoff);
                                if (cgtt_Font_handleEllipsis($this, $changing)) {
                                    cgtt_Font_calculateSize($this, $changing);
                                    return $changing;
                                }
                                break a;
                            }
                            $next.$height = jl_Math_max0($next.$height, $font.$cellHeight * var$30 * 0.25);
                            $next = $next.$glyphs;
                            $nextSize = $next.$size1;
                            $arr = cbgu_LongArray_setSize($next, ($nextSize + $glyphs.$size1 | 0) - $cutoff | 0);
                            jl_System_fastArraycopy($arr, 0, $arr, $glyphs.$size1 - $cutoff | 0, $nextSize);
                            jl_System_fastArraycopy($glyphs.$items0, $cutoff, $arr, 0, $glyphs.$size1 - $cutoff | 0);
                            cbgu_LongArray_truncate($glyphs, $cutoff);
                            break a;
                        }
                        if ($nextSize == 10) {
                            $next = cgtt_Layout_pushLine($changing);
                            cbgu_LongArray_pop($glyphs);
                            if ($next === null) {
                                if (cgtt_Font_handleEllipsis($this, $changing)) {
                                    cgtt_Font_calculateSize($this, $changing);
                                    return $changing;
                                }
                                break a;
                            }
                            $next.$height = jl_Math_max0($next.$height, $font.$cellHeight * var$30 * 0.25);
                            $arr = cbgu_LongArray_setSize($next.$glyphs, ($glyphs.$size1 - $i | 0) - 1 | 0);
                            jl_System_fastArraycopy($glyphs.$items0, $i + 1 | 0, $arr, 0, ($glyphs.$size1 - $i | 0) - 1 | 0);
                            cbgu_LongArray_truncate($glyphs, $i);
                            cbgu_LongArray_add($glyphs, cgtt_Font_applyChar(!cbgu_LongArray_isEmpty($glyphs) ? cbgu_LongArray_peek($glyphs) : Long_ZERO, 10));
                            break a;
                        }
                        if (Long_eq(Long_shru($glyph, 32), Long_ZERO)) {
                            $visibleWidth = $visibleWidth - ($changedW + $amt);
                            $breakPoint = $i;
                            $spacingPoint = $i;
                        } else {
                            $next = $this.$breakChars;
                            if (ju_Arrays_binarySearch($next.$items2, 0, $next.$size5, $ch) < 0)
                                $visibleWidth = $drawn;
                            else {
                                $next = $this.$spaceChars;
                                if (ju_Arrays_binarySearch($next.$items2, 0, $next.$size5, $ch) < 0) {
                                    $breakPoint = $i;
                                    $visibleWidth = $drawn;
                                } else {
                                    $visibleWidth = $visibleWidth - ($changedW + $amt);
                                    $breakPoint = $i;
                                    $spacingPoint = $i;
                                }
                            }
                        }
                        $ox = $changedW + $amt;
                        $drawn = $drawn + $ox;
                        $visibleWidth = $visibleWidth + $ox;
                    }
                }
                $i = $i + 1 | 0;
            }
        }
        $ln = $ln + 1 | 0;
    }
    cgtt_Font_calculateSize($this, $changing);
    return $changing;
},
cgtt_Font_extractScale = $glyph => {
    cgtt_Font_$callClinit();
    return Long_ne(Long_and($glyph, Long_fromInt(16777216)), Long_ZERO) ? 1.0 : Long_toNumber(Long_add(Long_and(Long_shru(Long_add($glyph, Long_fromInt(3145728)), 20), Long_fromInt(15)), Long_fromInt(1))) * 0.25;
},
cgtt_Font_extractIntScale = $glyph => {
    cgtt_Font_$callClinit();
    return Long_lo((Long_ne(Long_and($glyph, Long_fromInt(16777216)), Long_ZERO) ? Long_fromInt(4) : Long_add(Long_and(Long_shru(Long_add($glyph, Long_fromInt(3145728)), 20), Long_fromInt(15)), Long_fromInt(1))));
},
cgtt_Font_applyChar = ($glyph, $c) => {
    cgtt_Font_$callClinit();
    return Long_or(Long_and($glyph, Long_fromInt(-65536)), Long_fromInt($c));
},
cgtt_Font_drawVertices = ($this, $batch, $texture, $vertices) => {
    cbggg_SpriteBatch_draw($batch, $texture, $vertices, 0, 20);
},
cgtt_Font__clinit_ = () => {
    let var$1, var$2;
    cgtt_Font_canUseTextures = 1;
    var$1 = new ju_IdentityHashMap;
    var$2 = ju_IdentityHashMap_calculateCapacity(8);
    var$1.$elementCount0 = 0;
    var$1.$elementData0 = $rt_createArray(ju_IdentityHashMap$HashEntry, var$2);
    var$1.$loadFactor3 = 0.75;
    ju_IdentityHashMap_computeThreshold(var$1);
    cgtt_Font_smoothingValues = var$1;
    cgtt_Font_latestTexture = null;
    cgtt_Font_CJK_SPACE_INSERTER = r_Replacer__init_(r_Pattern_compile($rt_s(502)), $rt_s(503));
};
function cbgss_Actor() {
    let a = this; jl_Object.call(a);
    a.$stage = null;
    a.$parent0 = null;
    a.$listeners = null;
    a.$captureListeners = null;
    a.$actions = null;
    a.$touchable = null;
    a.$visible = 0;
    a.$x6 = 0.0;
    a.$y6 = 0.0;
    a.$width1 = 0.0;
    a.$height2 = 0.0;
    a.$originX0 = 0.0;
    a.$originY0 = 0.0;
    a.$scaleX1 = 0.0;
    a.$scaleY1 = 0.0;
    a.$rotation2 = 0.0;
    a.$color6 = null;
}
let cbgss_Actor_hasParent = $this => {
    return $this.$parent0 === null ? 0 : 1;
},
cbgss_Actor_getParent = $this => {
    return $this.$parent0;
},
cbgss_Actor_isTouchable = $this => {
    return $this.$touchable !== cbgss_Touchable_enabled ? 0 : 1;
},
cbgss_Actor_getX = $this => {
    return $this.$x6;
},
cbgss_Actor_getY = $this => {
    return $this.$y6;
},
cbgss_Actor_setPosition = ($this, $x, $y, $alignment) => {
    if ($alignment & 16)
        $x = $x - $this.$width1;
    else if (!($alignment & 8))
        $x = $x - $this.$width1 / 2.0;
    if ($alignment & 2)
        $y = $y - $this.$height2;
    else if (!($alignment & 4))
        $y = $y - $this.$height2 / 2.0;
    if (!($this.$x6 === $x && $this.$y6 === $y)) {
        $this.$x6 = $x;
        $this.$y6 = $y;
    }
},
cbgss_Actor_getWidth = $this => {
    return $this.$width1;
},
cbgss_Actor_getHeight = $this => {
    return $this.$height2;
},
cbgss_Actor_getOriginX = $this => {
    return $this.$originX0;
},
cbgss_Actor_getOriginY = $this => {
    return $this.$originY0;
},
cbgss_Actor_getRotation = $this => {
    return $this.$rotation2;
},
cbgss_Actor_getColor = $this => {
    return $this.$color6;
},
cbgss_Actor_screenToLocalCoordinates = ($this, $screenCoords) => {
    let $stage, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12;
    $stage = $this.$stage;
    if ($stage === null)
        return $screenCoords;
    $screenCoords = $stage.$screenToStageCoordinates($screenCoords);
    $stage = $this.$parent0;
    if ($stage !== null)
        $stage.$stageToLocalCoordinates($screenCoords);
    var$3 = $this.$rotation2;
    var$4 = $this.$scaleX1;
    var$5 = $this.$scaleY1;
    var$6 = $this.$x6;
    var$7 = $this.$y6;
    if (var$3 !== 0.0) {
        var$8 = var$3 * 0.01745329238474369;
        var$9 = jl_Math_cos(var$8);
        var$3 = jl_Math_sin(var$8);
        var$10 = $this.$originX0;
        var$11 = $this.$originY0;
        var$12 = $screenCoords.$x - var$6 - var$10;
        var$6 = $screenCoords.$y - var$7 - var$11;
        $screenCoords.$x = (var$12 * var$9 + var$6 * var$3) / var$4 + var$10;
        $screenCoords.$y = (var$12 *  -var$3 + var$6 * var$9) / var$5 + var$11;
    } else if (var$4 === 1.0 && var$5 === 1.0) {
        $screenCoords.$x = $screenCoords.$x - var$6;
        $screenCoords.$y = $screenCoords.$y - var$7;
    } else {
        var$9 = $this.$originX0;
        var$3 = $this.$originY0;
        $screenCoords.$x = ($screenCoords.$x - var$6 - var$9) / var$4 + var$9;
        $screenCoords.$y = ($screenCoords.$y - var$7 - var$3) / var$5 + var$3;
    }
    return $screenCoords;
},
cbgssu_Layout = $rt_classWithoutFields(0);
function cbgssu_Widget() {
    let a = this; cbgss_Actor.call(a);
    a.$needsLayout = 0;
    a.$fillParent = 0;
    a.$layoutEnabled = 0;
}
let cbgssu_Widget_invalidateHierarchy = $this => {
    let $parent;
    if (!$this.$layoutEnabled)
        return;
    cgtt_TextraLabel_invalidate($this);
    $parent = $this.$parent0;
    if ($rt_isInstance($parent, cbgssu_Layout))
        $parent.$invalidateHierarchy();
},
cbgssu_Widget_sizeChanged = $this => {
    cgtt_TextraLabel_invalidate($this);
};
function cgtt_TextraLabel() {
    let a = this; cbgssu_Widget.call(a);
    a.$layout = null;
    a.$font0 = null;
    a.$align = 0;
    a.$wrap5 = 0;
    a.$storedText = null;
    a.$style = null;
    a.$prefSizeInvalid = 0;
}
let cgtt_TextraLabel_setSuperWidth = ($this, $width) => {
    if ($this.$width1 !== $width) {
        $this.$width1 = $width;
        cbgssu_Widget_sizeChanged($this);
    }
},
cgtt_TextraLabel_invalidate = $this => {
    $this.$needsLayout = 1;
    $this.$prefSizeInvalid = 1;
},
cgtt_TextraLabel_validate = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6;
    $this.$prefSizeInvalid = 0;
    if ($this.$layoutEnabled) {
        var$1 = $this;
        var$2 = var$1.$parent0;
        if ($this.$fillParent && var$2 !== null) {
            var$3 = var$1.$stage;
            if (var$3 !== null && var$2 === var$3.$getRoot()) {
                var$4 = var$3.$getWidth0();
                var$5 = var$3.$getHeight0();
            } else {
                var$4 = var$2.$getWidth0();
                var$5 = var$2.$getHeight0();
            }
            var$1 = $this;
            var$6 = 0;
            var$3 = var$1;
            if (var$3.$width1 !== var$4) {
                cgtt_TextraLabel_setSuperWidth(var$1, var$4);
                var$6 = 1;
            }
            if (var$3.$height2 !== var$5) {
                var$3 = var$1;
                if (var$3.$height2 !== var$5) {
                    var$3.$height2 = var$5;
                    cbgssu_Widget_sizeChanged(var$3);
                }
                var$6 = 1;
            }
            if (var$6) {
                var$2 = var$1;
                cbgssu_Widget_sizeChanged(var$2);
                if (var$1.$wrap5) {
                    var$3 = var$1.$workingLayout;
                    var$3.$targetWidth = var$4;
                    cgtt_Font_regenerateLayout(var$1.$font0, var$3);
                    cbgssu_Widget_invalidateHierarchy(var$2);
                }
            }
        }
        if ($this.$needsLayout) {
            $this.$needsLayout = 0;
            var$1 = $this;
            var$4 = var$1.$width1;
            var$3 = var$1.$style;
            if (var$3 !== null) {
                var$3 = var$3.$background;
                if (var$3 !== null)
                    var$4 = var$4 - (var$3.$getLeftWidth() + var$1.$style.$background.$getRightWidth());
            }
            var$5 = cgtt_Font_calculateSize(var$1.$font0, var$1.$workingLayout);
            if (var$1.$wrap5) {
                var$6 = $rt_compare(var$4, 0.0);
                if (!(var$6 && var$1.$workingLayout.$targetWidth === var$4 && var$5 <= var$4)) {
                    if (var$6)
                        var$1.$workingLayout.$targetWidth = var$4;
                    cgtt_Font_regenerateLayout(var$1.$font0, var$1.$workingLayout);
                    cbgssu_Widget_invalidateHierarchy(var$1);
                }
            }
        }
    }
};
function cgtt_TypingLabel() {
    let a = this; cgtt_TextraLabel.call(a);
    a.$variables = null;
    a.$tokenEntries = null;
    a.$clearColor = null;
    a.$listener = null;
    a.$originalText = null;
    a.$intermediateText = null;
    a.$workingLayout = null;
    a.$offsets = null;
    a.$sizing = null;
    a.$rotations = null;
    a.$trackingInput = 0;
    a.$selectable = 0;
    a.$selectionDrawable = null;
    a.$lastTouchedIndex = 0;
    a.$overIndex = 0;
    a.$selectionStart = 0;
    a.$selectionEnd = 0;
    a.$temp = null;
    a.$dragging = 0;
    a.$activeEffects = null;
    a.$textSpeed = 0.0;
    a.$charCooldown = 0.0;
    a.$rawCharIndex = 0;
    a.$glyphCharIndex = 0;
    a.$glyphCharCompensation = 0;
    a.$parsed = 0;
    a.$paused = 0;
    a.$ended = 0;
    a.$skipping = 0;
    a.$ignoringEvents = 0;
    a.$ignoringEffects = 0;
    a.$defaultToken = null;
}
let cgtt_TypingLabel__init_0 = ($this, $text, $font) => {
    let var$3, var$4, var$5;
    var$3 = cgtt_Parser_handleBracketMinusMarkup($text);
    $this.$listeners = cbgu_DelayedRemovalArray__init_(0);
    $this.$captureListeners = cbgu_DelayedRemovalArray__init_(0);
    $this.$actions = cbgu_Array__init_2(0);
    $this.$touchable = cbgss_Touchable_enabled;
    $this.$visible = 1;
    $this.$scaleX1 = 1.0;
    $this.$scaleY1 = 1.0;
    $this.$color6 = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    $this.$needsLayout = 1;
    $this.$layoutEnabled = 1;
    $this.$align = 8;
    $this.$wrap5 = 0;
    $this.$prefSizeInvalid = 1;
    $this.$font0 = $font;
    $text = cgtt_Layout__init_();
    $this.$layout = $text;
    $this.$style = new cgtt_Styles$LabelStyle;
    $this.$storedText = var$3;
    cgtt_Font_markup($font, var$3, $text);
    $this.$variables = cbgu_ObjectMap__init_();
    $this.$tokenEntries = ju_ArrayList__init_();
    var$4 = new cbgg_Color;
    cgtt_TypingConfig_$callClinit();
    cbgg_Color__init_1(var$4, cgtt_TypingConfig_DEFAULT_CLEAR_COLOR);
    $this.$clearColor = var$4;
    $this.$listener = null;
    $text = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($text);
    $this.$originalText = $text;
    $text = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($text);
    $this.$intermediateText = $text;
    $this.$workingLayout = cgtt_Layout__init_();
    $this.$offsets = cbgu_FloatArray__init_();
    $this.$sizing = cbgu_FloatArray__init_();
    $this.$rotations = cbgu_FloatArray__init_();
    $this.$trackingInput = 0;
    $this.$selectable = 0;
    $this.$selectionDrawable = null;
    $this.$lastTouchedIndex = (-1);
    $this.$overIndex = (-1);
    $this.$selectionStart = (-1);
    $this.$selectionEnd = (-1);
    $this.$temp = cbgm_Vector2__init_(0.0, 0.0);
    $this.$dragging = 0;
    $this.$activeEffects = ju_ArrayList__init_();
    var$5 = cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR;
    $this.$textSpeed = var$5;
    $this.$charCooldown = var$5;
    $this.$rawCharIndex = (-2);
    $this.$glyphCharIndex = (-1);
    $this.$glyphCharCompensation = 0;
    $this.$parsed = 0;
    $this.$paused = 0;
    $this.$ended = 0;
    $this.$skipping = 0;
    $this.$ignoringEvents = 0;
    $this.$ignoringEffects = 0;
    $this.$defaultToken = $rt_s(24);
    cgtt_Layout_font($this.$workingLayout, $font);
    cgtt_TypingLabel_setText1($this, var$3, 1);
},
cgtt_TypingLabel__init_ = (var_0, var_1) => {
    let var_2 = new cgtt_TypingLabel();
    cgtt_TypingLabel__init_0(var_2, var_0, var_1);
    return var_2;
},
cgtt_TypingLabel_setText0 = ($this, $newText) => {
    cgtt_TypingLabel_setText1($this, $newText, 1);
},
cgtt_TypingLabel_setText1 = ($this, $newText, $modifyOriginalText) => {
    let var$3, var$4;
    if ($modifyOriginalText) {
        var$3 = $this.$font0;
        if (var$3.$omitCurlyBraces) {
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(var$4, $rt_s(504));
            jl_AbstractStringBuilder_append(var$4, $this.$defaultToken);
            jl_AbstractStringBuilder_append(var$4, $newText);
            $newText = cgtt_Parser_preprocess(jl_AbstractStringBuilder_toString(var$4));
        } else if (!var$3.$enableSquareBrackets) {
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(var$4, $this.$defaultToken);
            jl_AbstractStringBuilder_append(var$4, $newText);
            $newText = jl_AbstractStringBuilder_toString(var$4);
        } else {
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(var$4, $this.$defaultToken);
            jl_AbstractStringBuilder_append(var$4, $newText);
            $newText = cgtt_Parser_preprocess(jl_AbstractStringBuilder_toString(var$4));
        }
    }
    cgtt_TypingLabel_setText($this, $newText, $modifyOriginalText, 1);
},
cgtt_TypingLabel_setText = ($this, $newText, $modifyOriginalText, $restart) => {
    let $hasEnded, var$5, var$6, var$7, var$8, var$9, var$10;
    $hasEnded = $this.$ended;
    var$5 = cgtt_Parser_handleBracketMinusMarkup($newText);
    cgtt_Font_markup($this.$font0, var$5, cgtt_Layout_clear($this.$layout));
    if ($this.$wrap5) {
        $newText = $this.$workingLayout;
        $newText.$targetWidth = $this.$width1;
        cgtt_Font_markup($this.$font0, var$5, cgtt_Layout_clear($newText));
    } else {
        var$6 = $this.$workingLayout;
        var$6.$targetWidth = 0.0;
        cgtt_Font_markup($this.$font0, var$5, cgtt_Layout_clear(var$6));
        $newText = $this.$workingLayout;
        var$7 = 0.0;
        var$8 = 0;
        var$9 = $newText.$lines0.$size0;
        while (var$8 < var$9) {
            var$7 = jl_Math_max0(var$7, (cbgu_Array_get($newText.$lines0, var$8)).$width);
            var$8 = var$8 + 1 | 0;
        }
        a: {
            $newText = $this.$style;
            if ($newText !== null) {
                $newText = $newText.$background;
                if ($newText !== null) {
                    var$10 = $newText.$getLeftWidth() + $this.$style.$background.$getRightWidth();
                    break a;
                }
            }
            var$10 = 0.0;
        }
        var$10 = var$7 + var$10;
        cgtt_TextraLabel_setSuperWidth($this, var$10);
    }
    if ($modifyOriginalText)
        cgtt_TypingLabel_saveOriginalText($this, var$5);
    if ($restart)
        cgtt_TypingLabel_restart($this);
    if ($hasEnded)
        cgtt_TypingLabel_skipToTheEnd($this, 1, 0);
},
cgtt_TypingLabel_saveOriginalText = ($this, $text) => {
    let var$2;
    var$2 = $this.$originalText;
    if ($text !== var$2) {
        var$2.$length2 = 0;
        jl_AbstractStringBuilder_append1(var$2, $text);
    }
},
cgtt_TypingLabel_parseTokens = $this => {
    let $actualEnd, var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15, var$16, var$17;
    $this.$parsed = 1;
    $actualEnd = $this.$ended;
    $this.$ended = 0;
    var$2 = $this.$font0;
    if (var$2.$omitCurlyBraces) {
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(var$2, $rt_s(504));
        jl_AbstractStringBuilder_append(var$2, $this.$defaultToken);
        cgtt_TypingLabel_setText($this, cgtt_Parser_preprocess(jl_AbstractStringBuilder_toString(jl_StringBuilder_append(var$2, $this.$originalText))), 0, 0);
    } else if (!var$2.$enableSquareBrackets) {
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(var$2, $this.$defaultToken);
        cgtt_TypingLabel_setText($this, jl_AbstractStringBuilder_toString(jl_StringBuilder_append(var$2, $this.$originalText)), 0, 0);
    } else {
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(var$2, $this.$defaultToken);
        cgtt_TypingLabel_setText($this, cgtt_Parser_preprocess(jl_AbstractStringBuilder_toString(jl_StringBuilder_append(var$2, $this.$originalText))), 0, 0);
    }
    a: {
        cgtt_Parser_$callClinit();
        if (cgtt_Parser_PATTERN_TOKEN_STRIP !== null) {
            cgtt_TypingConfig_$callClinit();
            if (!cgtt_TypingConfig_dirtyEffectMaps)
                break a;
        }
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_AbstractStringBuilder_append(var$2, $rt_s(505));
        var$3 = cbgu_Array__init_();
        cgtt_TypingConfig_$callClinit();
        cbgu_OrderedMap$OrderedMapKeys_toArray(cbgu_OrderedMap_keys(cgtt_TypingConfig_EFFECT_START_TOKENS), var$3);
        cbgu_OrderedMap$OrderedMapKeys_toArray(cbgu_OrderedMap_keys(cgtt_TypingConfig_EFFECT_END_TOKENS), var$3);
        var$4 = (cgtt_InternalToken_values()).data;
        var$5 = var$4.length;
        var$6 = 0;
        while (var$6 < var$5) {
            cbgu_Array_add(var$3, var$4[var$6].$name);
            var$6 = var$6 + 1 | 0;
        }
        var$5 = 0;
        while (var$5 < var$3.$size0) {
            jl_AbstractStringBuilder_append(var$2, cbgu_Array_get(var$3, var$5));
            var$5 = var$5 + 1 | 0;
            if (var$5 < var$3.$size0)
                jl_AbstractStringBuilder_append0(var$2, 124);
        }
        jl_AbstractStringBuilder_append(var$2, $rt_s(506));
        var$3 = jl_AbstractStringBuilder_toString(var$2);
        var$2 = r_Pattern__init_(var$3, 1);
        cgtt_Parser_PATTERN_TOKEN_STRIP = var$2;
        cgtt_Parser_MATCHER_TOKEN_STRIP = r_Pattern_matcher(var$2);
        cgtt_Parser_MATCHER_TOKEN_STRIP_2 = r_Pattern_matcher(cgtt_Parser_PATTERN_TOKEN_STRIP);
    }
    b: {
        if (cgtt_Parser_RESET_REPLACEMENT !== null) {
            cgtt_TypingConfig_$callClinit();
            if (!cgtt_TypingConfig_dirtyEffectMaps)
                break b;
        }
        var$2 = cbgu_Array__init_();
        cgtt_TypingConfig_$callClinit();
        cbgu_OrderedMap$OrderedMapKeys_toArray(cbgu_OrderedMap_keys(cgtt_TypingConfig_EFFECT_END_TOKENS), var$2);
        cbgu_Array_add(var$2, $rt_s(507));
        var$7 = new jl_StringBuilder;
        var$3 = $rt_s(508);
        var$7.$buffer = $rt_createCharArray(var$3.$nativeString.length);
        var$5 = 0;
        var$8 = $rt_s(508);
        while (true) {
            var$4 = var$7.$buffer.data;
            if (var$5 >= var$4.length)
                break;
            var$4[var$5] = jl_String_charAt(var$8, var$5);
            var$5 = var$5 + 1 | 0;
        }
        var$7.$length2 = var$3.$nativeString.length;
        var$3 = cbgu_Array_iterator(var$2);
        while (cbgu_Array$ArrayIterator_hasNext(var$3)) {
            var$2 = cbgu_Array$ArrayIterator_next(var$3);
            jl_AbstractStringBuilder_append0(var$7, 123);
            jl_AbstractStringBuilder_append(var$7, var$2);
            jl_AbstractStringBuilder_append0(var$7, 125);
        }
        cgtt_TypingConfig_dirtyEffectMaps = 0;
        cgtt_Parser_RESET_REPLACEMENT = jl_AbstractStringBuilder_toString(var$7);
    }
    ju_ArrayList_clear($this.$tokenEntries);
    cgtt_Parser_parseReplacements($this);
    cgtt_Parser_parseRegularTokens($this);
    cgtt_TypingLabel_setText($this, jl_AbstractStringBuilder_toString($this.$intermediateText), 0, 0);
    var$2 = $this.$tokenEntries;
    var$7 = ju_Comparator$NaturalOrder_INSTANCE;
    var$3 = var$2;
    var$4 = $rt_createArray(jl_Object, var$3.$size3);
    var$9 = var$4.data;
    ju_AbstractCollection_toArray(var$2, var$4);
    var$6 = var$9.length;
    if (var$6) {
        if (var$7 === null)
            var$7 = ju_Comparator$NaturalOrder_INSTANCE;
        var$10 = $rt_createArray(jl_Object, var$6);
        var$11 = 1;
        var$12 = var$4;
        while (var$11 < var$6) {
            var$13 = 0;
            while (true) {
                var$14 = var$12.data.length;
                if (var$13 >= var$14)
                    break;
                var$15 = jl_Math_min(var$14, var$13 + var$11 | 0);
                var$16 = var$13 + (2 * var$11 | 0) | 0;
                ju_Arrays_merge(var$12, var$10, var$13, var$15, jl_Math_min(var$14, var$16), var$7);
                var$13 = var$16;
            }
            var$11 = var$11 * 2 | 0;
            var$17 = var$12;
            var$12 = var$10;
            var$10 = var$17;
        }
        c: {
            if (var$12 !== var$4) {
                var$5 = 0;
                while (true) {
                    var$4 = var$12.data;
                    if (var$5 >= var$4.length)
                        break c;
                    var$10.data[var$5] = var$4[var$5];
                    var$5 = var$5 + 1 | 0;
                }
            }
        }
    }
    var$5 = 0;
    while (var$5 < var$6) {
        var$2 = var$9[var$5];
        ju_ArrayList_checkIndex(var$3, var$5);
        var$3.$array1.data[var$5] = var$2;
        var$5 = var$5 + 1 | 0;
    }
    $this.$ended = $actualEnd;
},
cgtt_TypingLabel_skipToTheEnd = ($this, $ignoreEvents, $ignoreEffects) => {
    $this.$skipping = 1;
    $this.$ignoringEvents = $ignoreEvents;
    $this.$ignoringEffects = $ignoreEffects;
    cgtt_TypingLabel_act($this, 1.401298464324817E-45);
    return $this;
},
cgtt_TypingLabel_restart = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$originalText;
    var$2 = $this.$workingLayout;
    var$2.$atLimit = 0;
    var$2 = cbgu_Array_first(var$2.$lines0);
    cbgu_LongArray_clear(var$2.$glyphs);
    var$2.$height = 0.0;
    var$2.$width = 0.0;
    cbgu_Array_clear($this.$workingLayout.$lines0);
    cbgu_Array_add($this.$workingLayout.$lines0, var$2);
    cbgu_FloatArray_clear($this.$offsets);
    cbgu_FloatArray_clear($this.$sizing);
    cbgu_FloatArray_clear($this.$rotations);
    ju_ArrayList_clear($this.$activeEffects);
    cgtt_TypingConfig_$callClinit();
    var$3 = cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR;
    $this.$textSpeed = var$3;
    $this.$charCooldown = var$3;
    $this.$rawCharIndex = (-2);
    $this.$glyphCharIndex = (-1);
    $this.$glyphCharCompensation = 0;
    $this.$parsed = 0;
    $this.$paused = 0;
    $this.$ended = 0;
    $this.$skipping = 0;
    $this.$ignoringEvents = 0;
    $this.$ignoringEffects = 0;
    cgtt_TextraLabel_invalidate($this);
    cgtt_TypingLabel_saveOriginalText($this, var$1);
    cgtt_TypingLabel_parseTokens($this);
},
cgtt_TypingLabel_setVariable = ($this, $var, $value) => {
    let $old;
    a: {
        if ($var !== null) {
            $old = cbgu_ObjectMap_put($this.$variables, jl_String_toUpperCase($var), $value);
            if (!jl_String_contains($value, $rt_s(509)) && !jl_String_contains($value, $rt_s(510))) {
                if ($old === null)
                    break a;
                if (!jl_String_contains($old, $rt_s(509)) && !jl_String_contains($old, $rt_s(510)))
                    break a;
            }
            $this.$parsed = 0;
        }
    }
},
cgtt_TypingLabel_act = ($this, $delta) => {
    let $effect, var$3, $i, $glyphCount, var$6, $start, $end, $j, var$10, var$11, var$12, var$13, var$14, var$15, var$16, $glyph, $$je;
    $effect = $this.$actions;
    if ($effect.$size0) {
        var$3 = $this.$stage;
        var$3 !== null && !var$3.$getActionsRequestRendering();
        a: {
            try {
                $i = 0;
                while (true) {
                    if ($i >= $effect.$size0)
                        break a;
                    var$3 = cbgu_Array_get($effect, $i);
                    if (var$3.$act0($delta) && $i < $effect.$size0) {
                        $glyphCount = cbgu_Array_get($effect, $i) === var$3 ? $i : cbgu_Array_indexOf($effect, var$3, 1);
                        if ($glyphCount != (-1)) {
                            cbgu_Array_removeIndex($effect, $glyphCount);
                            var$3.$setActor(null);
                            $i = $i + (-1) | 0;
                        }
                    }
                    $i = $i + 1 | 0;
                }
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_RuntimeException) {
                    $effect = $$je;
                } else {
                    throw $$e;
                }
            }
            var$6 = $this;
            $glyphCount = jl_Math_max(0, 0);
            $i = jl_Math_min(jl_Math_max(cgtt_Layout_countGlyphs(var$6.$workingLayout), $glyphCount), 2147483647);
            var$3 = new jl_StringBuilder;
            $start = $i - $glyphCount | 0;
            jl_AbstractStringBuilder__init_0(var$3, $start);
            $end = 0;
            $j = 0;
            var$10 = cgtt_Layout_lines(var$6.$workingLayout);
            var$11 = $glyphCount;
            b: {
                while ($j < var$10 && var$11 >= 0) {
                    var$12 = (cgtt_Layout_getLine(var$6.$workingLayout, $j)).$glyphs;
                    var$13 = var$12.$size1;
                    if (var$11 >= var$13)
                        var$11 = var$11 - var$13 | 0;
                    else {
                        var$14 = ((var$11 - $glyphCount | 0) - $end | 0) + $i | 0;
                        while (var$11 < var$14 && var$11 < var$12.$size1) {
                            var$13 = Long_lo((cbgu_LongArray_get(var$12, var$11))) & 65535;
                            if (var$13 >= 57344 && var$13 <= 63488) {
                                var$15 = var$6.$font0.$namesByCharCode.$get2(var$13);
                                if (var$15 === null)
                                    jl_AbstractStringBuilder_append0(var$3, var$13);
                                else
                                    jl_AbstractStringBuilder_append(var$3, var$15);
                            } else if (var$13 == 2)
                                jl_AbstractStringBuilder_append0(var$3, 91);
                            else if (var$13 != 8203)
                                jl_AbstractStringBuilder_append0(var$3, var$13);
                            $end = $end + 1 | 0;
                            var$11 = var$11 + 1 | 0;
                        }
                        if ($end == $start) {
                            var$6 = jl_AbstractStringBuilder_toString(var$3);
                            break b;
                        }
                        var$11 = 0;
                    }
                    $j = $j + 1 | 0;
                }
                var$6 = $rt_s(24);
            }
            var$3 = new jl_RuntimeException;
            var$15 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$15);
            jl_AbstractStringBuilder_append(var$15, $rt_s(511));
            jl_AbstractStringBuilder_append(var$15, jl_String_substring(var$6, 0, jl_Math_min(var$6.$nativeString.length, 128)));
            jl_Throwable__init_0(var$3, jl_AbstractStringBuilder_toString(var$15), $effect);
            $rt_throw(var$3);
        }
    }
    if (!$this.$parsed)
        cgtt_TypingLabel_parseTokens($this);
    c: {
        $glyphCount = $this.$skipping;
        if (!$glyphCount) {
            if ($this.$ended)
                break c;
            if ($this.$paused)
                break c;
        }
        if (!$glyphCount) {
            var$16 = $this.$charCooldown - $delta;
            $this.$charCooldown = var$16;
            if (var$16 >= 0.0)
                break c;
        }
        cgtt_TypingLabel_processCharProgression($this);
    }
    d: {
        cgtt_Font_calculateSize($this.$font0, $this.$workingLayout);
        $glyphCount = cgtt_Layout_countGlyphs($this.$workingLayout);
        $effect = $this.$offsets;
        $i = $glyphCount + $glyphCount | 0;
        cbgu_FloatArray_setSize($effect, $i);
        ju_Arrays_fill1($this.$offsets.$items3, 0, $i, 0.0);
        cbgu_FloatArray_setSize($this.$sizing, $i);
        ju_Arrays_fill1($this.$sizing.$items3, 0, $i, 1.0);
        cbgu_FloatArray_setSize($this.$rotations, $glyphCount);
        ju_Arrays_fill1($this.$rotations.$items3, 0, $glyphCount, 0.0);
        if (!$this.$ignoringEffects) {
            $i = $this.$activeEffects.$size3 - 1 | 0;
            while (true) {
                if ($i < 0)
                    break d;
                $effect = ju_ArrayList_get($this.$activeEffects, $i);
                $effect.$update($delta);
                $start = $effect.$indexStart;
                $end = $effect.$indexEnd;
                if ($end < 0)
                    $end = $this.$glyphCharIndex;
                e: {
                    if (cgtt_Effect_isFinished($effect))
                        ju_ArrayList_remove($this.$activeEffects, $i);
                    else {
                        $j = jl_Math_max(0, $start);
                        while (true) {
                            if ($j > $this.$glyphCharIndex)
                                break e;
                            if ($j > $end)
                                break e;
                            if ($j >= $glyphCount)
                                break e;
                            $glyph = cgtt_TypingLabel_getInLayout($this, $this.$workingLayout, $j);
                            if (Long_eq($glyph, Long_fromInt(16777215)))
                                break;
                            $effect.$onApply($glyph, $j - $effect.$indexStart | 0, $j, $delta);
                            $j = $j + 1 | 0;
                        }
                    }
                }
                $i = $i + (-1) | 0;
            }
        }
    }
},
cgtt_TypingLabel_randomize = ($this, $seed) => {
    return cbgu_NumberUtils_intBitsToFloat(Long_lo(Long_shru(Long_mul(Long_xor(Long_fromInt($seed), Long_create(2135587861, 2654435769)), Long_create(3516067075, 3518319154)), 41)) | 1073741824) - 4.400000095367432;
},
cgtt_TypingLabel_processCharProgression = $this => {
    let $charCounter, $charLimit, $intervalMultiplier, $layoutSize, $entry, $safeIndex, $effectName, $category, $isStart, $i, $s, $effect, $safeIndex_0, $safeIndex_1, $baseChar, $actualWidth;
    $charCounter = 0;
    a: {
        b: {
            c: while (true) {
                if (!$this.$skipping && $this.$charCooldown >= 0.0)
                    break a;
                $charLimit = $this.$glyphCharCompensation;
                if ($charLimit) {
                    if ($charLimit <= 0) {
                        $this.$glyphCharIndex = $this.$glyphCharIndex - 1 | 0;
                        $this.$glyphCharCompensation = $charLimit + 1 | 0;
                    } else {
                        $this.$glyphCharIndex = $this.$glyphCharIndex + 1 | 0;
                        $this.$glyphCharCompensation = $charLimit - 1 | 0;
                    }
                    $intervalMultiplier = $this.$textSpeed;
                    if ($intervalMultiplier >= 0.0) {
                        $this.$charCooldown = $this.$charCooldown + $intervalMultiplier;
                        continue;
                    }
                    $this.$charCooldown = $this.$charCooldown + $intervalMultiplier * cgtt_TypingLabel_randomize($this, $this.$glyphCharIndex);
                    continue;
                }
                $this.$rawCharIndex = $this.$rawCharIndex + 1 | 0;
                $layoutSize = cgtt_Layout_countGlyphs($this.$layout);
                if (!$layoutSize)
                    break b;
                if ($this.$glyphCharIndex >= $layoutSize)
                    break b;
                $entry = $this.$tokenEntries;
                $safeIndex = $entry.$size3;
                if ($safeIndex > 0 && (ju_ArrayList_get($entry, $safeIndex - 1 | 0)).$index5 == $this.$rawCharIndex) {
                    $entry = $this.$tokenEntries;
                    $entry = ju_ArrayList_remove($entry, $entry.$size3 - 1 | 0);
                    $effectName = $entry.$token;
                    $category = $entry.$category3;
                    $this.$rawCharIndex = $entry.$endIndex - 1 | 0;
                    cgtt_TypingLabel$1_$callClinit();
                    switch (cgtt_TypingLabel$1_$SwitchMap$com$github$tommyettinger$textra$TokenCategory.data[$category.$ordinal0]) {
                        case 1:
                            break;
                        case 2:
                            $this.$charCooldown = $this.$charCooldown + $entry.$floatValue;
                            continue c;
                        case 3:
                            cgtt_TypingLabel_triggerEvent($this, $entry.$stringValue1, 0);
                            continue c;
                        case 4:
                        case 5:
                            $isStart = $category !== cgtt_TokenCategory_EFFECT_START ? 0 : 1;
                            if (!$isStart)
                                $effectName = jl_String_substring0($effectName, 3);
                            $i = 0;
                            $s = $this.$activeEffects.$size3;
                            while ($i < $s) {
                                $effect = ju_ArrayList_get($this.$activeEffects, $i);
                                if ($effect.$indexEnd < 0 && jl_String_equals($effectName, $effect.$name2))
                                    $effect.$indexEnd = $this.$glyphCharIndex;
                                $i = $i + 1 | 0;
                            }
                            if (!$isStart)
                                continue c;
                            $entry = $entry.$effect;
                            $entry.$indexStart = $this.$glyphCharIndex + 1 | 0;
                            ju_ArrayList_add($this.$activeEffects, $entry);
                            continue c;
                        default:
                            break c;
                    }
                    $this.$textSpeed = $entry.$floatValue;
                    continue;
                }
                $safeIndex = $this.$glyphCharIndex + 1 | 0;
                $safeIndex_0 = 0;
                $safeIndex_1 = $layoutSize - 1 | 0;
                if ($safeIndex >= $safeIndex_0)
                    $safeIndex_0 = $safeIndex <= $safeIndex_1 ? $safeIndex : $safeIndex_1;
                if ($layoutSize > 0) {
                    $baseChar = cgtt_TypingLabel_getInLayout($this, $this.$layout, $safeIndex_0);
                    cgtt_TypingConfig_$callClinit();
                    $intervalMultiplier = cbgu_IntFloatMap_get(cgtt_TypingConfig_INTERVAL_MULTIPLIERS_BY_CHAR, Long_lo($baseChar) & 65535, 1.0);
                    $actualWidth = $this.$textSpeed;
                    if ($actualWidth >= 0.0)
                        $this.$charCooldown = $this.$charCooldown + $actualWidth * $intervalMultiplier;
                    else
                        $this.$charCooldown = $this.$charCooldown + $actualWidth * cgtt_TypingLabel_randomize($this, $this.$glyphCharIndex) * $intervalMultiplier;
                }
                $safeIndex = $this.$rawCharIndex;
                if ($safeIndex > 0)
                    $this.$glyphCharIndex = $this.$glyphCharIndex + 1 | 0;
                $charLimit = $this.$glyphCharIndex;
                if ($charLimit >= 0 && $charLimit < $layoutSize && $safeIndex >= 0) {
                    $entry = $this.$listener;
                    if ($entry !== null)
                        $entry.$onChar(cgtt_TypingLabel_getInLayout($this, $this.$layout, $charLimit));
                }
                if (!$this.$glyphCharIndex && !$this.$skipping) {
                    $this.$charCooldown = jl_Math_abs($this.$textSpeed);
                    break a;
                }
                $charCounter = $charCounter + 1 | 0;
                cgtt_TypingConfig_$callClinit();
                $charLimit = cgtt_TypingConfig_CHAR_LIMIT_PER_FRAME;
                if (!$this.$skipping && $charLimit > 0 && $charCounter > $charLimit) {
                    $intervalMultiplier = $this.$textSpeed;
                    if ($intervalMultiplier !== 0.0) {
                        $this.$charCooldown = jl_Math_max0($this.$charCooldown, jl_Math_abs($intervalMultiplier));
                        break a;
                    }
                }
            }
            break a;
        }
        if (!$this.$ended) {
            $this.$ended = 1;
            $this.$skipping = 0;
            $entry = $this.$listener;
            if ($entry !== null)
                $entry.$end();
        }
    }
    if ($this.$wrap5) {
        $actualWidth = $this.$width1;
        if ($actualWidth !== 0.0)
            $this.$workingLayout.$targetWidth = $actualWidth;
    }
    cgtt_Font_calculateSize($this.$font0, $this.$workingLayout);
    cgtt_TextraLabel_invalidate($this);
},
cgtt_TypingLabel_draw = ($this, $batch, $parentAlpha) => {
    cgtt_TypingLabel_drawSection($this, $batch, $parentAlpha, 0, (-1));
},
cgtt_TypingLabel_drawSection = ($this, $batch, $parentAlpha, $startIndex, $endIndex) => {
    let var$5, $rot, $originX, $originY, $sn, $cs, $lines, $baseX, $baseY, $height, $width, $amt, $background, $o, $s, $r, $gi, $resetShader, var$23, $globalIndex, $inX, $inY, $toSkip, $ln, $fx, $fy, $descent, $yChange, $end, $adjustedIndex, $glyphs, $r_0, $selectionDrawStartX, $selectionDrawStartY, $selectionWidth, $worldOriginX, $worldOriginY, $xChange, $xChange_0, $yChange_0, $f, $kern, $start, $end_0, $n, $bgc, $lim, $glyph, $reg, $descent_0, $ox, $xx, $yy, $scale, $kern_0, $single, var$61;
    cgtt_TextraLabel_validate($this);
    var$5 = $this;
    $rot = cbgss_Actor_getRotation(var$5);
    $originX = cbgss_Actor_getOriginX(var$5);
    $originY = cbgss_Actor_getOriginY(var$5);
    $sn = cbgm_MathUtils_sinDeg($rot);
    $cs = cbgm_MathUtils_cosDeg($rot);
    $lines = cgtt_Layout_lines($this.$workingLayout);
    $baseX = cbgss_Actor_getX(var$5);
    $baseY = cbgss_Actor_getY(var$5);
    $height = cgtt_Layout_getHeight($this.$workingLayout);
    if (cbgu_Align_isBottom($this.$align)) {
        $baseX = $baseX - $sn * $height;
        $baseY = $baseY + $cs * $height;
    } else if (cbgu_Align_isCenterVertical($this.$align)) {
        $baseX = $baseX - $sn * $height * 0.5;
        $baseY = $baseY + $cs * $height * 0.5;
    }
    $width = cbgss_Actor_getWidth(var$5);
    $amt = cbgss_Actor_getHeight(var$5);
    if (cbgu_Align_isRight($this.$align)) {
        $baseX = $baseX + $cs * $width;
        $baseY = $baseY + $sn * $width;
    } else if (cbgu_Align_isCenterHorizontal($this.$align)) {
        $baseX = $baseX + $cs * $width * 0.5;
        $baseY = $baseY + $sn * $width * 0.5;
    }
    if (cbgu_Align_isTop($this.$align)) {
        $baseX = $baseX - $sn * $amt;
        $baseY = $baseY + $cs * $amt;
    } else if (cbgu_Align_isCenterVertical($this.$align)) {
        $baseX = $baseX - $sn * $amt * 0.5;
        $baseY = $baseY + $cs * $amt * 0.5;
    }
    $background = $this.$style;
    if ($background !== null) {
        $background = $background.$background;
        if ($background !== null) {
            if (cbgu_Align_isLeft($this.$align)) {
                $baseX = $baseX + $cs * $background.$getLeftWidth();
                $amt = $baseY + $sn * $background.$getLeftWidth();
            } else if (cbgu_Align_isRight($this.$align)) {
                $baseX = $baseX - $cs * $background.$getRightWidth();
                $amt = $baseY - $sn * $background.$getRightWidth();
            } else {
                $baseX = $baseX + $cs * ($background.$getLeftWidth() - $background.$getRightWidth()) * 0.5;
                $amt = $baseY + $sn * ($background.$getLeftWidth() - $background.$getRightWidth()) * 0.5;
            }
            if (!cbgu_Align_isBottom($this.$align)) {
                if (cbgu_Align_isTop($this.$align)) {
                    $baseX = $baseX + $sn * $background.$getTopHeight();
                    $baseY = $amt - $cs * $background.$getTopHeight();
                } else {
                    $baseX = $baseX - $sn * ($background.$getBottomHeight() - $background.$getTopHeight()) * 0.5;
                    $baseY = $amt + $cs * ($background.$getBottomHeight() - $background.$getTopHeight()) * 0.5;
                }
            } else {
                $baseX = $baseX - $sn * $background.$getBottomHeight();
                $baseY = $amt + $cs * $background.$getBottomHeight();
            }
            $background.$draw4($batch, cbgss_Actor_getX(var$5), cbgss_Actor_getY(var$5), $originX, $originY, cbgss_Actor_getWidth(var$5), cbgss_Actor_getHeight(var$5), 1.0, 1.0, $rot);
        }
    }
    if (!cbgu_Array_isEmpty($this.$layout.$lines0) && $parentAlpha > 0.0) {
        $o = 0;
        $s = 0;
        $r = 0;
        $gi = 0;
        $resetShader = cgtt_Font_getDistanceField($this.$font0) !== cgtt_Font$DistanceFieldType_STANDARD && cbggg_SpriteBatch_getShader($batch) !== $this.$font0.$shader ? 1 : 0;
        if ($resetShader)
            cgtt_Font_enableShader($this.$font0, $batch);
        var$23 = $batch;
        $background = cbgg_Color_set(cbggg_SpriteBatch_getColor(var$23), cbgss_Actor_getColor(var$5));
        $background.$a = $background.$a * $parentAlpha;
        cbggg_SpriteBatch_setColor(var$23, cbggg_SpriteBatch_getColor(var$23));
        $globalIndex = $startIndex - 1 | 0;
        $inX = 0.0;
        $inY = 0.0;
        if ($this.$trackingInput) {
            if (cbgss_Actor_hasParent(var$5))
                (cbgss_Actor_getParent(var$5)).$screenToLocalCoordinates(cbgm_Vector2_set($this.$temp, cgxgbt_TeaInput_getX(cbg_Gdx_input), cgxgbt_TeaInput_getY(cbg_Gdx_input)));
            else
                cbgss_Actor_screenToLocalCoordinates(var$5, cbgm_Vector2_set($this.$temp, cgxgbt_TeaInput_getX(cbg_Gdx_input), cgxgbt_TeaGraphics_getHeight(cbg_Gdx_graphics) - cgxgbt_TeaInput_getY(cbg_Gdx_input) | 0));
            $background = $this.$temp;
            $inX = $background.$x;
            $inY = $background.$y;
            if (!cgxgbt_TeaInput_isTouched(cbg_Gdx_input))
                $this.$lastTouchedIndex = $inY < cbgss_Actor_getY(var$5) ? (-2) : $inY > cbgss_Actor_getY(var$5) + cbgss_Actor_getHeight(var$5) ? (-1) : $inX < cbgss_Actor_getX(var$5) ? (-1) : $inX <= cbgss_Actor_getX(var$5) + cbgss_Actor_getWidth(var$5) ? (-1) : (-2);
            $this.$overIndex = (-1);
        }
        a: {
            $toSkip = 0;
            if ($this.$selectable && $this.$selectionDrawable !== null && $this.$selectionStart != $this.$selectionEnd) {
                $ln = 0;
                $fx =  -$originX;
                $fy =  -$originY;
                $descent = $cs * $fx - $sn * $fy;
                $yChange = $sn * $fx + $cs * $fy;
                $end = $endIndex - 1 | 0;
                $fx = $baseX;
                $fy = $baseY;
                $adjustedIndex = $globalIndex;
                while ($ln < $lines) {
                    $glyphs = cgtt_Layout_getLine($this.$workingLayout, $ln);
                    $r_0 = $glyphs.$glyphs.$size1;
                    if ($r_0) {
                        $toSkip = $toSkip + $r_0 | 0;
                        if ($toSkip >= $startIndex) {
                            $selectionDrawStartX = 0.0;
                            $selectionDrawStartY = 0.0;
                            $selectionWidth = 0.0;
                            $parentAlpha = $glyphs.$height;
                            $fx = $fx + $sn * $parentAlpha;
                            $fy = $fy - $cs * $parentAlpha;
                            $worldOriginX = $fx + $originX;
                            $worldOriginY = $fy + $originY;
                            $xChange = $descent + $worldOriginX;
                            $height = $yChange + $worldOriginY;
                            $xChange_0 = 0.0;
                            $yChange_0 = 0.0;
                            if (cbgu_Align_isCenterHorizontal($this.$align)) {
                                $parentAlpha = $glyphs.$width * 0.5;
                                $xChange = $xChange - $cs * $parentAlpha;
                                $height = $height - $sn * $parentAlpha;
                            } else if (cbgu_Align_isRight($this.$align)) {
                                $parentAlpha = $glyphs.$width;
                                $xChange = $xChange - $cs * $parentAlpha;
                                $height = $height - $sn * $parentAlpha;
                            }
                            $f = null;
                            $kern = (-1);
                            $r_0 = $toSkip - $glyphs.$glyphs.$size1 | 0;
                            $start = $r_0 >= $startIndex ? 0 : $startIndex - $r_0 | 0;
                            $end_0 = $endIndex < 0 ? $this.$glyphCharIndex : jl_Math_min($this.$glyphCharIndex, $end);
                            $n = $glyphs.$glyphs.$size1;
                            $bgc = $rt_compare(0, jl_Math_min(jl_Math_min($this.$rotations.$size4, $this.$offsets.$size4 >> 1), $this.$sizing.$size4 >> 1));
                            $lim = $start;
                            b: {
                                while ($lim < $n) {
                                    if ($bgc >= 0)
                                        break b;
                                    if ($gi > $end_0)
                                        break a;
                                    $glyph = cbgu_LongArray_get($glyphs.$glyphs, $lim);
                                    $background = $this.$font0;
                                    $reg = $background.$family;
                                    if ($reg !== null)
                                        $f = $reg.$connected.data[Long_lo(Long_and(Long_shru($glyph, 16), Long_fromInt(15)))];
                                    if ($f === null)
                                        $f = $background;
                                    $descent_0 = $f.$descent * $f.$scaleY;
                                    if ($lim == $start) {
                                        $parentAlpha = $f.$cellWidth;
                                        $amt = $xChange - $parentAlpha * 0.5 + $cs * $parentAlpha * 0.5;
                                        $worldOriginX = $height + $sn * $parentAlpha * 0.5 + $descent_0;
                                        $xChange = $amt + $sn * $descent_0;
                                        $height = $worldOriginX - $cs * $descent_0;
                                        $background = $background.$mapping;
                                        $r_0 = Long_lo($glyph) & 65535;
                                        $reg = cbgu_IntMap_get0($background, $r_0);
                                        if ($reg !== null) {
                                            $ox = $reg.$offsetX;
                                            if ($ox < 0.0 && !($r_0 >= 57344 && $r_0 < 63488)) {
                                                $parentAlpha = $ox * $f.$scaleX * (Long_ne(Long_and($glyph, Long_fromInt(16777216)), Long_ZERO) ? 1.0 : Long_toNumber(Long_add(Long_and(Long_shru(Long_add($glyph, Long_fromInt(3145728)), 20), Long_fromInt(15)), Long_fromInt(1))) * 0.25);
                                                if ($parentAlpha < 0.0) {
                                                    $xChange_0 = $xChange_0 - $cs * $parentAlpha;
                                                    $yChange_0 = $yChange_0 - $sn * $parentAlpha;
                                                }
                                            }
                                        }
                                    }
                                    if ($f.$kerning === null)
                                        $kern = (-1);
                                    else {
                                        $r_0 = $kern << 16;
                                        $glyph = cbgu_LongArray_get($glyphs.$glyphs, $lim);
                                        $kern = $r_0 | Long_lo(Long_and($glyph, Long_fromInt(65535)));
                                        $amt = cbgu_IntFloatMap_get($f.$kerning, $kern, 0.0) * $f.$scaleX * (Long_ne(Long_and($glyph, Long_fromInt(16777216)), Long_ZERO) ? 1.0 : Long_toNumber(Long_add(Long_and(Long_shru(Long_add($glyph, Long_fromInt(3145728)), 20), Long_fromInt(15)), Long_fromInt(1))) * 0.25);
                                        $xChange_0 = $xChange_0 + $cs * $amt;
                                        $yChange_0 = $yChange_0 + $sn * $amt;
                                    }
                                    $adjustedIndex = $adjustedIndex + 1 | 0;
                                    if ($this.$selectionEnd < $adjustedIndex)
                                        break b;
                                    $parentAlpha = $xChange + $xChange_0;
                                    $background = $this.$offsets;
                                    $r_0 = $o + 1 | 0;
                                    $xx = $parentAlpha + cbgu_FloatArray_get($background, $o);
                                    $parentAlpha = $height + $yChange_0;
                                    $background = $this.$offsets;
                                    $o = $r_0 + 1 | 0;
                                    $yy = $parentAlpha + cbgu_FloatArray_get($background, $r_0);
                                    $background = $this.$font0;
                                    if ($background.$integerPosition) {
                                        $xx = $xx | 0;
                                        $yy = $yy | 0;
                                    }
                                    $scale = Long_ne(Long_and($glyph, Long_fromInt(16777216)), Long_ZERO) ? 1.0 : Long_toNumber(Long_add(Long_and(Long_shru(Long_add($glyph, Long_fromInt(3145728)), 20), Long_fromInt(15)), Long_fromInt(1))) * 0.25;
                                    $r_0 = Long_lo($glyph);
                                    $kern_0 = $r_0 & 65535;
                                    $single = cgtt_Font_xAdvance($f, $kern_0 >= 57344 && $kern_0 < 63488 ? $scale * $background.$cellHeight / (cbgu_IntMap_get($f.$mapping, $r_0 & 65535, $f.$defaultValue)).$xAdvance0 : $background.$scaleX * $scale, $glyph);
                                    if ($selectionWidth !== 0.0) {
                                        $xx = $selectionDrawStartX;
                                        $yy = $selectionDrawStartY;
                                    }
                                    if ($this.$selectionStart <= $adjustedIndex)
                                        $selectionWidth = $selectionWidth + $single;
                                    $xChange_0 = $xChange_0 + $cs * $single;
                                    $yChange_0 = $yChange_0 + $sn * $single;
                                    $lim = $lim + 1 | 0;
                                    $gi = $gi + 1 | 0;
                                    $selectionDrawStartX = $xx;
                                    $selectionDrawStartY = $yy;
                                }
                            }
                            if ($selectionWidth > 0.0)
                                $this.$selectionDrawable.$draw5($batch, $selectionDrawStartX, $selectionDrawStartY, $selectionWidth, $glyphs.$height);
                        }
                    }
                    $ln = $ln + 1 | 0;
                }
            }
        }
        $o = 0;
        $gi = 0;
        $ln = 0;
        $fx =  -$originX;
        $fy =  -$originY;
        $selectionDrawStartY = $cs * $fx - $sn * $fy;
        $fx = $sn * $fx + $cs * $fy;
        $kern = $endIndex - 1 | 0;
        c: {
            d: while (true) {
                if ($ln >= $lines)
                    break c;
                e: {
                    $glyphs = cgtt_Layout_getLine($this.$workingLayout, $ln);
                    $r_0 = $glyphs.$glyphs.$size1;
                    if ($r_0) {
                        $toSkip = $toSkip + $r_0 | 0;
                        if ($toSkip >= $startIndex) {
                            $parentAlpha = $glyphs.$height;
                            $baseX = $baseX + $sn * $parentAlpha;
                            $baseY = $baseY - $cs * $parentAlpha;
                            $worldOriginX = $baseX + $originX;
                            $worldOriginY = $baseY + $originY;
                            $selectionWidth = $selectionDrawStartY + $worldOriginX;
                            $worldOriginX = $fx + $worldOriginY;
                            $xChange = 0.0;
                            $yChange = 0.0;
                            if (cbgu_Align_isCenterHorizontal($this.$align)) {
                                $parentAlpha = $glyphs.$width * 0.5;
                                $selectionWidth = $selectionWidth - $cs * $parentAlpha;
                                $worldOriginX = $worldOriginX - $sn * $parentAlpha;
                            } else if (cbgu_Align_isRight($this.$align)) {
                                $parentAlpha = $glyphs.$width;
                                $selectionWidth = $selectionWidth - $cs * $parentAlpha;
                                $worldOriginX = $worldOriginX - $sn * $parentAlpha;
                            }
                            $f = null;
                            $kern_0 = (-1);
                            $start = $toSkip - $glyphs.$glyphs.$size1 | 0;
                            $start = $start >= $startIndex ? 0 : $startIndex - $start | 0;
                            $end = $endIndex < 0 ? $this.$glyphCharIndex : jl_Math_min($this.$glyphCharIndex, $kern);
                            $n = $glyphs.$glyphs.$size1;
                            $lim = jl_Math_min(jl_Math_min($this.$rotations.$size4, $this.$offsets.$size4 >> 1), $this.$sizing.$size4 >> 1);
                            $end_0 = $start;
                            while ($end_0 < $n) {
                                if ($r >= $lim)
                                    break e;
                                if ($gi > $end)
                                    break c;
                                $glyph = cbgu_LongArray_get($glyphs.$glyphs, $end_0);
                                $background = $this.$font0;
                                $reg = $background.$family;
                                if ($reg !== null)
                                    $f = $reg.$connected.data[Long_lo(Long_and(Long_shru($glyph, 16), Long_fromInt(15)))];
                                if ($f === null)
                                    $f = $background;
                                $descent = $f.$descent * $f.$scaleY;
                                if ($end_0 == $start) {
                                    $parentAlpha = $f.$cellWidth;
                                    $amt = $selectionWidth - $parentAlpha * 0.5 + $cs * $parentAlpha * 0.5;
                                    $parentAlpha = $worldOriginX + $sn * $parentAlpha * 0.5 + $descent;
                                    $selectionDrawStartX = $descent - 0.5 * $glyphs.$height;
                                    $selectionWidth = $amt + $sn * $selectionDrawStartX;
                                    $worldOriginX = $parentAlpha - $cs * $selectionDrawStartX;
                                    $background = $background.$mapping;
                                    $bgc = Long_lo($glyph) & 65535;
                                    $reg = cbgu_IntMap_get0($background, $bgc);
                                    if ($reg !== null) {
                                        $ox = $reg.$offsetX;
                                        if ($ox < 0.0 && !($bgc >= 57344 && $bgc < 63488)) {
                                            $parentAlpha = $ox * $f.$scaleX * (Long_ne(Long_and($glyph, Long_fromInt(16777216)), Long_ZERO) ? 1.0 : Long_toNumber(Long_add(Long_and(Long_shru(Long_add($glyph, Long_fromInt(3145728)), 20), Long_fromInt(15)), Long_fromInt(1))) * 0.25);
                                            if ($parentAlpha < 0.0) {
                                                $xChange = $xChange - $cs * $parentAlpha;
                                                $yChange = $yChange - $sn * $parentAlpha;
                                            }
                                        }
                                    }
                                }
                                if ($f.$kerning === null)
                                    $kern_0 = (-1);
                                else {
                                    $kern_0 = $kern_0 << 16;
                                    $glyph = cbgu_LongArray_get($glyphs.$glyphs, $end_0);
                                    $kern_0 = $kern_0 | Long_lo(Long_and($glyph, Long_fromInt(65535)));
                                    $amt = cbgu_IntFloatMap_get($f.$kerning, $kern_0, 0.0) * $f.$scaleX * (Long_ne(Long_and($glyph, Long_fromInt(16777216)), Long_ZERO) ? 1.0 : Long_toNumber(Long_add(Long_and(Long_shru(Long_add($glyph, Long_fromInt(3145728)), 20), Long_fromInt(15)), Long_fromInt(1))) * 0.25);
                                    $xChange = $xChange + $cs * $amt;
                                    $yChange = $yChange + $sn * $amt;
                                }
                                $globalIndex = $globalIndex + 1 | 0;
                                if ($endIndex >= 0 && $globalIndex >= $endIndex)
                                    break d;
                                $bgc = $this.$selectable && $this.$selectionDrawable === null && $this.$selectionStart <= $globalIndex && $this.$selectionEnd >= $globalIndex ? cgttu_ColorUtils_offsetLightness(Long_hi($glyph), 0.5) : 0;
                                $parentAlpha = $selectionWidth + $xChange;
                                $background = $this.$offsets;
                                $r_0 = $o + 1 | 0;
                                $xx = $parentAlpha + cbgu_FloatArray_get($background, $o);
                                $parentAlpha = $worldOriginX + $yChange;
                                $background = $this.$offsets;
                                $o = $r_0 + 1 | 0;
                                $yy = $parentAlpha + cbgu_FloatArray_get($background, $r_0);
                                if ($this.$font0.$integerPosition) {
                                    $xx = $xx | 0;
                                    $yy = $yy | 0;
                                }
                                f: {
                                    $background = $this.$rotations;
                                    var$61 = $r + 1 | 0;
                                    $parentAlpha = cbgu_FloatArray_get($background, $r) + $rot;
                                    $background = $this.$sizing;
                                    $adjustedIndex = $s + 1 | 0;
                                    $amt = cbgu_FloatArray_get($background, $s);
                                    $background = $this.$sizing;
                                    $s = $adjustedIndex + 1 | 0;
                                    $single = cgtt_Font_drawGlyph($f, $batch, $glyph, $xx, $yy, $parentAlpha, $amt, cbgu_FloatArray_get($background, $adjustedIndex), $bgc);
                                    if (!$this.$trackingInput)
                                        break f;
                                    if ($xx > $inX)
                                        break f;
                                    if ($inX > $xx + $single)
                                        break f;
                                    $parentAlpha = $glyphs.$height * 0.5;
                                    if ($yy - $parentAlpha > $inY)
                                        break f;
                                    if ($inY > $yy + $parentAlpha)
                                        break f;
                                    $this.$overIndex = $globalIndex;
                                    if (!cbgss_Actor_isTouchable(var$5))
                                        break f;
                                    if (cgxgbt_TeaInput_justTouched(cbg_Gdx_input)) {
                                        $this.$lastTouchedIndex = $globalIndex;
                                        $this.$selectionStart = (-1);
                                        $this.$selectionEnd = (-1);
                                        break f;
                                    }
                                    if (!$this.$selectable)
                                        break f;
                                    if (cgxgbt_TeaInput_isTouched(cbg_Gdx_input)) {
                                        $adjustedIndex = $this.$lastTouchedIndex;
                                        if ($adjustedIndex == (-2))
                                            $adjustedIndex = cgtt_Layout_countGlyphs($this.$workingLayout);
                                        $this.$selectionStart = jl_Math_min($adjustedIndex, $globalIndex);
                                        $this.$selectionEnd = jl_Math_max($adjustedIndex, $globalIndex);
                                        $this.$dragging = 1;
                                        break f;
                                    }
                                    if (!$this.$dragging)
                                        break f;
                                    $this.$dragging = 0;
                                    if ($this.$selectionStart == $this.$selectionEnd) {
                                        $this.$selectionEnd = (-1);
                                        $this.$selectionStart = (-1);
                                        break f;
                                    }
                                    cgtt_TypingLabel_triggerEvent($this, $rt_s(512), 1);
                                }
                                $xChange = $xChange + $cs * $single;
                                $yChange = $yChange + $sn * $single;
                                $end_0 = $end_0 + 1 | 0;
                                $gi = $gi + 1 | 0;
                                $r = var$61;
                            }
                        }
                    }
                }
                $ln = $ln + 1 | 0;
            }
        }
        if ($resetShader)
            cbggg_SpriteBatch_setShader(var$23, null);
        return;
    }
},
cgtt_TypingLabel_setIntermediateText = ($this, $text, $modifyOriginalText, $restart) => {
    let $hasEnded, var$5;
    $hasEnded = $this.$ended;
    var$5 = $this.$intermediateText;
    if ($text !== var$5) {
        var$5.$length2 = 0;
        jl_AbstractStringBuilder_append1(var$5, $text);
    }
    if ($modifyOriginalText)
        cgtt_TypingLabel_saveOriginalText($this, $text);
    if ($restart)
        cgtt_TypingLabel_restart($this);
    if ($hasEnded)
        cgtt_TypingLabel_skipToTheEnd($this, 1, 0);
},
cgtt_TypingLabel_getInLayout = ($this, $layout, $index) => {
    let $i, $n, $glyphs, var$6;
    $i = 0;
    $n = cgtt_Layout_lines($layout);
    while ($i < $n && $index >= 0) {
        $glyphs = (cgtt_Layout_getLine($layout, $i)).$glyphs;
        var$6 = $glyphs.$size1;
        if ($index < var$6)
            return cbgu_LongArray_get($glyphs, $index);
        $index = $index - var$6 | 0;
        $i = $i + 1 | 0;
    }
    return Long_fromInt(16777215);
},
cgtt_TypingLabel_getLineHeight = ($this, $index) => {
    let $i, $n, var$4;
    $i = 0;
    $n = cgtt_Layout_lines($this.$workingLayout);
    while ($i < $n && $index >= 0) {
        var$4 = (cgtt_Layout_getLine($this.$workingLayout, $i)).$glyphs.$size1;
        if ($index < var$4)
            return (cgtt_Layout_getLine($this.$workingLayout, $i)).$height;
        $index = $index - var$4 | 0;
        $i = $i + 1 | 0;
    }
    return $this.$font0.$cellHeight;
},
cgtt_TypingLabel_setInWorkingLayout = ($this, $index, $newGlyph) => {
    let $i, $n, $glyphs, var$6, var$7, var$8;
    $i = 0;
    $n = cgtt_Layout_lines($this.$workingLayout);
    while ($i < $n && $index >= 0) {
        $glyphs = (cgtt_Layout_getLine($this.$workingLayout, $i)).$glyphs;
        if ($i < cgtt_Layout_lines($this.$workingLayout)) {
            var$6 = $rt_compare($index, $glyphs.$size1);
            if (var$6 < 0) {
                if (var$6 < 0) {
                    $glyphs.$items0.data[$index] = $newGlyph;
                    return;
                }
                var$7 = new jl_IndexOutOfBoundsException;
                var$8 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$8);
                jl_AbstractStringBuilder_append(var$8, $rt_s(10));
                var$8 = jl_StringBuilder_append1(var$8, $index);
                jl_AbstractStringBuilder_append(var$8, $rt_s(11));
                jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$8, $glyphs.$size1)));
                $rt_throw(var$7);
            }
        }
        $index = $index - $glyphs.$size1 | 0;
        $i = $i + 1 | 0;
    }
},
cgtt_TypingLabel_triggerEvent = ($this, $event, $always) => {
    let var$3;
    var$3 = $this.$listener;
    if (var$3 !== null && !(!$always && $this.$ignoringEvents))
        var$3.$event($event);
},
cbgu_ScreenUtils = $rt_classWithoutFields(),
cbgu_ScreenUtils_clear = ($r, $g, $b, $a, $clearDepth, $applyAntialiasing) => {
    let $mask;
    cbg_Gdx_gl.$glClearColor($r, $g, $b, $a);
    $mask = 16384;
    if ($clearDepth)
        $mask = 16640;
    cbg_Gdx_gl.$glClear($mask);
},
cgxgbtfi_IndexedDBFileData = $rt_classWithoutFields(),
cgxgbtfi_IndexedDBFileData_create$js_body$_5 = (var$1, var$2) => {
    return { type : var$1, date : var$2 };
};
function cgxgbtft_LocalDBStorage$putFile$lambda$_2_0() {
    jl_Object.call(this);
    this.$_01 = null;
}
let cgxgbtft_LocalDBStorage$putFile$lambda$_2_0_handleEvent$exported$0 = var$1 => {
    let var$2, var$3;
    var$1 = var$1.$_01;
    var$2 = jl_System_err();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(513)), var$1);
    var$1 = jl_AbstractStringBuilder_toString(var$3);
    otcic_JsConsolePrintStream_println(var$2, var$1);
},
ju_ConcurrentModificationException = $rt_classWithoutFields(jl_RuntimeException);
function cvd_Trail$SegmentPool() {
    cbgu_Pool.call(this);
    this.$this$07 = null;
}
let cbggg_PixmapNativeInterface = $rt_classWithoutFields(0);
function cbgg_Pixmap() {
    let a = this; jl_Object.call(a);
    a.$blending = null;
    a.$filter = null;
    a.$color4 = 0;
    a.$nativePixmap = null;
    a.$disposed = 0;
}
let cbgg_Pixmap__init_1 = ($this, $file) => {
    let var$2, $path, $bytes, var$5, var$6, var$7, $$je;
    $this.$blending = cbgg_Pixmap$Blending_SourceOver;
    $this.$filter = cbgg_Pixmap$Filter_BiLinear;
    $this.$color4 = 0;
    var$2 = $file;
    $path = var$2.$file;
    if (!cgxgbt_TeaFileHandle_exists(var$2)) {
        $file = new cbgu_GdxRuntimeException;
        var$2 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$2);
        jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(514)), $path);
        jl_Throwable__init_($file, jl_AbstractStringBuilder_toString(var$2));
        $rt_throw($file);
    }
    var$2 = cgxgbt_TeaFileHandle_read(var$2);
    a: {
        try {
            try {
                $bytes = cbgu_StreamUtils_copyStreamToByteArray(var$2, cbgf_FileHandle_estimateLength($file));
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    var$5 = $$je;
                } else {
                    throw $$e;
                }
            }
            $rt_throw(cbgu_GdxRuntimeException__init_(jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(515)), $file)), var$5));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            $file = $$je;

        }
        cbgu_StreamUtils_closeQuietly(var$2);
        $rt_throw($file);
    }
    var$6 = $bytes.data;
    cbgu_StreamUtils_closeQuietly(var$2);
    $file = new cbggg_Gdx2DPixmap;
    var$7 = var$6.length;
    var$2 = new cbggg_Gdx2DPixmapNative;
    var$2.$nativeData = cbggg_Gdx2DPixmapNative_loadNative$js_body$_26(otji_JS_wrap($bytes), 0, var$7);
    cbggg_Gdx2DPixmapNative_updateNativeData(var$2);
    $file.$nativePixmap0 = var$2;
    $this.$nativePixmap = $file;
},
cbgg_Pixmap__init_0 = var_0 => {
    let var_1 = new cbgg_Pixmap();
    cbgg_Pixmap__init_1(var_1, var_0);
    return var_1;
},
cbgg_Pixmap__init_2 = ($this, $width, $height, $format) => {
    let var$4, var$5, var$6;
    $this.$blending = cbgg_Pixmap$Blending_SourceOver;
    $this.$filter = cbgg_Pixmap$Filter_BiLinear;
    $this.$color4 = 0;
    var$4 = new cbggg_Gdx2DPixmap;
    if ($format === cbgg_Pixmap$Format_Alpha)
        var$5 = 1;
    else if ($format === cbgg_Pixmap$Format_Intensity)
        var$5 = 1;
    else if ($format === cbgg_Pixmap$Format_LuminanceAlpha)
        var$5 = 2;
    else if ($format === cbgg_Pixmap$Format_RGB565)
        var$5 = 5;
    else if ($format === cbgg_Pixmap$Format_RGBA4444)
        var$5 = 6;
    else if ($format === cbgg_Pixmap$Format_RGB888)
        var$5 = 3;
    else {
        if ($format !== cbgg_Pixmap$Format_RGBA8888) {
            var$6 = new cbgu_GdxRuntimeException;
            $format = jl_String_valueOf($format);
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(516)), $format);
            jl_Throwable__init_(var$6, jl_AbstractStringBuilder_toString(var$4));
            $rt_throw(var$6);
        }
        var$5 = 4;
    }
    var$4.$nativePixmap0 = cbggg_Gdx2DPixmapNative__init_0($width, $height, var$5);
    $this.$nativePixmap = var$4;
    cbgg_Pixmap_setColor0($this, 0.0, 0.0, 0.0, 0.0);
    cbgg_Pixmap_fill($this);
},
cbgg_Pixmap__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cbgg_Pixmap();
    cbgg_Pixmap__init_2(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgg_Pixmap_setColor0 = ($this, $r, $g, $b, $a) => {
    $this.$color4 = cbgg_Color_rgba8888($r, $g, $b, $a);
},
cbgg_Pixmap_setColor = ($this, $color) => {
    cbgg_Pixmap_setColor0($this, $color.$r, $color.$g, $color.$b, $color.$a);
},
cbgg_Pixmap_fill = $this => {
    let var$1, var$2;
    var$1 = $this.$nativePixmap;
    var$2 = $this.$color4;
    var$1 = var$1.$nativePixmap0;
    Gdx.Gdx.prototype.g2d_clear(var$1.$basePtr, var$2);
    cbggg_Gdx2DPixmapNative_copyHeapToBuffer(var$1);
},
cbgg_Pixmap_drawPixmap = ($this, $pixmap, $x, $y, $srcx, $srcy, $srcWidth, $srcHeight) => {
    let var$8;
    var$8 = $this.$nativePixmap;
    $pixmap = $pixmap.$nativePixmap;
    cbggg_Gdx2DPixmapNative_drawPixmap(var$8.$nativePixmap0, $pixmap.$nativePixmap0.$basePtr, $srcx, $srcy, $x, $y, $srcWidth, $srcHeight);
},
cbgg_Pixmap_getWidth = $this => {
    return $this.$nativePixmap.$nativePixmap0.$width5;
},
cbgg_Pixmap_getHeight = $this => {
    return $this.$nativePixmap.$nativePixmap0.$height6;
},
cbgg_Pixmap_dispose = $this => {
    let var$1;
    if (!$this.$disposed) {
        cbggg_Gdx2DPixmapNative_dispose($this.$nativePixmap.$nativePixmap0);
        $this.$disposed = 1;
        return;
    }
    var$1 = new cbgu_GdxRuntimeException;
    jl_Throwable__init_(var$1, $rt_s(517));
    $rt_throw(var$1);
},
cbgg_Pixmap_getGLFormat = $this => {
    return cbggg_Gdx2DPixmap_getGLInternalFormat($this.$nativePixmap);
},
cbgg_Pixmap_getGLInternalFormat = $this => {
    return cbggg_Gdx2DPixmap_getGLInternalFormat($this.$nativePixmap);
},
cbgg_Pixmap_getGLType = $this => {
    let var$1, var$2, var$3;
    a: {
        var$1 = $this.$nativePixmap.$nativePixmap0.$format0;
        switch (var$1) {
            case 1:
            case 2:
            case 3:
            case 4:
                break;
            case 5:
                var$1 = 33635;
                break a;
            case 6:
                var$1 = 32819;
                break a;
            default:
                var$2 = new cbgu_GdxRuntimeException;
                var$3 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$3);
                jl_StringBuilder_append1(jl_StringBuilder_append(var$3, $rt_s(518)), var$1);
                jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
                $rt_throw(var$2);
        }
        var$1 = 5121;
    }
    return var$1;
},
cbgg_Pixmap_getPixels = $this => {
    return $this.$nativePixmap.$nativePixmap0.$buffer4;
},
cbgg_Pixmap_getFormat = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$nativePixmap.$nativePixmap0.$format0;
    if (var$1 == 1)
        var$2 = cbgg_Pixmap$Format_Alpha;
    else if (var$1 == 2)
        var$2 = cbgg_Pixmap$Format_LuminanceAlpha;
    else if (var$1 == 5)
        var$2 = cbgg_Pixmap$Format_RGB565;
    else if (var$1 == 6)
        var$2 = cbgg_Pixmap$Format_RGBA4444;
    else if (var$1 == 3)
        var$2 = cbgg_Pixmap$Format_RGB888;
    else {
        if (var$1 != 4) {
            var$2 = new cbgu_GdxRuntimeException;
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_StringBuilder_append1(jl_StringBuilder_append(var$3, $rt_s(519)), var$1);
            jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
            $rt_throw(var$2);
        }
        var$2 = cbgg_Pixmap$Format_RGBA8888;
    }
    return var$2;
},
cbgg_Pixmap_setBlending = ($this, $blending) => {
    let var$2, var$3;
    $this.$blending = $blending;
    var$2 = $this.$nativePixmap;
    var$3 = $blending !== cbgg_Pixmap$Blending_None ? 1 : 0;
    cbggg_Gdx2DPixmapNative_setBlend(var$2.$nativePixmap0, var$3);
},
cbgg_Pixmap$Format = $rt_classWithoutFields(jl_Enum),
cbgg_Pixmap$Format_Alpha = null,
cbgg_Pixmap$Format_Intensity = null,
cbgg_Pixmap$Format_LuminanceAlpha = null,
cbgg_Pixmap$Format_RGB565 = null,
cbgg_Pixmap$Format_RGBA4444 = null,
cbgg_Pixmap$Format_RGB888 = null,
cbgg_Pixmap$Format_RGBA8888 = null,
cbgg_Pixmap$Format_$VALUES = null,
cbgg_Pixmap$Format_values = () => {
    return cbgg_Pixmap$Format_$VALUES.$clone0();
},
cbgg_Pixmap$Format__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(198), 0);
    cbgg_Pixmap$Format_Alpha = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(520), 1);
    cbgg_Pixmap$Format_Intensity = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(521), 2);
    cbgg_Pixmap$Format_LuminanceAlpha = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(522), 3);
    cbgg_Pixmap$Format_RGB565 = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(523), 4);
    cbgg_Pixmap$Format_RGBA4444 = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(524), 5);
    cbgg_Pixmap$Format_RGB888 = var$1;
    var$1 = new cbgg_Pixmap$Format;
    jl_Enum__init_(var$1, $rt_s(525), 6);
    cbgg_Pixmap$Format_RGBA8888 = var$1;
    var$2 = $rt_createArray(cbgg_Pixmap$Format, 7);
    var$3 = var$2.data;
    var$3[0] = cbgg_Pixmap$Format_Alpha;
    var$3[1] = cbgg_Pixmap$Format_Intensity;
    var$3[2] = cbgg_Pixmap$Format_LuminanceAlpha;
    var$3[3] = cbgg_Pixmap$Format_RGB565;
    var$3[4] = cbgg_Pixmap$Format_RGBA4444;
    var$3[5] = cbgg_Pixmap$Format_RGB888;
    var$3[6] = var$1;
    cbgg_Pixmap$Format_$VALUES = var$2;
};
function ses_AbstractShapeDrawer() {
    let a = this; jl_Object.call(a);
    a.$batchManager0 = null;
    a.$defaultLineWidth = 0.0;
    a.$defaultSnap = 0;
    a.$lineDrawer = null;
    a.$pathDrawer = null;
    a.$polygonDrawer = null;
    a.$filledPolygonDrawer = null;
    a.$sideEstimator = null;
}
let ses_AbstractShapeDrawer_mat4 = null,
ses_AbstractShapeDrawer_trianglePathPoints = null,
ses_AbstractShapeDrawer_$callClinit = () => {
    ses_AbstractShapeDrawer_$callClinit = $rt_eraseClinit(ses_AbstractShapeDrawer);
    ses_AbstractShapeDrawer__clinit_();
},
ses_AbstractShapeDrawer__clinit_ = () => {
    ses_AbstractShapeDrawer_mat4 = cbgm_Matrix4__init_();
    ses_AbstractShapeDrawer_trianglePathPoints = $rt_createFloatArray(6);
};
function ses_ShapeDrawer() {
    ses_AbstractShapeDrawer.call(this);
    this.$rectangleCorners = null;
}
let ses_ShapeDrawer_filledTriangle = ($this, $x1, $y1, $x2, $y2, $x3, $y3, $color1, $color2, $color3) => {
    let var$10, var$11, var$12;
    var$10 = cbgg_Color_toFloatBits($color1);
    var$11 = cbgg_Color_toFloatBits($color2);
    var$12 = cbgg_Color_toFloatBits($color3);
    ses_FilledPolygonDrawer_triangle($this.$filledPolygonDrawer, $x1, $y1, $x2, $y2, $x3, $y3, var$10, var$11, var$12);
};
function cbgu_DelayedRemovalArray() {
    let a = this; cbgu_Array.call(a);
    a.$iterating = 0;
    a.$remove2 = null;
    a.$clear4 = 0;
}
let cbgu_DelayedRemovalArray__init_0 = ($this, $capacity) => {
    cbgu_Array__init_6($this, $capacity);
    $this.$remove2 = cbgu_IntArray__init_(0);
},
cbgu_DelayedRemovalArray__init_ = var_0 => {
    let var_1 = new cbgu_DelayedRemovalArray();
    cbgu_DelayedRemovalArray__init_0(var_1, var_0);
    return var_1;
},
cbgu_DelayedRemovalArray_remove = ($this, $index) => {
    let $i, $n, $removeIndex, var$5, var$6, var$7, var$8, var$9;
    if ($index < $this.$clear4)
        return;
    $i = 0;
    $n = $this.$remove2.$size2;
    while (true) {
        if ($i >= $n) {
            cbgu_IntArray_add($this.$remove2, $index);
            return;
        }
        $removeIndex = $rt_compare($index, cbgu_IntArray_get($this.$remove2, $i));
        if (!$removeIndex)
            break;
        if ($removeIndex < 0) {
            var$5 = $this.$remove2;
            $n = var$5.$size2;
            if ($i > $n) {
                var$6 = new jl_IndexOutOfBoundsException;
                var$7 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$7);
                jl_AbstractStringBuilder_append(var$7, $rt_s(12));
                var$7 = jl_StringBuilder_append1(var$7, $i);
                jl_AbstractStringBuilder_append(var$7, $rt_s(13));
                jl_Throwable__init_(var$6, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$7, var$5.$size2)));
                $rt_throw(var$6);
            }
            var$8 = var$5.$items1;
            if ($n == var$8.data.length)
                var$8 = cbgu_IntArray_resize(var$5, jl_Math_max(8, $n * 1.75 | 0));
            if (!var$5.$ordered0) {
                var$9 = var$8.data;
                var$9[var$5.$size2] = var$9[$i];
            } else
                jl_System_fastArraycopy(var$8, $i, var$8, $i + 1 | 0, var$5.$size2 - $i | 0);
            var$9 = var$8.data;
            var$5.$size2 = var$5.$size2 + 1 | 0;
            var$9[$i] = $index;
            return;
        }
        $i = $i + 1 | 0;
    }
},
cbgu_DelayedRemovalArray_removeIndex = ($this, $index) => {
    if ($this.$iterating <= 0)
        return cbgu_Array_removeIndex($this, $index);
    cbgu_DelayedRemovalArray_remove($this, $index);
    return cbgu_Array_get($this, $index);
};
function cvd_Trail$Segment() {
    let a = this; jl_Object.call(a);
    a.$x5 = 0.0;
    a.$y5 = 0.0;
    a.$angle = 0.0;
    a.$life = 0.0;
}
function cgtt_Font$DistanceFieldType() {
    let a = this; jl_Enum.call(a);
    a.$filePart = null;
    a.$namePart = null;
}
let cgtt_Font$DistanceFieldType_STANDARD = null,
cgtt_Font$DistanceFieldType_SDF = null,
cgtt_Font$DistanceFieldType_MSDF = null,
cgtt_Font$DistanceFieldType_SDF_OUTLINE = null,
cgtt_Font$DistanceFieldType_ALL = null,
cgtt_Font$DistanceFieldType_$VALUES = null,
cgtt_Font$DistanceFieldType_values = () => {
    return cgtt_Font$DistanceFieldType_$VALUES.$clone0();
},
cgtt_Font$DistanceFieldType__init_0 = ($this, var$1, var$2, $filePart, $namePart) => {
    jl_Enum__init_($this, var$1, var$2);
    $this.$filePart = $filePart;
    $this.$namePart = $namePart;
},
cgtt_Font$DistanceFieldType__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new cgtt_Font$DistanceFieldType();
    cgtt_Font$DistanceFieldType__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
cgtt_Font$DistanceFieldType__clinit_ = () => {
    let var$1, var$2, var$3;
    cgtt_Font$DistanceFieldType_STANDARD = cgtt_Font$DistanceFieldType__init_($rt_s(526), 0, $rt_s(527), $rt_s(24));
    cgtt_Font$DistanceFieldType_SDF = cgtt_Font$DistanceFieldType__init_($rt_s(528), 1, $rt_s(529), $rt_s(530));
    cgtt_Font$DistanceFieldType_MSDF = cgtt_Font$DistanceFieldType__init_($rt_s(531), 2, $rt_s(532), $rt_s(533));
    var$1 = cgtt_Font$DistanceFieldType__init_($rt_s(534), 3, $rt_s(529), $rt_s(535));
    cgtt_Font$DistanceFieldType_SDF_OUTLINE = var$1;
    var$2 = $rt_createArray(cgtt_Font$DistanceFieldType, 4);
    var$3 = var$2.data;
    var$3[0] = cgtt_Font$DistanceFieldType_STANDARD;
    var$3[1] = cgtt_Font$DistanceFieldType_SDF;
    var$3[2] = cgtt_Font$DistanceFieldType_MSDF;
    var$3[3] = var$1;
    cgtt_Font$DistanceFieldType_$VALUES = var$2;
    cgtt_Font$DistanceFieldType_ALL = cgtt_Font$DistanceFieldType_values();
},
cgtt_Parser = $rt_classWithoutFields(),
cgtt_Parser_PATTERN_MARKUP_STRIP = null,
cgtt_Parser_MATCHER_MARKUP_STRIP = null,
cgtt_Parser_RESET_TAG = null,
cgtt_Parser_UNDO_TAG = null,
cgtt_Parser_COLOR_MARKUP_TO_TAG = null,
cgtt_Parser_MARKUP_TO_TAG = null,
cgtt_Parser_PATTERN_COLOR_HEX_NO_HASH = null,
cgtt_Parser_MATCHER_COLOR_HEX_NO_HASH = null,
cgtt_Parser_BRACKET_MINUS_TO_TAG = null,
cgtt_Parser_BOOLEAN_TRUE = null,
cgtt_Parser_PATTERN_TOKEN_STRIP = null,
cgtt_Parser_MATCHER_TOKEN_STRIP = null,
cgtt_Parser_MATCHER_TOKEN_STRIP_2 = null,
cgtt_Parser_RESET_REPLACEMENT = null,
cgtt_Parser_$callClinit = () => {
    cgtt_Parser_$callClinit = $rt_eraseClinit(cgtt_Parser);
    cgtt_Parser__clinit_();
},
cgtt_Parser_handleBracketMinusMarkup = $text => {
    cgtt_Parser_$callClinit();
    if (!jl_String_contains($text, $rt_s(536)))
        return $text;
    return r_Replacer_replace(cgtt_Parser_BRACKET_MINUS_TO_TAG, $text);
},
cgtt_Parser_preprocess = $text => {
    cgtt_Parser_$callClinit();
    $text = r_Replacer_replace(cgtt_Parser_RESET_TAG, $text);
    $text = r_Replacer_replace(cgtt_Parser_UNDO_TAG, $text);
    $text = r_Replacer_replace(cgtt_Parser_COLOR_MARKUP_TO_TAG, $text);
    return r_Replacer_replace(cgtt_Parser_MARKUP_TO_TAG, $text);
},
cgtt_Parser_parseReplacements = $label => {
    let $m, $text, var$4, var$5, $internalToken, $matcherIndexOffset, var$8, $param, $replacement;
    cgtt_Parser_$callClinit();
    $m = $label.$layout;
    $text = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($text);
    var$4 = 0;
    var$5 = $m.$lines0.$size0;
    while (var$4 < var$5) {
        $internalToken = cbgu_Array_get($m.$lines0, var$4);
        $matcherIndexOffset = 0;
        var$8 = $internalToken.$glyphs.$size1;
        while ($matcherIndexOffset < var$8) {
            jl_AbstractStringBuilder_append0($text, Long_lo((cbgu_LongArray_get($internalToken.$glyphs, $matcherIndexOffset))) & 65535);
            $matcherIndexOffset = $matcherIndexOffset + 1 | 0;
        }
        var$4 = var$4 + 1 | 0;
    }
    $m = $label.$font0;
    if (!(!$m.$omitCurlyBraces && !$m.$enableSquareBrackets)) {
        r_Matcher_setTarget(cgtt_Parser_MATCHER_TOKEN_STRIP, $text);
        $m = cgtt_Parser_MATCHER_TOKEN_STRIP;
        $matcherIndexOffset = 0;
        a: while (true) {
            r_Matcher_setTarget($m, $text);
            r_Matcher_setPosition($m, $matcherIndexOffset);
            if (!r_Matcher_find($m))
                break;
            $internalToken = cgtt_InternalToken_fromName(r_Matcher_group($m, 1));
            $param = r_Matcher_group($m, 2);
            if ($internalToken === null) {
                $matcherIndexOffset = $matcherIndexOffset + 1 | 0;
                continue;
            }
            b: {
                cgtt_Parser$1_$callClinit();
                switch (cgtt_Parser$1_$SwitchMap$com$github$tommyettinger$textra$InternalToken.data[$internalToken.$ordinal0]) {
                    case 1:
                        c: {
                            if ($param !== null && $param.$nativeString.length >= 3) {
                                cgttu_Palette_$callClinit();
                                if (!cbgu_ObjectIntMap_containsKey(cgttu_Palette_NAMED, $param) && r_Matcher_matches(cgtt_Parser_MATCHER_COLOR_HEX_NO_HASH, $param)) {
                                    $text = new jl_StringBuilder;
                                    jl_AbstractStringBuilder__init_($text);
                                    jl_AbstractStringBuilder_append($text, $rt_s(537));
                                    jl_AbstractStringBuilder_append($text, $param);
                                    jl_AbstractStringBuilder_append($text, $rt_s(538));
                                    $replacement = jl_AbstractStringBuilder_toString($text);
                                    break c;
                                }
                            }
                            $text = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($text);
                            jl_AbstractStringBuilder_append($text, $rt_s(509));
                            jl_AbstractStringBuilder_append($text, $param);
                            jl_AbstractStringBuilder_append($text, $rt_s(538));
                            $replacement = jl_AbstractStringBuilder_toString($text);
                        }
                        break b;
                    case 2:
                    case 3:
                        $replacement = cgtt_Parser_stringToStyleMarkup($param);
                        break b;
                    case 4:
                        $text = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($text);
                        jl_AbstractStringBuilder_append($text, $rt_s(539));
                        jl_AbstractStringBuilder_append($text, $param);
                        jl_AbstractStringBuilder_append0($text, 93);
                        $replacement = jl_AbstractStringBuilder_toString($text);
                        break b;
                    case 5:
                    case 6:
                        $param = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($param);
                        jl_AbstractStringBuilder_append($param, $rt_s(537));
                        $text = $label.$clearColor;
                        $replacement = jl_Integer_toHexString((255.0 * $text.$r | 0) << 24 | (255.0 * $text.$g | 0) << 16 | (255.0 * $text.$b | 0) << 8 | 255.0 * $text.$a | 0);
                        while ($replacement.$nativeString.length < 8) {
                            $text = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($text);
                            jl_AbstractStringBuilder_append($text, $rt_s(32));
                            jl_AbstractStringBuilder_append($text, $replacement);
                            $replacement = jl_AbstractStringBuilder_toString($text);
                        }
                        jl_AbstractStringBuilder_append($param, $replacement);
                        jl_AbstractStringBuilder_append0($param, 93);
                        $replacement = jl_AbstractStringBuilder_toString($param);
                        break b;
                    case 7:
                        $replacement = $rt_s(540);
                        break b;
                    case 8:
                        $replacement = $rt_s(541);
                        break b;
                    case 9:
                        $replacement = null;
                        $text = $label.$listener;
                        if ($text !== null)
                            $replacement = $text.$replaceVariable($param);
                        if ($replacement === null)
                            $replacement = cbgu_ObjectMap_get($label.$variables, jl_String_toUpperCase($param));
                        if ($replacement === null) {
                            cgtt_TypingConfig_$callClinit();
                            $replacement = cbgu_ObjectMap_get(cgtt_TypingConfig_GLOBAL_VARS, jl_String_toUpperCase($param));
                        }
                        if ($replacement !== null)
                            break b;
                        $replacement = jl_String_toUpperCase($param);
                        break b;
                    case 10:
                        $replacement = cgtt_Parser_processIfToken($label, $param);
                        if ($replacement !== null)
                            break b;
                        $replacement = jl_String_toUpperCase($param);
                        break b;
                    case 11:
                        $text = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_($text);
                        jl_AbstractStringBuilder_append($text, cgtt_Parser_RESET_REPLACEMENT);
                        jl_AbstractStringBuilder_append($text, $label.$defaultToken);
                        $replacement = jl_AbstractStringBuilder_toString($text);
                        break b;
                    case 12:
                        $replacement = $rt_s(25);
                        break b;
                    default:
                }
                $matcherIndexOffset = $matcherIndexOffset + 1 | 0;
                continue a;
            }
            r_Matcher_setPosition($m, r_Matcher_start($m));
            $text = r_Matcher_replaceFirst($m, $replacement);
        }
    }
    cgtt_TypingLabel_setIntermediateText($label, $text, 0, 0);
},
cgtt_Parser_processIfToken = ($label, $paramsString) => {
    let $params, var$4, $variable, $variableValue, $defaultValue, $i, $value, $subParams, $key, $isKeyValid;
    cgtt_Parser_$callClinit();
    $params = ($paramsString !== null ? jl_String_split($paramsString, $rt_s(542)) : $rt_createArray(jl_String, 0)).data;
    var$4 = $params.length;
    $variable = var$4 <= 0 ? null : $params[0];
    if (var$4 > 1 && $variable !== null) {
        $variableValue = null;
        $paramsString = $label.$listener;
        if ($paramsString !== null)
            $variableValue = $paramsString.$replaceVariable($variable);
        if ($variableValue === null)
            $variableValue = cbgu_ObjectMap_get($label.$variables, jl_String_toUpperCase($variable));
        if ($variableValue === null) {
            cgtt_TypingConfig_$callClinit();
            $variableValue = cbgu_ObjectMap_get(cgtt_TypingConfig_GLOBAL_VARS, jl_String_toUpperCase($variable));
        }
        if ($variableValue === null)
            $variableValue = $rt_s(24);
        $defaultValue = null;
        $i = 1;
        a: {
            while (true) {
                if ($i >= var$4) {
                    $value = $defaultValue;
                    break a;
                }
                $paramsString = $params[$i];
                $subParams = (jur_Pattern_split(jur_Pattern_compile($rt_s(543)), $paramsString, 2)).data;
                $key = $subParams[0];
                $isKeyValid = $subParams.length;
                $value = $subParams[$isKeyValid - 1 | 0];
                if (!($isKeyValid > 1 && !jl_String_isEmpty($key) ? 1 : 0))
                    break a;
                if (jl_String_equalsIgnoreCase($variableValue, $key))
                    break;
                $i = $i + 1 | 0;
            }
            return $value;
        }
        if ($value === null)
            return $variable;
        return $value;
    }
    return null;
},
cgtt_Parser_parseRegularTokens = $label => {
    let $m, $text2, $text, $m2, $matcherIndexOffset, $tokenName, $tokenCategory, $tmpToken, $paramsString, $params, var$12, $firstParam, $index, $floatValue, $stringValue, $effect, $minModifier, $maxModifier, $modifier, $eb, $entry;
    cgtt_Parser_$callClinit();
    r_Matcher_setTarget(cgtt_Parser_MATCHER_MARKUP_STRIP, $label.$intermediateText);
    $m = cgtt_Parser_MATCHER_MARKUP_STRIP;
    $text2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($text2, $m.$data2.data.length);
    $text2 = r_Replacer_wrap($text2);
    r_Replacer_replace0($m, r_PerlSubstitution__init_($rt_s(24)), $text2);
    $text = r_Replacer$StringBuilderBuffer_toString($text2);
    $text2 = $label.$intermediateText;
    $m = $label.$font0;
    if (!(!$m.$omitCurlyBraces && !$m.$enableSquareBrackets)) {
        r_Matcher_setTarget(cgtt_Parser_MATCHER_TOKEN_STRIP, $text);
        r_Matcher_setTarget(cgtt_Parser_MATCHER_TOKEN_STRIP_2, $text2);
        $m = cgtt_Parser_MATCHER_TOKEN_STRIP;
        $m2 = cgtt_Parser_MATCHER_TOKEN_STRIP_2;
        $matcherIndexOffset = 0;
        while (true) {
            r_Matcher_setTarget($m, $text);
            r_Matcher_setTarget($m2, $text2);
            r_Matcher_setPosition($m2, 0);
            r_Matcher_setPosition($m, $matcherIndexOffset);
            if (!r_Matcher_find($m))
                break;
            r_Matcher_find($m2);
            $tokenName = jl_String_toUpperCase(r_Matcher_group($m, 1));
            $tokenCategory = null;
            $tmpToken = cgtt_InternalToken_fromName($tokenName);
            if ($tmpToken !== null)
                $tokenCategory = $tmpToken.$category2;
            else {
                cgtt_TypingConfig_$callClinit();
                if (cbgu_ObjectMap_containsKey(cgtt_TypingConfig_EFFECT_START_TOKENS, $tokenName))
                    $tokenCategory = cgtt_TokenCategory_EFFECT_START;
                else if (cbgu_ObjectMap_containsKey(cgtt_TypingConfig_EFFECT_END_TOKENS, $tokenName))
                    $tokenCategory = cgtt_TokenCategory_EFFECT_END;
            }
            $paramsString = ($m.$memregs.data.length - 1 | 0) != 2 ? null : r_Matcher_group($m, 2);
            $params = $paramsString !== null ? jl_String_split($paramsString, $rt_s(542)) : $rt_createArray(jl_String, 0);
            var$12 = $params.data;
            $firstParam = var$12.length <= 0 ? null : var$12[0];
            $tmpToken = r_Matcher_bounds($m, 0);
            $index = $tmpToken === null ? (-1) : $tmpToken.$in0 - $m.$offset | 0;
            if ($tokenCategory === null) {
                $matcherIndexOffset = $matcherIndexOffset + 1 | 0;
                continue;
            }
            a: {
                $floatValue = 0.0;
                $stringValue = null;
                $effect = null;
                cgtt_Parser$1_$callClinit();
                switch (cgtt_Parser$1_$SwitchMap$com$github$tommyettinger$textra$TokenCategory.data[$tokenCategory.$ordinal0]) {
                    case 1:
                        cgtt_TypingConfig_$callClinit();
                        $floatValue = cgtt_Parser_stringToFloat($firstParam, cgtt_TypingConfig_DEFAULT_WAIT_VALUE);
                        break a;
                    case 2:
                        $stringValue = $paramsString;
                        break a;
                    case 3:
                        b: {
                            $matcherIndexOffset = (-1);
                            switch (jl_String_hashCode($tokenName)) {
                                case -1986416409:
                                    if (!jl_String_equals($tokenName, $rt_s(507)))
                                        break b;
                                    $matcherIndexOffset = 3;
                                    break b;
                                case -1848073207:
                                    if (!jl_String_equals($tokenName, $rt_s(544)))
                                        break b;
                                    $matcherIndexOffset = 6;
                                    break b;
                                case -1846120850:
                                    if (!jl_String_equals($tokenName, $rt_s(545)))
                                        break b;
                                    $matcherIndexOffset = 1;
                                    break b;
                                case 2150492:
                                    if (!jl_String_equals($tokenName, $rt_s(546)))
                                        break b;
                                    $matcherIndexOffset = 4;
                                    break b;
                                case 2548225:
                                    if (!jl_String_equals($tokenName, $rt_s(547)))
                                        break b;
                                    $matcherIndexOffset = 2;
                                    break b;
                                case 79104039:
                                    if (!jl_String_equals($tokenName, $rt_s(548)))
                                        break b;
                                    $matcherIndexOffset = 0;
                                    break b;
                                case 2066625033:
                                    if (!jl_String_equals($tokenName, $rt_s(549)))
                                        break b;
                                    $matcherIndexOffset = 5;
                                    break b;
                                default:
                            }
                        }
                        c: {
                            switch ($matcherIndexOffset) {
                                case 0:
                                    cgtt_TypingConfig_$callClinit();
                                    $minModifier = cgtt_TypingConfig_MIN_SPEED_MODIFIER;
                                    $maxModifier = cgtt_TypingConfig_MAX_SPEED_MODIFIER;
                                    $modifier = cbgm_MathUtils_clamp(cgtt_Parser_stringToFloat($firstParam, 1.0), $minModifier, $maxModifier);
                                    $floatValue = cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR / $modifier;
                                    break c;
                                case 1:
                                    cgtt_TypingConfig_$callClinit();
                                    $floatValue = cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR * 2.0;
                                    break c;
                                case 2:
                                    cgtt_TypingConfig_$callClinit();
                                    $floatValue = cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR * 1.5;
                                    break c;
                                case 3:
                                    cgtt_TypingConfig_$callClinit();
                                    $floatValue = cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR;
                                    break c;
                                case 4:
                                    cgtt_TypingConfig_$callClinit();
                                    $floatValue = cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR * 0.5;
                                    break c;
                                case 5:
                                    cgtt_TypingConfig_$callClinit();
                                    $floatValue = cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR * 0.25;
                                    break c;
                                case 6:
                                    cgtt_TypingConfig_$callClinit();
                                    $minModifier = cgtt_TypingConfig_MIN_SPEED_MODIFIER;
                                    $maxModifier = cgtt_TypingConfig_MAX_SPEED_MODIFIER;
                                    $modifier = cbgm_MathUtils_clamp(cgtt_Parser_stringToFloat($firstParam, 1.0), $minModifier, $maxModifier);
                                    $floatValue =  -cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR / $modifier;
                                    break c;
                                default:
                            }
                        }
                        break a;
                    case 4:
                        cgtt_TypingConfig_$callClinit();
                        $text2 = cgtt_TypingConfig_EFFECT_START_TOKENS;
                        $tmpToken = jl_String_toUpperCase($tokenName);
                        $eb = cbgu_ObjectMap_get($text2, $tmpToken);
                        if ($eb === null)
                            break a;
                        $text2 = $eb;
                        $tmpToken = $text2.$_012;
                        $text2 = $text2.$_15;
                        $effect = $tmpToken.$produce($label, $params);
                        $effect.$name2 = $text2;
                        break a;
                    case 5:
                        break;
                    default:
                }
            }
            $entry = new cgtt_TokenEntry;
            $index = $index + 0 | 0;
            $text2 = r_Matcher_bounds($m, 0);
            $matcherIndexOffset = $text2 === null ? (-1) : $text2.$out1 - $m.$offset | 0;
            $entry.$token = $tokenName;
            $entry.$category3 = $tokenCategory;
            $entry.$index5 = $index;
            $entry.$endIndex = $matcherIndexOffset;
            $entry.$floatValue = $floatValue;
            $entry.$stringValue1 = $stringValue;
            $entry.$effect = $effect;
            ju_ArrayList_add($label.$tokenEntries, $entry);
            $matcherIndexOffset = r_Matcher_end($m);
            r_Matcher_setPosition($m2, 0);
            $text2 = r_Matcher_replaceFirst($m2, $rt_s(24));
        }
    }
    cgtt_TypingLabel_setIntermediateText($label, $text2, 0, 0);
},
cgtt_Parser_stringToFloat = ($str, $defaultValue) => {
    let var$3, $$je;
    cgtt_Parser_$callClinit();
    if ($str !== null)
        a: {
            try {
                var$3 = jl_Float_parseFloat(jl_String_replaceAll($str, $rt_s(550), $rt_s(24)));
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    break a;
                } else {
                    throw $$e;
                }
            }
            return var$3;
        }
    return $defaultValue;
},
cgtt_Parser_stringToColor = ($label, $str) => {
    let $lookup, $namedColor, $rgb, var$6;
    cgtt_Parser_$callClinit();
    if ($str !== null) {
        $lookup = $label.$font0.$colorLookup;
        if ($lookup !== null) {
            $namedColor = $str.$nativeString.length;
            $namedColor = cgtt_ColorLookup$_clinit_$lambda$_2_1_getRgba($lookup, $str, 0, $namedColor);
            if ($namedColor != 256)
                return $namedColor;
        }
        if ($str.$nativeString.length >= 3) {
            if (!jl_String_startsWith($str, $rt_s(551))) {
                if ($str.$nativeString.length >= 8)
                    return cgttu_StringUtils_intFromHex($str, 0, 8);
                if ($str.$nativeString.length >= 6)
                    return cgttu_StringUtils_intFromHex($str, 0, 6) << 8 | 255;
                $rgb = cgttu_StringUtils_intFromHex($str, 0, 3);
                $namedColor = $rgb << 20 & (-268435456);
                var$6 = $rgb << 16;
                $namedColor = $namedColor | var$6 & 251658240 | var$6 & 15728640;
                var$6 = $rgb << 12;
                return $namedColor | var$6 & 983040 | var$6 & 61440 | $rgb << 8 & 3840 | 255;
            }
            if ($str.$nativeString.length >= 9)
                return cgttu_StringUtils_intFromHex($str, 1, 9);
            if ($str.$nativeString.length >= 7)
                return cgttu_StringUtils_intFromHex($str, 1, 7) << 8 | 255;
            if ($str.$nativeString.length >= 4) {
                $rgb = cgttu_StringUtils_intFromHex($str, 1, 4);
                $namedColor = $rgb << 20 & (-268435456);
                var$6 = $rgb << 16;
                $namedColor = $namedColor | var$6 & 251658240 | var$6 & 15728640;
                var$6 = $rgb << 12;
                return $namedColor | var$6 & 983040 | var$6 & 61440 | $rgb << 8 & 3840 | 255;
            }
        }
    }
    return 256;
},
cgtt_Parser_stringToStyleMarkup = $str => {
    cgtt_Parser_$callClinit();
    a: {
        if ($str !== null) {
            if (!jl_String_isEmpty($str) && !jl_String_equalsIgnoreCase($str, $rt_s(552))) {
                if (jl_String_equals($str, $rt_s(390)))
                    return $rt_s(508);
                if (!jl_String_equals($str, $rt_s(553)) && !jl_String_equalsIgnoreCase($str, $rt_s(554)) && !jl_String_equalsIgnoreCase($str, $rt_s(555)) && !jl_String_equalsIgnoreCase($str, $rt_s(556))) {
                    if (!jl_String_equals($str, $rt_s(94)) && !jl_String_equalsIgnoreCase($str, $rt_s(557)) && !jl_String_equalsIgnoreCase($str, $rt_s(558)) && !jl_String_equalsIgnoreCase($str, $rt_s(559))) {
                        if (!jl_String_equals($str, $rt_s(560)) && !jl_String_equalsIgnoreCase($str, $rt_s(561)) && !jl_String_equalsIgnoreCase($str, $rt_s(562)) && !jl_String_equalsIgnoreCase($str, $rt_s(563))) {
                            if (!jl_String_equals($str, $rt_s(564)) && !jl_String_equalsIgnoreCase($str, $rt_s(565)) && !jl_String_equalsIgnoreCase($str, $rt_s(566))) {
                                if (!jl_String_equals($str, $rt_s(148)) && !jl_String_equalsIgnoreCase($str, $rt_s(567)) && !jl_String_equalsIgnoreCase($str, $rt_s(568))) {
                                    if (!jl_String_equals($str, $rt_s(543)) && !jl_String_equalsIgnoreCase($str, $rt_s(569)) && !jl_String_equalsIgnoreCase($str, $rt_s(570))) {
                                        if (!jl_String_equals($str, $rt_s(407)) && !jl_String_equalsIgnoreCase($str, $rt_s(571)) && !jl_String_equalsIgnoreCase($str, $rt_s(572))) {
                                            if (!jl_String_equals($str, $rt_s(573)) && !jl_String_equalsIgnoreCase($str, $rt_s(574)) && !jl_String_equalsIgnoreCase($str, $rt_s(575))) {
                                                if (!jl_String_equals($str, $rt_s(466)) && !jl_String_equalsIgnoreCase($str, $rt_s(576)) && !jl_String_equalsIgnoreCase($str, $rt_s(577))) {
                                                    if (!jl_String_equals($str, $rt_s(542)) && !jl_String_equalsIgnoreCase($str, $rt_s(578)) && !jl_String_equalsIgnoreCase($str, $rt_s(579))) {
                                                        if (!jl_String_equals($str, $rt_s(580)) && !jl_String_equalsIgnoreCase($str, $rt_s(581)) && !jl_String_equalsIgnoreCase($str, $rt_s(582))) {
                                                            if (!jl_String_equalsIgnoreCase($str, $rt_s(583)) && !jl_String_equalsIgnoreCase($str, $rt_s(584)) && !jl_String_equalsIgnoreCase($str, $rt_s(585))) {
                                                                if (!jl_String_equalsIgnoreCase($str, $rt_s(586)) && !jl_String_equalsIgnoreCase($str, $rt_s(587))) {
                                                                    if (!jl_String_equalsIgnoreCase($str, $rt_s(588)) && !jl_String_equalsIgnoreCase($str, $rt_s(589))) {
                                                                        if (!jl_String_equalsIgnoreCase($str, $rt_s(590)) && !jl_String_equalsIgnoreCase($str, $rt_s(591)) && !jl_String_equalsIgnoreCase($str, $rt_s(592))) {
                                                                            if (!jl_String_equalsIgnoreCase($str, $rt_s(593)) && !jl_String_equalsIgnoreCase($str, $rt_s(594)) && !jl_String_equalsIgnoreCase($str, $rt_s(595))) {
                                                                                if (!jl_String_equalsIgnoreCase($str, $rt_s(596)) && !jl_String_equalsIgnoreCase($str, $rt_s(597)) && !jl_String_equalsIgnoreCase($str, $rt_s(598))) {
                                                                                    if (!jl_String_equalsIgnoreCase($str, $rt_s(599)) && !jl_String_equalsIgnoreCase($str, $rt_s(600)) && !jl_String_equalsIgnoreCase($str, $rt_s(601))) {
                                                                                        if (!jl_String_equalsIgnoreCase($str, $rt_s(602)) && !jl_String_equalsIgnoreCase($str, $rt_s(603)) && !jl_String_equalsIgnoreCase($str, $rt_s(604)) && !jl_String_equalsIgnoreCase($str, $rt_s(605))) {
                                                                                            if (!jl_String_equalsIgnoreCase($str, $rt_s(606)) && !jl_String_equalsIgnoreCase($str, $rt_s(607))) {
                                                                                                if (!jl_String_equals($str, $rt_s(608)) && !jl_String_equalsIgnoreCase($str, $rt_s(609)) && !jl_String_equalsIgnoreCase($str, $rt_s(610)) && !jl_String_equalsIgnoreCase($str, $rt_s(611)) && !jl_String_equalsIgnoreCase($str, $rt_s(612))) {
                                                                                                    if (jl_String_startsWith($str, $rt_s(580)))
                                                                                                        return jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(539)), jl_String_substring0($str, 1)), $rt_s(538)));
                                                                                                    if (jl_String_endsWith($str, $rt_s(608)))
                                                                                                        return jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(613)), jl_String_substring($str, 0, jl_String_length($str) - 1 | 0)), $rt_s(538)));
                                                                                                    if (jl_String_startsWith($str, $rt_s(608)))
                                                                                                        return jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(613)), jl_String_substring0($str, 1)), $rt_s(538)));
                                                                                                    if (jl_String_startsWith($str, $rt_s(614)))
                                                                                                        return jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(509)), $str), $rt_s(538)));
                                                                                                    if (jl_String_startsWith($str, $rt_s(390)))
                                                                                                        return jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(509)), $str), $rt_s(538)));
                                                                                                    cgttu_Palette_$callClinit();
                                                                                                    if (cbgu_ObjectIntMap_containsKey(cgttu_Palette_NAMED, $str))
                                                                                                        return jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(509)), $str), $rt_s(538)));
                                                                                                    if (jl_String_length($str) < 3)
                                                                                                        break a;
                                                                                                    if (!r_Matcher_matches(cgtt_Parser_MATCHER_COLOR_HEX_NO_HASH, $str))
                                                                                                        break a;
                                                                                                    else
                                                                                                        return jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(537)), $str), $rt_s(538)));
                                                                                                }
                                                                                                return $rt_s(540);
                                                                                            }
                                                                                            return $rt_s(615);
                                                                                        }
                                                                                        return $rt_s(616);
                                                                                    }
                                                                                    return $rt_s(617);
                                                                                }
                                                                                return $rt_s(618);
                                                                            }
                                                                            return $rt_s(619);
                                                                        }
                                                                        return $rt_s(620);
                                                                    }
                                                                    return $rt_s(621);
                                                                }
                                                                return $rt_s(622);
                                                            }
                                                            return $rt_s(623);
                                                        }
                                                        return $rt_s(541);
                                                    }
                                                    return $rt_s(624);
                                                }
                                                return $rt_s(625);
                                            }
                                            return $rt_s(626);
                                        }
                                        return $rt_s(627);
                                    }
                                    return $rt_s(628);
                                }
                                return $rt_s(629);
                            }
                            return $rt_s(630);
                        }
                        return $rt_s(631);
                    }
                    return $rt_s(632);
                }
                return $rt_s(633);
            }
            return $rt_s(25);
        }
    }
    return $rt_s(24);
},
cgtt_Parser__clinit_ = () => {
    let var$1;
    var$1 = r_Pattern_compile($rt_s(634));
    cgtt_Parser_PATTERN_MARKUP_STRIP = var$1;
    cgtt_Parser_MATCHER_MARKUP_STRIP = r_Pattern_matcher(var$1);
    cgtt_Parser_RESET_TAG = r_Replacer__init_(r_Pattern_compile($rt_s(635)), $rt_s(636));
    cgtt_Parser_UNDO_TAG = r_Replacer__init_(r_Pattern_compile($rt_s(637)), $rt_s(638));
    cgtt_Parser_COLOR_MARKUP_TO_TAG = r_Replacer__init_(r_Pattern_compile($rt_s(639)), $rt_s(640));
    cgtt_Parser_MARKUP_TO_TAG = r_Replacer__init_(r_Pattern_compile($rt_s(641)), $rt_s(642));
    var$1 = r_Pattern_compile($rt_s(643));
    cgtt_Parser_PATTERN_COLOR_HEX_NO_HASH = var$1;
    cgtt_Parser_MATCHER_COLOR_HEX_NO_HASH = r_Pattern_matcher(var$1);
    cgtt_Parser_BRACKET_MINUS_TO_TAG = r_Replacer__init_(r_Pattern_compile($rt_s(644)), $rt_s(645));
    cgtt_Parser_BOOLEAN_TRUE = cgttu_CaseInsensitiveIntMap__init_($rt_wrapArray(jl_String, [$rt_s(41), $rt_s(646), $rt_s(647), $rt_s(648), $rt_s(649), $rt_s(437)]), $rt_createIntArray(6));
},
cgtt_TypingConfig = $rt_classWithoutFields(),
cgtt_TypingConfig_DEFAULT_WAIT_VALUE = 0.0,
cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR = 0.0,
cgtt_TypingConfig_MIN_SPEED_MODIFIER = 0.0,
cgtt_TypingConfig_MAX_SPEED_MODIFIER = 0.0,
cgtt_TypingConfig_CHAR_LIMIT_PER_FRAME = 0,
cgtt_TypingConfig_DEFAULT_CLEAR_COLOR = null,
cgtt_TypingConfig_INTERVAL_MULTIPLIERS_BY_CHAR = null,
cgtt_TypingConfig_GLOBAL_VARS = null,
cgtt_TypingConfig_EFFECT_START_TOKENS = null,
cgtt_TypingConfig_EFFECT_END_TOKENS = null,
cgtt_TypingConfig_dirtyEffectMaps = 0,
cgtt_TypingConfig_$callClinit = () => {
    cgtt_TypingConfig_$callClinit = $rt_eraseClinit(cgtt_TypingConfig);
    cgtt_TypingConfig__clinit_();
},
cgtt_TypingConfig_registerEffect = ($startTokenName, $builder) => {
    let $name, $b;
    cgtt_TypingConfig_$callClinit();
    $name = jl_String_toUpperCase($startTokenName);
    $b = new cgtt_TypingConfig$registerEffect$lambda$_2_0;
    $b.$_012 = $builder;
    $b.$_15 = $name;
    cbgu_OrderedMap_put(cgtt_TypingConfig_EFFECT_START_TOKENS, $name, $b);
    $startTokenName = cgtt_TypingConfig_EFFECT_END_TOKENS;
    $builder = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($builder);
    jl_AbstractStringBuilder_append($builder, $rt_s(650));
    jl_AbstractStringBuilder_append($builder, $name);
    cbgu_OrderedMap_put($startTokenName, jl_AbstractStringBuilder_toString($builder), $b);
    cgtt_TypingConfig_dirtyEffectMaps = 1;
},
cgtt_TypingConfig__clinit_ = () => {
    cgtt_TypingConfig_DEFAULT_WAIT_VALUE = 0.25;
    cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR = 0.05000000074505806;
    cgtt_TypingConfig_MIN_SPEED_MODIFIER = 0.0010000000474974513;
    cgtt_TypingConfig_MAX_SPEED_MODIFIER = 100.0;
    cgtt_TypingConfig_CHAR_LIMIT_PER_FRAME = (-1);
    cgtt_TypingConfig_DEFAULT_CLEAR_COLOR = cbgg_Color__init_3(cbgg_Color_WHITE);
    cgtt_TypingConfig_INTERVAL_MULTIPLIERS_BY_CHAR = cbgu_IntFloatMap__init_();
    cgtt_TypingConfig_GLOBAL_VARS = cbgu_ObjectMap__init_();
    cgtt_TypingConfig_EFFECT_START_TOKENS = cbgu_OrderedMap__init_();
    cgtt_TypingConfig_EFFECT_END_TOKENS = cbgu_OrderedMap__init_();
    cgtt_TypingConfig_dirtyEffectMaps = 1;
    cbgu_IntFloatMap_put(cgtt_TypingConfig_INTERVAL_MULTIPLIERS_BY_CHAR, 32, 0.0);
    cbgu_IntFloatMap_put(cgtt_TypingConfig_INTERVAL_MULTIPLIERS_BY_CHAR, 58, 1.5);
    cbgu_IntFloatMap_put(cgtt_TypingConfig_INTERVAL_MULTIPLIERS_BY_CHAR, 44, 2.5);
    cbgu_IntFloatMap_put(cgtt_TypingConfig_INTERVAL_MULTIPLIERS_BY_CHAR, 46, 2.5);
    cbgu_IntFloatMap_put(cgtt_TypingConfig_INTERVAL_MULTIPLIERS_BY_CHAR, 33, 5.0);
    cbgu_IntFloatMap_put(cgtt_TypingConfig_INTERVAL_MULTIPLIERS_BY_CHAR, 63, 5.0);
    cbgu_IntFloatMap_put(cgtt_TypingConfig_INTERVAL_MULTIPLIERS_BY_CHAR, 10, 2.5);
    cgtt_TypingConfig_registerEffect($rt_s(651), new cgtt_TypingConfig$_clinit_$lambda$_5_0);
    cgtt_TypingConfig_registerEffect($rt_s(652), new cgtt_TypingConfig$_clinit_$lambda$_5_1);
    cgtt_TypingConfig_registerEffect($rt_s(653), new cgtt_TypingConfig$_clinit_$lambda$_5_2);
    cgtt_TypingConfig_registerEffect($rt_s(654), new cgtt_TypingConfig$_clinit_$lambda$_5_3);
    cgtt_TypingConfig_registerEffect($rt_s(655), new cgtt_TypingConfig$_clinit_$lambda$_5_4);
    cgtt_TypingConfig_registerEffect($rt_s(656), new cgtt_TypingConfig$_clinit_$lambda$_5_5);
    cgtt_TypingConfig_registerEffect($rt_s(657), new cgtt_TypingConfig$_clinit_$lambda$_5_6);
    cgtt_TypingConfig_registerEffect($rt_s(658), new cgtt_TypingConfig$_clinit_$lambda$_5_7);
    cgtt_TypingConfig_registerEffect($rt_s(659), new cgtt_TypingConfig$_clinit_$lambda$_5_8);
    cgtt_TypingConfig_registerEffect($rt_s(660), new cgtt_TypingConfig$_clinit_$lambda$_5_9);
    cgtt_TypingConfig_registerEffect($rt_s(661), new cgtt_TypingConfig$_clinit_$lambda$_5_10);
    cgtt_TypingConfig_registerEffect($rt_s(662), new cgtt_TypingConfig$_clinit_$lambda$_5_11);
    cgtt_TypingConfig_registerEffect($rt_s(663), new cgtt_TypingConfig$_clinit_$lambda$_5_12);
    cgtt_TypingConfig_registerEffect($rt_s(664), new cgtt_TypingConfig$_clinit_$lambda$_5_13);
    cgtt_TypingConfig_registerEffect($rt_s(665), new cgtt_TypingConfig$_clinit_$lambda$_5_14);
    cgtt_TypingConfig_registerEffect($rt_s(666), new cgtt_TypingConfig$_clinit_$lambda$_5_15);
    cgtt_TypingConfig_registerEffect($rt_s(667), new cgtt_TypingConfig$_clinit_$lambda$_5_16);
    cgtt_TypingConfig_registerEffect($rt_s(668), new cgtt_TypingConfig$_clinit_$lambda$_5_17);
    cgtt_TypingConfig_registerEffect($rt_s(669), new cgtt_TypingConfig$_clinit_$lambda$_5_18);
    cgtt_TypingConfig_registerEffect($rt_s(670), new cgtt_TypingConfig$_clinit_$lambda$_5_19);
    cgtt_TypingConfig_registerEffect($rt_s(671), new cgtt_TypingConfig$_clinit_$lambda$_5_20);
    cgtt_TypingConfig_registerEffect($rt_s(672), new cgtt_TypingConfig$_clinit_$lambda$_5_21);
    cgtt_TypingConfig_registerEffect($rt_s(673), new cgtt_TypingConfig$_clinit_$lambda$_5_22);
    cgtt_TypingConfig_registerEffect($rt_s(674), new cgtt_TypingConfig$_clinit_$lambda$_5_23);
    cgtt_TypingConfig_registerEffect($rt_s(675), new cgtt_TypingConfig$_clinit_$lambda$_5_24);
    cgtt_TypingConfig_registerEffect($rt_s(676), new cgtt_TypingConfig$_clinit_$lambda$_5_25);
    cgtt_TypingConfig_registerEffect($rt_s(677), new cgtt_TypingConfig$_clinit_$lambda$_5_26);
    cgtt_TypingConfig_registerEffect($rt_s(678), new cgtt_TypingConfig$_clinit_$lambda$_5_27);
    cgtt_TypingConfig_registerEffect($rt_s(679), new cgtt_TypingConfig$_clinit_$lambda$_5_28);
    cgtt_TypingConfig_registerEffect($rt_s(680), new cgtt_TypingConfig$_clinit_$lambda$_5_29);
    cgtt_TypingConfig_registerEffect($rt_s(681), new cgtt_TypingConfig$_clinit_$lambda$_5_30);
    cgtt_TypingConfig_registerEffect($rt_s(682), new cgtt_TypingConfig$_clinit_$lambda$_5_31);
    cgtt_TypingConfig_registerEffect($rt_s(683), new cgtt_TypingConfig$_clinit_$lambda$_5_32);
    cgtt_TypingConfig_registerEffect($rt_s(684), new cgtt_TypingConfig$_clinit_$lambda$_5_33);
    cgtt_TypingConfig_registerEffect($rt_s(685), new cgtt_TypingConfig$_clinit_$lambda$_5_34);
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(686), $rt_s(687));
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(688), $rt_s(689));
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(690), $rt_s(691));
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(692), $rt_s(693));
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(694), $rt_s(695));
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(696), $rt_s(697));
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(698), $rt_s(699));
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(700), $rt_s(701));
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(702), $rt_s(703));
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(704), $rt_s(705));
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(706), $rt_s(707));
    cbgu_ObjectMap_put(cgtt_TypingConfig_GLOBAL_VARS, $rt_s(708), $rt_s(709));
};
function cgtt_Layout() {
    let a = this; jl_Object.call(a);
    a.$font1 = null;
    a.$lines0 = null;
    a.$maxLines = 0;
    a.$atLimit = 0;
    a.$ellipsis = null;
    a.$targetWidth = 0.0;
    a.$baseColor1 = 0.0;
}
let cgtt_Layout__init_0 = $this => {
    let var$1;
    var$1 = cbgu_Array__init_0(1, 8);
    $this.$lines0 = var$1;
    $this.$maxLines = 2147483647;
    $this.$atLimit = 0;
    $this.$ellipsis = null;
    $this.$targetWidth = 0.0;
    $this.$baseColor1 = cbgg_Color_WHITE_FLOAT_BITS;
    cbgu_Array_add(var$1, cgtt_Line__init_());
},
cgtt_Layout__init_ = () => {
    let var_0 = new cgtt_Layout();
    cgtt_Layout__init_0(var_0);
    return var_0;
},
cgtt_Layout_font = ($this, $font) => {
    let var$2;
    var$2 = $this.$font1;
    if (!(var$2 !== null && jl_Object_equals(var$2, $font))) {
        $this.$font1 = $font;
        cbgu_Array_clear($this.$lines0);
        cbgu_Array_add($this.$lines0, cgtt_Line__init_());
    }
    return $this;
},
cgtt_Layout_add = ($this, $glyph) => {
    if (!$this.$atLimit) {
        if (Long_eq(Long_and($glyph, Long_fromInt(65535)), Long_fromInt(10)))
            cgtt_Layout_pushLine($this);
        else
            cbgu_LongArray_add((cbgu_Array_peek($this.$lines0)).$glyphs, $glyph);
    }
    return $this;
},
cgtt_Layout_clear = $this => {
    cbgu_Array_clear($this.$lines0);
    cbgu_Array_add($this.$lines0, cgtt_Line__init_());
    $this.$atLimit = 0;
    return $this;
},
cgtt_Layout_getHeight = $this => {
    let $h, $i, $n;
    $h = 0.0;
    $i = 0;
    $n = $this.$lines0.$size0;
    while ($i < $n) {
        $h = $h + (cbgu_Array_get($this.$lines0, $i)).$height;
        $i = $i + 1 | 0;
    }
    return $h;
},
cgtt_Layout_lines = $this => {
    return $this.$lines0.$size0;
},
cgtt_Layout_getLine = ($this, $i) => {
    let var$2;
    var$2 = $this.$lines0;
    if ($i >= var$2.$size0)
        return null;
    return cbgu_Array_get(var$2, $i);
},
cgtt_Layout_peekLine = $this => {
    return cbgu_Array_peek($this.$lines0);
},
cgtt_Layout_pushLine = $this => {
    let $line;
    if ($this.$lines0.$size0 >= $this.$maxLines) {
        $this.$atLimit = 1;
        return null;
    }
    $line = cgtt_Line__init_();
    cbgu_LongArray_add((cbgu_Array_peek($this.$lines0)).$glyphs, Long_fromInt(10));
    $line.$height = 0.0;
    cbgu_Array_add($this.$lines0, $line);
    return $line;
},
cgtt_Layout_getTargetWidth = $this => {
    return $this.$targetWidth;
},
cgtt_Layout_getBaseColor = $this => {
    return $this.$baseColor1;
},
cgtt_Layout_countGlyphs = $this => {
    let $layoutSize, $i, $n;
    $layoutSize = 0;
    $i = 0;
    $n = $this.$lines0.$size0;
    while ($i < $n) {
        $layoutSize = $layoutSize + (cbgu_Array_get($this.$lines0, $i)).$glyphs.$size1 | 0;
        $i = $i + 1 | 0;
    }
    return $layoutSize;
};
function cbgu_FloatArray() {
    let a = this; jl_Object.call(a);
    a.$items3 = null;
    a.$size4 = 0;
    a.$ordered4 = 0;
}
let cbgu_FloatArray__init_0 = $this => {
    $this.$ordered4 = 1;
    $this.$items3 = $rt_createFloatArray(16);
},
cbgu_FloatArray__init_ = () => {
    let var_0 = new cbgu_FloatArray();
    cbgu_FloatArray__init_0(var_0);
    return var_0;
},
cbgu_FloatArray_get = ($this, $index) => {
    let var$2, var$3;
    if ($index < $this.$size4)
        return $this.$items3.data[$index];
    var$2 = new jl_IndexOutOfBoundsException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(10));
    var$3 = jl_StringBuilder_append1(var$3, $index);
    jl_AbstractStringBuilder_append(var$3, $rt_s(11));
    jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$3, $this.$size4)));
    $rt_throw(var$2);
},
cbgu_FloatArray_set = ($this, $index, $value) => {
    let var$3, var$4;
    if ($index < $this.$size4) {
        $this.$items3.data[$index] = $value;
        return;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(10));
    var$4 = jl_StringBuilder_append1(var$4, $index);
    jl_AbstractStringBuilder_append(var$4, $rt_s(11));
    jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$4, $this.$size4)));
    $rt_throw(var$3);
},
cbgu_FloatArray_incr = ($this, $index, $value) => {
    let var$3, var$4, var$5;
    if ($index < $this.$size4) {
        var$3 = $this.$items3.data;
        var$3[$index] = var$3[$index] + $value;
        return;
    }
    var$4 = new jl_IndexOutOfBoundsException;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append(var$5, $rt_s(10));
    var$5 = jl_StringBuilder_append1(var$5, $index);
    jl_AbstractStringBuilder_append(var$5, $rt_s(11));
    jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$5, $this.$size4)));
    $rt_throw(var$4);
},
cbgu_FloatArray_clear = $this => {
    $this.$size4 = 0;
},
cbgu_FloatArray_setSize = ($this, $newSize) => {
    let var$2, var$3, var$4, var$5;
    if ($newSize < 0) {
        var$2 = new jl_IllegalArgumentException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $rt_s(18));
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$3, $newSize)));
        $rt_throw(var$2);
    }
    if ($newSize > $this.$items3.data.length) {
        var$4 = $rt_createFloatArray(jl_Math_max(8, $newSize));
        var$5 = var$4.data;
        jl_System_fastArraycopy($this.$items3, 0, var$4, 0, jl_Math_min($this.$size4, var$5.length));
        $this.$items3 = var$4;
    }
    $this.$size4 = $newSize;
    return $this.$items3;
},
cbgm_Vector = $rt_classWithoutFields(0);
function cbgm_Vector2() {
    let a = this; jl_Object.call(a);
    a.$x = 0.0;
    a.$y = 0.0;
}
let cbgm_Vector2_X = null,
cbgm_Vector2_Y = null,
cbgm_Vector2_Zero = null,
cbgm_Vector2__init_0 = ($this, $x, $y) => {
    $this.$x = $x;
    $this.$y = $y;
},
cbgm_Vector2__init_ = (var_0, var_1) => {
    let var_2 = new cbgm_Vector2();
    cbgm_Vector2__init_0(var_2, var_0, var_1);
    return var_2;
},
cbgm_Vector2_set = ($this, $x, $y) => {
    $this.$x = $x;
    $this.$y = $y;
    return $this;
},
cbgm_Vector2__clinit_ = () => {
    cbgm_Vector2_X = cbgm_Vector2__init_(1.0, 0.0);
    cbgm_Vector2_Y = cbgm_Vector2__init_(0.0, 1.0);
    cbgm_Vector2_Zero = cbgm_Vector2__init_(0.0, 0.0);
};
function cbgm_Matrix4() {
    jl_Object.call(this);
    this.$val = null;
}
let cbgm_Matrix4_tmp = null,
cbgm_Matrix4_quat = null,
cbgm_Matrix4_quat2 = null,
cbgm_Matrix4_l_vez = null,
cbgm_Matrix4_l_vex = null,
cbgm_Matrix4_l_vey = null,
cbgm_Matrix4_tmpVec = null,
cbgm_Matrix4_tmpMat = null,
cbgm_Matrix4_right = null,
cbgm_Matrix4_tmpForward = null,
cbgm_Matrix4_tmpUp = null,
cbgm_Matrix4_$callClinit = () => {
    cbgm_Matrix4_$callClinit = $rt_eraseClinit(cbgm_Matrix4);
    cbgm_Matrix4__clinit_();
},
cbgm_Matrix4__init_0 = $this => {
    let var$1, var$2;
    cbgm_Matrix4_$callClinit();
    var$1 = $rt_createFloatArray(16);
    var$2 = var$1.data;
    $this.$val = var$1;
    var$2[0] = 1.0;
    var$2[5] = 1.0;
    var$2[10] = 1.0;
    var$2[15] = 1.0;
},
cbgm_Matrix4__init_ = () => {
    let var_0 = new cbgm_Matrix4();
    cbgm_Matrix4__init_0(var_0);
    return var_0;
},
cbgm_Matrix4_set = ($this, $values) => {
    let var$2;
    var$2 = $values.data;
    $values = $this.$val.data;
    $values[0] = var$2[0];
    $values[1] = var$2[1];
    $values[2] = var$2[2];
    $values[3] = var$2[3];
    $values[4] = var$2[4];
    $values[5] = var$2[5];
    $values[6] = var$2[6];
    $values[7] = var$2[7];
    $values[8] = var$2[8];
    $values[9] = var$2[9];
    $values[10] = var$2[10];
    $values[11] = var$2[11];
    $values[12] = var$2[12];
    $values[13] = var$2[13];
    $values[14] = var$2[14];
    $values[15] = var$2[15];
    return $this;
},
cbgm_Matrix4_mul = ($this, $matrix) => {
    let var$2, var$3, var$4, var$5, var$6;
    cbgm_Matrix4_$callClinit();
    var$2 = cbgm_Matrix4_tmp;
    var$3 = var$2.data;
    var$4 = $this.$val.data;
    var$5 = var$4[0];
    var$6 = $matrix.$val.data;
    var$3[0] = var$5 * var$6[0] + var$4[4] * var$6[1] + var$4[8] * var$6[2] + var$4[12] * var$6[3];
    var$3[4] = var$4[0] * var$6[4] + var$4[4] * var$6[5] + var$4[8] * var$6[6] + var$4[12] * var$6[7];
    var$3[8] = var$4[0] * var$6[8] + var$4[4] * var$6[9] + var$4[8] * var$6[10] + var$4[12] * var$6[11];
    var$3[12] = var$4[0] * var$6[12] + var$4[4] * var$6[13] + var$4[8] * var$6[14] + var$4[12] * var$6[15];
    var$3[1] = var$4[1] * var$6[0] + var$4[5] * var$6[1] + var$4[9] * var$6[2] + var$4[13] * var$6[3];
    var$3[5] = var$4[1] * var$6[4] + var$4[5] * var$6[5] + var$4[9] * var$6[6] + var$4[13] * var$6[7];
    var$3[9] = var$4[1] * var$6[8] + var$4[5] * var$6[9] + var$4[9] * var$6[10] + var$4[13] * var$6[11];
    var$3[13] = var$4[1] * var$6[12] + var$4[5] * var$6[13] + var$4[9] * var$6[14] + var$4[13] * var$6[15];
    var$3[2] = var$4[2] * var$6[0] + var$4[6] * var$6[1] + var$4[10] * var$6[2] + var$4[14] * var$6[3];
    var$3[6] = var$4[2] * var$6[4] + var$4[6] * var$6[5] + var$4[10] * var$6[6] + var$4[14] * var$6[7];
    var$3[10] = var$4[2] * var$6[8] + var$4[6] * var$6[9] + var$4[10] * var$6[10] + var$4[14] * var$6[11];
    var$3[14] = var$4[2] * var$6[12] + var$4[6] * var$6[13] + var$4[10] * var$6[14] + var$4[14] * var$6[15];
    var$3[3] = var$4[3] * var$6[0] + var$4[7] * var$6[1] + var$4[11] * var$6[2] + var$4[15] * var$6[3];
    var$3[7] = var$4[3] * var$6[4] + var$4[7] * var$6[5] + var$4[11] * var$6[6] + var$4[15] * var$6[7];
    var$3[11] = var$4[3] * var$6[8] + var$4[7] * var$6[9] + var$4[11] * var$6[10] + var$4[15] * var$6[11];
    var$3[15] = var$4[3] * var$6[12] + var$4[7] * var$6[13] + var$4[11] * var$6[14] + var$4[15] * var$6[15];
    return cbgm_Matrix4_set($this, var$2);
},
cbgm_Matrix4_setToOrtho2D = ($this, $x, $y, $width, $height) => {
    let var$5, var$6, var$7, var$8, var$9;
    var$5 = $x + $width;
    $height = $y + $height;
    var$6 = $this.$val.data;
    var$6[0] = 1.0;
    var$6[4] = 0.0;
    var$6[8] = 0.0;
    var$6[12] = 0.0;
    var$6[1] = 0.0;
    var$6[5] = 1.0;
    var$6[9] = 0.0;
    var$6[13] = 0.0;
    var$6[2] = 0.0;
    var$6[6] = 0.0;
    var$6[10] = 1.0;
    var$6[14] = 0.0;
    var$6[3] = 0.0;
    var$6[7] = 0.0;
    var$6[11] = 0.0;
    var$6[15] = 1.0;
    var$7 = var$5 - $x;
    $width = 2.0 / var$7;
    var$8 = $height - $y;
    var$9 = 2.0 / var$8;
    var$5 =  -(var$5 + $x) / var$7;
    $y =  -($height + $y) / var$8;
    var$6[0] = $width;
    var$6[1] = 0.0;
    var$6[2] = 0.0;
    var$6[3] = 0.0;
    var$6[4] = 0.0;
    var$6[5] = var$9;
    var$6[6] = 0.0;
    var$6[7] = 0.0;
    var$6[8] = 0.0;
    var$6[9] = 0.0;
    var$6[10] = (-2.0);
    var$6[11] = 0.0;
    var$6[12] = var$5;
    var$6[13] = $y;
    var$6[14] = (-1.0);
    var$6[15] = 1.0;
    return $this;
},
cbgm_Matrix4__clinit_ = () => {
    cbgm_Matrix4_tmp = $rt_createFloatArray(16);
    cbgm_Matrix4_quat = cbgm_Quaternion__init_();
    cbgm_Matrix4_quat2 = cbgm_Quaternion__init_();
    cbgm_Matrix4_l_vez = cbgm_Vector3__init_();
    cbgm_Matrix4_l_vex = cbgm_Vector3__init_();
    cbgm_Matrix4_l_vey = cbgm_Vector3__init_();
    cbgm_Matrix4_tmpVec = cbgm_Vector3__init_();
    cbgm_Matrix4_tmpMat = cbgm_Matrix4__init_();
    cbgm_Matrix4_right = cbgm_Vector3__init_();
    cbgm_Matrix4_tmpForward = cbgm_Vector3__init_();
    cbgm_Matrix4_tmpUp = cbgm_Vector3__init_();
},
cbgg_Mesh$VertexDataType = $rt_classWithoutFields(jl_Enum),
cbgg_Mesh$VertexDataType_VertexArray = null,
cbgg_Mesh$VertexDataType_VertexBufferObject = null,
cbgg_Mesh$VertexDataType_VertexBufferObjectSubData = null,
cbgg_Mesh$VertexDataType_VertexBufferObjectWithVAO = null,
cbgg_Mesh$VertexDataType_$VALUES = null,
cbgg_Mesh$VertexDataType_values = () => {
    return cbgg_Mesh$VertexDataType_$VALUES.$clone0();
},
cbgg_Mesh$VertexDataType__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgg_Mesh$VertexDataType;
    jl_Enum__init_(var$1, $rt_s(710), 0);
    cbgg_Mesh$VertexDataType_VertexArray = var$1;
    var$1 = new cbgg_Mesh$VertexDataType;
    jl_Enum__init_(var$1, $rt_s(711), 1);
    cbgg_Mesh$VertexDataType_VertexBufferObject = var$1;
    var$1 = new cbgg_Mesh$VertexDataType;
    jl_Enum__init_(var$1, $rt_s(712), 2);
    cbgg_Mesh$VertexDataType_VertexBufferObjectSubData = var$1;
    var$1 = new cbgg_Mesh$VertexDataType;
    jl_Enum__init_(var$1, $rt_s(713), 3);
    cbgg_Mesh$VertexDataType_VertexBufferObjectWithVAO = var$1;
    var$2 = $rt_createArray(cbgg_Mesh$VertexDataType, 4);
    var$3 = var$2.data;
    var$3[0] = cbgg_Mesh$VertexDataType_VertexArray;
    var$3[1] = cbgg_Mesh$VertexDataType_VertexBufferObject;
    var$3[2] = cbgg_Mesh$VertexDataType_VertexBufferObjectSubData;
    var$3[3] = var$1;
    cbgg_Mesh$VertexDataType_$VALUES = var$2;
};
function cbgg_Mesh() {
    let a = this; jl_Object.call(a);
    a.$vertices1 = null;
    a.$indices = null;
    a.$autoBind = 0;
    a.$isVertexArray = 0;
    a.$instances = null;
    a.$isInstanced = 0;
    a.$tmpV = null;
}
let cbgg_Mesh_meshes = null,
cbgg_Mesh_$callClinit = () => {
    cbgg_Mesh_$callClinit = $rt_eraseClinit(cbgg_Mesh);
    cbgg_Mesh__clinit_();
},
cbgg_Mesh_setIndices = ($this, $indices) => {
    let var$2;
    var$2 = $indices.data;
    $this.$indices.$setIndices0($indices, 0, var$2.length);
    return $this;
},
cbgg_Mesh_getIndexData = $this => {
    return $this.$indices;
},
cbgg_Mesh_addManagedMesh = ($app, $mesh) => {
    let $managedResources;
    cbgg_Mesh_$callClinit();
    $managedResources = ju_HashMap_get(cbgg_Mesh_meshes, $app);
    if ($managedResources === null)
        $managedResources = cbgu_Array__init_();
    cbgu_Array_add($managedResources, $mesh);
    ju_HashMap_put(cbgg_Mesh_meshes, $app, $managedResources);
},
cbgg_Mesh__clinit_ = () => {
    cbgg_Mesh_meshes = ju_HashMap__init_();
},
cbgg_Pixmap$Blending = $rt_classWithoutFields(jl_Enum),
cbgg_Pixmap$Blending_None = null,
cbgg_Pixmap$Blending_SourceOver = null,
cbgg_Pixmap$Blending_$VALUES = null,
cbgg_Pixmap$Blending_values = () => {
    return cbgg_Pixmap$Blending_$VALUES.$clone0();
},
cbgg_Pixmap$Blending__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgg_Pixmap$Blending;
    jl_Enum__init_(var$1, $rt_s(714), 0);
    cbgg_Pixmap$Blending_None = var$1;
    var$1 = new cbgg_Pixmap$Blending;
    jl_Enum__init_(var$1, $rt_s(715), 1);
    cbgg_Pixmap$Blending_SourceOver = var$1;
    var$2 = $rt_createArray(cbgg_Pixmap$Blending, 2);
    var$3 = var$2.data;
    var$3[0] = cbgg_Pixmap$Blending_None;
    var$3[1] = var$1;
    cbgg_Pixmap$Blending_$VALUES = var$2;
},
cbgg_Pixmap$Filter = $rt_classWithoutFields(jl_Enum),
cbgg_Pixmap$Filter_NearestNeighbour = null,
cbgg_Pixmap$Filter_BiLinear = null,
cbgg_Pixmap$Filter_$VALUES = null,
cbgg_Pixmap$Filter_values = () => {
    return cbgg_Pixmap$Filter_$VALUES.$clone0();
},
cbgg_Pixmap$Filter__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgg_Pixmap$Filter;
    jl_Enum__init_(var$1, $rt_s(716), 0);
    cbgg_Pixmap$Filter_NearestNeighbour = var$1;
    var$1 = new cbgg_Pixmap$Filter;
    jl_Enum__init_(var$1, $rt_s(717), 1);
    cbgg_Pixmap$Filter_BiLinear = var$1;
    var$2 = $rt_createArray(cbgg_Pixmap$Filter, 2);
    var$3 = var$2.data;
    var$3[0] = cbgg_Pixmap$Filter_NearestNeighbour;
    var$3[1] = var$1;
    cbgg_Pixmap$Filter_$VALUES = var$2;
};
function cbggg_Gdx2DPixmap() {
    jl_Object.call(this);
    this.$nativePixmap0 = null;
}
let cbggg_Gdx2DPixmap_getGLInternalFormat = $this => {
    let var$1, var$2, var$3;
    a: {
        var$1 = $this.$nativePixmap0.$format0;
        switch (var$1) {
            case 1:
                break;
            case 2:
                var$1 = 6410;
                break a;
            case 3:
            case 5:
                var$1 = 6407;
                break a;
            case 4:
            case 6:
                var$1 = 6408;
                break a;
            default:
                var$2 = new cbgu_GdxRuntimeException;
                var$3 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$3);
                jl_StringBuilder_append1(jl_StringBuilder_append(var$3, $rt_s(518)), var$1);
                jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
                $rt_throw(var$2);
        }
        var$1 = 6406;
    }
    return var$1;
},
cbgg_TextureData = $rt_classWithoutFields(0);
function cbggg_PixmapTextureData() {
    let a = this; jl_Object.call(a);
    a.$pixmap0 = null;
    a.$format1 = null;
    a.$useMipMaps0 = 0;
    a.$disposePixmap0 = 0;
    a.$managed = 0;
}
let cbggg_PixmapTextureData__init_0 = ($this, $pixmap, $format, $useMipMaps, $disposePixmap) => {
    $this.$pixmap0 = $pixmap;
    if ($format === null)
        $format = cbgg_Pixmap_getFormat($pixmap);
    $this.$format1 = $format;
    $this.$useMipMaps0 = $useMipMaps;
    $this.$disposePixmap0 = $disposePixmap;
    $this.$managed = 0;
},
cbggg_PixmapTextureData__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new cbggg_PixmapTextureData();
    cbggg_PixmapTextureData__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
cbggg_PixmapTextureData_disposePixmap = $this => {
    return $this.$disposePixmap0;
},
cbggg_PixmapTextureData_consumePixmap = $this => {
    return $this.$pixmap0;
},
cbggg_PixmapTextureData_getWidth = $this => {
    return cbgg_Pixmap_getWidth($this.$pixmap0);
},
cbggg_PixmapTextureData_getHeight = $this => {
    return cbgg_Pixmap_getHeight($this.$pixmap0);
},
cbggg_PixmapTextureData_getFormat = $this => {
    return $this.$format1;
},
cbggg_PixmapTextureData_useMipMaps = $this => {
    return $this.$useMipMaps0;
},
cbggg_PixmapTextureData_isManaged = $this => {
    return $this.$managed;
},
cbggg_PixmapTextureData_getType = $this => {
    return cbgg_TextureData$TextureDataType_Pixmap;
},
cbggg_PixmapTextureData_consumeCustomData = ($this, $target) => {
    let var$2;
    var$2 = new cbgu_GdxRuntimeException;
    jl_Throwable__init_(var$2, $rt_s(718));
    $rt_throw(var$2);
},
cbggg_PixmapTextureData_isPrepared = $this => {
    return 1;
},
cbggg_PixmapTextureData_prepare = $this => {
    let var$1;
    var$1 = new cbgu_GdxRuntimeException;
    jl_Throwable__init_(var$1, $rt_s(719));
    $rt_throw(var$1);
},
ses_SideEstimator = $rt_classWithoutFields(0);
function ses_DefaultSideEstimator() {
    let a = this; jl_Object.call(a);
    a.$minimumSides = 0;
    a.$maximumSides = 0;
    a.$sideMultiplier = 0.0;
}
function ju_IdentityHashMap() {
    let a = this; ju_AbstractMap.call(a);
    a.$elementCount0 = 0;
    a.$elementData0 = null;
    a.$modCount1 = 0;
    a.$loadFactor3 = 0.0;
    a.$threshold7 = 0;
}
let ju_IdentityHashMap_calculateCapacity = $x => {
    let var$2;
    if ($x >= 1073741824)
        return 1073741824;
    if (!$x)
        return 16;
    var$2 = $x - 1 | 0;
    $x = var$2 | var$2 >> 1;
    $x = $x | $x >> 2;
    $x = $x | $x >> 4;
    $x = $x | $x >> 8;
    return ($x | $x >> 16) + 1 | 0;
},
ju_IdentityHashMap_computeThreshold = $this => {
    $this.$threshold7 = $this.$elementData0.data.length * $this.$loadFactor3 | 0;
},
ju_IdentityHashMap_findNonNullKeyEntry = ($this, $key, $index, $keyHash) => {
    let $m;
    $m = $this.$elementData0.data[$index];
    while ($m !== null && !($m.$origKeyHash0 == $keyHash && ($key !== $m.$key ? 0 : 1))) {
        $m = $m.$next5;
    }
    return $m;
},
ju_IdentityHashMap_findNullKeyEntry = $this => {
    let $m;
    $m = $this.$elementData0.data[0];
    while ($m !== null && $m.$key !== null) {
        $m = $m.$next5;
    }
    return $m;
},
ju_IdentityHashMap_put = ($this, $key, $value) => {
    let var$3, var$4, var$5;
    if ($key === null) {
        var$3 = ju_IdentityHashMap_findNullKeyEntry($this);
        if (var$3 === null) {
            $this.$modCount1 = $this.$modCount1 + 1 | 0;
            var$3 = ju_IdentityHashMap_createHashedEntry($this, null, 0, 0);
            var$4 = $this.$elementCount0 + 1 | 0;
            $this.$elementCount0 = var$4;
            if (var$4 > $this.$threshold7)
                ju_IdentityHashMap_rehash($this);
        }
    } else {
        var$4 = ju_IdentityHashMap_computeHashCode($key);
        var$5 = var$4 & ($this.$elementData0.data.length - 1 | 0);
        var$3 = ju_IdentityHashMap_findNonNullKeyEntry($this, $key, var$5, var$4);
        if (var$3 === null) {
            $this.$modCount1 = $this.$modCount1 + 1 | 0;
            var$3 = ju_IdentityHashMap_createHashedEntry($this, $key, var$5, var$4);
            var$4 = $this.$elementCount0 + 1 | 0;
            $this.$elementCount0 = var$4;
            if (var$4 > $this.$threshold7)
                ju_IdentityHashMap_rehash($this);
        }
    }
    $key = var$3.$value;
    var$3.$value = $value;
    return $key;
},
ju_IdentityHashMap_createHashedEntry = ($this, $key, $index, $hash) => {
    let $entry, var$5;
    $entry = new ju_IdentityHashMap$HashEntry;
    ju_MapEntry__init_($entry, $key, null);
    $entry.$origKeyHash0 = $hash;
    var$5 = $this.$elementData0.data;
    $entry.$next5 = var$5[$index];
    var$5[$index] = $entry;
    return $entry;
},
ju_IdentityHashMap_rehash = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8;
    var$1 = $this.$elementData0.data.length;
    var$1 = ju_IdentityHashMap_calculateCapacity(!var$1 ? 1 : var$1 << 1);
    var$2 = $rt_createArray(ju_IdentityHashMap$HashEntry, var$1);
    var$3 = var$2.data;
    var$4 = 0;
    var$5 = var$1 - 1 | 0;
    while (true) {
        var$6 = $this.$elementData0.data;
        if (var$4 >= var$6.length)
            break;
        var$7 = var$6[var$4];
        var$6[var$4] = null;
        while (var$7 !== null) {
            var$1 = var$7.$origKeyHash0 & var$5;
            var$8 = var$7.$next5;
            var$7.$next5 = var$3[var$1];
            var$3[var$1] = var$7;
            var$7 = var$8;
        }
        var$4 = var$4 + 1 | 0;
    }
    $this.$elementData0 = var$2;
    ju_IdentityHashMap_computeThreshold($this);
},
ju_IdentityHashMap_computeHashCode = $key => {
    return $key === null ? 0 : jl_Object_identity($key);
};
function r_Replacer() {
    let a = this; jl_Object.call(a);
    a.$pattern2 = null;
    a.$substitution = null;
}
let r_Replacer__init_0 = ($this, $pattern, $substitution) => {
    $this.$pattern2 = $pattern;
    $this.$substitution = r_PerlSubstitution__init_($substitution);
},
r_Replacer__init_ = (var_0, var_1) => {
    let var_2 = new r_Replacer();
    r_Replacer__init_0(var_2, var_0, var_1);
    return var_2;
},
r_Replacer_replace = ($this, $text) => {
    let $tb, var$3, var$4;
    $tb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($tb, $text.$nativeString.length);
    $tb = r_Replacer_wrap($tb);
    var$3 = $this.$pattern2;
    var$4 = r_Matcher__init_(var$3);
    r_Matcher_setTarget(var$4, $text);
    r_Replacer_replace0(var$4, $this.$substitution, $tb);
    return r_Replacer$StringBuilderBuffer_toString($tb);
},
r_Replacer_replace0 = ($m, $substitution, $dest) => {
    let $firstPass, $c;
    $firstPass = 1;
    $c = 0;
    while (r_Matcher_find($m)) {
        if (!r_Matcher_end($m) && !$firstPass)
            continue;
        if (r_Matcher_start($m) > 0)
            r_Matcher_getGroup($m, (-1), $dest);
        $substitution.$appendSubstitution($m, $dest);
        $c = $c + 1 | 0;
        r_Matcher_setTarget0($m, $m, (-2));
        $firstPass = 0;
    }
    r_Matcher_getGroup($m, (-3), $dest);
    return $c;
},
r_Replacer_wrap = $sb => {
    let var$2;
    var$2 = new r_Replacer$StringBuilderBuffer;
    var$2.$sb = $sb;
    return var$2;
},
r_REFlags = $rt_classWithoutFields(0);
function r_Pattern() {
    let a = this; jl_Object.call(a);
    a.$stringRepr = null;
    a.$root = null;
    a.$root0 = null;
    a.$memregs0 = 0;
    a.$counters = 0;
    a.$lookaheads0 = 0;
    a.$flags3 = 0;
    a.$namedGroupMap = null;
    a.$caseless = 0;
}
let r_Pattern__init_1 = ($this, $regex) => {
    r_Pattern__init_0($this, $regex, 16);
},
r_Pattern__init_2 = var_0 => {
    let var_1 = new r_Pattern();
    r_Pattern__init_1(var_1, var_0);
    return var_1;
},
r_Pattern__init_0 = ($this, $regex, $flags) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15;
    $this.$caseless = 0;
    $this.$stringRepr = $regex;
    $this.$flags3 = $flags;
    $this.$caseless = ($flags & 1) != 1 ? 0 : 1;
    var$3 = $rt_createIntArray(1);
    var$3.data[0] = $flags;
    r_Term_instances = 0;
    var$4 = jl_String_toCharArray($regex);
    var$5 = var$4.data.length;
    var$6 = $rt_createIntArray(4);
    var$7 = var$6.data;
    var$7[0] = 1;
    var$7[1] = 0;
    var$7[2] = 0;
    var$7[3] = 0;
    var$8 = ju_ArrayList__init_();
    var$9 = ju_HashMap__init_();
    $regex = new r_Pretokenizer;
    $regex.$ttype = 1;
    if (var$5 > var$5) {
        var$8 = new jl_IndexOutOfBoundsException;
        $regex = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($regex);
        jl_AbstractStringBuilder_append($regex, $rt_s(720));
        $regex = jl_StringBuilder_append1($regex, 0);
        jl_AbstractStringBuilder_append($regex, $rt_s(721));
        $regex = jl_StringBuilder_append1($regex, var$5);
        jl_AbstractStringBuilder_append($regex, $rt_s(722));
        jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1($regex, var$5)));
        $rt_throw(var$8);
    }
    $regex.$offset2 = 0;
    $regex.$end5 = var$5;
    $regex.$tOffset = 0;
    $regex.$tOutside = 0;
    $regex.$data13 = var$4;
    $regex = r_Term_makeTree($regex, var$4, var$6, var$3, r_Group__init_0(), var$8, var$9);
    $regex.$out0.$type0 = 10;
    var$10 = $regex.$next3;
    var$11 = r_Optimizer_find0(var$10);
    if (var$11 === null)
        var$12 = var$10;
    else {
        a: {
            var$12 = new r_Find;
            $regex = var$11.$atom;
            $flags = var$11.$distance8;
            r_Term__init_1(var$12);
            switch ($regex.$type0) {
                case 0:
                case 1:
                case 2:
                    var$12.$type0 = 8;
                    break a;
                case 3:
                case 4:
                case 5:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                    break;
                case 6:
                case 7:
                case 15:
                    var$12.$type0 = 9;
                    break a;
                default:
            }
            var$11 = new jl_IllegalArgumentException;
            var$8 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$8);
            jl_AbstractStringBuilder_append(var$8, $rt_s(723));
            jl_AbstractStringBuilder_append(var$8, r_Term_termLookup($regex.$type0));
            jl_Throwable__init_(var$11, jl_AbstractStringBuilder_toString(var$8));
            $rt_throw(var$11);
        }
        var$12.$target = $regex;
        var$12.$distance = $flags;
        if ($regex !== var$10) {
            var$12.$next3 = var$10;
            var$12.$eat = 0;
        } else {
            var$12.$next3 = $regex.$next3;
            var$12.$eat = 1;
        }
    }
    var$8 = ju_AbstractList_iterator(var$8);
    b: {
        c: while (true) {
            if (!ju_AbstractList$1_hasNext(var$8)) {
                $this.$root = var$12;
                $this.$root = var$10;
                $this.$root0 = var$10;
                $this.$memregs0 = var$7[0];
                $this.$counters = var$7[1];
                $this.$lookaheads0 = var$7[3];
                $this.$namedGroupMap = var$9;
                return;
            }
            $regex = ju_AbstractList$1_next(var$8);
            var$11 = $regex.$failNext;
            var$13 = r_Optimizer_find0(var$11.$next3);
            if (var$13 !== null) {
                d: {
                    e: {
                        $flags = var$11.$minCount;
                        switch (var$11.$type0) {
                            case 50:
                                $flags = 0;
                                break e;
                            case 52:
                            case 53:
                                break c;
                            case 54:
                                break;
                            case 51:
                                break e;
                            default:
                                break c;
                        }
                        break d;
                    }
                    f: {
                        var$14 = new r_FindBack;
                        var$15 = var$13.$atom;
                        var$5 = var$13.$distance8;
                        r_Term__init_1(var$14);
                        var$14.$minCount = $flags;
                        switch (var$15.$type0) {
                            case 0:
                            case 1:
                            case 2:
                                break;
                            case 3:
                            case 4:
                            case 5:
                            case 8:
                            case 9:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                                break b;
                            case 6:
                            case 7:
                            case 15:
                                var$14.$type0 = 53;
                                break f;
                            default:
                                break b;
                        }
                        var$14.$type0 = 52;
                    }
                    var$14.$target = var$15;
                    var$14.$distance = var$5;
                    var$11 = var$11.$next3;
                    if (var$15 !== var$11) {
                        var$14.$next3 = var$11;
                        var$14.$eat = 0;
                    } else {
                        var$14.$next3 = var$11.$next3;
                        var$14.$eat = 1;
                    }
                    var$11 = var$14;
                }
                $regex.$failNext = var$11;
            }
        }
        $regex = new jl_Error;
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_AbstractStringBuilder_append(var$8, $rt_s(724));
        jl_Throwable__init_($regex, jl_AbstractStringBuilder_toString(jl_StringBuilder_append(var$8, var$11)));
        $rt_throw($regex);
    }
    var$8 = new jl_IllegalArgumentException;
    $regex = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($regex);
    jl_AbstractStringBuilder_append($regex, $rt_s(723));
    jl_AbstractStringBuilder_append($regex, r_Term_termLookup(var$15.$type0));
    jl_Exception__init_0(var$8, jl_AbstractStringBuilder_toString($regex));
    $rt_throw(var$8);
},
r_Pattern__init_ = (var_0, var_1) => {
    let var_2 = new r_Pattern();
    r_Pattern__init_0(var_2, var_0, var_1);
    return var_2;
},
r_Pattern_compile = $regex => {
    return r_Pattern__init_($regex, 16);
},
r_Pattern_groupId = ($this, $name) => {
    return ju_HashMap_get($this.$namedGroupMap, $name);
},
r_Pattern_matcher = $this => {
    return r_Matcher__init_($this);
},
r_Pattern_parseFlags = ($data, $start, $len) => {
    let $enable, $result, $i, $c, $flag, var$9, var$10;
    $enable = 1;
    $result = 16;
    $i = 0;
    while ($i < $len) {
        a: {
            $c = $data.data[$start + $i | 0];
            switch ($c) {
                case 43:
                    break;
                case 45:
                    $enable = 0;
                    break a;
                default:
                    b: {
                        switch ($c) {
                            case 88:
                                break;
                            case 105:
                                $flag = 1;
                                break b;
                            case 109:
                                $flag = 2;
                                break b;
                            case 115:
                                $flag = 4;
                                break b;
                            case 117:
                                $flag = 16;
                                break b;
                            case 120:
                                $flag = 8;
                                break b;
                            default:
                                var$9 = new r_PatternSyntaxException;
                                var$10 = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_(var$10);
                                jl_AbstractStringBuilder_append(var$10, $rt_s(725));
                                jl_AbstractStringBuilder_append0(var$10, $c);
                                jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString(var$10));
                                $rt_throw(var$9);
                        }
                        $flag = 32;
                    }
                    if ($enable) {
                        $result = $result | $flag;
                        break a;
                    }
                    $result = $result & ($flag ^ (-1));
                    break a;
            }
            $enable = 1;
        }
        $i = $i + 1 | 0;
    }
    return $result;
};
function cgtt_Styles$LabelStyle() {
    jl_Object.call(this);
    this.$background = null;
}
function cgtt_Line() {
    let a = this; jl_Object.call(a);
    a.$glyphs = null;
    a.$width = 0.0;
    a.$height = 0.0;
}
let cgtt_Line__init_0 = $this => {
    $this.$glyphs = cbgu_LongArray__init_(16);
},
cgtt_Line__init_ = () => {
    let var_0 = new cgtt_Line();
    cgtt_Line__init_0(var_0);
    return var_0;
},
cgtt_Line_toString = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0(var$1, $this.$glyphs.$size1 + 20 | 0);
    jl_AbstractStringBuilder_append(var$1, $rt_s(726));
    var$2 = 0;
    var$3 = $this.$glyphs.$size1;
    while (var$2 < var$3) {
        jl_AbstractStringBuilder_append0(var$1, Long_lo((cbgu_LongArray_get($this.$glyphs, var$2))) & 65535);
        var$2 = var$2 + 1 | 0;
    }
    jl_AbstractStringBuilder_append(var$1, $rt_s(727));
    var$4 = jl_StringBuilder_append3(var$1, $this.$width);
    jl_AbstractStringBuilder_append(var$4, $rt_s(728));
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append3(var$4, $this.$height), 41);
    return jl_AbstractStringBuilder_toString(var$1);
};
function cbgg_VertexAttributes() {
    let a = this; jl_Object.call(a);
    a.$attributes3 = null;
    a.$vertexSize = 0;
    a.$mask8 = Long_ZERO;
    a.$boneWeightUnits = 0;
    a.$textureCoordinates = 0;
}
let cbgg_VertexAttributes_size = $this => {
    return $this.$attributes3.data.length;
},
cbgg_VertexAttributes_get = ($this, $index) => {
    return $this.$attributes3.data[$index];
};
function cbggg_ShaderProgram() {
    let a = this; jl_Object.call(a);
    a.$log = null;
    a.$isCompiled = 0;
    a.$uniforms = null;
    a.$uniformTypes = null;
    a.$uniformSizes = null;
    a.$uniformNames = null;
    a.$attributes2 = null;
    a.$attributeTypes = null;
    a.$attributeSizes = null;
    a.$attributeNames = null;
    a.$program = 0;
    a.$vertexShaderHandle = 0;
    a.$fragmentShaderHandle = 0;
    a.$matrix = null;
    a.$vertexShaderSource = null;
    a.$fragmentShaderSource = null;
    a.$invalidated = 0;
    a.$refCount = 0;
    a.$params = null;
    a.$type3 = null;
}
let cbggg_ShaderProgram_pedantic = 0,
cbggg_ShaderProgram_prependVertexCode = null,
cbggg_ShaderProgram_prependFragmentCode = null,
cbggg_ShaderProgram_shaders = null,
cbggg_ShaderProgram_intbuf = null,
cbggg_ShaderProgram_$callClinit = () => {
    cbggg_ShaderProgram_$callClinit = $rt_eraseClinit(cbggg_ShaderProgram);
    cbggg_ShaderProgram__clinit_();
},
cbggg_ShaderProgram__init_0 = ($this, $vertexShader, $fragmentShader) => {
    let var$3, var$4, var$5, var$6;
    cbggg_ShaderProgram_$callClinit();
    $this.$log = $rt_s(24);
    $this.$uniforms = cbgu_ObjectIntMap__init_();
    $this.$uniformTypes = cbgu_ObjectIntMap__init_();
    $this.$uniformSizes = cbgu_ObjectIntMap__init_();
    $this.$attributes2 = cbgu_ObjectIntMap__init_();
    $this.$attributeTypes = cbgu_ObjectIntMap__init_();
    $this.$attributeSizes = cbgu_ObjectIntMap__init_();
    $this.$refCount = 0;
    $this.$params = cbgu_BufferUtils_newIntBuffer(1);
    $this.$type3 = cbgu_BufferUtils_newIntBuffer(1);
    if ($vertexShader === null) {
        $vertexShader = new jl_IllegalArgumentException;
        jl_Throwable__init_($vertexShader, $rt_s(729));
        $rt_throw($vertexShader);
    }
    if ($fragmentShader === null) {
        $vertexShader = new jl_IllegalArgumentException;
        jl_Throwable__init_($vertexShader, $rt_s(730));
        $rt_throw($vertexShader);
    }
    var$3 = cbggg_ShaderProgram_prependVertexCode;
    if (var$3 !== null && var$3.$nativeString.length > 0) {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, cbggg_ShaderProgram_prependVertexCode);
        jl_AbstractStringBuilder_append(var$3, $vertexShader);
        $vertexShader = jl_AbstractStringBuilder_toString(var$3);
    }
    var$3 = cbggg_ShaderProgram_prependFragmentCode;
    if (var$3 !== null && var$3.$nativeString.length > 0) {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, cbggg_ShaderProgram_prependFragmentCode);
        jl_AbstractStringBuilder_append(var$3, $fragmentShader);
        $fragmentShader = jl_AbstractStringBuilder_toString(var$3);
    }
    $this.$vertexShaderSource = $vertexShader;
    $this.$fragmentShaderSource = $fragmentShader;
    $this.$matrix = cbgu_BufferUtils_newFloatBuffer(16);
    cbggg_ShaderProgram_compileShaders($this, $vertexShader, $fragmentShader);
    if ($this.$isCompiled) {
        jn_Buffer_clear($this.$params);
        cbg_Gdx_gl20.$glGetProgramiv($this.$program, 35721, $this.$params);
        var$4 = jn_IntBufferImpl_get($this.$params, 0);
        $this.$attributeNames = $rt_createArray(jl_String, var$4);
        var$5 = 0;
        while (var$5 < var$4) {
            jn_Buffer_clear($this.$params);
            jn_IntBufferImpl_put($this.$params, 0, 1);
            jn_Buffer_clear($this.$type3);
            $fragmentShader = cbg_Gdx_gl20.$glGetActiveAttrib($this.$program, var$5, $this.$params, $this.$type3);
            var$6 = cbg_Gdx_gl20.$glGetAttribLocation($this.$program, $fragmentShader);
            cbgu_ObjectIntMap_put($this.$attributes2, $fragmentShader, var$6);
            cbgu_ObjectIntMap_put($this.$attributeTypes, $fragmentShader, jn_IntBufferImpl_get($this.$type3, 0));
            cbgu_ObjectIntMap_put($this.$attributeSizes, $fragmentShader, jn_IntBufferImpl_get($this.$params, 0));
            $this.$attributeNames.data[var$5] = $fragmentShader;
            var$5 = var$5 + 1 | 0;
        }
        jn_Buffer_clear($this.$params);
        cbg_Gdx_gl20.$glGetProgramiv($this.$program, 35718, $this.$params);
        var$4 = jn_IntBufferImpl_get($this.$params, 0);
        $this.$uniformNames = $rt_createArray(jl_String, var$4);
        var$5 = 0;
        while (var$5 < var$4) {
            jn_Buffer_clear($this.$params);
            jn_IntBufferImpl_put($this.$params, 0, 1);
            jn_Buffer_clear($this.$type3);
            $vertexShader = cbg_Gdx_gl20.$glGetActiveUniform($this.$program, var$5, $this.$params, $this.$type3);
            var$6 = cbg_Gdx_gl20.$glGetUniformLocation($this.$program, $vertexShader);
            cbgu_ObjectIntMap_put($this.$uniforms, $vertexShader, var$6);
            cbgu_ObjectIntMap_put($this.$uniformTypes, $vertexShader, jn_IntBufferImpl_get($this.$type3, 0));
            cbgu_ObjectIntMap_put($this.$uniformSizes, $vertexShader, jn_IntBufferImpl_get($this.$params, 0));
            $this.$uniformNames.data[var$5] = $vertexShader;
            var$5 = var$5 + 1 | 0;
        }
        $vertexShader = cbg_Gdx_app;
        $fragmentShader = cbgu_ObjectMap_get(cbggg_ShaderProgram_shaders, $vertexShader);
        if ($fragmentShader === null)
            $fragmentShader = cbgu_Array__init_();
        cbgu_Array_add($fragmentShader, $this);
        cbgu_ObjectMap_put(cbggg_ShaderProgram_shaders, $vertexShader, $fragmentShader);
    }
},
cbggg_ShaderProgram__init_ = (var_0, var_1) => {
    let var_2 = new cbggg_ShaderProgram();
    cbggg_ShaderProgram__init_0(var_2, var_0, var_1);
    return var_2;
},
cbggg_ShaderProgram_compileShaders = ($this, $vertexShader, $fragmentShader) => {
    let var$3;
    $this.$vertexShaderHandle = cbggg_ShaderProgram_loadShader($this, 35633, $vertexShader);
    var$3 = cbggg_ShaderProgram_loadShader($this, 35632, $fragmentShader);
    $this.$fragmentShaderHandle = var$3;
    if ($this.$vertexShaderHandle != (-1) && var$3 != (-1)) {
        var$3 = cbg_Gdx_gl20.$glCreateProgram();
        if (!var$3)
            var$3 = (-1);
        $vertexShader = cbg_Gdx_gl20;
        if (var$3 == (-1))
            var$3 = (-1);
        else {
            $vertexShader.$glAttachShader(var$3, $this.$vertexShaderHandle);
            $vertexShader.$glAttachShader(var$3, $this.$fragmentShaderHandle);
            $vertexShader.$glLinkProgram(var$3);
            $fragmentShader = jn_ByteBuffer_allocateDirect(4);
            jn_ByteBuffer_order($fragmentShader, jn_ByteOrder_nativeOrder());
            $fragmentShader = jn_ByteBufferJsImpl_asIntBuffer($fragmentShader);
            $vertexShader.$glGetProgramiv(var$3, 35714, $fragmentShader);
            if (!jn_IntBufferImpl_get($fragmentShader, 0)) {
                $this.$log = cbg_Gdx_gl20.$glGetProgramInfoLog(var$3);
                var$3 = (-1);
            }
        }
        $this.$program = var$3;
        if (var$3 != (-1)) {
            $this.$isCompiled = 1;
            return;
        }
        $this.$isCompiled = 0;
        return;
    }
    $this.$isCompiled = 0;
},
cbggg_ShaderProgram_loadShader = ($this, $type, $source) => {
    let $gl, $intbuf, $shader, $infoLog;
    $gl = cbg_Gdx_gl20;
    $intbuf = cbgu_BufferUtils_newIntBuffer(1);
    $shader = $gl.$glCreateShader($type);
    if (!$shader)
        return (-1);
    $gl.$glShaderSource($shader, $source);
    $gl.$glCompileShader($shader);
    $gl.$glGetShaderiv($shader, 35713, $intbuf);
    if (jn_IntBufferImpl_get($intbuf, 0))
        return $shader;
    $infoLog = $gl.$glGetShaderInfoLog($shader);
    $gl = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($gl);
    jl_AbstractStringBuilder_append($gl, $this.$log);
    jl_AbstractStringBuilder_append($gl, $type != 35633 ? $rt_s(731) : $rt_s(732));
    $this.$log = jl_AbstractStringBuilder_toString($gl);
    $source = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($source);
    jl_AbstractStringBuilder_append($source, $this.$log);
    jl_AbstractStringBuilder_append($source, $infoLog);
    $this.$log = jl_AbstractStringBuilder_toString($source);
    return (-1);
},
cbggg_ShaderProgram_getLog = $this => {
    let var$1;
    if (!$this.$isCompiled)
        return $this.$log;
    var$1 = cbg_Gdx_gl20.$glGetProgramInfoLog($this.$program);
    $this.$log = var$1;
    return var$1;
},
cbggg_ShaderProgram_fetchUniformLocation = ($this, $name) => {
    let var$2, var$3, var$4, var$5;
    cbggg_ShaderProgram_$callClinit();
    var$2 = cbggg_ShaderProgram_pedantic;
    var$3 = cbgu_ObjectIntMap_get($this.$uniforms, $name, (-2));
    if (var$3 == (-2)) {
        var$3 = cbg_Gdx_gl20.$glGetUniformLocation($this.$program, $name);
        if (var$3 == (-1) && var$2) {
            if (!$this.$isCompiled) {
                $name = new jl_IllegalStateException;
                var$4 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$4);
                jl_AbstractStringBuilder_append(var$4, $rt_s(733));
                jl_AbstractStringBuilder_append(var$4, cbggg_ShaderProgram_getLog($this));
                jl_Throwable__init_($name, jl_AbstractStringBuilder_toString(var$4));
                $rt_throw($name);
            }
            var$4 = new jl_IllegalArgumentException;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(var$5, $rt_s(734));
            jl_AbstractStringBuilder_append(var$5, $name);
            jl_AbstractStringBuilder_append(var$5, $rt_s(735));
            jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(var$5));
            $rt_throw(var$4);
        }
        cbgu_ObjectIntMap_put($this.$uniforms, $name, var$3);
    }
    return var$3;
},
cbggg_ShaderProgram_setUniformi = ($this, $name, $value) => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glUniform1i(cbggg_ShaderProgram_fetchUniformLocation($this, $name), $value);
},
cbggg_ShaderProgram_setUniformf = ($this, $name, $value) => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glUniform1f(cbggg_ShaderProgram_fetchUniformLocation($this, $name), $value);
},
cbggg_ShaderProgram_setUniformMatrix = ($this, $name, $matrix) => {
    let var$3, var$4;
    var$3 = cbggg_ShaderProgram_fetchUniformLocation($this, $name);
    $name = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    var$4 = $matrix.$val;
    cgxgbt_TeaGL20_glUniformMatrix4fv($name, var$3, 1, 0, var$4, 0);
},
cbggg_ShaderProgram_setVertexAttribute = ($this, $location, $size, $type, $normalize, $stride, $offset) => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glVertexAttribPointer($location, $size, $type, $normalize, $stride, $offset);
},
cbggg_ShaderProgram_bind = $this => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glUseProgram($this.$program);
},
cbggg_ShaderProgram_disableVertexAttribute0 = ($this, $name) => {
    let $gl, var$3, $location;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    var$3 = cbg_Gdx_gl20;
    $location = cbgu_ObjectIntMap_get($this.$attributes2, $name, (-2));
    if ($location == (-2)) {
        $location = var$3.$glGetAttribLocation($this.$program, $name);
        cbgu_ObjectIntMap_put($this.$attributes2, $name, $location);
    }
    if ($location == (-1))
        return;
    $gl.$glDisableVertexAttribArray($location);
},
cbggg_ShaderProgram_disableVertexAttribute = ($this, $location) => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glDisableVertexAttribArray($location);
},
cbggg_ShaderProgram_enableVertexAttribute = ($this, $location) => {
    let $gl;
    $gl = cbg_Gdx_gl20;
    cbggg_ShaderProgram_checkManaged($this);
    $gl.$glEnableVertexAttribArray($location);
},
cbggg_ShaderProgram_checkManaged = $this => {
    if ($this.$invalidated) {
        cbggg_ShaderProgram_compileShaders($this, $this.$vertexShaderSource, $this.$fragmentShaderSource);
        $this.$invalidated = 0;
    }
},
cbggg_ShaderProgram_getAttributeLocation = ($this, $name) => {
    return cbgu_ObjectIntMap_get($this.$attributes2, $name, (-1));
},
cbggg_ShaderProgram__clinit_ = () => {
    cbggg_ShaderProgram_pedantic = 1;
    cbggg_ShaderProgram_prependVertexCode = $rt_s(24);
    cbggg_ShaderProgram_prependFragmentCode = $rt_s(24);
    cbggg_ShaderProgram_shaders = cbgu_ObjectMap__init_();
    cbggg_ShaderProgram_intbuf = cbgu_BufferUtils_newIntBuffer(1);
};
function cbggg_Gdx2DPixmapNative() {
    let a = this; jl_Object.call(a);
    a.$basePtr = 0;
    a.$width5 = 0;
    a.$height6 = 0;
    a.$format0 = 0;
    a.$heapStartIndex = 0;
    a.$heapEndIndex = 0;
    a.$nativeData = null;
    a.$buffer4 = null;
}
let cbggg_Gdx2DPixmapNative__init_ = ($this, $width, $height, $format) => {
    $this.$nativeData = cbggg_Gdx2DPixmapNative_newPixmapNative$js_body$_27($width, $height, $format);
    cbggg_Gdx2DPixmapNative_updateNativeData($this);
},
cbggg_Gdx2DPixmapNative__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new cbggg_Gdx2DPixmapNative();
    cbggg_Gdx2DPixmapNative__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
cbggg_Gdx2DPixmapNative_updateNativeData = $this => {
    $this.$basePtr = $this.$nativeData[0];
    $this.$width5 = $this.$nativeData[1];
    $this.$height6 = $this.$nativeData[2];
    $this.$format0 = $this.$nativeData[3];
    $this.$heapStartIndex = $this.$nativeData[4];
    $this.$heapEndIndex = $this.$nativeData[5];
    cbggg_Gdx2DPixmapNative_copyHeapToBuffer($this);
},
cbggg_Gdx2DPixmapNative_copyHeapToBuffer = $this => {
    let var$1, $heapData;
    var$1 = $this.$heapStartIndex;
    $heapData = !var$1 && !$this.$heapEndIndex ? null : cbggg_Gdx2DPixmapNative_getHeapDataNative$js_body$_25(!!0, var$1, $this.$heapEndIndex);
    if ($this.$buffer4 === null)
        $this.$buffer4 = jn_ByteBuffer_allocateDirect($heapData.length);
    (jn_JSBufferHelper_toInt8Array(jn_JSBufferHelper_getArrayBufferView($this.$buffer4))).set($heapData);
},
cbggg_Gdx2DPixmapNative_dispose = $this => {
    let var$1, var$2;
    Gdx.Gdx.prototype.g2d_free($this.$basePtr);
    var$1 = $this.$buffer4;
    if (var$1 !== null) {
        if (!var$1.$direct) {
            var$2 = new jl_IllegalArgumentException;
            jl_Throwable__init_(var$2, $rt_s(736));
            $rt_throw(var$2);
        }
        if ($rt_isInstance(var$1, jn_NativeBuffer))
            var$1.$release();
        $this.$buffer4 = null;
    }
    $this.$nativeData = null;
},
cbggg_Gdx2DPixmapNative_drawPixmap = ($this, $basePtr, $srcX, $srcY, $dstX, $dstY, $width, $height) => {
    let var$8;
    var$8 = $this.$basePtr;
    Gdx.Gdx.prototype.g2d_draw_pixmap($basePtr, var$8, $srcX, $srcY, $width, $height, $dstX, $dstY, $width, $height);
    cbggg_Gdx2DPixmapNative_copyHeapToBuffer($this);
},
cbggg_Gdx2DPixmapNative_setBlend = ($this, $blend) => {
    Gdx.Gdx.prototype.g2d_set_blend($this.$basePtr, $blend);
    cbggg_Gdx2DPixmapNative_copyHeapToBuffer($this);
},
cbggg_Gdx2DPixmapNative_getHeapDataNative$js_body$_25 = (var$1, var$2, var$3) => {
    var heapArray = Gdx.HEAP8.subarray(var$2, var$3);
    if (var$1) {
        var newArray = new Int8Array(heapArray);
        return newArray;
    }
    return heapArray;
},
cbggg_Gdx2DPixmapNative_loadNative$js_body$_26 = (var$1, var$2, var$3) => {
    var cBufferSize = var$1.length * Uint8Array.BYTES_PER_ELEMENT;
    var cBuffer = Gdx._malloc(cBufferSize);
    Gdx.writeArrayToMemory(var$1, cBuffer);
    var pixmap = Gdx.Gdx.prototype.g2d_load(cBuffer, var$2, var$3);
    Gdx._free(cBuffer);
    var pixels = Gdx.Gdx.prototype.g2d_get_pixels(pixmap);
    var pixmapAddr = Gdx.getPointer(pixmap);
    var format = pixmap.get_format();
    var width = pixmap.get_width();
    var height = pixmap.get_height();
    var bytesPerPixel = Gdx.Gdx.prototype.g2d_bytes_per_pixel(format);
    var bytesSize = width * height * bytesPerPixel;
    var startIndex = pixels;
    var endIndex = startIndex + bytesSize;
    var nativeData = new Int32Array(6);
    nativeData[0] = pixmapAddr;
    nativeData[1] = width;
    nativeData[2] = height;
    nativeData[3] = format;
    nativeData[4] = startIndex;
    nativeData[5] = endIndex;
    return nativeData;
},
cbggg_Gdx2DPixmapNative_newPixmapNative$js_body$_27 = (var$1, var$2, var$3) => {
    var pixmap = Gdx.Gdx.prototype.g2d_new(var$1, var$2, var$3);
    var pixels = Gdx.Gdx.prototype.g2d_get_pixels(pixmap);
    var pixmapAddr = Gdx.getPointer(pixmap);
    var var$3 = pixmap.get_format();
    var var$1 = pixmap.get_width();
    var var$2 = pixmap.get_height();
    var bytesPerPixel = Gdx.Gdx.prototype.g2d_bytes_per_pixel(var$3);
    var bytesSize = var$1 * var$2 * bytesPerPixel;
    var startIndex = pixels;
    var endIndex = startIndex + bytesSize;
    var nativeData = new Int32Array(6);
    nativeData[0] = pixmapAddr;
    nativeData[1] = var$1;
    nativeData[2] = var$2;
    nativeData[3] = var$3;
    nativeData[4] = startIndex;
    nativeData[5] = endIndex;
    return nativeData;
},
cbggg_PolygonBatch = $rt_classWithoutFields(0);
function ses_BatchManager() {
    let a = this; jl_Object.call(a);
    a.$batch0 = null;
    a.$r0 = null;
    a.$floatBits = 0.0;
    a.$verts = null;
    a.$vertexCount = 0;
    a.$pixelSize = 0.0;
    a.$halfPixelSize = 0.0;
    a.$offset1 = 0.0;
    a.$cacheDraws = 0;
    a.$drawing0 = null;
}
let ses_BatchManager_mat4 = null,
ses_BatchManager_$callClinit = () => {
    ses_BatchManager_$callClinit = $rt_eraseClinit(ses_BatchManager);
    ses_BatchManager__clinit_();
},
ses_BatchManager__init_ = ($this, var$1, var$2) => {
    ses_BatchManager_$callClinit();
    $this.$pixelSize = 1.0;
    $this.$halfPixelSize = 0.5;
    $this.$offset1 = 0.0010000000474974513;
    $this.$cacheDraws = 0;
    $this.$drawing0 = null;
    $this.$batch0 = var$1;
    $this.$verts = $rt_createFloatArray(2000);
    ses_BatchManager_setTextureRegion($this, var$2);
    ses_BatchManager_setColor0($this, cbgg_Color_WHITE);
},
ses_BatchManager__init_0 = (var_0, var_1) => {
    let var_2 = new ses_BatchManager();
    ses_BatchManager__init_(var_2, var_0, var_1);
    return var_2;
},
ses_BatchManager_setTextureRegion = ($this, $region) => {
    let $oldRegion, var$3, var$4, var$5, var$6;
    a: {
        $oldRegion = $this.$r0;
        $this.$r0 = $region;
        if ($region !== null) {
            var$3 = 0.5 * ($region.$u + $region.$u2);
            var$4 = 0.5 * ($region.$v + $region.$v2);
            var$5 = 0;
            while (true) {
                var$6 = $this.$verts.data;
                if (var$5 >= var$6.length)
                    break a;
                var$6[var$5 + 3 | 0] = var$3;
                var$6[var$5 + 4 | 0] = var$4;
                var$5 = var$5 + 5 | 0;
            }
        }
    }
    return $oldRegion;
},
ses_BatchManager_setColor0 = ($this, $color) => {
    return ses_BatchManager_setColor($this, cbgg_Color_toFloatBits($color));
},
ses_BatchManager_setColor = ($this, $floatBits) => {
    let $oldColor;
    $oldColor = $this.$floatBits;
    $this.$floatBits = $floatBits;
    return $oldColor;
},
ses_BatchManager_getPackedColor = $this => {
    return $this.$floatBits;
},
ses_BatchManager_isCachingDraws = $this => {
    return $this.$cacheDraws;
},
ses_BatchManager_isRecording = $this => {
    return $this.$drawing0 === null ? 0 : 1;
},
ses_BatchManager_pushQuad = $this => {
    $this.$vertexCount = $this.$vertexCount + 4 | 0;
},
ses_BatchManager_pushTriangle = $this => {
    ses_BatchManager_x4($this, ses_BatchManager_x30($this));
    ses_BatchManager_y4($this, ses_BatchManager_y3($this));
    $this.$pushQuad();
},
ses_BatchManager_pushToBatch = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    if (!$this.$vertexCount)
        return;
    if (ses_BatchManager_isRecording($this))
        $this.$drawing0.$pushVertices();
    else {
        var$1 = $this.$r0;
        if (var$1 === null) {
            var$1 = new jl_IllegalStateException;
            jl_Throwable__init_(var$1, $rt_s(737));
            $rt_throw(var$1);
        }
        var$2 = $this.$batch0;
        var$3 = var$1.$texture;
        var$4 = $this.$verts;
        var$5 = ses_BatchManager_getVerticesArrayIndex($this);
        cbggg_SpriteBatch_draw(var$2, var$3, var$4, 0, var$5);
    }
    $this.$vertexCount = 0;
},
ses_BatchManager_getVerticesArrayIndex = $this => {
    return 5 * $this.$vertexCount | 0;
},
ses_BatchManager_x1 = ($this, $x1) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 0 | 0] = $x1;
},
ses_BatchManager_y1 = ($this, $y1) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 1 | 0] = $y1;
},
ses_BatchManager_x2 = ($this, $x2) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 5 | 0] = $x2;
},
ses_BatchManager_y2 = ($this, $y2) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 6 | 0] = $y2;
},
ses_BatchManager_x3 = ($this, $x3) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 10 | 0] = $x3;
},
ses_BatchManager_y30 = ($this, $y3) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 11 | 0] = $y3;
},
ses_BatchManager_x4 = ($this, $x4) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 15 | 0] = $x4;
},
ses_BatchManager_y4 = ($this, $y4) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 16 | 0] = $y4;
},
ses_BatchManager_x30 = $this => {
    return $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 10 | 0];
},
ses_BatchManager_y3 = $this => {
    return $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 11 | 0];
},
ses_BatchManager_color1 = ($this, $c) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 2 | 0] = $c;
},
ses_BatchManager_color2 = ($this, $c) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 7 | 0] = $c;
},
ses_BatchManager_color3 = ($this, $c) => {
    $this.$verts.data[ses_BatchManager_getVerticesArrayIndex($this) + 12 | 0] = $c;
},
ses_BatchManager__clinit_ = () => {
    ses_BatchManager_mat4 = cbgm_Matrix4__init_();
};
function ses_DrawerTemplate() {
    let a = this; jl_Object.call(a);
    a.$drawer0 = null;
    a.$batchManager = null;
}
let ses_DrawerTemplate_A = null,
ses_DrawerTemplate_B = null,
ses_DrawerTemplate_C = null,
ses_DrawerTemplate_D = null,
ses_DrawerTemplate_E = null,
ses_DrawerTemplate_dir = null,
ses_DrawerTemplate_vec1 = null,
ses_DrawerTemplate__init_ = ($this, $batchManager, $drawer) => {
    $this.$drawer0 = $drawer;
    $this.$batchManager = $batchManager;
},
ses_DrawerTemplate_x1 = ($this, $x1) => {
    ses_BatchManager_x1($this.$batchManager, $x1);
},
ses_DrawerTemplate_y1 = ($this, $y1) => {
    ses_BatchManager_y1($this.$batchManager, $y1);
},
ses_DrawerTemplate_x2 = ($this, $x2) => {
    ses_BatchManager_x2($this.$batchManager, $x2);
},
ses_DrawerTemplate_y2 = ($this, $y2) => {
    ses_BatchManager_y2($this.$batchManager, $y2);
},
ses_DrawerTemplate_x3 = ($this, $x3) => {
    ses_BatchManager_x3($this.$batchManager, $x3);
},
ses_DrawerTemplate_y3 = ($this, $y3) => {
    ses_BatchManager_y30($this.$batchManager, $y3);
},
ses_DrawerTemplate_vert1 = ($this, $x, $y) => {
    ses_DrawerTemplate_x1($this, $x);
    ses_DrawerTemplate_y1($this, $y);
},
ses_DrawerTemplate_vert2 = ($this, $x, $y) => {
    ses_DrawerTemplate_x2($this, $x);
    ses_DrawerTemplate_y2($this, $y);
},
ses_DrawerTemplate_vert3 = ($this, $x, $y) => {
    ses_DrawerTemplate_x3($this, $x);
    ses_DrawerTemplate_y3($this, $y);
},
ses_DrawerTemplate_color1 = ($this, $c) => {
    ses_BatchManager_color1($this.$batchManager, $c);
},
ses_DrawerTemplate_color2 = ($this, $c) => {
    ses_BatchManager_color2($this.$batchManager, $c);
},
ses_DrawerTemplate_color3 = ($this, $c) => {
    ses_BatchManager_color3($this.$batchManager, $c);
},
ses_DrawerTemplate_color = ($this, $c1, $c2, $c3) => {
    ses_DrawerTemplate_color1($this, $c1);
    ses_DrawerTemplate_color2($this, $c2);
    ses_DrawerTemplate_color3($this, $c3);
},
ses_DrawerTemplate__clinit_ = () => {
    ses_DrawerTemplate_A = new cbgm_Vector2;
    ses_DrawerTemplate_B = new cbgm_Vector2;
    ses_DrawerTemplate_C = new cbgm_Vector2;
    ses_DrawerTemplate_D = new cbgm_Vector2;
    ses_DrawerTemplate_E = new cbgm_Vector2;
    ses_DrawerTemplate_dir = new cbgm_Vector2;
    ses_DrawerTemplate_vec1 = new cbgm_Vector2;
},
ses_FilledPolygonDrawer = $rt_classWithoutFields(ses_DrawerTemplate),
ses_FilledPolygonDrawer_triangulator = null,
ses_FilledPolygonDrawer_triangle = ($this, $x1, $y1, $x2, $y2, $x3, $y3, $color1, $color2, $color3) => {
    let $caching, var$11;
    $caching = $this.$batchManager.$cacheDraws;
    var$11 = $this;
    ses_DrawerTemplate_vert1(var$11, $x1, $y1);
    ses_DrawerTemplate_vert2(var$11, $x2, $y2);
    ses_DrawerTemplate_vert3(var$11, $x3, $y3);
    ses_DrawerTemplate_color(var$11, $color1, $color2, $color3);
    $this.$batchManager.$pushTriangle();
    if (!$caching)
        $this.$batchManager.$pushToBatch();
},
ses_FilledPolygonDrawer__clinit_ = () => {
    let var$1;
    var$1 = new cbgm_EarClippingTriangulator;
    var$1.$indicesArray = cbgu_ShortArray__init_();
    var$1.$vertexTypes = cbgu_IntArray__init_1();
    var$1.$triangles0 = cbgu_ShortArray__init_();
    ses_FilledPolygonDrawer_triangulator = var$1;
},
ses_FilledPolygonDrawer$BatchFilledPolygonDrawer = $rt_classWithoutFields(ses_FilledPolygonDrawer);
function ses_PolygonBatchManager() {
    let a = this; ses_BatchManager.call(a);
    a.$triangles = null;
    a.$triangleCount = 0;
}
let ses_PolygonBatchManager_pushQuad = $this => {
    let var$1, var$2;
    var$1 = $this.$vertexCount;
    ses_PolygonBatchManager_pushTriangleIndices($this, var$1 << 16 >> 16, (var$1 + 1 | 0) << 16 >> 16, (var$1 + 2 | 0) << 16 >> 16);
    var$2 = $this.$vertexCount;
    ses_PolygonBatchManager_pushTriangleIndices($this, var$2 << 16 >> 16, (var$2 + 2 | 0) << 16 >> 16, (var$2 + 3 | 0) << 16 >> 16);
    ses_BatchManager_pushQuad($this);
},
ses_PolygonBatchManager_pushTriangle = $this => {
    let var$1;
    var$1 = $this.$vertexCount;
    ses_PolygonBatchManager_pushTriangleIndices($this, var$1 << 16 >> 16, (var$1 + 1 | 0) << 16 >> 16, (var$1 + 2 | 0) << 16 >> 16);
    $this.$vertexCount = $this.$vertexCount + 3 | 0;
},
ses_PolygonBatchManager_pushTriangleIndices = ($this, $t1, $t2, $t3) => {
    let $t, var$5;
    $t = ses_PolygonBatchManager_getTrianglesArrayOffset($this);
    var$5 = $this.$triangles.data;
    var$5[$t] = $t1;
    var$5[$t + 1 | 0] = $t2;
    var$5[$t + 2 | 0] = $t3;
    $this.$triangleCount = $this.$triangleCount + 1 | 0;
},
ses_PolygonBatchManager_pushToBatch = $this => {
    let var$1;
    if (!$this.$vertexCount)
        return;
    var$1 = $this;
    if (ses_BatchManager_isRecording(var$1))
        $this.$drawing0.$pushVertices();
    else
        $this.$batch0.$draw6($this.$r0.$texture, $this.$verts, 0, ses_BatchManager_getVerticesArrayIndex(var$1), $this.$triangles, 0, ses_PolygonBatchManager_getTrianglesArrayOffset($this));
    $this.$vertexCount = 0;
    $this.$triangleCount = 0;
},
ses_PolygonBatchManager_getTrianglesArrayOffset = $this => {
    return 3 * $this.$triangleCount | 0;
},
ses_FilledPolygonDrawer$PolygonBatchFilledPolygonDrawer = $rt_classWithoutFields(ses_FilledPolygonDrawer),
ses_LineDrawer = $rt_classWithoutFields(ses_DrawerTemplate);
function ses_PathDrawer() {
    let a = this; ses_DrawerTemplate.call(a);
    a.$path = null;
    a.$tempPath = null;
}
let ses_PathDrawer_D0 = null,
ses_PathDrawer_E0 = null,
ses_PathDrawer__clinit_ = () => {
    ses_PathDrawer_D0 = new cbgm_Vector2;
    ses_PathDrawer_E0 = new cbgm_Vector2;
},
ses_PolygonDrawer = $rt_classWithoutFields(ses_DrawerTemplate),
ses_PolygonDrawer_centre = null,
ses_PolygonDrawer_radius = null,
ses_PolygonDrawer__clinit_ = () => {
    ses_PolygonDrawer_centre = new cbgm_Vector2;
    ses_PolygonDrawer_radius = new cbgm_Vector2;
},
cbgur_ArrayReflection = $rt_classWithoutFields(),
cgtt_ColorLookup = $rt_classWithoutFields(0),
cgtt_ColorLookup_INSTANCE = null,
cgtt_ColorLookup_DESCRIPTIVE = null,
cgtt_ColorLookup__clinit_ = () => {
    cgtt_ColorLookup_INSTANCE = new cgtt_ColorLookup$_clinit_$lambda$_2_0;
    cgtt_ColorLookup_DESCRIPTIVE = new cgtt_ColorLookup$_clinit_$lambda$_2_1;
};
function cbgu_LongArray() {
    let a = this; jl_Object.call(a);
    a.$items0 = null;
    a.$size1 = 0;
    a.$ordered2 = 0;
}
let cbgu_LongArray__init_0 = ($this, $capacity) => {
    $this.$ordered2 = 1;
    $this.$items0 = $rt_createLongArray($capacity);
},
cbgu_LongArray__init_ = var_0 => {
    let var_1 = new cbgu_LongArray();
    cbgu_LongArray__init_0(var_1, var_0);
    return var_1;
},
cbgu_LongArray_add = ($this, $value) => {
    let $items, var$3, var$4, var$5;
    $items = $this.$items0;
    var$3 = $items.data;
    var$4 = $this.$size1;
    if (var$4 == var$3.length)
        $items = cbgu_LongArray_resize($this, jl_Math_max(8, var$4 * 1.75 | 0));
    $items = $items.data;
    var$5 = $this.$size1;
    $this.$size1 = var$5 + 1 | 0;
    $items[var$5] = $value;
},
cbgu_LongArray_addAll = ($this, $array) => {
    let var$2, var$3, var$4, var$5, var$6;
    var$2 = $array.$items0;
    var$3 = $array.$size1;
    var$4 = $this.$items0;
    var$5 = var$4.data;
    var$6 = $this.$size1 + var$3 | 0;
    if (var$6 > var$5.length)
        var$4 = cbgu_LongArray_resize($this, jl_Math_max(jl_Math_max(8, var$6), $this.$size1 * 1.75 | 0));
    jl_System_fastArraycopy(var$2, 0, var$4, $this.$size1, var$3);
    $this.$size1 = $this.$size1 + var$3 | 0;
},
cbgu_LongArray_get = ($this, $index) => {
    let var$2, var$3;
    if ($index < $this.$size1)
        return $this.$items0.data[$index];
    var$2 = new jl_IndexOutOfBoundsException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(10));
    var$3 = jl_StringBuilder_append1(var$3, $index);
    jl_AbstractStringBuilder_append(var$3, $rt_s(11));
    jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$3, $this.$size1)));
    $rt_throw(var$2);
},
cbgu_LongArray_pop = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$size1;
    if (var$1 > 0) {
        var$2 = $this.$items0.data;
        var$3 = var$1 - 1 | 0;
        $this.$size1 = var$3;
        return var$2[var$3];
    }
    var$4 = new jl_IllegalStateException;
    jl_Throwable__init_(var$4, $rt_s(14));
    $rt_throw(var$4);
},
cbgu_LongArray_peek = $this => {
    let var$1, var$2;
    var$1 = $this.$size1;
    if (var$1 > 0)
        return $this.$items0.data[var$1 - 1 | 0];
    var$2 = new jl_IllegalStateException;
    jl_Throwable__init_(var$2, $rt_s(14));
    $rt_throw(var$2);
},
cbgu_LongArray_isEmpty = $this => {
    return $this.$size1 ? 0 : 1;
},
cbgu_LongArray_clear = $this => {
    $this.$size1 = 0;
},
cbgu_LongArray_setSize = ($this, $newSize) => {
    let var$2, var$3;
    if ($newSize >= 0) {
        if ($newSize > $this.$items0.data.length)
            cbgu_LongArray_resize($this, jl_Math_max(8, $newSize));
        $this.$size1 = $newSize;
        return $this.$items0;
    }
    var$2 = new jl_IllegalArgumentException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(18));
    jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$3, $newSize)));
    $rt_throw(var$2);
},
cbgu_LongArray_resize = ($this, $newSize) => {
    let $newItems, var$3;
    $newItems = $rt_createLongArray($newSize);
    var$3 = $newItems.data;
    jl_System_fastArraycopy($this.$items0, 0, $newItems, 0, jl_Math_min($this.$size1, var$3.length));
    $this.$items0 = $newItems;
    return $newItems;
},
cbgu_LongArray_truncate = ($this, $newSize) => {
    if ($this.$size1 > $newSize)
        $this.$size1 = $newSize;
};
function cbgu_ObjectLongMap() {
    let a = this; jl_Object.call(a);
    a.$size10 = 0;
    a.$keyTable1 = null;
    a.$valueTable2 = null;
    a.$loadFactor2 = 0.0;
    a.$threshold8 = 0;
    a.$shift = 0;
    a.$mask4 = 0;
}
let cbgu_ObjectLongMap__init_0 = ($this, $initialCapacity) => {
    let var$2;
    $this.$loadFactor2 = 0.800000011920929;
    $initialCapacity = cbgu_ObjectSet_tableSize($initialCapacity, 0.800000011920929);
    $this.$threshold8 = $initialCapacity * 0.800000011920929 | 0;
    var$2 = $initialCapacity - 1 | 0;
    $this.$mask4 = var$2;
    $this.$shift = jl_Long_numberOfLeadingZeros(Long_fromInt(var$2));
    $this.$keyTable1 = $rt_createArray(jl_Object, $initialCapacity);
    $this.$valueTable2 = $rt_createLongArray($initialCapacity);
},
cbgu_ObjectLongMap__init_ = var_0 => {
    let var_1 = new cbgu_ObjectLongMap();
    cbgu_ObjectLongMap__init_0(var_1, var_0);
    return var_1;
},
cbgu_ObjectLongMap_place = ($this, $item) => {
    return Long_lo(Long_shru(Long_mul(Long_fromInt($item.$hashCode()), Long_create(2135587861, 2654435769)), $this.$shift));
},
cbgu_ObjectLongMap_locateKey = ($this, $key) => {
    let $other, $keyTable, $i;
    if ($key === null) {
        $other = new jl_IllegalArgumentException;
        jl_Throwable__init_($other, $rt_s(21));
        $rt_throw($other);
    }
    $keyTable = $this.$keyTable1;
    $i = cbgu_ObjectLongMap_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if ($other === null)
            return  -($i + 1 | 0) | 0;
        if ($other.$equals($key))
            break;
        $i = ($i + 1 | 0) & $this.$mask4;
    }
    return $i;
},
cbgu_ObjectLongMap_put = ($this, $key, $value) => {
    let $i, var$4;
    $i = cbgu_ObjectLongMap_locateKey($this, $key);
    if ($i >= 0) {
        $this.$valueTable2.data[$i] = $value;
        return;
    }
    $i =  -($i + 1 | 0) | 0;
    var$4 = $this.$keyTable1.data;
    var$4[$i] = $key;
    $this.$valueTable2.data[$i] = $value;
    $i = $this.$size10 + 1 | 0;
    $this.$size10 = $i;
    if ($i >= $this.$threshold8)
        cbgu_ObjectLongMap_resize($this, var$4.length << 1);
},
cbgu_ObjectLongMap_putAll = ($this, $map) => {
    let $i, $keyTable, $valueTable, $n, $key;
    $i = $map.$size10;
    $i = cbgu_ObjectSet_tableSize($this.$size10 + $i | 0, $this.$loadFactor2);
    if ($this.$keyTable1.data.length < $i)
        cbgu_ObjectLongMap_resize($this, $i);
    $keyTable = $map.$keyTable1.data;
    $valueTable = $map.$valueTable2;
    $i = 0;
    $n = $keyTable.length;
    while ($i < $n) {
        $key = $keyTable[$i];
        if ($key !== null)
            cbgu_ObjectLongMap_put($this, $key, $valueTable.data[$i]);
        $i = $i + 1 | 0;
    }
},
cbgu_ObjectLongMap_get = ($this, $key, $defaultValue) => {
    let $i;
    $i = cbgu_ObjectLongMap_locateKey($this, $key);
    if ($i >= 0)
        $defaultValue = $this.$valueTable2.data[$i];
    return $defaultValue;
},
cbgu_ObjectLongMap_clear = $this => {
    let var$1, var$2, var$3;
    if (!$this.$size10)
        return;
    $this.$size10 = 0;
    var$1 = $this.$keyTable1;
    var$2 = var$1.data;
    var$3 = null;
    ju_Arrays_fill0(var$1, 0, var$2.length, var$3);
},
cbgu_ObjectLongMap_resize = ($this, $newSize) => {
    let $oldCapacity, var$3, $oldKeyTable, $oldValueTable, $i, $key, var$8, var$9, var$10;
    a: {
        $oldCapacity = $this.$keyTable1.data.length;
        $this.$threshold8 = $newSize * $this.$loadFactor2 | 0;
        var$3 = $newSize - 1 | 0;
        $this.$mask4 = var$3;
        $this.$shift = jl_Long_numberOfLeadingZeros(Long_fromInt(var$3));
        $oldKeyTable = $this.$keyTable1;
        $oldValueTable = $this.$valueTable2;
        $this.$keyTable1 = $rt_createArray(jl_Object, $newSize);
        $this.$valueTable2 = $rt_createLongArray($newSize);
        if ($this.$size10 > 0) {
            $i = 0;
            while (true) {
                if ($i >= $oldCapacity)
                    break a;
                $key = $oldKeyTable.data[$i];
                if ($key !== null) {
                    var$8 = $oldValueTable.data[$i];
                    var$9 = $this.$keyTable1;
                    $newSize = cbgu_ObjectLongMap_place($this, $key);
                    while (true) {
                        var$10 = var$9.data;
                        if (var$10[$newSize] === null)
                            break;
                        $newSize = ($newSize + 1 | 0) & $this.$mask4;
                    }
                    var$10[$newSize] = $key;
                    $this.$valueTable2.data[$newSize] = var$8;
                }
                $i = $i + 1 | 0;
            }
        }
    }
};
function cbgu_CharArray() {
    let a = this; jl_Object.call(a);
    a.$items2 = null;
    a.$size5 = 0;
    a.$ordered3 = 0;
}
let cbgu_CharArray_with = $array => {
    let var$2, var$3, var$4;
    var$2 = $array.data;
    var$3 = new cbgu_CharArray;
    var$4 = var$2.length;
    var$3.$ordered3 = 1;
    var$2 = $rt_createCharArray(var$4);
    var$3.$items2 = var$2;
    var$3.$size5 = var$4;
    jl_System_fastArraycopy($array, 0, var$2, 0, var$4);
    return var$3;
};
function cgttu_CaseInsensitiveIntMap() {
    let a = this; jl_Object.call(a);
    a.$size13 = 0;
    a.$keyTable6 = null;
    a.$valueTable5 = null;
    a.$loadFactor = 0.0;
    a.$threshold9 = 0;
    a.$shift6 = 0;
    a.$mask = 0;
    a.$hashSeed = 0;
}
let cgttu_CaseInsensitiveIntMap_GOOD_MULTIPLIERS = null,
cgttu_CaseInsensitiveIntMap__init_0 = ($this, $keys, $values) => {
    let $len, var$4, $key, var$6, $tableSize, var$8, $i, var$10, var$11, var$12, var$13, var$14, var$15, var$16;
    $keys = $keys.data;
    $values = $values.data;
    $this.$hashSeed = (-1640531527);
    $this.$loadFactor = 0.6000000238418579;
    $len = jl_Math_min($keys.length, $values.length);
    var$4 = $this.$loadFactor;
    if ($len < 0) {
        $key = new jl_IllegalArgumentException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_AbstractStringBuilder_append(var$6, $rt_s(126));
        jl_Throwable__init_($key, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$6, $len)));
        $rt_throw($key);
    }
    $tableSize = 1 << ( -jl_Integer_numberOfLeadingZeros(jl_Math_max(2, jl_Math_ceil($len / var$4) | 0) - 1 | 0) | 0);
    if ($tableSize <= 1073741824 && $tableSize >= 0) {
        $this.$threshold9 = $tableSize * $this.$loadFactor | 0;
        var$8 = $tableSize - 1 | 0;
        $this.$mask = var$8;
        $this.$shift6 = jl_Integer_numberOfLeadingZeros(var$8) + 32 | 0;
        $this.$keyTable6 = $rt_createArray(jl_String, $tableSize);
        $this.$valueTable5 = $rt_createIntArray($tableSize);
        $i = 0;
        while ($i < $len) {
            $key = $keys[$i];
            if ($key !== null) {
                var$8 = $values[$i];
                var$10 = cgttu_CaseInsensitiveIntMap_locateKey($this, $key);
                if (var$10 >= 0)
                    $this.$valueTable5.data[var$10] = var$8;
                else {
                    var$10 = var$10 ^ (-1);
                    var$11 = $this.$keyTable6.data;
                    var$11[var$10] = $key;
                    $this.$valueTable5.data[var$10] = var$8;
                    var$8 = $this.$size13 + 1 | 0;
                    $this.$size13 = var$8;
                    if (var$8 >= $this.$threshold9)
                        a: {
                            var$8 = var$11.length;
                            var$10 = var$8 << 1;
                            $this.$threshold9 = var$10 * $this.$loadFactor | 0;
                            $tableSize = var$10 - 1 | 0;
                            $this.$mask = $tableSize;
                            var$12 = jl_Integer_numberOfLeadingZeros($tableSize) + 32 | 0;
                            $this.$shift6 = var$12;
                            var$13 = $this.$hashSeed;
                            $this.$hashSeed = $rt_imul(var$13, cgttu_CaseInsensitiveIntMap_GOOD_MULTIPLIERS.data[(var$13 >>> 23 | 0) ^ var$12]) ^ $this.$mask;
                            var$11 = $this.$keyTable6;
                            var$14 = $this.$valueTable5;
                            $this.$keyTable6 = $rt_createArray(jl_String, var$10);
                            $this.$valueTable5 = $rt_createIntArray(var$10);
                            if ($this.$size13 > 0) {
                                var$12 = 0;
                                while (true) {
                                    if (var$12 >= var$8)
                                        break a;
                                    var$6 = var$11.data[var$12];
                                    if (var$6 !== null) {
                                        var$13 = var$14.data[var$12];
                                        var$15 = $this.$keyTable6;
                                        var$10 = cgttu_CaseInsensitiveIntMap_place($this, var$6);
                                        while (true) {
                                            var$16 = var$15.data;
                                            if (var$16[var$10] === null)
                                                break;
                                            var$10 = (var$10 + 1 | 0) & $this.$mask;
                                        }
                                        var$16[var$10] = var$6;
                                        $this.$valueTable5.data[var$10] = var$13;
                                    }
                                    var$12 = var$12 + 1 | 0;
                                }
                            }
                        }
                }
            }
            $i = $i + 1 | 0;
        }
        return;
    }
    $key = new jl_IllegalArgumentException;
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_AbstractStringBuilder_append(var$6, $rt_s(127));
    jl_Throwable__init_($key, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$6, $len)));
    $rt_throw($key);
},
cgttu_CaseInsensitiveIntMap__init_ = (var_0, var_1) => {
    let var_2 = new cgttu_CaseInsensitiveIntMap();
    cgttu_CaseInsensitiveIntMap__init_0(var_2, var_0, var_1);
    return var_2;
},
cgttu_CaseInsensitiveIntMap_place = ($this, $item) => {
    return cgttu_CaseInsensitiveIntMap_hashCodeIgnoreCase($item, $this.$hashSeed) & $this.$mask;
},
cgttu_CaseInsensitiveIntMap_locateKey = ($this, $key) => {
    let $other, $keyTable, $i;
    if ($key === null) {
        $other = new jl_IllegalArgumentException;
        jl_Throwable__init_($other, $rt_s(21));
        $rt_throw($other);
    }
    $keyTable = $this.$keyTable6;
    $i = cgttu_CaseInsensitiveIntMap_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if ($other === null)
            return $i ^ (-1);
        if (jl_String_equalsIgnoreCase($other, $key))
            break;
        $i = ($i + 1 | 0) & $this.$mask;
    }
    return $i;
},
cgttu_CaseInsensitiveIntMap_containsKey = ($this, $key) => {
    return cgttu_CaseInsensitiveIntMap_locateKey($this, $key) < 0 ? 0 : 1;
},
cgttu_CaseInsensitiveIntMap_hashCodeIgnoreCase = ($data, $see2) => {
    let $len, var$4, $b0, $b1, $b2, $b3, $p, var$10, $a, $b, var$13, var$14, var$15;
    if ($data === null)
        return 0;
    $data = $data;
    $len = $data.$nativeString.length;
    var$4 = cgttu_CaseInsensitiveIntMap_GOOD_MULTIPLIERS.data;
    $b0 = var$4[$see2 & 127];
    $b1 = var$4[(($see2 >>> 8 | 0) & 127) + 128 | 0];
    $b2 = var$4[(($see2 >>> 16 | 0) & 127) + 256 | 0];
    $b3 = var$4[(($see2 >>> 24 | 0) & 127) + 384 | 0];
    $p = 0;
    var$10 = $rt_compare($len, 2);
    if (var$10 <= 0) {
        if (!var$10) {
            $a = r_Category_caseUp(jl_String_charAt($data, 0));
            $b = r_Category_caseUp(jl_String_charAt($data, 1));
        } else if ($len != 1) {
            $b = 0;
            $a = $b;
        } else {
            $a = r_Category_caseUp(jl_String_charAt($data, 0));
            $b = 0;
        }
    } else {
        if ($len < 6)
            var$13 = $len;
        else {
            var$14 = $see2;
            var$15 = $see2;
            var$13 = $len;
            while (true) {
                var$10 = $rt_imul(r_Category_caseUp(jl_String_charAt($data, $p)) ^ $b1, r_Category_caseUp(jl_String_charAt($data, $p + 1 | 0)) ^ var$14);
                var$14 = var$10 ^ (var$10 << 3 | (var$10 >>> 29 | 0)) ^ (var$10 << 24 | (var$10 >>> 8 | 0));
                $a = $rt_imul(r_Category_caseUp(jl_String_charAt($data, $p + 2 | 0)) ^ $b2, r_Category_caseUp(jl_String_charAt($data, $p + 3 | 0)) ^ var$15);
                var$15 = $a ^ ($a << 21 | ($a >>> 11 | 0)) ^ ($a << 15 | ($a >>> 19 | 0));
                $see2 = $rt_imul(r_Category_caseUp(jl_String_charAt($data, $p + 4 | 0)) ^ $b3, r_Category_caseUp(jl_String_charAt($data, $p + 5 | 0)) ^ $see2);
                $see2 = $see2 ^ ($see2 << 26 | ($see2 >>> 6 | 0)) ^ ($see2 << 7 | ($see2 >>> 25 | 0));
                $p = $p + 6 | 0;
                var$13 = var$13 + (-6) | 0;
                if (var$13 < 6)
                    break;
            }
            $see2 = var$14 ^ var$15 ^ $see2;
        }
        while (var$13 > 2) {
            $see2 = $rt_imul(r_Category_caseUp(jl_String_charAt($data, $p)) ^ $b1, r_Category_caseUp(jl_String_charAt($data, $p + 1 | 0)) ^ $see2);
            $see2 = $see2 ^ ($see2 << 3 | ($see2 >>> 29 | 0)) ^ ($see2 << 24 | ($see2 >>> 8 | 0));
            var$13 = var$13 + (-2) | 0;
            $p = $p + 2 | 0;
        }
        $a = r_Category_caseUp(jl_String_charAt($data, $len - 2 | 0));
        $b = r_Category_caseUp(jl_String_charAt($data, $len - 1 | 0));
    }
    var$10 = $rt_imul($a, $b2);
    $see2 = $b ^ ($see2 + $len | 0);
    $a = $see2 << 3 | ($see2 >>> 29 | 0);
    $see2 = ((var$10 << 24 | (var$10 >>> 8 | 0)) + $see2 | 0) ^ $b0;
    var$10 = $a ^ ($see2 + ($see2 << 7 | ($see2 >>> 25 | 0)) | 0);
    $b0 = $see2 << 14 | ($see2 >>> 18 | 0);
    $see2 = ((var$10 << 29 | (var$10 >>> 3 | 0)) + $see2 | 0) ^ $b1;
    $see2 = $b0 ^ ($see2 + ($see2 << 11 | ($see2 >>> 21 | 0)) | 0);
    return $see2 ^ ($see2 << 27 | ($see2 >>> 5 | 0)) ^ ($see2 << 9 | ($see2 >>> 23 | 0));
},
cgttu_CaseInsensitiveIntMap__clinit_ = () => {
    cgttu_CaseInsensitiveIntMap_GOOD_MULTIPLIERS = $rt_createIntArrayFromData([1115175, 1327191, 1768239, 2037587, 1266181, 1535045, 1980949, 2048109, 1961757, 1621321, 1959849, 1145161, 1825821, 1641015, 1353785, 1085113, 1698711, 1353399, 1782403, 2066703, 1377005, 1670577, 1713223, 2068825, 1871705, 1135449, 1455747, 1185649, 2082873, 1931309, 1093959, 1549441, 1335941, 1892093, 1594303, 2038049, 1894887, 1719543, 1928707, 1647721, 1525487, 1288207, 1068155, 1226059, 1205073, 1094517, 1365405, 1194551, 1438595,
    1262615, 1564683, 1297861, 1446939, 2089655, 1676183, 1608697, 1096193, 1335111, 1668937, 2053599, 1215401, 1601971, 1488351, 1328503, 1310427, 2008315, 1435513, 2007891, 1899397, 1795817, 1957209, 1348525, 1567729, 1069177, 1921481, 1359355, 1917357, 1803737, 1433971, 1664275, 2061097, 1531577, 1675529, 1633885, 1295087, 1277859, 1171003, 1473283, 1600431, 1524755, 1135911, 1399611, 1650207, 1204977, 1426455, 1490029, 1225057, 1490819, 2085551, 1461277, 2083277, 1770321, 1426397, 1680693, 1869777, 1728253,
    1545933, 2068477, 1399495, 1794467, 1484999, 1333647, 1844089, 1297129, 1511843, 1716305, 1181659, 1537049, 1402925, 1670749, 1995171, 2094839, 1917433, 1246389, 1945491, 1095827, 1920863, 1136411, 1337385, 1211875, 1964723, 1431291, 1361955, 1150517, 1179635, 1457287, 2026177, 1537241, 1544005, 1708885, 1454165, 1312429, 2065277, 1931153, 1253769, 1748833, 1727905, 1659705, 1837401, 1148245, 2052233, 1374637, 1551619, 1350433, 1419133, 1661327, 1284585, 1439001, 1552409, 1499087, 1980199, 1369877, 1966247,
    1911075, 1694299, 2005405, 1479373, 1140575, 1393233, 1974225, 1876195, 1068175, 1518319, 2076957, 1165357, 1402425, 1688903, 1250225, 1119377, 1777683, 1872225, 1524309, 1810077, 1273581, 1575861, 1427997, 1053105, 1920787, 1471857, 1361725, 1297939, 1617659, 1746445, 1094903, 1144737, 1880145, 1759549, 1175069, 1354479, 1404313, 1149593, 1919669, 1652847, 1730161, 1816089, 1485905, 1743689, 1312199, 2065047, 2075299, 1464977, 1674141, 2076301, 1708385, 1821793, 1214959, 1455515, 1353997, 1142559, 1905447,
    1661191, 1102341, 1442565, 1064185, 1987251, 1389031, 1581391, 1620549, 1189059, 1515543, 1501591, 1970601, 1619489, 1836053, 2080097, 1634867, 1964839, 1350817, 1405565, 2022651, 1276567, 1066767, 1654523, 1600777, 1922135, 2095417, 1708635, 2081465, 1965783, 1106291, 1936453, 1728291, 1126583, 1996327, 2095995, 1146875, 1894597, 1657105, 1865055, 2072581, 1751011, 1778279, 1435993, 1172871, 1286279, 1303295, 1961601, 2006097, 1529899, 1742975, 1249549, 1285431, 1304297, 1336691, 1379549, 1731875, 1520437,
    1382825, 1224497, 1162349, 1187979, 1435511, 1940827, 1095075, 1906371, 1930363, 1813255, 1117005, 1482647, 1939555, 1681559, 1143425, 1143213, 1899549, 1550499, 1975013, 1572641, 1818323, 1512343, 1316613, 1533177, 2086477, 1988447, 1754443, 1590565, 1473669, 1901671, 1344671, 1322317, 1984111, 1897971, 1227563, 1538669, 2061213, 1973435, 1117007, 1886871, 1735307, 2024059, 2035949, 1435879, 1208851, 2073469, 1727695, 1526509, 1297843, 1901189, 1445495, 1213341, 1692815, 1531211, 2022787, 1911017, 1690965,
    1615289, 1609951, 1157745, 2054969, 1449561, 1207155, 1702219, 2030341, 1626331, 1449137, 1517625, 1484807, 1498547, 1845747, 1247527, 1116467, 1919149, 1931039, 1438827, 1241129, 1904561, 2040323, 1689635, 1912963, 1366003, 1087503, 1242013, 1087291, 2091159, 1459909, 1489027, 1255235, 1820637, 1538649, 1201701, 1057113, 1674199, 1923369, 1235733, 1307921, 1180561, 1285355, 1953913, 1840293, 1678689, 1486117, 1609777, 1083745, 1238373, 1843145, 1463127, 1062605, 1884153, 1906295, 1122055, 1503499, 1269707,
    1063395, 1157937, 1632285, 1859101, 1434375, 2040997, 1260457, 1882669, 1617909, 1117295, 1658705, 2036873, 1096579, 1165279, 1617273, 1950733, 1584243, 1135313, 1613149, 1269225, 1697227, 1234769, 1079929, 1899627, 1541963, 1471413, 1833991, 1263251, 1887101, 1244173, 1082569, 1085845, 1558555, 1324763, 1144081, 1786797, 1351819, 1117815, 1672965, 1831081, 1421733, 1342569, 1156761, 1213359, 1649975, 1713549, 1997175, 1498623, 1795989, 1584551, 2076127, 1536143, 1101165, 1926201, 1649127, 1549247, 2068303,
    1236291, 1483823, 1691773, 1375329, 1064011, 1653617, 1381881, 2084895, 1747947, 1919803, 1457345, 2096573, 1453433, 2013709, 2087535, 1081605, 1175935, 1083031, 1060465, 1794447, 2096939, 1271479, 1692505, 1707883, 1544429, 1886503, 1992935, 1160923, 1435935, 1399629, 1274119, 1172601, 1987385, 1155373, 1241301, 1165625, 2066337, 1896119, 1945529, 1678919, 1451891, 1281673, 1848925, 1448403, 1922751, 1312217, 1915351, 1597269, 1580041, 1098717, 1103843, 1086615, 1619199, 1125561, 2079713, 1902073, 1635697,
    1169751, 1889993, 1905371, 2005039, 2042771, 1437575, 1614557]);
};
function cbgu_IntFloatMap() {
    let a = this; jl_Object.call(a);
    a.$size7 = 0;
    a.$keyTable2 = null;
    a.$valueTable1 = null;
    a.$zeroValue0 = 0.0;
    a.$hasZeroValue2 = 0;
    a.$loadFactor4 = 0.0;
    a.$threshold0 = 0;
    a.$shift3 = 0;
    a.$mask7 = 0;
}
let cbgu_IntFloatMap__init_1 = $this => {
    cbgu_IntFloatMap__init_0($this, 51, 0.800000011920929);
},
cbgu_IntFloatMap__init_ = () => {
    let var_0 = new cbgu_IntFloatMap();
    cbgu_IntFloatMap__init_1(var_0);
    return var_0;
},
cbgu_IntFloatMap__init_2 = ($this, $initialCapacity) => {
    cbgu_IntFloatMap__init_0($this, $initialCapacity, 0.800000011920929);
},
cbgu_IntFloatMap__init_3 = var_0 => {
    let var_1 = new cbgu_IntFloatMap();
    cbgu_IntFloatMap__init_2(var_1, var_0);
    return var_1;
},
cbgu_IntFloatMap__init_0 = ($this, $initialCapacity, $loadFactor) => {
    let $tableSize, var$4, var$5;
    if ($loadFactor > 0.0 && $loadFactor < 1.0) {
        $this.$loadFactor4 = $loadFactor;
        $tableSize = cbgu_ObjectSet_tableSize($initialCapacity, $loadFactor);
        $this.$threshold0 = $tableSize * $loadFactor | 0;
        $initialCapacity = $tableSize - 1 | 0;
        $this.$mask7 = $initialCapacity;
        $this.$shift3 = jl_Long_numberOfLeadingZeros(Long_fromInt($initialCapacity));
        $this.$keyTable2 = $rt_createIntArray($tableSize);
        $this.$valueTable1 = $rt_createFloatArray($tableSize);
        return;
    }
    var$4 = new jl_IllegalArgumentException;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append(var$5, $rt_s(20));
    jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3(var$5, $loadFactor)));
    $rt_throw(var$4);
},
cbgu_IntFloatMap__init_4 = (var_0, var_1) => {
    let var_2 = new cbgu_IntFloatMap();
    cbgu_IntFloatMap__init_0(var_2, var_0, var_1);
    return var_2;
},
cbgu_IntFloatMap_place = ($this, $item) => {
    return Long_lo(Long_shru(Long_mul(Long_fromInt($item), Long_create(2135587861, 2654435769)), $this.$shift3));
},
cbgu_IntFloatMap_locateKey = ($this, $key) => {
    let $keyTable, $i, $other;
    $keyTable = $this.$keyTable2;
    $i = cbgu_IntFloatMap_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if (!$other)
            return  -($i + 1 | 0) | 0;
        if ($other == $key)
            break;
        $i = ($i + 1 | 0) & $this.$mask7;
    }
    return $i;
},
cbgu_IntFloatMap_put = ($this, $key, $value) => {
    let $i, var$4;
    if (!$key) {
        $this.$zeroValue0 = $value;
        if (!$this.$hasZeroValue2) {
            $this.$hasZeroValue2 = 1;
            $this.$size7 = $this.$size7 + 1 | 0;
        }
        return;
    }
    $i = cbgu_IntFloatMap_locateKey($this, $key);
    if ($i >= 0) {
        $this.$valueTable1.data[$i] = $value;
        return;
    }
    $i =  -($i + 1 | 0) | 0;
    var$4 = $this.$keyTable2.data;
    var$4[$i] = $key;
    $this.$valueTable1.data[$i] = $value;
    $key = $this.$size7 + 1 | 0;
    $this.$size7 = $key;
    if ($key >= $this.$threshold0)
        cbgu_IntFloatMap_resize($this, var$4.length << 1);
},
cbgu_IntFloatMap_get = ($this, $key, $defaultValue) => {
    let $i;
    if (!$key) {
        if ($this.$hasZeroValue2)
            $defaultValue = $this.$zeroValue0;
        return $defaultValue;
    }
    $i = cbgu_IntFloatMap_locateKey($this, $key);
    if ($i >= 0)
        $defaultValue = $this.$valueTable1.data[$i];
    return $defaultValue;
},
cbgu_IntFloatMap_getAndIncrement = ($this, $key, $defaultValue, $increment) => {
    let $oldValue, $i, var$6, var$7;
    if (!$key) {
        if ($this.$hasZeroValue2) {
            $oldValue = $this.$zeroValue0;
            $this.$zeroValue0 = $oldValue + $increment;
            return $oldValue;
        }
        $this.$hasZeroValue2 = 1;
        $this.$zeroValue0 = $defaultValue + $increment;
        $this.$size7 = $this.$size7 + 1 | 0;
        return $defaultValue;
    }
    $i = cbgu_IntFloatMap_locateKey($this, $key);
    if ($i >= 0) {
        var$6 = $this.$valueTable1.data;
        $oldValue = var$6[$i];
        var$6[$i] = var$6[$i] + $increment;
        return $oldValue;
    }
    $i =  -($i + 1 | 0) | 0;
    var$7 = $this.$keyTable2.data;
    var$7[$i] = $key;
    $this.$valueTable1.data[$i] = $defaultValue + $increment;
    $key = $this.$size7 + 1 | 0;
    $this.$size7 = $key;
    if ($key >= $this.$threshold0)
        cbgu_IntFloatMap_resize($this, var$7.length << 1);
    return $defaultValue;
},
cbgu_IntFloatMap_resize = ($this, $newSize) => {
    let $oldCapacity, var$3, $oldKeyTable, $oldValueTable, $i, $key, var$8, var$9, var$10;
    a: {
        $oldCapacity = $this.$keyTable2.data.length;
        $this.$threshold0 = $newSize * $this.$loadFactor4 | 0;
        var$3 = $newSize - 1 | 0;
        $this.$mask7 = var$3;
        $this.$shift3 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$3));
        $oldKeyTable = $this.$keyTable2;
        $oldValueTable = $this.$valueTable1;
        $this.$keyTable2 = $rt_createIntArray($newSize);
        $this.$valueTable1 = $rt_createFloatArray($newSize);
        if ($this.$size7 > 0) {
            $i = 0;
            while (true) {
                if ($i >= $oldCapacity)
                    break a;
                $key = $oldKeyTable.data[$i];
                if ($key) {
                    var$8 = $oldValueTable.data[$i];
                    var$9 = $this.$keyTable2;
                    $newSize = cbgu_IntFloatMap_place($this, $key);
                    while (true) {
                        var$10 = var$9.data;
                        if (!var$10[$newSize])
                            break;
                        $newSize = ($newSize + 1 | 0) & $this.$mask7;
                    }
                    var$10[$newSize] = $key;
                    $this.$valueTable1.data[$newSize] = var$8;
                }
                $i = $i + 1 | 0;
            }
        }
    }
},
cgtt_Effect$EffectBuilder = $rt_classWithoutFields(0),
cgtt_TypingConfig$_clinit_$lambda$_5_0 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_0_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_EaseEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$distance13 = (-2.0);
    var$3.$extent0 = 1.0;
    var$3.$elastic1 = 0;
    var$3.$timePassedByGlyphIndex12 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distance13 = cgtt_Parser_stringToFloat(var$2[0], (-2.0));
    if (var$4 > 1)
        var$3.$extent0 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2) {
        var$1 = var$2[2];
        var$3.$elastic1 = cgtt_Effect_paramAsBoolean(var$3, var$1);
    }
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_1 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_1_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_HangEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$distance7 = 1.0;
    var$3.$extent3 = 1.0;
    var$3.$timePassedByGlyphIndex7 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distance7 = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$extent3 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_2 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_2_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_JumpEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$jumpHeight = 1.0;
    var$3.$frequency7 = 1.0;
    var$3.$speed3 = 1.0;
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$jumpHeight = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$frequency7 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$speed3 = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    if (var$4 > 3)
        var$3.$duration = cgtt_Parser_stringToFloat(var$2[3], Infinity);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_3 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_3_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_ShakeEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$lastOffsets0 = cbgu_FloatArray__init_();
    var$3.$distance0 = 1.0;
    var$3.$speed1 = 1.0;
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distance0 = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$speed1 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$duration = cgtt_Parser_stringToFloat(var$2[2], Infinity);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_4 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_4_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_SickEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$distance12 = 1.0;
    var$3.$speed5 = 1.0;
    var$3.$indices0 = cbgu_IntArray__init_1();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distance12 = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$speed5 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$duration = cgtt_Parser_stringToFloat(var$2[2], Infinity);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_5 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_5_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_SlideEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$distance11 = 1.0;
    var$3.$extent2 = 1.0;
    var$3.$elastic0 = 0;
    var$3.$timePassedByGlyphIndex4 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distance11 = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$extent2 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2) {
        var$1 = var$2[2];
        var$3.$elastic0 = cgtt_Effect_paramAsBoolean(var$3, var$1);
    }
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_6 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_6_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_WaveEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$distance9 = 1.0;
    var$3.$frequency = 1.0;
    var$3.$speed2 = 1.0;
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distance9 = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$frequency = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$speed2 = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    if (var$4 > 3)
        var$3.$duration = cgtt_Parser_stringToFloat(var$2[3], Infinity);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_7 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_7_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_WindEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$noiseCursorX = 0.0;
    var$3.$noiseCursorY = 0.0;
    var$3.$distanceX = 1.0;
    var$3.$distanceY = 1.0;
    var$3.$spacing = 1.0;
    var$3.$intensity = 1.0;
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distanceX = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$distanceY = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$spacing = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    if (var$4 > 3)
        var$3.$intensity = cgtt_Parser_stringToFloat(var$2[3], 1.0);
    if (var$4 > 4)
        var$3.$duration = cgtt_Parser_stringToFloat(var$2[4], Infinity);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_8 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_8_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_RainbowEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$distance4 = 1.0;
    var$3.$frequency0 = 1.0;
    var$3.$saturation = 1.0;
    var$3.$lightness0 = 0.5;
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distance4 = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$frequency0 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$saturation = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    if (var$4 > 3)
        var$3.$lightness0 = cgtt_Parser_stringToFloat(var$2[3], 0.5);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_9 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_9_produce = (var$0, var$1, var$2) => {
    let var$3, var$4, var$5, var$6;
    var$2 = var$2.data;
    var$3 = new cgtte_GradientEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$color12 = (-1);
    var$3.$color22 = (-2004317953);
    var$3.$distance6 = 1.0;
    var$3.$frequency4 = 1.0;
    var$4 = var$2.length;
    if (var$4 > 0) {
        var$1 = var$2[0];
        var$5 = cgtt_Effect_paramAsColor(var$3, var$1);
        if (var$5 != 256)
            var$3.$color12 = var$5;
    }
    if (var$4 > 1) {
        var$6 = var$2[1];
        var$5 = cgtt_Effect_paramAsColor(var$3, var$6);
        if (var$5 != 256)
            var$3.$color22 = var$5;
    }
    if (var$4 > 2)
        var$3.$distance6 = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    if (var$4 > 3)
        var$3.$frequency4 = cgtt_Parser_stringToFloat(var$2[3], 1.0);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_10 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_10_produce = (var$0, var$1, var$2) => {
    let var$3, var$4, var$5, var$6;
    var$2 = var$2.data;
    var$3 = new cgtte_FadeEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$color11 = 256;
    var$3.$color21 = 256;
    var$3.$alpha10 = 0.0;
    var$3.$alpha20 = 1.0;
    var$3.$fadeDuration = 1.0;
    var$3.$timePassedByGlyphIndex0 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0) {
        var$1 = var$2[0];
        var$5 = cgtt_Effect_paramAsColor(var$3, var$1);
        var$3.$color11 = var$5;
        if (var$5 == 256)
            var$3.$alpha10 = cgtt_Parser_stringToFloat(var$2[0], 0.0);
    }
    if (var$4 > 1) {
        var$1 = var$2[1];
        var$6 = cgtt_Effect_paramAsColor(var$3, var$1);
        var$3.$color21 = var$6;
        if (var$6 == 256)
            var$3.$alpha20 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    }
    if (var$4 > 2)
        var$3.$fadeDuration = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_11 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_11_produce = (var$0, var$1, var$2) => {
    let var$3, var$4, var$5;
    var$2 = var$2.data;
    var$3 = new cgtte_BlinkEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$color10 = 256;
    var$3.$color20 = 256;
    var$3.$alpha1 = 1.0;
    var$3.$alpha2 = 0.0;
    var$3.$frequency1 = 1.0;
    var$3.$threshold = 0.5;
    var$4 = var$2.length;
    if (var$4 > 0) {
        var$1 = var$2[0];
        var$5 = cgtt_Effect_paramAsColor(var$3, var$1);
        var$3.$color10 = var$5;
        if (var$5 == 256)
            var$3.$alpha1 = cgtt_Parser_stringToFloat(var$2[0], 0.0);
    }
    if (var$4 > 1) {
        var$1 = var$2[1];
        var$5 = cgtt_Effect_paramAsColor(var$3, var$1);
        var$3.$color20 = var$5;
        if (var$5 == 256)
            var$3.$alpha2 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    }
    if (var$4 > 2)
        var$3.$frequency1 = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    if (var$4 > 3)
        var$3.$threshold = cgtt_Parser_stringToFloat(var$2[3], 0.5);
    var$3.$threshold = jl_Math_min0(jl_Math_max0(var$3.$threshold, 0.0), 1.0);
    var$3.$alpha1 = jl_Math_min0(jl_Math_max0(var$3.$alpha1, 0.0), 1.0);
    var$3.$alpha2 = jl_Math_min0(jl_Math_max0(var$3.$alpha2, 0.0), 1.0);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_12 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_12_produce = (var$0, var$1, var$2) => {
    let var$3, var$4, var$5, var$6;
    var$2 = var$2.data;
    var$3 = new cgtte_JoltEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$lastOffsets = cbgu_FloatArray__init_();
    var$3.$shakeDistance = 1.0;
    var$3.$shakeSpeed = 1.0;
    var$3.$likelihood = 0.05000000074505806;
    var$3.$baseColor0 = 256;
    var$3.$joltColor = (-30465);
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$shakeDistance = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$shakeSpeed = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$duration = cgtt_Parser_stringToFloat(var$2[2], Infinity);
    if (var$4 > 3)
        var$3.$likelihood = cgtt_Parser_stringToFloat(var$2[3], 0.05000000074505806);
    if (var$4 > 4) {
        var$5 = var$2[4];
        var$3.$baseColor0 = cgtt_Effect_paramAsColor(var$3, var$5);
    }
    if (var$4 > 5) {
        var$1 = var$2[5];
        var$6 = cgtt_Effect_paramAsColor(var$3, var$1);
        if (var$6 != 256)
            var$3.$joltColor = var$6;
    }
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_13 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_13_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_SpiralEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$distance1 = 1.0;
    var$3.$speed0 = 1.0;
    var$3.$rotations1 = 1.0;
    var$3.$timePassedByGlyphIndex6 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distance1 = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$speed0 = 1.0 / cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$rotations1 = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_14 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_14_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_SpinEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$extent1 = 1.0;
    var$3.$rotations0 = 1.0;
    var$3.$elastic3 = 0;
    var$3.$timePassedByGlyphIndex5 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$extent1 = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$rotations0 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2) {
        var$1 = var$2[2];
        var$3.$elastic3 = cgtt_Effect_paramAsBoolean(var$3, var$1);
    }
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_15 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_15_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_CrowdEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$rotationAmount = 15.0;
    var$3.$speed7 = 1.0;
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$rotationAmount = cgtt_Parser_stringToFloat(var$2[0], 15.0);
    if (var$4 > 1)
        var$3.$speed7 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$duration = cgtt_Parser_stringToFloat(var$2[2], Infinity);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_16 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_16_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_ShrinkEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$expansion0 = 1.0;
    var$3.$extent = 1.0;
    var$3.$elastic = 0;
    var$3.$timePassedByGlyphIndex2 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$expansion0 = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$extent = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2) {
        var$1 = var$2[2];
        var$3.$elastic = cgtt_Effect_paramAsBoolean(var$3, var$1);
    }
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_17 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_17_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_EmergeEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$speed4 = 4.0;
    var$3.$elastic2 = 0;
    var$3.$timePassedByGlyphIndex = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$speed4 = 1.0 / cgtt_Parser_stringToFloat(var$2[0], 0.25);
    if (var$4 > 1) {
        var$1 = var$2[1];
        var$3.$elastic2 = cgtt_Effect_paramAsBoolean(var$3, var$1);
    }
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_18 = $rt_classWithoutFields();
let cgtt_TypingConfig$_clinit_$lambda$_5_18_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_HeartbeatEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$expansion = 1.0;
    var$3.$frequency6 = 1.0;
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$expansion = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$frequency6 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$duration = cgtt_Parser_stringToFloat(var$2[2], Infinity);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_19 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_19_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_CarouselEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$frequency2 = 1.0;
    var$3.$timePassedByGlyphIndex3 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$frequency2 = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$duration = cgtt_Parser_stringToFloat(var$2[1], Infinity);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_20 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_20_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_SquashEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$speed6 = 4.0;
    var$3.$elastic5 = 0;
    var$3.$timePassedByGlyphIndex9 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$speed6 = 1.0 / cgtt_Parser_stringToFloat(var$2[0], 0.25);
    if (var$4 > 1) {
        var$1 = var$2[1];
        var$3.$elastic5 = cgtt_Effect_paramAsBoolean(var$3, var$1);
    }
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_21 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_21_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_ScaleEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$sizeX = 1.0;
    var$3.$sizeY = 2.0;
    var$4 = var$2.length;
    if (var$4 > 0) {
        var$3.$sizeX = cgtt_Parser_stringToFloat(var$2[0], 100.0) * 0.009999999776482582;
        var$3.$sizeY = cgtt_Parser_stringToFloat(var$2[0], 100.0) * 0.009999999776482582;
    }
    if (var$4 > 1)
        var$3.$sizeY = cgtt_Parser_stringToFloat(var$2[1], 100.0) * 0.009999999776482582;
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_22 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_22_produce = (var$0, var$1, var$2) => {
    let var$3;
    var$2 = var$2.data;
    var$3 = new cgtte_RotateEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$rotation1 = 90.0;
    if (var$2.length > 0)
        var$3.$rotation1 = cgtt_Parser_stringToFloat(var$2[0], 90.0);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_23 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_23_produce = (var$0, var$1, var$2) => {
    let var$3, var$4, var$5;
    var$2 = var$2.data;
    var$3 = new cgtte_HighlightEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$baseColor = (-2);
    var$3.$distance3 = 1.0;
    var$3.$frequency3 = 1.0;
    var$3.$saturation1 = 1.0;
    var$3.$lightness = 0.5;
    var$3.$all0 = 0;
    var$1.$trackingInput = 1;
    var$4 = var$2.length;
    if (var$4 > 0) {
        var$1 = var$2[0];
        var$5 = cgtt_Effect_paramAsColor(var$3, var$1);
        var$3.$baseColor = var$5;
        if (var$5 == 256)
            var$3.$baseColor = (-2);
    }
    if (var$4 > 1)
        var$3.$distance3 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$frequency3 = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    if (var$4 > 3)
        var$3.$saturation1 = cgtt_Parser_stringToFloat(var$2[3], 1.0);
    if (var$4 > 4)
        var$3.$lightness = cgtt_Parser_stringToFloat(var$2[4], 0.5);
    if (var$4 > 5) {
        var$1 = var$2[5];
        var$3.$all0 = cgtt_Effect_paramAsBoolean(var$3, var$1);
    }
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_24 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_24_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$3 = var$2.data;
    var$4 = new cgtte_LinkEffect;
    cgtt_Effect__init_(var$4, var$1);
    var$4.$link0 = $rt_s(738);
    var$1.$trackingInput = 1;
    if (var$3.length > 0)
        var$4.$link0 = cgttu_StringUtils_join($rt_s(542), var$2);
    return var$4;
},
cgtt_TypingConfig$_clinit_$lambda$_5_25 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_25_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$3 = var$2.data;
    var$4 = new cgtte_TriggerEffect;
    cgtt_Effect__init_(var$4, var$1);
    var$4.$event0 = $rt_s(739);
    var$1.$trackingInput = 1;
    if (var$3.length > 0)
        var$4.$event0 = cgttu_StringUtils_join($rt_s(542), var$2);
    return var$4;
},
cgtt_TypingConfig$_clinit_$lambda$_5_26 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_26_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_AttentionEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$spread = 5.0;
    var$3.$stretchY = 2.0;
    var$1.$trackingInput = 1;
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$spread = cgtt_Parser_stringToFloat(var$2[0], 100.0) * 0.009999999776482582;
    if (var$4 > 1)
        var$3.$stretchY = cgtt_Parser_stringToFloat(var$2[1], 100.0) * 0.009999999776482582;
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_27 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_27_produce = (var$0, var$1, var$2) => {
    return cgtte_StylistEffect__init_0(var$1, var$2);
},
cgtt_TypingConfig$_clinit_$lambda$_5_28 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_28_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_CannonEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$initialStretch = 1.0;
    var$3.$extent4 = 1.0;
    var$3.$height5 = 1.0;
    var$3.$shakeDuration0 = 2.0;
    var$3.$shakePower = 1.0;
    var$3.$lastOffsets1 = cbgu_FloatArray__init_();
    var$3.$timePassedByGlyphIndex11 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$initialStretch = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$extent4 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$height5 = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    if (var$4 > 3)
        var$3.$shakeDuration0 = cgtt_Parser_stringToFloat(var$2[3], 2.0);
    if (var$4 > 4)
        var$3.$shakePower = cgtt_Parser_stringToFloat(var$2[4], 1.0);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_29 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_29_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_OceanEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$distance5 = 1.0;
    var$3.$frequency5 = 0.25;
    var$3.$hue = 0.5;
    var$3.$saturation0 = 0.800000011920929;
    var$3.$lightness1 = 0.25;
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distance5 = cgtt_Parser_stringToFloat(var$2[0], 1.0);
    if (var$4 > 1)
        var$3.$frequency5 = cgtt_Parser_stringToFloat(var$2[1], 0.25);
    if (var$4 > 2)
        var$3.$hue = cgtt_Parser_stringToFloat(var$2[2], 0.5);
    if (var$4 > 3)
        var$3.$saturation0 = cgtt_Parser_stringToFloat(var$2[3], 0.800000011920929);
    if (var$4 > 4)
        var$3.$lightness1 = cgtt_Parser_stringToFloat(var$2[4], 0.25);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_30 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_30_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_SputterEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$widen = 0.25;
    var$3.$heighten = 0.25;
    var$3.$speed = 1.0;
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$widen = cgtt_Parser_stringToFloat(var$2[0], 0.25);
    if (var$4 > 1)
        var$3.$heighten = cgtt_Parser_stringToFloat(var$2[1], 0.25);
    if (var$4 > 2)
        var$3.$speed = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    if (var$4 > 3)
        var$3.$duration = cgtt_Parser_stringToFloat(var$2[3], Infinity);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_31 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_31_produce = (var$0, var$1, var$2) => {
    let var$3;
    var$3 = new cgtte_InstantEffect;
    cgtt_Effect__init_(var$3, var$1);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_32 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_32_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_SlamEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$hangTime = 0.25;
    var$3.$extent7 = 1.0;
    var$3.$height4 = 1.0;
    var$3.$shakeDuration = 2.0;
    var$3.$shakePower0 = 1.0;
    var$3.$lastOffsets2 = cbgu_FloatArray__init_();
    var$3.$timePassedByGlyphIndex10 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$hangTime = cgtt_Parser_stringToFloat(var$2[0], 0.25);
    if (var$4 > 1)
        var$3.$extent7 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2)
        var$3.$height4 = cgtt_Parser_stringToFloat(var$2[2], 1.0);
    if (var$4 > 3)
        var$3.$shakeDuration = cgtt_Parser_stringToFloat(var$2[3], 2.0);
    if (var$4 > 4)
        var$3.$shakePower0 = cgtt_Parser_stringToFloat(var$2[4], 1.0);
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_33 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_33_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_MeetEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$distance2 = 2.0;
    var$3.$extent5 = 1.0;
    var$3.$elastic6 = 0;
    var$3.$inside = 0;
    var$3.$timePassedByGlyphIndex1 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distance2 = cgtt_Parser_stringToFloat(var$2[0], 2.0);
    if (var$4 > 1)
        var$3.$extent5 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2) {
        var$1 = var$2[2];
        var$3.$elastic6 = cgtt_Effect_paramAsBoolean(var$3, var$1);
    }
    if (var$4 > 3) {
        var$1 = var$2[3];
        var$3.$inside = cgtt_Effect_paramAsBoolean(var$3, var$1);
    }
    return var$3;
},
cgtt_TypingConfig$_clinit_$lambda$_5_34 = $rt_classWithoutFields(),
cgtt_TypingConfig$_clinit_$lambda$_5_34_produce = (var$0, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2.data;
    var$3 = new cgtte_ZipperEffect;
    cgtt_Effect__init_(var$3, var$1);
    var$3.$distance10 = 2.0;
    var$3.$extent6 = 1.0;
    var$3.$elastic4 = 0;
    var$3.$timePassedByGlyphIndex8 = cbgu_IntFloatMap__init_();
    var$4 = var$2.length;
    if (var$4 > 0)
        var$3.$distance10 = cgtt_Parser_stringToFloat(var$2[0], 2.0);
    if (var$4 > 1)
        var$3.$extent6 = cgtt_Parser_stringToFloat(var$2[1], 1.0);
    if (var$4 > 2) {
        var$1 = var$2[2];
        var$3.$elastic4 = cgtt_Effect_paramAsBoolean(var$3, var$1);
    }
    return var$3;
};
function cbg_Graphics$BufferFormat() {
    let a = this; jl_Object.call(a);
    a.$r1 = 0;
    a.$g0 = 0;
    a.$b0 = 0;
    a.$a1 = 0;
    a.$depth = 0;
    a.$stencil0 = 0;
    a.$samples = 0;
    a.$coverageSampling = 0;
}
function cbgm_Quaternion() {
    let a = this; jl_Object.call(a);
    a.$x10 = 0.0;
    a.$y10 = 0.0;
    a.$z0 = 0.0;
    a.$w = 0.0;
}
let cbgm_Quaternion_tmp1 = null,
cbgm_Quaternion_tmp2 = null,
cbgm_Quaternion__init_1 = ($this, $x, $y, $z, $w) => {
    cbgm_Quaternion_set($this, $x, $y, $z, $w);
},
cbgm_Quaternion__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new cbgm_Quaternion();
    cbgm_Quaternion__init_1(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
cbgm_Quaternion__init_2 = $this => {
    cbgm_Quaternion_set($this, 0.0, 0.0, 0.0, 1.0);
},
cbgm_Quaternion__init_ = () => {
    let var_0 = new cbgm_Quaternion();
    cbgm_Quaternion__init_2(var_0);
    return var_0;
},
cbgm_Quaternion_set = ($this, $x, $y, $z, $w) => {
    $this.$x10 = $x;
    $this.$y10 = $y;
    $this.$z0 = $z;
    $this.$w = $w;
    return $this;
},
cbgm_Quaternion__clinit_ = () => {
    cbgm_Quaternion_tmp1 = cbgm_Quaternion__init_0(0.0, 0.0, 0.0, 0.0);
    cbgm_Quaternion_tmp2 = cbgm_Quaternion__init_0(0.0, 0.0, 0.0, 0.0);
};
function cbgm_Vector3() {
    let a = this; jl_Object.call(a);
    a.$x8 = 0.0;
    a.$y8 = 0.0;
    a.$z = 0.0;
}
let cbgm_Vector3_X = null,
cbgm_Vector3_Y = null,
cbgm_Vector3_Z = null,
cbgm_Vector3_Zero = null,
cbgm_Vector3_tmpMat = null,
cbgm_Vector3_$callClinit = () => {
    cbgm_Vector3_$callClinit = $rt_eraseClinit(cbgm_Vector3);
    cbgm_Vector3__clinit_();
},
cbgm_Vector3__init_2 = $this => {
    cbgm_Vector3_$callClinit();
},
cbgm_Vector3__init_ = () => {
    let var_0 = new cbgm_Vector3();
    cbgm_Vector3__init_2(var_0);
    return var_0;
},
cbgm_Vector3__init_1 = ($this, $x, $y, $z) => {
    cbgm_Vector3_$callClinit();
    $this.$x8 = $x;
    $this.$y8 = $y;
    $this.$z = $z;
},
cbgm_Vector3__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new cbgm_Vector3();
    cbgm_Vector3__init_1(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgm_Vector3__clinit_ = () => {
    cbgm_Vector3_X = cbgm_Vector3__init_0(1.0, 0.0, 0.0);
    cbgm_Vector3_Y = cbgm_Vector3__init_0(0.0, 1.0, 0.0);
    cbgm_Vector3_Z = cbgm_Vector3__init_0(0.0, 0.0, 1.0);
    cbgm_Vector3_Zero = cbgm_Vector3__init_0(0.0, 0.0, 0.0);
    cbgm_Vector3_tmpMat = cbgm_Matrix4__init_();
},
cbgg_Mesh$1 = $rt_classWithoutFields(),
cbgg_Mesh$1_$SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType = null,
cbgg_Mesh$1_$callClinit = () => {
    cbgg_Mesh$1_$callClinit = $rt_eraseClinit(cbgg_Mesh$1);
    cbgg_Mesh$1__clinit_();
},
cbgg_Mesh$1__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((cbgg_Mesh$VertexDataType_values()).data.length);
    var$2 = var$1.data;
    cbgg_Mesh$1_$SwitchMap$com$badlogic$gdx$graphics$Mesh$VertexDataType = var$1;
    var$2[cbgg_Mesh$VertexDataType_VertexBufferObject.$ordinal0] = 1;
    var$2[cbgg_Mesh$VertexDataType_VertexBufferObjectSubData.$ordinal0] = 2;
    var$2[cbgg_Mesh$VertexDataType_VertexBufferObjectWithVAO.$ordinal0] = 3;
    var$2[cbgg_Mesh$VertexDataType_VertexArray.$ordinal0] = 4;
},
cbggg_VertexData = $rt_classWithoutFields(0);
function cbggg_VertexBufferObject() {
    let a = this; jl_Object.call(a);
    a.$attributes0 = null;
    a.$byteBuffer2 = null;
    a.$buffer5 = null;
    a.$bufferHandle2 = 0;
    a.$isStatic0 = 0;
    a.$usage1 = 0;
    a.$isDirty3 = 0;
    a.$isBound0 = 0;
}
let cbggg_VertexBufferObject__init_ = ($this, $isStatic, $numVertices, $attributes) => {
    $this.$isDirty3 = 0;
    $this.$isBound0 = 0;
    $this.$isStatic0 = $isStatic;
    $this.$attributes0 = $attributes;
    $attributes = cbgu_BufferUtils_newUnsafeByteBuffer($rt_imul($attributes.$vertexSize, $numVertices));
    $this.$byteBuffer2 = $attributes;
    $attributes = jn_ByteBufferJsImpl_asFloatBuffer($attributes);
    $this.$buffer5 = $attributes;
    jn_Buffer_flip($attributes);
    $this.$bufferHandle2 = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
    $this.$usage1 = !$isStatic ? 35048 : 35044;
},
cbggg_VertexBufferObject__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new cbggg_VertexBufferObject();
    cbggg_VertexBufferObject__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
cbggg_VertexBufferObject_setVertices = ($this, $vertices, $offset, $count) => {
    let var$4, var$5;
    $this.$isDirty3 = 1;
    cbgu_BufferUtils_copy($vertices, $this.$buffer5, $count, $offset);
    jn_Buffer_position($this.$buffer5, 0);
    jn_Buffer_limit($this.$buffer5, $count);
    if ($this.$isBound0) {
        var$4 = cbg_Gdx_gl20;
        var$5 = $this.$buffer5;
        var$4.$glBufferData(34962, var$5.$limit0, var$5, $this.$usage1);
        $this.$isDirty3 = 0;
    }
},
cbggg_VertexBufferObject_bind = ($this, $shader, $locations) => {
    let $gl, $attribute, $numAttributes, $i, var$7, $location;
    $gl = cbg_Gdx_gl20;
    $gl.$glBindBuffer(34962, $this.$bufferHandle2);
    if ($this.$isDirty3) {
        $attribute = $this.$buffer5;
        $gl.$glBufferData(34962, $attribute.$limit0, $attribute, $this.$usage1);
        $this.$isDirty3 = 0;
    }
    a: {
        $numAttributes = cbgg_VertexAttributes_size($this.$attributes0);
        if ($locations !== null) {
            $i = 0;
            while (true) {
                if ($i >= $numAttributes)
                    break a;
                var$7 = $locations.data;
                $attribute = cbgg_VertexAttributes_get($this.$attributes0, $i);
                $location = var$7[$i];
                if ($location >= 0) {
                    cbggg_ShaderProgram_enableVertexAttribute($shader, $location);
                    cbggg_ShaderProgram_setVertexAttribute($shader, $location, $attribute.$numComponents, $attribute.$type4, $attribute.$normalized, $this.$attributes0.$vertexSize, $attribute.$offset0);
                }
                $i = $i + 1 | 0;
            }
        }
        $i = 0;
        while ($i < $numAttributes) {
            $attribute = cbgg_VertexAttributes_get($this.$attributes0, $i);
            $location = cbggg_ShaderProgram_getAttributeLocation($shader, $attribute.$alias);
            if ($location >= 0) {
                cbggg_ShaderProgram_enableVertexAttribute($shader, $location);
                cbggg_ShaderProgram_setVertexAttribute($shader, $location, $attribute.$numComponents, $attribute.$type4, $attribute.$normalized, $this.$attributes0.$vertexSize, $attribute.$offset0);
            }
            $i = $i + 1 | 0;
        }
    }
    $this.$isBound0 = 1;
},
cbggg_VertexBufferObject_unbind = ($this, $shader, $locations) => {
    let $gl, $numAttributes, $i, $location;
    a: {
        $gl = cbg_Gdx_gl20;
        $numAttributes = cbgg_VertexAttributes_size($this.$attributes0);
        if ($locations === null) {
            $i = 0;
            while ($i < $numAttributes) {
                cbggg_ShaderProgram_disableVertexAttribute0($shader, (cbgg_VertexAttributes_get($this.$attributes0, $i)).$alias);
                $i = $i + 1 | 0;
            }
        } else {
            $i = 0;
            while (true) {
                if ($i >= $numAttributes)
                    break a;
                $location = $locations.data[$i];
                if ($location >= 0)
                    cbggg_ShaderProgram_disableVertexAttribute($shader, $location);
                $i = $i + 1 | 0;
            }
        }
    }
    $gl.$glBindBuffer(34962, 0);
    $this.$isBound0 = 0;
},
cbggg_IndexData = $rt_classWithoutFields(0);
function cbggg_IndexBufferObject() {
    let a = this; jl_Object.call(a);
    a.$byteBuffer1 = null;
    a.$buffer0 = null;
    a.$bufferHandle = 0;
    a.$isDirect0 = 0;
    a.$isDirty = 0;
    a.$isBound = 0;
    a.$usage = 0;
}
let cbggg_IndexBufferObject__init_0 = ($this, $isStatic, $maxIndices) => {
    let var$3;
    $this.$isDirty = 1;
    $this.$isBound = 0;
    $this.$isDirect0 = 1;
    var$3 = cbgu_BufferUtils_newUnsafeByteBuffer($maxIndices * 2 | 0);
    $this.$byteBuffer1 = var$3;
    var$3 = jn_ByteBufferJsImpl_asShortBuffer(var$3);
    $this.$buffer0 = var$3;
    jn_Buffer_flip(var$3);
    $this.$bufferHandle = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
    $this.$usage = !$isStatic ? 35048 : 35044;
},
cbggg_IndexBufferObject__init_1 = (var_0, var_1) => {
    let var_2 = new cbggg_IndexBufferObject();
    cbggg_IndexBufferObject__init_0(var_2, var_0, var_1);
    return var_2;
},
cbggg_IndexBufferObject__init_ = ($this, $maxIndices) => {
    let var$2, var$3, var$4;
    $this.$isDirty = 1;
    $this.$isBound = 0;
    $this.$isDirect0 = 1;
    if (cgxgbt_TeaTool_isProd) {
        var$2 = jn_ByteBuffer_allocateDirect($maxIndices * 2 | 0);
        jn_ByteBuffer_order(var$2, jn_ByteOrder_nativeOrder());
        var$2 = jn_ByteBufferJsImpl_asShortBuffer(var$2);
    } else {
        var$3 = $rt_createShortArray($maxIndices);
        var$4 = var$3.data.length;
        var$2 = jn_ShortBufferOverTypedArray__init_(0, var$4, 0, var$3.data, var$3);
        var$2.$position0 = 0;
        var$2.$limit0 = 0 + var$4 | 0;
    }
    $this.$buffer0 = var$2;
    jn_Buffer_flip(var$2);
    $this.$bufferHandle = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
    $this.$usage = 35044;
},
cbggg_IndexBufferObject__init_2 = var_0 => {
    let var_1 = new cbggg_IndexBufferObject();
    cbggg_IndexBufferObject__init_(var_1, var_0);
    return var_1;
},
cbggg_IndexBufferObject_getNumIndices = $this => {
    return $this.$buffer0.$limit0;
},
cbggg_IndexBufferObject_getNumMaxIndices = $this => {
    return $this.$buffer0.$capacityImpl();
},
cbggg_IndexBufferObject_setIndices = ($this, $indices, $offset, $count) => {
    let var$4, var$5;
    $this.$isDirty = 1;
    jn_Buffer_clear($this.$buffer0);
    jn_ShortBuffer_put($this.$buffer0, $indices, $offset, $count);
    jn_Buffer_flip($this.$buffer0);
    if ($this.$isBound) {
        var$4 = cbg_Gdx_gl20;
        var$5 = $this.$buffer0;
        var$4.$glBufferData(34963, var$5.$limit0, var$5, $this.$usage);
        $this.$isDirty = 0;
    }
},
cbggg_IndexBufferObject_getBuffer = ($this, $forWriting) => {
    $this.$isDirty = $this.$isDirty | $forWriting;
    return $this.$buffer0;
},
cbggg_IndexBufferObject_bind = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$bufferHandle;
    if (!var$1) {
        var$2 = new cbgu_GdxRuntimeException;
        jl_Throwable__init_(var$2, $rt_s(740));
        $rt_throw(var$2);
    }
    cbg_Gdx_gl20.$glBindBuffer(34963, var$1);
    if ($this.$isDirty) {
        var$2 = cbg_Gdx_gl20;
        var$3 = $this.$buffer0;
        var$2.$glBufferData(34963, var$3.$limit0, var$3, $this.$usage);
        $this.$isDirty = 0;
    }
    $this.$isBound = 1;
},
cbggg_IndexBufferObject_unbind = $this => {
    cbg_Gdx_gl20.$glBindBuffer(34963, 0);
    $this.$isBound = 0;
};
function cbggg_VertexBufferObjectSubData() {
    let a = this; jl_Object.call(a);
    a.$attributes = null;
    a.$buffer1 = null;
    a.$byteBuffer = null;
    a.$bufferHandle1 = 0;
    a.$isDirect = 0;
    a.$isStatic = 0;
    a.$usage0 = 0;
    a.$isDirty1 = 0;
    a.$isBound1 = 0;
}
let cbggg_VertexBufferObjectSubData__init_ = ($this, $isStatic, $numVertices, $attributes) => {
    $this.$isDirty1 = 0;
    $this.$isBound1 = 0;
    $this.$isStatic = $isStatic;
    $this.$attributes = $attributes;
    $attributes = cbgu_BufferUtils_newByteBuffer($rt_imul($attributes.$vertexSize, $numVertices));
    $this.$byteBuffer = $attributes;
    $this.$isDirect = 1;
    $this.$usage0 = !$isStatic ? 35048 : 35044;
    $this.$buffer1 = jn_ByteBufferJsImpl_asFloatBuffer($attributes);
    $numVertices = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
    cbg_Gdx_gl20.$glBindBuffer(34962, $numVertices);
    cbg_Gdx_gl20.$glBufferData(34962, $this.$byteBuffer.$capacityImpl(), null, $this.$usage0);
    cbg_Gdx_gl20.$glBindBuffer(34962, 0);
    $this.$bufferHandle1 = $numVertices;
    jn_Buffer_flip($this.$buffer1);
    jn_Buffer_flip($this.$byteBuffer);
},
cbggg_VertexBufferObjectSubData__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new cbggg_VertexBufferObjectSubData();
    cbggg_VertexBufferObjectSubData__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
cbggg_VertexBufferObjectSubData_setVertices = ($this, $vertices, $offset, $count) => {
    let var$4, var$5;
    $this.$isDirty1 = 1;
    if ($this.$isDirect) {
        cbgu_BufferUtils_copy($vertices, $this.$byteBuffer, $count, $offset);
        jn_Buffer_position($this.$buffer1, 0);
        jn_Buffer_limit($this.$buffer1, $count);
    } else {
        jn_Buffer_clear($this.$buffer1);
        jn_FloatBuffer_put($this.$buffer1, $vertices, $offset, $count);
        jn_Buffer_flip($this.$buffer1);
        jn_Buffer_position($this.$byteBuffer, 0);
        var$4 = $this.$byteBuffer;
        $offset = $this.$buffer1.$limit0 << 2;
        jn_Buffer_limit(var$4, $offset);
    }
    if ($this.$isBound1) {
        var$4 = cbg_Gdx_gl20;
        var$5 = $this.$byteBuffer;
        var$4.$glBufferSubData(34962, 0, var$5.$limit0, var$5);
        $this.$isDirty1 = 0;
    }
},
cbggg_VertexBufferObjectSubData_bind = ($this, $shader, $locations) => {
    let $gl, $attribute, $i, $numAttributes, var$7, $location;
    $gl = cbg_Gdx_gl20;
    $gl.$glBindBuffer(34962, $this.$bufferHandle1);
    if ($this.$isDirty1) {
        $attribute = $this.$byteBuffer;
        $i = $this.$buffer1.$limit0 * 4 | 0;
        jn_Buffer_limit($attribute, $i);
        $attribute = $this.$byteBuffer;
        $gl.$glBufferData(34962, $attribute.$limit0, $attribute, $this.$usage0);
        $this.$isDirty1 = 0;
    }
    a: {
        $numAttributes = cbgg_VertexAttributes_size($this.$attributes);
        if ($locations !== null) {
            $i = 0;
            while (true) {
                if ($i >= $numAttributes)
                    break a;
                var$7 = $locations.data;
                $attribute = cbgg_VertexAttributes_get($this.$attributes, $i);
                $location = var$7[$i];
                if ($location >= 0) {
                    cbggg_ShaderProgram_enableVertexAttribute($shader, $location);
                    cbggg_ShaderProgram_setVertexAttribute($shader, $location, $attribute.$numComponents, $attribute.$type4, $attribute.$normalized, $this.$attributes.$vertexSize, $attribute.$offset0);
                }
                $i = $i + 1 | 0;
            }
        }
        $i = 0;
        while ($i < $numAttributes) {
            $attribute = cbgg_VertexAttributes_get($this.$attributes, $i);
            $location = cbggg_ShaderProgram_getAttributeLocation($shader, $attribute.$alias);
            if ($location >= 0) {
                cbggg_ShaderProgram_enableVertexAttribute($shader, $location);
                cbggg_ShaderProgram_setVertexAttribute($shader, $location, $attribute.$numComponents, $attribute.$type4, $attribute.$normalized, $this.$attributes.$vertexSize, $attribute.$offset0);
            }
            $i = $i + 1 | 0;
        }
    }
    $this.$isBound1 = 1;
},
cbggg_VertexBufferObjectSubData_unbind = ($this, $shader, $locations) => {
    let $gl, $numAttributes, $i, $location;
    a: {
        $gl = cbg_Gdx_gl20;
        $numAttributes = cbgg_VertexAttributes_size($this.$attributes);
        if ($locations === null) {
            $i = 0;
            while ($i < $numAttributes) {
                cbggg_ShaderProgram_disableVertexAttribute0($shader, (cbgg_VertexAttributes_get($this.$attributes, $i)).$alias);
                $i = $i + 1 | 0;
            }
        } else {
            $i = 0;
            while (true) {
                if ($i >= $numAttributes)
                    break a;
                $location = $locations.data[$i];
                if ($location >= 0)
                    cbggg_ShaderProgram_disableVertexAttribute($shader, $location);
                $i = $i + 1 | 0;
            }
        }
    }
    $gl.$glBindBuffer(34962, 0);
    $this.$isBound1 = 0;
};
function cbggg_IndexBufferObjectSubData() {
    let a = this; jl_Object.call(a);
    a.$buffer2 = null;
    a.$byteBuffer0 = null;
    a.$bufferHandle3 = 0;
    a.$isDirect1 = 0;
    a.$isDirty0 = 0;
    a.$isBound2 = 0;
    a.$usage3 = 0;
}
let cbggg_IndexBufferObjectSubData__init_0 = ($this, $isStatic, $maxIndices) => {
    let var$3;
    $this.$isDirty0 = 1;
    $this.$isBound2 = 0;
    var$3 = cbgu_BufferUtils_newByteBuffer($maxIndices * 2 | 0);
    $this.$byteBuffer0 = var$3;
    $this.$isDirect1 = 1;
    $this.$usage3 = !$isStatic ? 35048 : 35044;
    var$3 = jn_ByteBufferJsImpl_asShortBuffer(var$3);
    $this.$buffer2 = var$3;
    jn_Buffer_flip(var$3);
    jn_Buffer_flip($this.$byteBuffer0);
    $maxIndices = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
    cbg_Gdx_gl20.$glBindBuffer(34963, $maxIndices);
    cbg_Gdx_gl20.$glBufferData(34963, $this.$byteBuffer0.$capacityImpl(), null, $this.$usage3);
    cbg_Gdx_gl20.$glBindBuffer(34963, 0);
    $this.$bufferHandle3 = $maxIndices;
},
cbggg_IndexBufferObjectSubData__init_ = (var_0, var_1) => {
    let var_2 = new cbggg_IndexBufferObjectSubData();
    cbggg_IndexBufferObjectSubData__init_0(var_2, var_0, var_1);
    return var_2;
},
cbggg_IndexBufferObjectSubData_getNumIndices = $this => {
    return $this.$buffer2.$limit0;
},
cbggg_IndexBufferObjectSubData_getNumMaxIndices = $this => {
    return $this.$buffer2.$capacityImpl();
},
cbggg_IndexBufferObjectSubData_setIndices = ($this, $indices, $offset, $count) => {
    let var$4, var$5;
    $this.$isDirty0 = 1;
    jn_Buffer_clear($this.$buffer2);
    jn_ShortBuffer_put($this.$buffer2, $indices, $offset, $count);
    jn_Buffer_flip($this.$buffer2);
    jn_Buffer_position($this.$byteBuffer0, 0);
    var$4 = $this.$byteBuffer0;
    $offset = $count << 1;
    jn_Buffer_limit(var$4, $offset);
    if ($this.$isBound2) {
        var$4 = cbg_Gdx_gl20;
        var$5 = $this.$byteBuffer0;
        var$4.$glBufferSubData(34963, 0, var$5.$limit0, var$5);
        $this.$isDirty0 = 0;
    }
},
cbggg_IndexBufferObjectSubData_getBuffer = ($this, $forWriting) => {
    $this.$isDirty0 = $this.$isDirty0 | $forWriting;
    return $this.$buffer2;
},
cbggg_IndexBufferObjectSubData_bind = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$bufferHandle3;
    if (!var$1) {
        var$2 = new cbgu_GdxRuntimeException;
        jl_Throwable__init_(var$2, $rt_s(741));
        $rt_throw(var$2);
    }
    cbg_Gdx_gl20.$glBindBuffer(34963, var$1);
    if ($this.$isDirty0) {
        var$2 = $this.$byteBuffer0;
        var$3 = $this.$buffer2.$limit0 * 2 | 0;
        jn_Buffer_limit(var$2, var$3);
        var$2 = cbg_Gdx_gl20;
        var$4 = $this.$byteBuffer0;
        var$2.$glBufferSubData(34963, 0, var$4.$limit0, var$4);
        $this.$isDirty0 = 0;
    }
    $this.$isBound2 = 1;
},
cbggg_IndexBufferObjectSubData_unbind = $this => {
    cbg_Gdx_gl20.$glBindBuffer(34963, 0);
    $this.$isBound2 = 0;
};
function cbggg_VertexBufferObjectWithVAO() {
    let a = this; jl_Object.call(a);
    a.$attributes1 = null;
    a.$byteBuffer3 = null;
    a.$buffer3 = null;
    a.$bufferHandle0 = 0;
    a.$isStatic1 = 0;
    a.$usage2 = 0;
    a.$isDirty2 = 0;
    a.$isBound3 = 0;
    a.$vaoHandle = 0;
    a.$cachedLocations = null;
}
let cbggg_VertexBufferObjectWithVAO_tmpHandle = null,
cbggg_VertexBufferObjectWithVAO_$callClinit = () => {
    cbggg_VertexBufferObjectWithVAO_$callClinit = $rt_eraseClinit(cbggg_VertexBufferObjectWithVAO);
    cbggg_VertexBufferObjectWithVAO__clinit_();
},
cbggg_VertexBufferObjectWithVAO__init_ = ($this, $isStatic, $numVertices, $attributes) => {
    cbggg_VertexBufferObjectWithVAO_$callClinit();
    $this.$isDirty2 = 0;
    $this.$isBound3 = 0;
    $this.$vaoHandle = (-1);
    $this.$cachedLocations = cbgu_IntArray__init_1();
    $this.$isStatic1 = $isStatic;
    $this.$attributes1 = $attributes;
    $attributes = cbgu_BufferUtils_newUnsafeByteBuffer($rt_imul($attributes.$vertexSize, $numVertices));
    $this.$byteBuffer3 = $attributes;
    $attributes = jn_ByteBufferJsImpl_asFloatBuffer($attributes);
    $this.$buffer3 = $attributes;
    jn_Buffer_flip($attributes);
    $this.$bufferHandle0 = cgxgbt_TeaGL20_glGenBuffer(cbg_Gdx_gl20);
    $this.$usage2 = !$isStatic ? 35048 : 35044;
    jn_Buffer_clear(cbggg_VertexBufferObjectWithVAO_tmpHandle);
    cbg_Gdx_gl30.$glGenVertexArrays(1, cbggg_VertexBufferObjectWithVAO_tmpHandle);
    $this.$vaoHandle = jn_IntBufferImpl_get0(cbggg_VertexBufferObjectWithVAO_tmpHandle);
},
cbggg_VertexBufferObjectWithVAO__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new cbggg_VertexBufferObjectWithVAO();
    cbggg_VertexBufferObjectWithVAO__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
cbggg_VertexBufferObjectWithVAO_setVertices = ($this, $vertices, $offset, $count) => {
    let var$4, var$5;
    $this.$isDirty2 = 1;
    cbgu_BufferUtils_copy($vertices, $this.$buffer3, $count, $offset);
    jn_Buffer_position($this.$buffer3, 0);
    jn_Buffer_limit($this.$buffer3, $count);
    if ($this.$isBound3) {
        var$4 = cbg_Gdx_gl20;
        var$5 = $this.$buffer3;
        var$4.$glBufferData(34962, var$5.$limit0, var$5, $this.$usage2);
        $this.$isDirty2 = 0;
    }
},
cbggg_VertexBufferObjectWithVAO_bind = ($this, $shader, $locations) => {
    let $gl, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    $gl = cbg_Gdx_gl30;
    $gl.$glBindVertexArray($this.$vaoHandle);
    var$4 = !$this.$cachedLocations.$size2 ? 0 : 1;
    a: {
        var$5 = cbgg_VertexAttributes_size($this.$attributes1);
        if (var$4) {
            if ($locations === null) {
                var$6 = 0;
                while (var$4 && var$6 < var$5) {
                    var$4 = cbggg_ShaderProgram_getAttributeLocation($shader, (cbgg_VertexAttributes_get($this.$attributes1, var$6)).$alias) != cbgu_IntArray_get($this.$cachedLocations, var$6) ? 0 : 1;
                    var$6 = var$6 + 1 | 0;
                }
            } else {
                var$7 = $locations.data;
                var$4 = var$7.length != $this.$cachedLocations.$size2 ? 0 : 1;
                var$6 = 0;
                while (var$4) {
                    if (var$6 >= var$5)
                        break a;
                    var$4 = var$7[var$6] != cbgu_IntArray_get($this.$cachedLocations, var$6) ? 0 : 1;
                    var$6 = var$6 + 1 | 0;
                }
            }
        }
    }
    b: {
        if (!var$4) {
            cbg_Gdx_gl.$glBindBuffer(34962, $this.$bufferHandle0);
            if ($this.$cachedLocations.$size2) {
                var$6 = cbgg_VertexAttributes_size($this.$attributes1);
                var$8 = 0;
                while (var$8 < var$6) {
                    var$4 = cbgu_IntArray_get($this.$cachedLocations, var$8);
                    if (var$4 >= 0)
                        cbggg_ShaderProgram_disableVertexAttribute($shader, var$4);
                    var$8 = var$8 + 1 | 0;
                }
            }
            cbgu_IntArray_clear($this.$cachedLocations);
            var$9 = 0;
            while (true) {
                if (var$9 >= var$5)
                    break b;
                var$10 = cbgg_VertexAttributes_get($this.$attributes1, var$9);
                if ($locations !== null) {
                    var$7 = $locations.data;
                    cbgu_IntArray_add($this.$cachedLocations, var$7[var$9]);
                } else
                    cbgu_IntArray_add($this.$cachedLocations, cbggg_ShaderProgram_getAttributeLocation($shader, var$10.$alias));
                var$6 = cbgu_IntArray_get($this.$cachedLocations, var$9);
                if (var$6 >= 0) {
                    cbggg_ShaderProgram_enableVertexAttribute($shader, var$6);
                    cbggg_ShaderProgram_setVertexAttribute($shader, var$6, var$10.$numComponents, var$10.$type4, var$10.$normalized, $this.$attributes1.$vertexSize, var$10.$offset0);
                }
                var$9 = var$9 + 1 | 0;
            }
        }
    }
    if ($this.$isDirty2) {
        $gl.$glBindBuffer(34962, $this.$bufferHandle0);
        $shader = $this.$buffer3;
        jn_Buffer_limit($shader, $shader.$limit0);
        $shader = $this.$buffer3;
        $gl.$glBufferData(34962, $shader.$limit0, $shader, $this.$usage2);
        $this.$isDirty2 = 0;
    }
    $this.$isBound3 = 1;
},
cbggg_VertexBufferObjectWithVAO_unbind = ($this, $shader, $locations) => {
    cbg_Gdx_gl30.$glBindVertexArray(0);
    $this.$isBound3 = 0;
},
cbggg_VertexBufferObjectWithVAO__clinit_ = () => {
    cbggg_VertexBufferObjectWithVAO_tmpHandle = cbgu_BufferUtils_newIntBuffer(1);
},
cbggg_VertexArray = $rt_classWithoutFields(cbggg_VertexBufferObject),
cbggg_IndexArray = $rt_classWithoutFields(cbggg_IndexBufferObject);
function cbgu_ObjectIntMap() {
    let a = this; jl_Object.call(a);
    a.$size11 = 0;
    a.$keyTable = null;
    a.$valueTable4 = null;
    a.$loadFactor0 = 0.0;
    a.$threshold5 = 0;
    a.$shift5 = 0;
    a.$mask6 = 0;
    a.$keys10 = null;
    a.$keys20 = null;
}
let cbgu_ObjectIntMap__init_3 = $this => {
    cbgu_ObjectIntMap__init_0($this, 51, 0.800000011920929);
},
cbgu_ObjectIntMap__init_ = () => {
    let var_0 = new cbgu_ObjectIntMap();
    cbgu_ObjectIntMap__init_3(var_0);
    return var_0;
},
cbgu_ObjectIntMap__init_2 = ($this, $initialCapacity) => {
    cbgu_ObjectIntMap__init_0($this, $initialCapacity, 0.800000011920929);
},
cbgu_ObjectIntMap__init_1 = var_0 => {
    let var_1 = new cbgu_ObjectIntMap();
    cbgu_ObjectIntMap__init_2(var_1, var_0);
    return var_1;
},
cbgu_ObjectIntMap__init_0 = ($this, $initialCapacity, $loadFactor) => {
    let $tableSize, var$4, var$5;
    if ($loadFactor > 0.0 && $loadFactor < 1.0) {
        $this.$loadFactor0 = $loadFactor;
        $tableSize = cbgu_ObjectSet_tableSize($initialCapacity, $loadFactor);
        $this.$threshold5 = $tableSize * $loadFactor | 0;
        $initialCapacity = $tableSize - 1 | 0;
        $this.$mask6 = $initialCapacity;
        $this.$shift5 = jl_Long_numberOfLeadingZeros(Long_fromInt($initialCapacity));
        $this.$keyTable = $rt_createArray(jl_Object, $tableSize);
        $this.$valueTable4 = $rt_createIntArray($tableSize);
        return;
    }
    var$4 = new jl_IllegalArgumentException;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append(var$5, $rt_s(20));
    jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3(var$5, $loadFactor)));
    $rt_throw(var$4);
},
cbgu_ObjectIntMap__init_4 = (var_0, var_1) => {
    let var_2 = new cbgu_ObjectIntMap();
    cbgu_ObjectIntMap__init_0(var_2, var_0, var_1);
    return var_2;
},
cbgu_ObjectIntMap_place = ($this, $item) => {
    return Long_lo(Long_shru(Long_mul(Long_fromInt(jl_String_hashCode($item)), Long_create(2135587861, 2654435769)), $this.$shift5));
},
cbgu_ObjectIntMap_locateKey = ($this, $key) => {
    let $other, $keyTable, $i;
    if ($key === null) {
        $other = new jl_IllegalArgumentException;
        jl_Throwable__init_($other, $rt_s(21));
        $rt_throw($other);
    }
    $keyTable = $this.$keyTable;
    $i = cbgu_ObjectIntMap_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if ($other === null)
            return  -($i + 1 | 0) | 0;
        if (jl_String_equals($other, $key))
            break;
        $i = ($i + 1 | 0) & $this.$mask6;
    }
    return $i;
},
cbgu_ObjectIntMap_put = ($this, $key, $value) => {
    let $i, var$4;
    $i = cbgu_ObjectIntMap_locateKey($this, $key);
    if ($i >= 0) {
        $this.$valueTable4.data[$i] = $value;
        return;
    }
    $i =  -($i + 1 | 0) | 0;
    var$4 = $this.$keyTable.data;
    var$4[$i] = $key;
    $this.$valueTable4.data[$i] = $value;
    $value = $this.$size11 + 1 | 0;
    $this.$size11 = $value;
    if ($value >= $this.$threshold5)
        cbgu_ObjectIntMap_resize($this, var$4.length << 1);
},
cbgu_ObjectIntMap_putAll = ($this, $map) => {
    let $i, $keyTable, $valueTable, $n, $key;
    $i = $map.$size11;
    $i = cbgu_ObjectSet_tableSize($this.$size11 + $i | 0, $this.$loadFactor0);
    if ($this.$keyTable.data.length < $i)
        cbgu_ObjectIntMap_resize($this, $i);
    $keyTable = $map.$keyTable.data;
    $valueTable = $map.$valueTable4;
    $i = 0;
    $n = $keyTable.length;
    while ($i < $n) {
        $key = $keyTable[$i];
        if ($key !== null)
            cbgu_ObjectIntMap_put($this, $key, $valueTable.data[$i]);
        $i = $i + 1 | 0;
    }
},
cbgu_ObjectIntMap_get = ($this, $key, $defaultValue) => {
    let $i;
    $i = cbgu_ObjectIntMap_locateKey($this, $key);
    if ($i >= 0)
        $defaultValue = $this.$valueTable4.data[$i];
    return $defaultValue;
},
cbgu_ObjectIntMap_containsKey = ($this, $key) => {
    return cbgu_ObjectIntMap_locateKey($this, $key) < 0 ? 0 : 1;
},
cbgu_ObjectIntMap_resize = ($this, $newSize) => {
    let $oldCapacity, var$3, $oldKeyTable, $oldValueTable, $i, $key, var$8, var$9, var$10;
    a: {
        $oldCapacity = $this.$keyTable.data.length;
        $this.$threshold5 = $newSize * $this.$loadFactor0 | 0;
        var$3 = $newSize - 1 | 0;
        $this.$mask6 = var$3;
        $this.$shift5 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$3));
        $oldKeyTable = $this.$keyTable;
        $oldValueTable = $this.$valueTable4;
        $this.$keyTable = $rt_createArray(jl_Object, $newSize);
        $this.$valueTable4 = $rt_createIntArray($newSize);
        if ($this.$size11 > 0) {
            $i = 0;
            while (true) {
                if ($i >= $oldCapacity)
                    break a;
                $key = $oldKeyTable.data[$i];
                if ($key !== null) {
                    var$8 = $oldValueTable.data[$i];
                    var$9 = $this.$keyTable;
                    $newSize = cbgu_ObjectIntMap_place($this, $key);
                    while (true) {
                        var$10 = var$9.data;
                        if (var$10[$newSize] === null)
                            break;
                        $newSize = ($newSize + 1 | 0) & $this.$mask6;
                    }
                    var$10[$newSize] = $key;
                    $this.$valueTable4.data[$newSize] = var$8;
                }
                $i = $i + 1 | 0;
            }
        }
    }
},
cbgu_ObjectIntMap_keys = $this => {
    let var$1;
    if (cbgu_Collections_allocateIterators)
        return cbgu_ObjectIntMap$Keys__init_($this);
    if ($this.$keys10 === null) {
        $this.$keys10 = cbgu_ObjectIntMap$Keys__init_($this);
        $this.$keys20 = cbgu_ObjectIntMap$Keys__init_($this);
    }
    var$1 = $this.$keys10;
    if (!var$1.$valid0) {
        cbgu_ObjectIntMap$Keys_reset(var$1);
        var$1 = $this.$keys10;
        var$1.$valid0 = 1;
        $this.$keys20.$valid0 = 0;
        return var$1;
    }
    cbgu_ObjectIntMap$Keys_reset($this.$keys20);
    var$1 = $this.$keys20;
    var$1.$valid0 = 1;
    $this.$keys10.$valid0 = 0;
    return var$1;
},
cbgu_BufferUtils = $rt_classWithoutFields(),
cbgu_BufferUtils_unsafeBuffers = null,
cbgu_BufferUtils_allocatedUnsafe = 0,
cbgu_BufferUtils_copy = ($src, $dst, $numFloats, $offset) => {
    let $floatBuffer, var$6;
    $floatBuffer = null;
    var$6 = $dst instanceof jn_ByteBuffer;
    if (var$6)
        $floatBuffer = jn_ByteBufferJsImpl_asFloatBuffer($dst);
    else if ($dst instanceof jn_FloatBuffer)
        $floatBuffer = $dst;
    if ($floatBuffer === null) {
        $floatBuffer = new cbgu_GdxRuntimeException;
        jl_Throwable__init_($floatBuffer, $rt_s(742));
        $rt_throw($floatBuffer);
    }
    jn_Buffer_clear($floatBuffer);
    $dst.$position(0);
    jn_FloatBuffer_put($floatBuffer, $src, $offset, $numFloats);
    $dst.$position(0);
    if (!var$6)
        $dst.$limit($numFloats);
    else
        $dst.$limit($numFloats << 2);
},
cbgu_BufferUtils_newFloatBuffer = $numFloats => {
    let $buffer, var$3, var$4;
    if (cgxgbt_TeaTool_isProd) {
        $buffer = jn_ByteBuffer_allocateDirect($numFloats * 4 | 0);
        jn_ByteBuffer_order($buffer, jn_ByteOrder_nativeOrder());
        return jn_ByteBufferJsImpl_asFloatBuffer($buffer);
    }
    var$3 = $rt_createFloatArray($numFloats);
    var$4 = var$3.data.length;
    $buffer = jn_FloatBufferOverTypedArray__init_(0, var$4, 0, var$3.data, var$3);
    $buffer.$position0 = 0;
    $buffer.$limit0 = 0 + var$4 | 0;
    return $buffer;
},
cbgu_BufferUtils_newByteBuffer = $numBytes => {
    let $buffer;
    if (!cgxgbt_TeaTool_isProd)
        return jn_ByteBuffer_wrap($rt_createByteArray($numBytes));
    $buffer = jn_ByteBuffer_allocateDirect($numBytes);
    jn_ByteBuffer_order($buffer, jn_ByteOrder_nativeOrder());
    return $buffer;
},
cbgu_BufferUtils_newIntBuffer = $numInts => {
    let $buffer, var$3, var$4;
    if (cgxgbt_TeaTool_isProd) {
        $buffer = jn_ByteBuffer_allocateDirect($numInts * 4 | 0);
        jn_ByteBuffer_order($buffer, jn_ByteOrder_nativeOrder());
        return jn_ByteBufferJsImpl_asIntBuffer($buffer);
    }
    var$3 = $rt_createIntArray($numInts);
    var$4 = var$3.data.length;
    $buffer = jn_IntBufferOverTypedArray__init_(0, var$4, 0, var$3.data, var$3);
    $buffer.$position0 = 0;
    $buffer.$limit0 = 0 + var$4 | 0;
    return $buffer;
},
cbgu_BufferUtils_newUnsafeByteBuffer = $numBytes => {
    let $buffer;
    $buffer = cbgu_BufferUtils_newByteBuffer($numBytes);
    jn_ByteBuffer_order($buffer, jn_ByteOrder_nativeOrder());
    cbgu_BufferUtils_allocatedUnsafe = cbgu_BufferUtils_allocatedUnsafe + $numBytes | 0;
    cbgu_Array_add(cbgu_BufferUtils_unsafeBuffers, $buffer);
    return $buffer;
},
cbgu_BufferUtils__clinit_ = () => {
    cbgu_BufferUtils_unsafeBuffers = cbgu_Array__init_();
    cbgu_BufferUtils_allocatedUnsafe = 0;
},
cbgf_FileHandle = $rt_classWithoutFields(),
cbgf_FileHandle_estimateLength = $this => {
    let var$1, $length;
    var$1 = $this;
    $length = Long_lo((cgxgbtf_MemoryFileStorage_length(cgxgbt_TeaFiles_getFileDB(var$1.$teaFiles, var$1.$type1), var$1)));
    if (!$length)
        $length = 512;
    return $length;
},
r_Substitution = $rt_classWithoutFields(0);
function r_Replacer$DummySubstitution() {
    jl_Object.call(this);
    this.$str0 = null;
}
let r_Replacer$DummySubstitution_appendSubstitution = ($this, $match, $res) => {
    $match = $this.$str0;
    if ($match !== null)
        r_Replacer$StringBuilderBuffer_append($res, $match);
};
function r_PerlSubstitution() {
    jl_Object.call(this);
    this.$queueEntry = null;
}
let r_PerlSubstitution_refPtn = null,
r_PerlSubstitution_MODE_ID = 0,
r_PerlSubstitution_NAME_ID = 0,
r_PerlSubstitution_ESC_ID = 0,
r_PerlSubstitution_$callClinit = () => {
    r_PerlSubstitution_$callClinit = $rt_eraseClinit(r_PerlSubstitution);
    r_PerlSubstitution__clinit_();
},
r_PerlSubstitution__init_0 = ($this, $s) => {
    let $refMatcher;
    r_PerlSubstitution_$callClinit();
    $refMatcher = r_Matcher__init_(r_PerlSubstitution_refPtn);
    r_Matcher_setTarget($refMatcher, $s);
    $this.$queueEntry = r_PerlSubstitution_makeQueue($refMatcher);
},
r_PerlSubstitution__init_ = var_0 => {
    let var_1 = new r_PerlSubstitution();
    r_PerlSubstitution__init_0(var_1, var_0);
    return var_1;
},
r_PerlSubstitution_makeQueue = $refMatcher => {
    let $element, $modes, $md, var$5, $i, $c;
    r_PerlSubstitution_$callClinit();
    if (!r_Matcher_find($refMatcher)) {
        $element = new r_PerlSubstitution$PlainElement;
        $element.$str = r_Matcher_getString($refMatcher, $refMatcher.$offset, $refMatcher.$end2);
        return $element;
    }
    $modes = 0;
    if (!r_Matcher_isCaptured($refMatcher, r_PerlSubstitution_NAME_ID)) {
        $element = new r_PerlSubstitution$PlainElement;
        $md = r_Matcher_prefix($refMatcher);
        var$5 = r_Matcher_group($refMatcher, r_PerlSubstitution_ESC_ID);
        $element.$prefix0 = $md;
        $element.$str = var$5;
    } else {
        if (r_Matcher_isCaptured($refMatcher, r_PerlSubstitution_MODE_ID)) {
            $md = r_Matcher_group($refMatcher, r_PerlSubstitution_MODE_ID);
            $i = 0;
            while ($i < $md.$nativeString.length) {
                a: {
                    switch (jl_String_charAt($md, $i)) {
                        case 33:
                            $modes = $modes ^ 8;
                            break a;
                        case 47:
                            $modes = $modes ^ 2;
                            break a;
                        case 58:
                            $modes = $modes ^ 4;
                            break a;
                        case 64:
                            $modes = $modes ^ 1;
                            break a;
                        default:
                    }
                }
                $i = $i + 1 | 0;
            }
        }
        $c = r_PerlSubstitution_NAME_ID;
        $element = r_Matcher_bounds($refMatcher, $c);
        if ($element === null) {
            $refMatcher = new jl_IllegalStateException;
            $element = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($element);
            jl_AbstractStringBuilder_append($element, $rt_s(743));
            $element = jl_StringBuilder_append1($element, $c);
            jl_AbstractStringBuilder_append($element, $rt_s(744));
            jl_Throwable__init_($refMatcher, jl_AbstractStringBuilder_toString($element));
            $rt_throw($refMatcher);
        }
        $c = $element.$in0;
        if (0 > ($element.$out1 - $c | 0)) {
            $element = new jl_StringIndexOutOfBoundsException;
            $refMatcher = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($refMatcher);
            jl_AbstractStringBuilder_append($refMatcher, $rt_s(24));
            jl_Throwable__init_($element, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1($refMatcher, 0)));
            $rt_throw($element);
        }
        $c = $refMatcher.$data2.data[$c + 0 | 0];
        if ($c == 38)
            $element = r_PerlSubstitution$IntRefHandler__init_(r_Matcher_prefix($refMatcher), jl_Integer_valueOf(0), $modes);
        else if (jl_Character_isDigit($c))
            $element = r_PerlSubstitution$IntRefHandler__init_(r_Matcher_prefix($refMatcher), jl_Integer_valueOf(jl_Integer_parseInt(r_Matcher_group($refMatcher, r_PerlSubstitution_NAME_ID))), $modes);
        else {
            $element = new r_PerlSubstitution$StringRefHandler;
            $md = r_Matcher_prefix($refMatcher);
            var$5 = r_Matcher_group($refMatcher, r_PerlSubstitution_NAME_ID);
            $element.$prefix0 = $md;
            $element.$index12 = var$5;
            $element.$modes0 = $modes;
        }
    }
    r_Matcher_setTarget0($refMatcher, $refMatcher, (-2));
    $element.$next9 = r_PerlSubstitution_makeQueue($refMatcher);
    return $element;
},
r_PerlSubstitution_appendSubstitution = ($this, $match, $dest) => {
    let $element;
    $element = $this.$queueEntry;
    while ($element !== null) {
        $element.$append13($match, $dest);
        $element = $element.$next9;
    }
},
r_PerlSubstitution__clinit_ = () => {
    let $e, $$je;
    a: {
        try {
            $e = r_Pattern__init_2($rt_s(745));
            r_PerlSubstitution_refPtn = $e;
            r_PerlSubstitution_MODE_ID = jl_Integer_intValue(r_Pattern_groupId($e, $rt_s(746)));
            r_PerlSubstitution_NAME_ID = jl_Integer_intValue(r_Pattern_groupId(r_PerlSubstitution_refPtn, $rt_s(747)));
            r_PerlSubstitution_ESC_ID = jl_Integer_intValue(r_Pattern_groupId(r_PerlSubstitution_refPtn, $rt_s(748)));
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof r_PatternSyntaxException) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        jl_Throwable_printStackTrace($e);
    }
},
cbgss_Touchable = $rt_classWithoutFields(jl_Enum),
cbgss_Touchable_enabled = null,
cbgss_Touchable_disabled = null,
cbgss_Touchable_childrenOnly = null,
cbgss_Touchable_$VALUES = null,
cbgss_Touchable_values = () => {
    return cbgss_Touchable_$VALUES.$clone0();
},
cbgss_Touchable__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgss_Touchable;
    jl_Enum__init_(var$1, $rt_s(749), 0);
    cbgss_Touchable_enabled = var$1;
    var$1 = new cbgss_Touchable;
    jl_Enum__init_(var$1, $rt_s(750), 1);
    cbgss_Touchable_disabled = var$1;
    var$1 = new cbgss_Touchable;
    jl_Enum__init_(var$1, $rt_s(751), 2);
    cbgss_Touchable_childrenOnly = var$1;
    var$2 = $rt_createArray(cbgss_Touchable, 3);
    var$3 = var$2.data;
    var$3[0] = cbgss_Touchable_enabled;
    var$3[1] = cbgss_Touchable_disabled;
    var$3[2] = var$1;
    cbgss_Touchable_$VALUES = var$2;
};
function cgtt_TypingConfig$registerEffect$lambda$_2_0() {
    let a = this; jl_Object.call(a);
    a.$_012 = null;
    a.$_15 = null;
}
function jn_Buffer() {
    let a = this; jl_Object.call(a);
    a.$position0 = 0;
    a.$limit0 = 0;
    a.$mark = 0;
}
let jn_Buffer__init_ = $this => {
    $this.$mark = (-1);
},
jn_Buffer_position = ($this, $newPosition) => {
    let var$2, var$3, var$4;
    if ($newPosition >= 0 && $newPosition <= $this.$limit0) {
        $this.$position0 = $newPosition;
        if ($newPosition < $this.$mark)
            $this.$mark = 0;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    var$3 = $this.$limit0;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(var$4, $rt_s(752)), $newPosition), $rt_s(753)), var$3), 93);
    jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$2);
},
jn_Buffer_limit = ($this, $newLimit) => {
    let var$2;
    if ($newLimit >= 0 && $newLimit <= $this.$capacityImpl()) {
        if ($this.$mark > $newLimit)
            $this.$mark = (-1);
        $this.$limit0 = $newLimit;
        if ($this.$position0 > $newLimit)
            $this.$position0 = $newLimit;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Exception__init_(var$2);
    $rt_throw(var$2);
},
jn_Buffer_clear = $this => {
    $this.$position0 = 0;
    $this.$limit0 = $this.$capacityImpl();
    $this.$mark = (-1);
    return $this;
},
jn_Buffer_flip = $this => {
    $this.$limit0 = $this.$position0;
    $this.$position0 = 0;
    $this.$mark = (-1);
    return $this;
},
jn_Buffer_remaining = $this => {
    return $this.$limit0 - $this.$position0 | 0;
},
jn_Buffer_hasRemaining = $this => {
    return $this.$position0 >= $this.$limit0 ? 0 : 1;
},
jn_FloatBuffer = $rt_classWithoutFields(jn_Buffer),
jn_FloatBuffer_put = ($this, $src, $offset, $length) => {
    let var$4;
    if ($this.$readOnly()) {
        var$4 = new jn_ReadOnlyBufferException;
        jl_Exception__init_(var$4);
        $rt_throw(var$4);
    }
    if (jn_Buffer_remaining($this) < $length) {
        var$4 = new jn_BufferOverflowException;
        jl_Exception__init_(var$4);
        $rt_throw(var$4);
    }
    if ($length >= 0 && $offset >= 0 && ($offset + $length | 0) <= $src.data.length) {
        $this.$putImpl($this.$position0, $src, $offset, $length);
        $this.$position0 = $this.$position0 + $length | 0;
        return $this;
    }
    var$4 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$4);
    $rt_throw(var$4);
},
jn_FloatBuffer_limit0 = ($this, $newLimit) => {
    jn_Buffer_limit($this, $newLimit);
    return $this;
},
jn_FloatBuffer_position0 = ($this, $newPosition) => {
    jn_Buffer_position($this, $newPosition);
    return $this;
},
jn_FloatBuffer_flip = $this => {
    jn_Buffer_flip($this);
    return $this;
},
jn_FloatBuffer_clear = $this => {
    jn_Buffer_clear($this);
    return $this;
},
jn_FloatBuffer_limit = ($this, var$1) => {
    jn_Buffer_limit($this, var$1);
    return $this;
},
jn_FloatBuffer_position = ($this, var$1) => {
    jn_Buffer_position($this, var$1);
    return $this;
},
jn_ShortBuffer = $rt_classWithoutFields(jn_Buffer),
jn_ShortBuffer_put = ($this, $src, $offset, $length) => {
    let var$4;
    if ($this.$readOnly()) {
        var$4 = new jn_ReadOnlyBufferException;
        jl_Exception__init_(var$4);
        $rt_throw(var$4);
    }
    if (jn_Buffer_remaining($this) < $length) {
        var$4 = new jn_BufferOverflowException;
        jl_Exception__init_(var$4);
        $rt_throw(var$4);
    }
    if ($length >= 0 && $offset >= 0 && ($offset + $length | 0) <= $src.data.length) {
        $this.$putImpl0($this.$position0, $src, $offset, $length);
        $this.$position0 = $this.$position0 + $length | 0;
        return $this;
    }
    var$4 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$4);
    $rt_throw(var$4);
},
jn_ShortBuffer_limit0 = ($this, $newLimit) => {
    jn_Buffer_limit($this, $newLimit);
    return $this;
},
jn_ShortBuffer_position0 = ($this, $newPosition) => {
    jn_Buffer_position($this, $newPosition);
    return $this;
},
jn_ShortBuffer_flip = $this => {
    jn_Buffer_flip($this);
    return $this;
},
jn_ShortBuffer_clear = $this => {
    jn_Buffer_clear($this);
    return $this;
},
jn_ShortBuffer_limit = ($this, var$1) => {
    jn_Buffer_limit($this, var$1);
    return $this;
},
jn_ShortBuffer_position = ($this, var$1) => {
    jn_Buffer_position($this, var$1);
    return $this;
},
cgxgbt_TeaTool = $rt_classWithoutFields(),
cgxgbt_TeaTool_isProd = 0,
cgxgbt_TeaTool__clinit_ = () => {
    cgxgbt_TeaTool_isProd = 1;
},
jn_IntBuffer = $rt_classWithoutFields(jn_Buffer),
jn_IntBuffer_clear = $this => {
    jn_Buffer_clear($this);
    return $this;
};
function jn_ByteBuffer() {
    jn_Buffer.call(this);
    this.$order0 = null;
}
let jn_ByteBuffer_allocateDirect = $capacity => {
    let $result, var$3;
    if ($capacity >= 0) {
        $result = jn_ByteBufferJsImpl__init_(null, 0, new Int8Array($capacity), 1, 0);
        $result.$limit0 = $capacity;
        return $result;
    }
    $result = new jl_IllegalArgumentException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append1(jl_StringBuilder_append(var$3, $rt_s(754)), $capacity);
    jl_Throwable__init_($result, jl_AbstractStringBuilder_toString(var$3));
    $rt_throw($result);
},
jn_ByteBuffer_allocate = $capacity => {
    let $array, $result, var$4;
    if ($capacity >= 0) {
        $array = $rt_createByteArray($capacity);
        $result = jn_ByteBufferJsImpl__init_($array, 0, $array.data, 0, 0);
        $result.$limit0 = $capacity;
        return $result;
    }
    $result = new jl_IllegalArgumentException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_StringBuilder_append1(jl_StringBuilder_append(var$4, $rt_s(754)), $capacity);
    jl_Throwable__init_($result, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw($result);
},
jn_ByteBuffer_wrap0 = ($array, $offset, $length) => {
    let $data, $result;
    ju_Objects_checkFromIndexSize($offset, $length, $array.data.length);
    $data = $array.data;
    $result = jn_ByteBufferJsImpl__init_($array, 0, $data, 0, 0);
    $result.$position0 = $offset;
    $result.$limit0 = $offset + $length | 0;
    return $result;
},
jn_ByteBuffer_wrap = $array => {
    return jn_ByteBuffer_wrap0($array, 0, $array.data.length);
},
jn_ByteBuffer_get = ($this, $dst, $offset, $length) => {
    let var$4, var$5, var$6;
    if ($length >= 0 && $offset >= 0 && ($offset + $length | 0) <= $dst.data.length) {
        if ($length > jn_Buffer_remaining($this)) {
            var$4 = new jn_BufferUnderflowException;
            jl_Exception__init_(var$4);
            $rt_throw(var$4);
        }
        var$5 = $this.$position0;
        var$4 = $this;
        var$6 = new Int8Array(var$4.$data0.buffer, var$4.$data0.byteOffset + var$5 | 0, $length);
        $dst.data.set(var$6, $offset);
        $this.$position0 = $this.$position0 + $length | 0;
        return $this;
    }
    var$4 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$4);
    $rt_throw(var$4);
},
jn_ByteBuffer_put = ($this, $src, $offset, $length) => {
    let var$4, var$5, var$6, var$7;
    if (!$length)
        return $this;
    var$4 = $this;
    if (var$4.$readOnly0) {
        var$5 = new jn_ReadOnlyBufferException;
        jl_Exception__init_(var$5);
        $rt_throw(var$5);
    }
    if ($length >= 0 && $offset >= 0 && ($offset + $length | 0) <= $src.data.length) {
        if ($length > jn_Buffer_remaining($this)) {
            var$5 = new jn_BufferOverflowException;
            jl_Exception__init_(var$5);
            $rt_throw(var$5);
        }
        var$6 = $this.$position0;
        var$7 = new Int8Array($src.data.buffer, $offset, $length);
        var$4.$data0.set(var$7, var$6);
        $this.$position0 = $this.$position0 + $length | 0;
        return $this;
    }
    var$5 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$5);
    $rt_throw(var$5);
},
jn_ByteBuffer_array = $this => {
    let var$1, var$2;
    var$1 = $this.$array3;
    if (var$1 !== null)
        return var$1;
    var$2 = new jl_UnsupportedOperationException;
    jl_Exception__init_(var$2);
    $rt_throw(var$2);
},
jn_ByteBuffer_toString = $this => {
    let var$1, var$2, var$3, var$4, var$5, var$6;
    var$1 = $this.$position0;
    var$2 = $this.$limit0;
    var$3 = $this.$capacityImpl();
    var$4 = $this.$mark;
    if (var$4 < 0)
        var$5 = $rt_s(755);
    else {
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_StringBuilder_append1(jl_StringBuilder_append(var$5, $rt_s(756)), var$4);
        var$5 = jl_AbstractStringBuilder_toString(var$5);
    }
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(var$6, $rt_s(757)), var$1), $rt_s(758)), var$2), $rt_s(759)), var$3), $rt_s(760)), var$5), 93);
    return jl_AbstractStringBuilder_toString(var$6);
},
jn_ByteBuffer_hashCode = $this => {
    let $hashCode, $pos, var$3, $i;
    $hashCode = 0;
    $pos = $this.$position0;
    var$3 = $this;
    $i = $pos;
    while ($i < $this.$limit0) {
        $hashCode = (31 * $hashCode | 0) + jn_ByteBufferJsImpl_get(var$3, $pos) | 0;
        $i = $i + 1 | 0;
    }
    return $hashCode;
},
jn_ByteBuffer_equals = ($this, $obj) => {
    let $other, $sz, $a, $b, $i, var$7, var$8;
    if ($this === $obj)
        return 1;
    if (!($obj instanceof jn_ByteBuffer))
        return 0;
    $other = $obj;
    $sz = jn_Buffer_remaining($this);
    if ($sz != jn_Buffer_remaining($other))
        return 0;
    $a = $this.$position0;
    $b = $other.$position0;
    $i = 0;
    $other = $other;
    while ($i < $sz) {
        var$7 = $a + 1 | 0;
        $a = jn_ByteBufferJsImpl_get($this, $a);
        var$8 = $b + 1 | 0;
        if ($a != jn_ByteBufferJsImpl_get($other, $b))
            return 0;
        $i = $i + 1 | 0;
        $a = var$7;
        $b = var$8;
    }
    return 1;
},
jn_ByteBuffer_order = ($this, $bo) => {
    $this.$order0 = $bo;
    return $this;
},
jn_ByteBuffer_limit = ($this, var$1) => {
    jn_Buffer_limit($this, var$1);
    return $this;
},
jn_ByteBuffer_position = ($this, var$1) => {
    jn_Buffer_position($this, var$1);
    return $this;
},
jn_ByteBuffer_compareTo = ($this, var$1) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    a: {
        var$1 = var$1;
        if ($this === var$1)
            var$2 = 0;
        else {
            var$3 = jl_Math_min(jn_Buffer_remaining($this), jn_Buffer_remaining(var$1));
            var$4 = $this.$position0;
            var$5 = var$1.$position0;
            var$6 = 0;
            var$7 = var$1;
            while (true) {
                if (var$6 >= var$3) {
                    var$2 = $rt_compare(jn_Buffer_remaining($this), jn_Buffer_remaining(var$1));
                    break a;
                }
                var$8 = var$4 + 1 | 0;
                var$4 = jn_ByteBufferJsImpl_get($this, var$4);
                var$9 = var$5 + 1 | 0;
                var$2 = var$4 - jn_ByteBufferJsImpl_get(var$7, var$5) | 0;
                if (var$2)
                    break;
                var$6 = var$6 + 1 | 0;
                var$4 = var$8;
                var$5 = var$9;
            }
        }
    }
    return var$2;
};
function jn_ByteOrder() {
    jl_Object.call(this);
    this.$name7 = null;
}
let jn_ByteOrder_BIG_ENDIAN = null,
jn_ByteOrder_LITTLE_ENDIAN = null,
jn_ByteOrder_nativeOrder0 = null,
jn_ByteOrder__init_0 = ($this, $name) => {
    $this.$name7 = $name;
},
jn_ByteOrder__init_ = var_0 => {
    let var_1 = new jn_ByteOrder();
    jn_ByteOrder__init_0(var_1, var_0);
    return var_1;
},
jn_ByteOrder_nativeOrder = () => {
    let $buffer;
    if (jn_ByteOrder_nativeOrder0 === null) {
        $buffer = new ArrayBuffer(2);
        (new Int16Array($buffer))[0] = 1;
        jn_ByteOrder_nativeOrder0 = (new Int8Array($buffer))[0] ? jn_ByteOrder_LITTLE_ENDIAN : jn_ByteOrder_BIG_ENDIAN;
    }
    return jn_ByteOrder_nativeOrder0;
},
jn_ByteOrder__clinit_ = () => {
    jn_ByteOrder_BIG_ENDIAN = jn_ByteOrder__init_($rt_s(761));
    jn_ByteOrder_LITTLE_ENDIAN = jn_ByteOrder__init_($rt_s(762));
};
function cbgg_Texture$TextureFilter() {
    jl_Enum.call(this);
    this.$glEnum = 0;
}
let cbgg_Texture$TextureFilter_Nearest = null,
cbgg_Texture$TextureFilter_Linear = null,
cbgg_Texture$TextureFilter_MipMap = null,
cbgg_Texture$TextureFilter_MipMapNearestNearest = null,
cbgg_Texture$TextureFilter_MipMapLinearNearest = null,
cbgg_Texture$TextureFilter_MipMapNearestLinear = null,
cbgg_Texture$TextureFilter_MipMapLinearLinear = null,
cbgg_Texture$TextureFilter_$VALUES = null,
cbgg_Texture$TextureFilter_values = () => {
    return cbgg_Texture$TextureFilter_$VALUES.$clone0();
},
cbgg_Texture$TextureFilter__init_0 = ($this, var$1, var$2, $glEnum) => {
    jl_Enum__init_($this, var$1, var$2);
    $this.$glEnum = $glEnum;
},
cbgg_Texture$TextureFilter__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cbgg_Texture$TextureFilter();
    cbgg_Texture$TextureFilter__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgg_Texture$TextureFilter__clinit_ = () => {
    let var$1, var$2, var$3;
    cbgg_Texture$TextureFilter_Nearest = cbgg_Texture$TextureFilter__init_($rt_s(763), 0, 9728);
    cbgg_Texture$TextureFilter_Linear = cbgg_Texture$TextureFilter__init_($rt_s(764), 1, 9729);
    cbgg_Texture$TextureFilter_MipMap = cbgg_Texture$TextureFilter__init_($rt_s(765), 2, 9987);
    cbgg_Texture$TextureFilter_MipMapNearestNearest = cbgg_Texture$TextureFilter__init_($rt_s(766), 3, 9984);
    cbgg_Texture$TextureFilter_MipMapLinearNearest = cbgg_Texture$TextureFilter__init_($rt_s(767), 4, 9985);
    cbgg_Texture$TextureFilter_MipMapNearestLinear = cbgg_Texture$TextureFilter__init_($rt_s(768), 5, 9986);
    var$1 = cbgg_Texture$TextureFilter__init_($rt_s(769), 6, 9987);
    cbgg_Texture$TextureFilter_MipMapLinearLinear = var$1;
    var$2 = $rt_createArray(cbgg_Texture$TextureFilter, 7);
    var$3 = var$2.data;
    var$3[0] = cbgg_Texture$TextureFilter_Nearest;
    var$3[1] = cbgg_Texture$TextureFilter_Linear;
    var$3[2] = cbgg_Texture$TextureFilter_MipMap;
    var$3[3] = cbgg_Texture$TextureFilter_MipMapNearestNearest;
    var$3[4] = cbgg_Texture$TextureFilter_MipMapLinearNearest;
    var$3[5] = cbgg_Texture$TextureFilter_MipMapNearestLinear;
    var$3[6] = var$1;
    cbgg_Texture$TextureFilter_$VALUES = var$2;
};
function cbgg_Texture$TextureWrap() {
    jl_Enum.call(this);
    this.$glEnum0 = 0;
}
let cbgg_Texture$TextureWrap_MirroredRepeat = null,
cbgg_Texture$TextureWrap_ClampToEdge = null,
cbgg_Texture$TextureWrap_Repeat = null,
cbgg_Texture$TextureWrap_$VALUES = null,
cbgg_Texture$TextureWrap_values = () => {
    return cbgg_Texture$TextureWrap_$VALUES.$clone0();
},
cbgg_Texture$TextureWrap__init_0 = ($this, var$1, var$2, $glEnum) => {
    jl_Enum__init_($this, var$1, var$2);
    $this.$glEnum0 = $glEnum;
},
cbgg_Texture$TextureWrap__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cbgg_Texture$TextureWrap();
    cbgg_Texture$TextureWrap__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cbgg_Texture$TextureWrap__clinit_ = () => {
    let var$1, var$2, var$3;
    cbgg_Texture$TextureWrap_MirroredRepeat = cbgg_Texture$TextureWrap__init_($rt_s(770), 0, 33648);
    cbgg_Texture$TextureWrap_ClampToEdge = cbgg_Texture$TextureWrap__init_($rt_s(771), 1, 33071);
    var$1 = cbgg_Texture$TextureWrap__init_($rt_s(772), 2, 10497);
    cbgg_Texture$TextureWrap_Repeat = var$1;
    var$2 = $rt_createArray(cbgg_Texture$TextureWrap, 3);
    var$3 = var$2.data;
    var$3[0] = cbgg_Texture$TextureWrap_MirroredRepeat;
    var$3[1] = cbgg_Texture$TextureWrap_ClampToEdge;
    var$3[2] = var$1;
    cbgg_Texture$TextureWrap_$VALUES = var$2;
},
cgtt_ColorLookup$_clinit_$lambda$_2_0 = $rt_classWithoutFields(),
cgtt_ColorLookup$_clinit_$lambda$_2_1 = $rt_classWithoutFields(),
cgtt_ColorLookup$_clinit_$lambda$_2_1_getRgba = (var$0, var$1, var$2, var$3) => {
    let var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15;
    cgttu_ColorUtils_$callClinit();
    var$2 = jl_Math_max(var$2, 0);
    var$3 = jl_Math_min(var$3, var$1.$nativeString.length);
    if (var$3 <= var$2)
        var$2 = 256;
    else {
        cgttu_ColorUtils_lightness = 0.0;
        cgttu_ColorUtils_saturation = 0.0;
        cbgu_IntArray_clear(cgttu_ColorUtils_mixing);
        var$4 = cgttu_ColorUtils_nonTermMatcher;
        r_Matcher_setTarget1(var$4, var$1, var$2, var$3 - var$2 | 0);
        var$5 = var$2;
        while (r_Matcher_find(var$4)) {
            if ((r_Matcher_start(var$4) + var$2 | 0) > var$5)
                cgttu_ColorUtils_process(jl_String_substring(var$1, var$5, r_Matcher_start(var$4) + var$2 | 0));
            var$5 = r_Matcher_end(var$4) + var$2 | 0;
        }
        if (!var$5)
            cgttu_ColorUtils_process(var$1);
        cgttu_ColorUtils_process(jl_String_substring(var$1, var$5, var$3));
        var$1 = cgttu_ColorUtils_mixing;
        var$2 = var$1.$size2;
        if (var$2 < 2)
            var$2 = 256;
        else {
            a: {
                var$6 = var$1.$items1;
                var$3 = 0;
                var$2 = var$2 & (-2);
                var$7 = var$3 + var$2 | 0;
                if (var$6 !== null) {
                    var$6 = var$6.data;
                    if (var$6.length >= var$7 && var$2 > 0) {
                        while (true) {
                            if (var$6[var$3] != 256) {
                                var$2 = var$6[var$3];
                                var$8 = var$6[var$3 + 1 | 0];
                                var$3 = var$3 + 3 | 0;
                                var$9 = var$8;
                                var$5 = var$3;
                                while (var$5 < var$7) {
                                    if (var$6[var$5 - 1 | 0] != 256)
                                        var$9 = var$9 + var$6[var$5];
                                    var$5 = var$5 + 2 | 0;
                                }
                                var$9 = 1.0 / var$9;
                                var$8 = var$8 * var$9;
                                while (var$3 < var$7) {
                                    var$5 = var$6[var$3 - 1 | 0];
                                    if (var$5 != 256) {
                                        var$10 = var$6[var$3] * var$9;
                                        var$8 = var$8 + var$10;
                                        var$2 = cgttu_ColorUtils_lerpColors(var$2, var$5, var$10 / var$8);
                                    }
                                    var$3 = var$3 + 2 | 0;
                                }
                                break a;
                            }
                            var$3 = var$3 + 2 | 0;
                            if (var$3 >= var$7)
                                break;
                        }
                        var$2 = 256;
                        break a;
                    }
                }
                var$2 = 256;
            }
            if (var$2 != 256) {
                var$8 = cgttu_ColorUtils_lightness;
                var$3 = $rt_compare(var$8, 0.0);
                if (var$3 > 0)
                    var$2 = cgttu_ColorUtils_lighten(var$2, var$8);
                else if (var$3 < 0)
                    var$2 = cgttu_ColorUtils_darken(var$2,  -var$8);
                var$8 = cgttu_ColorUtils_saturation;
                var$3 = $rt_compare(var$8, 0.0);
                if (var$3 > 0) {
                    var$3 = var$2 >>> 24 | 0;
                    var$5 = (var$2 >>> 16 | 0) & 255;
                    var$7 = (var$2 >>> 8 | 0) & 255;
                    var$2 = var$2 & 254;
                    var$9 = 1.0 + var$8;
                    var$10 = var$8 * (-0.3262700140476227);
                    var$11 = var$8 * (-0.3677999973297119);
                    var$12 = var$8 * (-0.3059300184249878);
                    var$13 = var$3;
                    var$8 = var$13 * (var$10 + var$9);
                    var$14 = var$5;
                    var$8 = var$8 + var$14 * var$10;
                    var$15 = var$7;
                    var$2 = (jl_Math_min0(jl_Math_max0(var$8 + var$15 * var$10, 0.0), 255.0) | 0) << 24 | (jl_Math_min0(jl_Math_max0(var$13 * var$11 + var$14 * (var$11 + var$9) + var$15 * var$11, 0.0), 255.0) | 0) << 16 | (jl_Math_min0(jl_Math_max0(var$13 * var$12 + var$14 * var$12 + var$15 * (var$12 + var$9), 0.0), 255.0) | 0) << 8 | var$2;
                } else if (var$3 < 0) {
                    var$8 =  -var$8;
                    var$3 = var$2 >>> 24 | 0;
                    var$5 = (var$2 >>> 16 | 0) & 255;
                    var$7 = (var$2 >>> 8 | 0) & 255;
                    var$2 = var$2 & 254;
                    var$9 = 1.0 - var$8;
                    var$10 = var$8 * 0.3262700140476227;
                    var$11 = var$8 * 0.3677999973297119;
                    var$8 = var$8 * 0.3059300184249878;
                    var$12 = var$3;
                    var$13 = var$12 * (var$10 + var$9);
                    var$14 = var$5;
                    var$13 = var$13 + var$14 * var$10;
                    var$15 = var$7;
                    var$2 = (jl_Math_min0(jl_Math_max0(var$13 + var$15 * var$10, 0.0), 255.0) | 0) << 24 | (jl_Math_min0(jl_Math_max0(var$12 * var$11 + var$14 * (var$11 + var$9) + var$15 * var$11, 0.0), 255.0) | 0) << 16 | (jl_Math_min0(jl_Math_max0(var$12 * var$8 + var$14 * var$8 + var$15 * (var$8 + var$9), 0.0), 255.0) | 0) << 8 | var$2;
                }
            }
        }
    }
    return var$2;
};
function r_Term() {
    let a = this; jl_Object.call(a);
    a.$next3 = null;
    a.$failNext = null;
    a.$type0 = 0;
    a.$inverse = 0;
    a.$c = 0;
    a.$distance = 0;
    a.$eat = 0;
    a.$bitset = null;
    a.$bitset2 = null;
    a.$categoryBitset = null;
    a.$mode_insensitive = 0;
    a.$mode_reverse = 0;
    a.$mode_bracket = 0;
    a.$mode_upper = 0;
    a.$weight0 = 0;
    a.$memreg = 0;
    a.$minCount = 0;
    a.$maxCount = 0;
    a.$target = null;
    a.$cntreg = 0;
    a.$lookaheadId = 0;
    a.$prev = null;
    a.$in = null;
    a.$out0 = null;
    a.$out10 = null;
    a.$current = null;
    a.$branchOut = null;
    a.$instanceNum = 0;
}
let r_Term_instances = 0,
r_Term__init_1 = $this => {
    let var$1;
    $this.$type0 = 17;
    $this.$memreg = (-1);
    $this.$cntreg = 0;
    var$1 = r_Term_instances;
    $this.$instanceNum = var$1;
    r_Term_instances = var$1 + 1 | 0;
    $this.$out0 = $this;
    $this.$in = $this;
},
r_Term__init_0 = () => {
    let var_0 = new r_Term();
    r_Term__init_1(var_0);
    return var_0;
},
r_Term__init_2 = ($this, $type) => {
    r_Term__init_1($this);
    $this.$type0 = $type;
},
r_Term__init_ = var_0 => {
    let var_1 = new r_Term();
    r_Term__init_2(var_1, var_0);
    return var_1;
},
r_Term_makeTree = ($t, $data, $vars, $flags, $term, $iterators, $groupNames) => {
    let var$8, $id, var$10, var$11, $gno, $positive, $memregNo, $gn, $fork, $la, $lb, var$19, $clg, $gname, $no, $$je;
    var$8 = $vars.data;
    $id = var$8.length;
    if ($id != 4)
        $rt_throw(jl_IllegalArgumentException__init_(jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(773)), $id))));
    a: while (true) {
        b: {
            c: {
                r_Pretokenizer_next($t);
                r_Term_append0($term, $t.$tOffset, $t.$tOutside, $data, $vars, $flags, $iterators, $groupNames);
                switch ($t.$ttype) {
                    case 2:
                        if (var$8[2] <= 0) {
                            $term.$close();
                            return $term;
                        }
                        $rt_throw(r_PatternSyntaxException__init_($rt_s(774)));
                    case 3:
                        var$10 = $flags.data;
                        var$8[2] = var$8[2] + 1 | 0;
                        var$11 = $rt_createIntArray(1);
                        var$11.data[0] = r_Pretokenizer_flags($t, var$10[0]);
                        $term.$append15(r_Term_makeTree($t, $data, $vars, var$11, r_Group__init_0(), $iterators, $groupNames));
                        continue a;
                    case 4:
                        var$8[2] = var$8[2] + 1 | 0;
                        $gno = new r_Lookahead;
                        $id = var$8[3];
                        var$8[3] = $id + 1 | 0;
                        r_Lookahead__init_($gno, $id, 1);
                        $term.$append15(r_Term_makeTree($t, $data, $vars, $flags, $gno, $iterators, $groupNames));
                        continue a;
                    case 5:
                        var$8[2] = var$8[2] + 1 | 0;
                        $gno = new r_Lookahead;
                        $id = var$8[3];
                        var$8[3] = $id + 1 | 0;
                        r_Lookahead__init_($gno, $id, 0);
                        $term.$append15(r_Term_makeTree($t, $data, $vars, $flags, $gno, $iterators, $groupNames));
                        continue a;
                    case 6:
                        var$8[2] = var$8[2] + 1 | 0;
                        $gno = new r_Lookbehind;
                        $id = var$8[3];
                        var$8[3] = $id + 1 | 0;
                        r_Lookbehind__init_($gno, $id, 1);
                        $term.$append15(r_Term_makeTree($t, $data, $vars, $flags, $gno, $iterators, $groupNames));
                        continue a;
                    case 7:
                        var$8[2] = var$8[2] + 1 | 0;
                        $gno = new r_Lookbehind;
                        $id = var$8[3];
                        var$8[3] = $id + 1 | 0;
                        r_Lookbehind__init_($gno, $id, 0);
                        $term.$append15(r_Term_makeTree($t, $data, $vars, $flags, $gno, $iterators, $groupNames));
                        continue a;
                    case 8:
                        var$8[2] = var$8[2] + 1 | 0;
                        $gno = new r_IndependentGroup;
                        $id = var$8[3];
                        var$8[3] = $id + 1 | 0;
                        r_IndependentGroup__init_($gno, $id);
                        $term.$append15(r_Term_makeTree($t, $data, $vars, $flags, $gno, $iterators, $groupNames));
                        continue a;
                    case 9:
                        break c;
                    case 10:
                        d: {
                            e: {
                                f: {
                                    var$8[2] = var$8[2] + 1 | 0;
                                    r_Pretokenizer_next($t);
                                    $positive = 1;
                                    switch ($t.$ttype) {
                                        case 5:
                                            $positive = 0;
                                            break f;
                                        case 7:
                                            $positive = 0;
                                            break e;
                                        case 40:
                                            r_Pretokenizer_next($t);
                                            if ($t.$ttype != 41)
                                                break a;
                                            if (jl_Character_isDigit0($data.data[$t.$tOffset]))
                                                $memregNo = r_Term_makeNumber($t.$tOffset, $t.$tOutside, $data);
                                            else {
                                                $gn = new jl_String;
                                                $memregNo = $t.$tOffset;
                                                jl_String__init_3($gn, $data, $memregNo, $t.$tOutside - $memregNo | 0);
                                                $gno = ju_HashMap_get($groupNames, $gn);
                                                if ($gno === null)
                                                    $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(775)), $gn))));
                                                $memregNo = jl_Integer_intValue($gno);
                                            }
                                            $fork = r_ConditionalExpr__init_2($memregNo);
                                            break d;
                                        case 4:
                                            break;
                                        case 6:
                                            break e;
                                        default:
                                            $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append2(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(776)), $t.$ttype), $rt_s(777)), $t.$ttype & 65535), $rt_s(778)))));
                                    }
                                }
                                var$8[2] = var$8[2] + 1 | 0;
                                $la = new r_Lookahead;
                                $id = var$8[3];
                                var$8[3] = $id + 1 | 0;
                                r_Lookahead__init_($la, $id, $positive);
                                r_Term_makeTree($t, $data, $vars, $flags, $la, $iterators, $groupNames);
                                $fork = r_ConditionalExpr__init_($la);
                                break d;
                            }
                            var$8[2] = var$8[2] + 1 | 0;
                            $lb = new r_Lookbehind;
                            $id = var$8[3];
                            var$8[3] = $id + 1 | 0;
                            r_Lookbehind__init_($lb, $id, $positive);
                            r_Term_makeTree($t, $data, $vars, $flags, $lb, $iterators, $groupNames);
                            $fork = r_ConditionalExpr__init_3($lb);
                        }
                        $term.$append15(r_Term_makeTree($t, $data, $vars, $flags, $fork, $iterators, $groupNames));
                        continue a;
                    case 11:
                        break b;
                    case 12:
                        var$19 = $flags.data;
                        r_Pretokenizer_next($t);
                        $clg = r_Term__init_0();
                        r_CharacterClass_parseGroup($data, $t.$tOffset, $t.$tOutside, $clg, (var$19[0] & 1) <= 0 ? 0 : 1, (var$19[0] & 8) <= 0 ? 0 : 1, (var$19[0] & 16) <= 0 ? 0 : 1, (var$19[0] & 32) <= 0 ? 0 : 1);
                        $term.$append15($clg);
                        continue a;
                    case 13:
                        $gname = $t.$groupName;
                        if (!jl_Character_isDigit0(jl_String_charAt($gname, 0))) {
                            $no = ju_HashMap_get($groupNames, $gname);
                            if ($no === null) {
                                $id = var$8[0];
                                var$8[0] = $id + 1 | 0;
                                ju_HashMap_put($groupNames, $t.$groupName, jl_Integer_valueOf($id));
                            } else {
                                if ($t.$groupDeclared)
                                    $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(779)), $gname), $rt_s(780)))));
                                $id = jl_Integer_intValue($no);
                            }
                        } else {
                            try {
                                $id = jl_Integer_parseInt($gname);
                            } catch ($$e) {
                                $$je = $rt_wrapException($$e);
                                if ($$je instanceof jl_NumberFormatException) {
                                    $rt_throw(r_PatternSyntaxException__init_($rt_s(781)));
                                } else {
                                    throw $$e;
                                }
                            }
                            if (ju_HashMap_containsValue($groupNames, jl_Integer_valueOf($id)) && $t.$groupDeclared)
                                $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(782)), $gname), $rt_s(783)))));
                            if (var$8[0] <= $id)
                                var$8[0] = $id + 1 | 0;
                        }
                        var$8[2] = var$8[2] + 1 | 0;
                        $term.$append15(r_Term_makeTree($t, $data, $vars, $flags, r_Group__init_2($id), $iterators, $groupNames));
                        continue a;
                    case 40:
                        var$8[2] = var$8[2] + 1 | 0;
                        $gno = new r_Group;
                        $id = var$8[0];
                        var$8[0] = $id + 1 | 0;
                        r_Group__init_($gno, $id);
                        $term.$append15(r_Term_makeTree($t, $data, $vars, $flags, $gno, $iterators, $groupNames));
                        continue a;
                    case 41:
                        if (var$8[2] <= 0)
                            $rt_throw(r_PatternSyntaxException__init_($rt_s(774)));
                        $term.$close();
                        var$8[2] = var$8[2] - 1 | 0;
                        return $term;
                    case 124:
                        break;
                    default:
                        $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(784)), $t.$ttype))));
                }
                r_Term_newBranch($term);
                continue a;
            }
            while (true) {
                if ($t.$ttype == 41)
                    continue a;
                r_Pretokenizer_next($t);
            }
        }
        var$19 = $flags.data;
        var$19[0] = r_Pretokenizer_flags($t, var$19[0]);
    }
    $rt_throw(r_PatternSyntaxException__init_($rt_s(785)));
},
r_Term_makeNumber = ($i, $out, $data) => {
    let $n, $d;
    $n = 0;
    a: {
        while ($i < $out) {
            $d = $data.data[$i] - 48 | 0;
            if ($d < 0)
                break a;
            if ($d > 9)
                break a;
            $n = ($n * 10 | 0) + $d | 0;
            $i = $i + 1 | 0;
        }
        return $n;
    }
    return (-1);
},
r_Term_append0 = ($this, $offset, $end, $data, $vars, $flags, $iterators, $gmap) => {
    let $limits, var$9, $current, $mb, var$12, var$13, $c, $greedy, $tmp_0, $p, $le, $t, $p_0, $cp, $mi, $mr, $mu, $br;
    $limits = $rt_createIntArray(3);
    var$9 = $limits.data;
    $current = $this.$current;
    $mb = $offset;
    a: while ($mb < $end) {
        b: {
            var$12 = $data.data;
            var$13 = $flags.data;
            $c = var$12[$mb];
            $greedy = 1;
            if ((var$13[0] & 64) == 64) {
                $tmp_0 = r_Term__init_0();
                $mb = r_Term_parseTerm($this, $data, $mb, $end, $tmp_0, var$13[0]);
                $p = $tmp_0.$type0;
                if ($p == 60) {
                    var$13[0] = var$13[0] | 64;
                    continue a;
                }
                if ($p == 61) {
                    var$13[0] = var$13[0] & (-65);
                    continue a;
                }
                if ($p == 19 && $mb < $end)
                    $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(786)), jl_String__init_($data, $offset, $end - $offset | 0)), $rt_s(787)))));
                $current = $this.$append15($tmp_0);
            } else {
                c: {
                    d: {
                        e: {
                            f: {
                                g: {
                                    h: {
                                        switch ($c) {
                                            case 9:
                                            case 10:
                                            case 13:
                                            case 32:
                                                break d;
                                            case 42:
                                                break;
                                            case 43:
                                                break h;
                                            case 63:
                                                break g;
                                            case 92:
                                                break e;
                                            case 123:
                                                break f;
                                            default:
                                                break c;
                                        }
                                        if ($current === null)
                                            $rt_throw(r_PatternSyntaxException__init_($rt_s(788)));
                                        $mb = $mb + 1 | 0;
                                        if ($mb < $end && var$12[$mb] == 63) {
                                            $greedy = 0;
                                            $mb = $mb + 1 | 0;
                                        }
                                        $current = $this.$replaceCurrent(!$greedy ? r_Term_makeLazyStar($vars, $current) : r_Term_makeGreedyStar($vars, $current, $iterators));
                                        break b;
                                    }
                                    if ($current === null)
                                        $rt_throw(r_PatternSyntaxException__init_($rt_s(789)));
                                    $mb = $mb + 1 | 0;
                                    if ($mb < $end && var$12[$mb] == 63) {
                                        $greedy = 0;
                                        $mb = $mb + 1 | 0;
                                    }
                                    $current = $this.$replaceCurrent(!$greedy ? r_Term_makeLazyPlus($vars, $current) : r_Term_makeGreedyPlus($vars, $current, $iterators));
                                    break b;
                                }
                                if ($current === null)
                                    $rt_throw(r_PatternSyntaxException__init_($rt_s(790)));
                                $mb = $mb + 1 | 0;
                                if ($mb < $end && var$12[$mb] == 63) {
                                    $greedy = 0;
                                    $mb = $mb + 1 | 0;
                                }
                                $current = $this.$replaceCurrent(!$greedy ? r_Term_makeLazyQMark($vars, $current) : r_Term_makeGreedyQMark($vars, $current));
                                break b;
                            }
                            var$9[0] = 0;
                            var$9[1] = (-1);
                            $p = $mb + 1 | 0;
                            $le = r_Term_parseLimits($p, $end, $data, $limits);
                            if (var$9[2] == 1) {
                                if ($current === null)
                                    $rt_throw(r_PatternSyntaxException__init_($rt_s(791)));
                                if ($le >= $end)
                                    $mb = $le;
                                else if (var$12[$le] != 63)
                                    $mb = $le;
                                else {
                                    $greedy = 0;
                                    $mb = $le + 1 | 0;
                                }
                                $current = $this.$replaceCurrent(!$greedy ? r_Term_makeLazyLimits($vars, $current, $limits) : r_Term_makeGreedyLimits($vars, $current, $limits, $iterators));
                                break b;
                            }
                            if (var$12[$p] != 92) {
                                $t = r_Term__init_0();
                                $mb = r_CharacterClass_parseName0($data, $mb, $end, $t, 0, (var$13[0] & 8) <= 0 ? 0 : 1);
                                $current = $this.$append15($t);
                                continue a;
                            }
                            $p_0 = $mb + 2 | 0;
                            if ($p_0 == $end)
                                $rt_throw(r_PatternSyntaxException__init_($rt_s(792)));
                            $cp = var$12[$p_0];
                            $mi = 0;
                            $mb = 0;
                            $mr = 0;
                            $mu = 0;
                            while (true) {
                                r_Category_$callClinit();
                                if (!r_Category_contains(r_Category_Space, $cp) && !r_Category_contains(r_Category_Po, $cp))
                                    break;
                                $p_0 = $p_0 + 1 | 0;
                                if ($p_0 == $end)
                                    $rt_throw(r_PatternSyntaxException__init_($rt_s(792)));
                                i: {
                                    switch ($cp) {
                                        case 33:
                                            $mu = $mu ? 0 : 1;
                                            break i;
                                        case 47:
                                            $mr = $mr ? 0 : 1;
                                            break i;
                                        case 58:
                                            $mb = $mb ? 0 : 1;
                                            break i;
                                        case 64:
                                            $mi = $mi ? 0 : 1;
                                            break i;
                                        default:
                                    }
                                }
                                $cp = var$12[$p_0];
                            }
                            $br = r_BackReference__init_((-1), !$mi && (var$13[0] & 1) <= 0 ? 0 : 1, $mr, $mb, $mu);
                            $mb = r_Term_parseGroupId($data, $p_0, $end, $br, $gmap, 125);
                            $current = $this.$append15($br);
                            continue a;
                        }
                        if (($mb + 4 | 0) < $end && var$12[$mb + 1 | 0] == 107 && var$12[$mb + 2 | 0] == 60) {
                            $p = $mb + 3 | 0;
                            if ($p == $end)
                                $rt_throw(r_PatternSyntaxException__init_($rt_s(792)));
                            $cp = var$12[$p];
                            $mi = 0;
                            $mb = 0;
                            $mr = 0;
                            $mu = 0;
                            while (true) {
                                r_Category_$callClinit();
                                if (!r_Category_contains(r_Category_Space, $cp) && !r_Category_contains(r_Category_Po, $cp))
                                    break;
                                $p = $p + 1 | 0;
                                if ($p == $end)
                                    $rt_throw(r_PatternSyntaxException__init_($rt_s(792)));
                                j: {
                                    switch ($cp) {
                                        case 33:
                                            $mu = $mu ? 0 : 1;
                                            break j;
                                        case 47:
                                            $mr = $mr ? 0 : 1;
                                            break j;
                                        case 58:
                                            $mb = $mb ? 0 : 1;
                                            break j;
                                        case 64:
                                            $mi = $mi ? 0 : 1;
                                            break j;
                                        default:
                                    }
                                }
                                $cp = var$12[$p];
                            }
                            $br = r_BackReference__init_((-1), !$mi && (var$13[0] & 1) <= 0 ? 0 : 1, $mr, $mb, $mu);
                            $mb = r_Term_parseGroupId($data, $p, $end, $br, $gmap, 62);
                            $current = $this.$append15($br);
                            continue a;
                        }
                    }
                    if ((var$13[0] & 8) > 0) {
                        $mb = $mb + 1 | 0;
                        continue a;
                    }
                }
                $tmp_0 = r_Term__init_0();
                $mb = r_Term_parseTerm($this, $data, $mb, $end, $tmp_0, var$13[0]);
                $p = $tmp_0.$type0;
                if ($p == 60) {
                    var$13[0] = var$13[0] | 64;
                    continue a;
                }
                if ($p == 61) {
                    var$13[0] = var$13[0] & (-65);
                    continue a;
                }
                if ($p == 19 && $mb < $end)
                    $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(786)), jl_String__init_($data, $offset, $end - $offset | 0)), $rt_s(787)))));
                $current = $this.$append15($tmp_0);
            }
        }
    }
},
r_Term_parseGroupId = ($data, $i, $end, $term, $gmap, $closer) => {
    let var$7, $c, $id, $s, $no;
    a: {
        var$7 = $data.data;
        if (jl_Character_isDigit(var$7[$i])) {
            $c = $i;
            while (true) {
                if (!jl_Character_isDigit(var$7[$c])) {
                    $id = r_Term_makeNumber($i, $c, $data);
                    break a;
                }
                $c = $c + 1 | 0;
                if ($c == $end)
                    break;
            }
            $term = new r_PatternSyntaxException;
            jl_Throwable__init_($term, $rt_s(793));
            $rt_throw($term);
        }
        $c = $i;
        while (true) {
            r_Category_$callClinit();
            if (!r_Category_contains(r_Category_IdentifierPart, var$7[$c])) {
                $s = jl_String__init_($data, $i, $c - $i | 0);
                $no = ju_HashMap_get($gmap, $s);
                if ($no === null) {
                    $term = new r_PatternSyntaxException;
                    $gmap = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($gmap);
                    jl_AbstractStringBuilder_append($gmap, $rt_s(794));
                    jl_AbstractStringBuilder_append($gmap, $s);
                    jl_Throwable__init_($term, jl_AbstractStringBuilder_toString($gmap));
                    $rt_throw($term);
                }
                $id = $no.$value0;
                break a;
            }
            $c = $c + 1 | 0;
            if ($c == $end)
                break;
        }
        $term = new r_PatternSyntaxException;
        jl_Throwable__init_($term, $rt_s(793));
        $rt_throw($term);
    }
    while (true) {
        r_Category_$callClinit();
        if (!r_Category_contains(r_Category_Space, var$7[$c])) {
            $i = $c + 1 | 0;
            if (var$7[$c] == $closer) {
                $term.$memreg = $id;
                return $i;
            }
            $term = new r_PatternSyntaxException;
            $gmap = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($gmap);
            jl_AbstractStringBuilder_append($gmap, $rt_s(778));
            jl_AbstractStringBuilder_append0($gmap, $closer);
            jl_AbstractStringBuilder_append($gmap, $rt_s(795));
            jl_Throwable__init_($term, jl_AbstractStringBuilder_toString($gmap));
            $rt_throw($term);
        }
        $c = $c + 1 | 0;
        if ($c == $end)
            break;
    }
    $term = new r_PatternSyntaxException;
    $gmap = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($gmap);
    jl_AbstractStringBuilder_append($gmap, $rt_s(778));
    jl_AbstractStringBuilder_append0($gmap, $closer);
    jl_AbstractStringBuilder_append($gmap, $rt_s(795));
    jl_Throwable__init_($term, jl_AbstractStringBuilder_toString($gmap));
    $rt_throw($term);
},
r_Term_append = ($this, $term) => {
    let $current;
    $current = $this.$current;
    if ($current !== null) {
        r_Term_link($current, $term);
        $this.$current = $term;
        return $term;
    }
    $current = $this.$in;
    $current.$next3 = $term;
    $term.$prev = $current;
    $this.$current = $term;
    return $term;
},
r_Term_replaceCurrent = ($this, $term) => {
    let $prev, $in;
    $prev = $this.$current.$prev;
    if ($prev !== null) {
        $in = $this.$in;
        if ($prev !== $in)
            r_Term_link($prev, $term);
        else {
            $prev = $term.$in;
            $in.$next3 = $prev;
            $prev.$prev = $in;
        }
    }
    $this.$current = $term;
    return $term;
},
r_Term_newBranch = $this => {
    $this.$close();
    $this.$startNewBranch();
},
r_Term_close = $this => {
    let $current;
    $current = $this.$current;
    if ($current !== null)
        r_Term_linkd($current, $this.$out0);
    else
        $this.$in.$next3 = $this.$out0;
},
r_Term_link = ($term, $next) => {
    r_Term_linkd($term, $next.$in);
    $next.$prev = $term;
},
r_Term_linkd = ($term, $next) => {
    let $prev_out, $prev_out1, $prev_branch;
    $prev_out = $term.$out0;
    if ($prev_out !== null)
        $prev_out.$next3 = $next;
    $prev_out1 = $term.$out10;
    if ($prev_out1 !== null)
        $prev_out1.$next3 = $next;
    $prev_branch = $term.$branchOut;
    if ($prev_branch !== null)
        $prev_branch.$failNext = $next;
},
r_Term_startNewBranch = $this => {
    let $tmp_0, $b;
    $tmp_0 = $this.$in.$next3;
    $b = r_Branch__init_();
    $this.$in.$next3 = $b;
    $b.$next3 = $tmp_0;
    $b.$in = null;
    $b.$out0 = null;
    $b.$out10 = null;
    $b.$branchOut = $b;
    $this.$current = $b;
},
r_Term_makeGreedyStar = ($vars, $term, $iterators) => {
    let $b;
    switch ($term.$type0) {
        case 15:
            $b = r_Branch__init_();
            $b.$next3 = $term.$in;
            $term.$out0.$next3 = $b;
            $b.$in = $b;
            $b.$out0 = null;
            $b.$out10 = null;
            $b.$branchOut = $b;
            return $b;
        default:
    }
    return r_TermIterator__init_($term, 0, (-1), $iterators);
},
r_Term_makeLazyStar = ($vars, $term) => {
    let $b;
    switch ($term.$type0) {
        case 15:
            $b = r_Branch__init_();
            $b.$failNext = $term.$in;
            $term.$out0.$next3 = $b;
            $b.$in = $b;
            $b.$out0 = $b;
            $b.$out10 = null;
            $b.$branchOut = null;
            return $b;
        default:
    }
    $b = r_Branch__init_();
    $b.$failNext = $term;
    $term.$next3 = $b;
    $b.$in = $b;
    $b.$out0 = $b;
    $b.$out10 = null;
    $b.$branchOut = null;
    return $b;
},
r_Term_makeGreedyPlus = ($vars, $term, $iterators) => {
    let $b;
    switch ($term.$type0) {
        case 15:
            $b = r_Branch__init_();
            $iterators = $term.$in;
            $b.$next3 = $iterators;
            $term.$out0.$next3 = $b;
            $b.$in = $iterators;
            $b.$out0 = null;
            $b.$out10 = null;
            $b.$branchOut = $b;
            return $b;
        default:
    }
    return r_TermIterator__init_($term, 1, (-1), $iterators);
},
r_Term_makeLazyPlus = ($vars, $term) => {
    let $b;
    switch ($term.$type0) {
        case 6:
            break;
        case 15:
            $b = r_Branch__init_();
            $term.$out0.$next3 = $b;
            $term = $term.$in;
            $b.$failNext = $term;
            $b.$in = $term;
            $b.$out0 = $b;
            $b.$out10 = null;
            $b.$branchOut = null;
            return $b;
        default:
    }
    $b = r_Branch__init_();
    $term.$next3 = $b;
    $b.$failNext = $term;
    $b.$in = $term;
    $b.$out0 = $b;
    $b.$out10 = null;
    $b.$branchOut = null;
    return $b;
},
r_Term_makeGreedyQMark = ($vars, $term) => {
    let $b;
    switch ($term.$type0) {
        case 6:
            break;
        case 15:
            $b = r_Branch__init_();
            $b.$next3 = $term.$in;
            $b.$in = $b;
            $b.$out0 = $term.$out0;
            $b.$out10 = null;
            $b.$branchOut = $b;
            return $b;
        default:
    }
    $b = r_Branch__init_();
    $b.$next3 = $term;
    $b.$in = $b;
    $b.$out0 = $term;
    $b.$out10 = null;
    $b.$branchOut = $b;
    return $b;
},
r_Term_makeLazyQMark = ($vars, $term) => {
    let $b;
    switch ($term.$type0) {
        case 6:
            break;
        case 15:
            $b = r_Branch__init_();
            $b.$failNext = $term.$in;
            $b.$in = $b;
            $b.$out0 = $b;
            $b.$out10 = $term.$out0;
            $b.$branchOut = null;
            return $b;
        default:
    }
    $b = r_Branch__init_();
    $b.$failNext = $term;
    $b.$in = $b;
    $b.$out0 = $b;
    $b.$out10 = $term;
    $b.$branchOut = null;
    return $b;
},
r_Term_makeGreedyLimits = ($vars, $term, $limits, $iterators) => {
    let $m, $n, var$7, $reset, $b, $inc, $lt, $gt;
    $limits = $limits.data;
    $m = $limits[0];
    $n = $limits[1];
    switch ($term.$type0) {
        case 15:
            $vars = $vars.data;
            var$7 = $vars[1];
            $vars[1] = var$7 + 1 | 0;
            $reset = r_Term__init_(29);
            $reset.$cntreg = var$7;
            $b = r_Term__init_(32);
            $inc = r_Term__init_(28);
            $inc.$cntreg = var$7;
            $reset.$next3 = $b;
            if ($n < 0)
                $b.$next3 = $term.$in;
            else {
                $lt = r_Term__init_(30);
                $lt.$cntreg = var$7;
                $lt.$maxCount = $n;
                $b.$next3 = $lt;
                $lt.$next3 = $term.$in;
            }
            $term.$out0.$next3 = $inc;
            $inc.$next3 = $b;
            if ($m < 0) {
                $reset.$in = $reset;
                $reset.$out0 = null;
                $reset.$out10 = null;
                $reset.$branchOut = $b;
            } else {
                $gt = r_Term__init_(31);
                $gt.$cntreg = var$7;
                $gt.$maxCount = $m;
                $b.$failNext = $gt;
                $reset.$in = $reset;
                $reset.$out0 = $gt;
                $reset.$out10 = null;
                $reset.$branchOut = null;
            }
            return $reset;
        default:
    }
    return r_TermIterator__init_($term, $limits[0], $limits[1], $iterators);
},
r_Term_makeLazyLimits = ($vars, $term, $limits) => {
    let $m, $n, var$6, $reset, $b, $inc, $lt, $gt;
    a: {
        $limits = $limits.data;
        $m = $limits[0];
        $n = $limits[1];
        switch ($term.$type0) {
            case 6:
                break a;
            case 15:
                break;
            default:
                break a;
        }
        $vars = $vars.data;
        var$6 = $vars[1];
        $vars[1] = var$6 + 1 | 0;
        $reset = r_Term__init_(29);
        $reset.$cntreg = var$6;
        $b = r_Term__init_(32);
        $inc = r_Term__init_(28);
        $inc.$cntreg = var$6;
        $reset.$next3 = $b;
        if ($n < 0)
            $b.$failNext = $term.$in;
        else {
            $lt = r_Term__init_(30);
            $lt.$cntreg = var$6;
            $lt.$maxCount = $n;
            $b.$failNext = $lt;
            $lt.$next3 = $term.$in;
        }
        $term.$out0.$next3 = $inc;
        $inc.$next3 = $b;
        if ($m < 0) {
            $reset.$in = $reset;
            $reset.$out0 = $b;
            $reset.$out10 = null;
            $reset.$branchOut = null;
            return $reset;
        }
        $gt = r_Term__init_(31);
        $gt.$cntreg = var$6;
        $gt.$maxCount = $m;
        $b.$next3 = $gt;
        $reset.$in = $reset;
        $reset.$out0 = $gt;
        $reset.$out10 = null;
        $reset.$branchOut = null;
        return $reset;
    }
    $reset = r_Term__init_(24);
    $b = new r_Branch;
    r_Term__init_1($b);
    switch (33) {
        case 32:
        case 33:
        case 34:
            $b.$type0 = 33;
            $inc = r_Term__init_(25);
            $reset.$next3 = $b;
            if ($n < 0) {
                $b.$next3 = $term;
                $term.$next3 = $inc;
                $inc.$next3 = $term;
            } else {
                $lt = r_Term__init_(27);
                $lt.$maxCount = $n;
                $b.$failNext = $lt;
                $lt.$next3 = $term;
                $term.$next3 = $inc;
                $inc.$next3 = $b;
            }
            if ($m < 0) {
                $reset.$in = $reset;
                $reset.$out0 = $b;
                $reset.$out10 = null;
                $reset.$branchOut = null;
                return $reset;
            }
            $gt = r_Term__init_(26);
            $gt.$maxCount = $m;
            $b.$next3 = $gt;
            $reset.$in = $reset;
            $reset.$out0 = $gt;
            $reset.$out10 = null;
            $reset.$branchOut = null;
            return $reset;
        default:
    }
    $reset = new jl_IllegalArgumentException;
    $term = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($term);
    jl_AbstractStringBuilder_append($term, $rt_s(796));
    jl_Throwable__init_($reset, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1($term, 33)));
    $rt_throw($reset);
},
r_Term_parseTerm = ($this, $data, $i, $out, $term, $flags) => {
    let var$6, $n, $c, $inv, $oct, $d, $dec, $hex;
    var$6 = $data.data;
    $n = $i + 1 | 0;
    $c = var$6[$i];
    $inv = 0;
    if (($flags & 64) == 64) {
        a: {
            switch ($c) {
                case 92:
                    break;
                default:
                    break a;
            }
            if ($n < ($out + 1 | 0) && var$6[$n] == 69) {
                $term.$type0 = 61;
                return $n + 1 | 0;
            }
        }
        $term.$type0 = 0;
        if (!($flags & 1))
            $term.$c = $c;
        else
            $term.$c = r_Category_caseFold($c);
        return $n;
    }
    b: {
        switch ($c) {
            case 36:
                break;
            case 46:
                $term.$type0 = ($flags & 4) <= 0 ? 5 : 4;
                break b;
            case 91:
                return r_CharacterClass_parseClass0($data, $n, $out, $term, ($flags & 1) <= 0 ? 0 : 1, ($flags & 8) <= 0 ? 0 : 1, ($flags & 16) <= 0 ? 0 : 1, ($flags & 32) <= 0 ? 0 : 1);
            case 92:
                if ($n >= $out)
                    $rt_throw(r_PatternSyntaxException__init_($rt_s(797)));
                c: {
                    d: {
                        e: {
                            f: {
                                g: {
                                    h: {
                                        i: {
                                            j: {
                                                k: {
                                                    $i = $n + 1 | 0;
                                                    $oct = var$6[$n];
                                                    switch ($oct) {
                                                        case 48:
                                                        case 111:
                                                            $oct = 0;
                                                            l: {
                                                                while (true) {
                                                                    if ($i >= $out) {
                                                                        $n = $i;
                                                                        break l;
                                                                    }
                                                                    $n = $i + 1 | 0;
                                                                    $d = var$6[$i];
                                                                    if ($d < 48)
                                                                        break l;
                                                                    if ($d > 55)
                                                                        break;
                                                                    $i = $oct * 8 | 0;
                                                                    $flags = $d - 48 | 0;
                                                                    $oct = $i + $flags | 0;
                                                                    if ($oct > 65535) {
                                                                        $oct = ($oct - $flags | 0) / 8 | 0;
                                                                        break l;
                                                                    }
                                                                    $i = $n;
                                                                }
                                                            }
                                                            $oct = $oct & 65535;
                                                            break c;
                                                        case 49:
                                                        case 50:
                                                        case 51:
                                                        case 52:
                                                        case 53:
                                                        case 54:
                                                        case 55:
                                                        case 56:
                                                        case 57:
                                                        case 58:
                                                        case 59:
                                                        case 61:
                                                        case 63:
                                                        case 64:
                                                        case 67:
                                                        case 69:
                                                        case 70:
                                                        case 73:
                                                        case 74:
                                                        case 75:
                                                        case 76:
                                                        case 77:
                                                        case 78:
                                                        case 79:
                                                        case 82:
                                                        case 84:
                                                        case 85:
                                                        case 88:
                                                        case 89:
                                                        case 91:
                                                        case 92:
                                                        case 93:
                                                        case 94:
                                                        case 95:
                                                        case 96:
                                                        case 97:
                                                        case 101:
                                                        case 103:
                                                        case 105:
                                                        case 106:
                                                        case 107:
                                                        case 108:
                                                        case 113:
                                                        case 121:
                                                            break d;
                                                        case 60:
                                                            r_CharacterClass_makeWordStart($term, ($flags & 16) <= 0 ? 0 : 1);
                                                            return $i;
                                                        case 62:
                                                            r_CharacterClass_makeWordEnd($term, ($flags & 16) <= 0 ? 0 : 1);
                                                            return $i;
                                                        case 65:
                                                            break;
                                                        case 66:
                                                            $inv = 1;
                                                            break k;
                                                        case 68:
                                                            $inv = 1;
                                                            break j;
                                                        case 71:
                                                            $term.$type0 = 23;
                                                            return $i;
                                                        case 72:
                                                            $inv = 1;
                                                            break i;
                                                        case 80:
                                                            $inv = 1;
                                                            break h;
                                                        case 81:
                                                            $term.$type0 = 60;
                                                            return $i;
                                                        case 83:
                                                            $inv = 1;
                                                            break g;
                                                        case 86:
                                                            $inv = 1;
                                                            break f;
                                                        case 87:
                                                            $inv = 1;
                                                            break e;
                                                        case 90:
                                                            $term.$type0 = 20;
                                                            return $i;
                                                        case 99:
                                                            $n = $i + 1 | 0;
                                                            $oct = var$6[$i] & 31 & 65535;
                                                            break c;
                                                        case 102:
                                                            $oct = 12;
                                                            $n = $i;
                                                            break c;
                                                        case 109:
                                                            $dec = 0;
                                                            m: {
                                                                while (true) {
                                                                    if ($i >= $out) {
                                                                        $n = $i;
                                                                        break m;
                                                                    }
                                                                    $n = $i + 1 | 0;
                                                                    $d = var$6[$i];
                                                                    if ($d < 48)
                                                                        break m;
                                                                    if ($d > 57)
                                                                        break;
                                                                    $i = $dec * 10 | 0;
                                                                    $flags = $d - 48 | 0;
                                                                    $dec = $i + $flags | 0;
                                                                    if ($dec > 65535) {
                                                                        $dec = ($dec - $flags | 0) / 10 | 0;
                                                                        break m;
                                                                    }
                                                                    $i = $n;
                                                                }
                                                            }
                                                            $oct = $dec & 65535;
                                                            break c;
                                                        case 110:
                                                            $oct = 10;
                                                            $n = $i;
                                                            break c;
                                                        case 114:
                                                            $oct = 13;
                                                            $n = $i;
                                                            break c;
                                                        case 116:
                                                            $oct = 9;
                                                            $n = $i;
                                                            break c;
                                                        case 117:
                                                            if ($i >= ($out - 3 | 0)) {
                                                                $oct = 0;
                                                                $n = $out;
                                                                break c;
                                                            }
                                                            $out = $i + 1 | 0;
                                                            $i = r_CharacterClass_toHexDigit(var$6[$i]) << 12;
                                                            $flags = $out + 1 | 0;
                                                            $out = $i + (r_CharacterClass_toHexDigit(var$6[$out]) << 8) | 0;
                                                            $i = $flags + 1 | 0;
                                                            $out = $out + (r_CharacterClass_toHexDigit(var$6[$flags]) << 4) | 0;
                                                            $n = $i + 1 | 0;
                                                            $oct = ($out + r_CharacterClass_toHexDigit(var$6[$i]) | 0) & 65535;
                                                            break c;
                                                        case 120:
                                                            n: {
                                                                $hex = 0;
                                                                $flags = $i + 1 | 0;
                                                                $i = var$6[$i];
                                                                if ($i != 123) {
                                                                    $i = r_CharacterClass_toHexDigit($i) << 4;
                                                                    $n = $flags + 1 | 0;
                                                                    $hex = $i + r_CharacterClass_toHexDigit(var$6[$flags]) | 0;
                                                                } else {
                                                                    while (true) {
                                                                        if ($flags >= $out) {
                                                                            $n = $flags;
                                                                            break n;
                                                                        }
                                                                        $n = $flags + 1 | 0;
                                                                        $i = var$6[$flags];
                                                                        if ($i == 125)
                                                                            break n;
                                                                        $hex = ($hex << 4) + r_CharacterClass_toHexDigit($i) | 0;
                                                                        if ($hex > 65535)
                                                                            break;
                                                                        if ($n == $out)
                                                                            break;
                                                                        $flags = $n;
                                                                    }
                                                                    $rt_throw(r_PatternSyntaxException__init_($rt_s(798)));
                                                                }
                                                            }
                                                            $oct = $hex & 65535;
                                                            break c;
                                                        case 122:
                                                            $term.$type0 = 19;
                                                            return $i;
                                                        case 98:
                                                            break k;
                                                        case 100:
                                                            break j;
                                                        case 104:
                                                            break i;
                                                        case 112:
                                                            break h;
                                                        case 115:
                                                            break g;
                                                        case 118:
                                                            break f;
                                                        case 119:
                                                            break e;
                                                        default:
                                                            break d;
                                                    }
                                                    $term.$type0 = 18;
                                                    return $i;
                                                }
                                                r_CharacterClass_makeWordBoundary($term, $inv, ($flags & 16) <= 0 ? 0 : 1);
                                                return $i;
                                            }
                                            r_CharacterClass_makeDigit($term, $inv, ($flags & 16) <= 0 ? 0 : 1);
                                            return $i;
                                        }
                                        r_CharacterClass_makeHSpace($term, $inv, ($flags & 16) <= 0 ? 0 : 1);
                                        return $i;
                                    }
                                    return r_CharacterClass_parseName0($data, $i, $out, $term, $inv, ($flags & 8) <= 0 ? 0 : 1);
                                }
                                r_CharacterClass_makeSpace($term, $inv, ($flags & 16) <= 0 ? 0 : 1);
                                return $i;
                            }
                            r_CharacterClass_makeVSpace($term, $inv, ($flags & 16) <= 0 ? 0 : 1);
                            return $i;
                        }
                        r_CharacterClass_makeWordChar($term, $inv, ($flags & 16) <= 0 ? 0 : 1);
                        return $i;
                    }
                    if ($oct < 49)
                        $n = $i;
                    else {
                        if ($oct <= 57) {
                            $n = $oct - 48 | 0;
                            while ($i < $out) {
                                $oct = var$6[$i];
                                if ($oct < 48)
                                    break;
                                if ($oct > 57)
                                    break;
                                $n = (($n * 10 | 0) + $oct | 0) - 48 | 0;
                                $i = $i + 1 | 0;
                            }
                            $term.$type0 = ($flags & 1) <= 0 ? 6 : 7;
                            $term.$memreg = $n;
                            return $i;
                        }
                        $n = $i;
                    }
                }
                $term.$type0 = 0;
                $term.$c = $oct;
                break b;
            case 94:
                $term.$type0 = ($flags & 2) <= 0 ? 18 : 21;
                break b;
            default:
                if (!($flags & 1)) {
                    $term.$type0 = 0;
                    $term.$c = $c;
                    break b;
                }
                $term.$type0 = 0;
                $term.$c = r_Category_caseFold($c);
                break b;
        }
        $term.$type0 = ($flags & 2) <= 0 ? 20 : 22;
    }
    return $n;
},
r_Term_parseLimits = ($i, $end, $data, $limits) => {
    let $ind, var$6, var$7, $v, var$9, var$10, $c;
    $limits = $limits.data;
    $ind = $limits.length;
    if ($ind != 3) {
        var$6 = new jl_IllegalArgumentException;
        var$7 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$7);
        jl_AbstractStringBuilder_append(var$7, $rt_s(799));
        var$7 = jl_StringBuilder_append1(var$7, $ind);
        jl_AbstractStringBuilder_append(var$7, $rt_s(800));
        jl_Throwable__init_(var$6, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$7, 3)));
        $rt_throw(var$6);
    }
    $limits[2] = 1;
    $ind = 0;
    $v = 0;
    a: while (true) {
        if ($i >= $end) {
            var$6 = new r_PatternSyntaxException;
            jl_Throwable__init_(var$6, $rt_s(801));
            $rt_throw(var$6);
        }
        b: {
            var$9 = $data.data;
            var$10 = $i + 1 | 0;
            $c = var$9[$i];
            switch ($c) {
                case 32:
                    break;
                case 44:
                    if ($ind > 0) {
                        var$6 = new r_PatternSyntaxException;
                        jl_Throwable__init_(var$6, $rt_s(802));
                        $rt_throw(var$6);
                    }
                    $c = $ind + 1 | 0;
                    $limits[$ind] = $v;
                    $v = (-1);
                    $i = var$10;
                    $ind = $c;
                    continue a;
                case 125:
                    $limits[$ind] = $v;
                    if (!$ind)
                        $limits[1] = $v;
                    return var$10;
                default:
                    break b;
            }
            $i = var$10;
            continue a;
        }
        if ($c > 57)
            break;
        if ($c < 48)
            break;
        if ($v < 0)
            $v = 0;
        $v = ($v * 10 | 0) + ($c - 48 | 0) | 0;
        $i = var$10;
    }
    $limits[2] = 2;
    return var$10;
},
r_Term_termLookup = $t => {
    a: {
        switch ($t) {
            case 0:
                break;
            case 1:
                return $rt_s(803);
            case 2:
                return $rt_s(804);
            case 3:
                break a;
            case 4:
                return $rt_s(805);
            case 5:
                return $rt_s(806);
            case 6:
                return $rt_s(807);
            case 7:
                return $rt_s(808);
            case 8:
                return $rt_s(809);
            case 9:
                return $rt_s(810);
            case 10:
                return $rt_s(811);
            case 11:
                return $rt_s(812);
            case 12:
                return $rt_s(813);
            case 13:
                return $rt_s(814);
            case 14:
                return $rt_s(815);
            case 15:
                return $rt_s(816);
            case 16:
                return $rt_s(817);
            case 17:
                return $rt_s(818);
            case 18:
                return $rt_s(819);
            case 19:
                return $rt_s(650);
            case 20:
                return $rt_s(820);
            case 21:
                return $rt_s(821);
            case 22:
                return $rt_s(822);
            case 23:
                return $rt_s(823);
            case 24:
                return $rt_s(824);
            case 25:
                return $rt_s(825);
            case 26:
                return $rt_s(826);
            case 27:
                return $rt_s(827);
            case 28:
                return $rt_s(828);
            case 29:
                return $rt_s(829);
            case 30:
                return $rt_s(830);
            case 31:
                return $rt_s(831);
            case 32:
                return $rt_s(832);
            case 33:
                return $rt_s(833);
            case 34:
                return $rt_s(834);
            case 35:
                return $rt_s(835);
            case 36:
                return $rt_s(836);
            case 37:
                return $rt_s(837);
            case 38:
                return $rt_s(838);
            case 39:
                return $rt_s(839);
            case 40:
                return $rt_s(840);
            case 41:
                return $rt_s(841);
            case 42:
                return $rt_s(842);
            case 43:
                return $rt_s(843);
            case 44:
                return $rt_s(844);
            case 45:
                return $rt_s(845);
            case 46:
                return $rt_s(846);
            case 47:
                return $rt_s(847);
            case 48:
                return $rt_s(848);
            case 49:
                return $rt_s(849);
            case 50:
                return $rt_s(850);
            case 51:
                return $rt_s(851);
            case 52:
                return $rt_s(852);
            case 53:
                return $rt_s(853);
            case 54:
                return $rt_s(854);
            case 55:
                return $rt_s(855);
            case 56:
                return $rt_s(856);
            case 57:
                return $rt_s(857);
            case 58:
                return $rt_s(858);
            case 59:
                return $rt_s(859);
            default:
                break a;
        }
        return $rt_s(860);
    }
    return $rt_s(861);
},
r_Term_toString = $this => {
    let $b, var$2, var$3;
    $b = jl_StringBuilder__init_0(100);
    jl_StringBuilder_append1($b, $this.$instanceNum);
    jl_StringBuilder_append2($b, 32);
    jl_StringBuilder_append0($b, r_Term_termLookup($this.$type0));
    jl_StringBuilder_append0($b, $rt_s(27));
    if ($this.$inverse)
        jl_StringBuilder_append2($b, 94);
    a: {
        b: {
            c: {
                d: {
                    e: {
                        f: {
                            g: {
                                h: {
                                    i: {
                                        j: {
                                            k: {
                                                l: {
                                                    m: {
                                                        n: {
                                                            switch ($this.$type0) {
                                                                case 0:
                                                                    jl_StringBuilder_append0($b, r_CharacterClass_stringValue($this.$c));
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 1:
                                                                    jl_StringBuilder_append2($b, 91);
                                                                    jl_StringBuilder_append0($b, r_CharacterClass_stringValue0($this.$bitset));
                                                                    jl_StringBuilder_append2($b, 93);
                                                                    jl_StringBuilder_append0($b, $rt_s(863));
                                                                    jl_StringBuilder_append1($b, $this.$weight0);
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 2:
                                                                    jl_StringBuilder_append2($b, 91);
                                                                    jl_StringBuilder_append0($b, r_CharacterClass_stringValue2($this.$bitset2));
                                                                    jl_StringBuilder_append2($b, 93);
                                                                    jl_StringBuilder_append0($b, $rt_s(864));
                                                                    jl_StringBuilder_append1($b, $this.$weight0);
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 3:
                                                                case 7:
                                                                case 24:
                                                                case 25:
                                                                case 26:
                                                                case 27:
                                                                case 28:
                                                                case 29:
                                                                case 30:
                                                                case 31:
                                                                case 43:
                                                                case 44:
                                                                case 52:
                                                                case 53:
                                                                    break b;
                                                                case 4:
                                                                    jl_StringBuilder_append0($b, $rt_s(865));
                                                                    break a;
                                                                case 5:
                                                                    jl_StringBuilder_append0($b, $rt_s(866));
                                                                    break a;
                                                                case 6:
                                                                    jl_StringBuilder_append0($b, $rt_s(867));
                                                                    jl_StringBuilder_append1($b, $this.$memreg);
                                                                    jl_StringBuilder_append0($b, $rt_s(130));
                                                                    break a;
                                                                case 8:
                                                                    break g;
                                                                case 9:
                                                                    break h;
                                                                case 10:
                                                                    break;
                                                                case 11:
                                                                    if ($this.$inverse)
                                                                        jl_StringBuilder_append0($b, $rt_s(868));
                                                                    jl_StringBuilder_append0($b, $rt_s(812));
                                                                    break a;
                                                                case 12:
                                                                    jl_StringBuilder_append0($b, $rt_s(813));
                                                                    break a;
                                                                case 13:
                                                                    if ($this.$inverse)
                                                                        jl_StringBuilder_append0($b, $rt_s(868));
                                                                    jl_StringBuilder_append0($b, $rt_s(814));
                                                                    break a;
                                                                case 14:
                                                                    jl_StringBuilder_append0($b, $rt_s(815));
                                                                    break a;
                                                                case 15:
                                                                    jl_StringBuilder_append2($b, 40);
                                                                    var$2 = $this.$memreg;
                                                                    if (var$2 > 0)
                                                                        jl_StringBuilder_append1($b, var$2);
                                                                    jl_StringBuilder_append2($b, 45);
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 16:
                                                                    jl_StringBuilder_append2($b, 45);
                                                                    var$2 = $this.$memreg;
                                                                    if (var$2 > 0)
                                                                        jl_StringBuilder_append1($b, var$2);
                                                                    jl_StringBuilder_append2($b, 41);
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 17:
                                                                    jl_StringBuilder_append0($b, $rt_s(25));
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 18:
                                                                    jl_StringBuilder_append0($b, $rt_s(869));
                                                                    break a;
                                                                case 19:
                                                                    jl_StringBuilder_append0($b, $rt_s(870));
                                                                    break a;
                                                                case 20:
                                                                    jl_StringBuilder_append0($b, $rt_s(871));
                                                                    break a;
                                                                case 21:
                                                                    jl_StringBuilder_append0($b, $rt_s(872));
                                                                    break a;
                                                                case 22:
                                                                    jl_StringBuilder_append0($b, $rt_s(873));
                                                                    break a;
                                                                case 23:
                                                                    if ($this.$inverse)
                                                                        jl_StringBuilder_append0($b, $rt_s(868));
                                                                    jl_StringBuilder_append0($b, $rt_s(812));
                                                                    break a;
                                                                case 32:
                                                                    break e;
                                                                case 33:
                                                                    break f;
                                                                case 34:
                                                                    jl_StringBuilder_append0($b, $rt_s(874));
                                                                    break f;
                                                                case 35:
                                                                    jl_StringBuilder_append2($b, 40);
                                                                    jl_StringBuilder_append0($b, $rt_s(543));
                                                                    jl_StringBuilder_append1($b, $this.$lookaheadId);
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 36:
                                                                    jl_StringBuilder_append2($b, 61);
                                                                    jl_StringBuilder_append1($b, $this.$lookaheadId);
                                                                    jl_StringBuilder_append2($b, 41);
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 37:
                                                                    jl_StringBuilder_append0($b, $rt_s(875));
                                                                    jl_StringBuilder_append1($b, $this.$lookaheadId);
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    if ($this.$failNext === null)
                                                                        break a;
                                                                    jl_StringBuilder_append0($b, $rt_s(876));
                                                                    jl_StringBuilder_append1($b, $this.$failNext.$instanceNum);
                                                                    jl_StringBuilder_append0($b, $rt_s(130));
                                                                    break a;
                                                                case 38:
                                                                    jl_StringBuilder_append2($b, 33);
                                                                    jl_StringBuilder_append1($b, $this.$lookaheadId);
                                                                    jl_StringBuilder_append2($b, 41);
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 39:
                                                                    jl_StringBuilder_append2($b, 40);
                                                                    jl_StringBuilder_append0($b, $rt_s(877));
                                                                    jl_StringBuilder_append1($b, $this.$lookaheadId);
                                                                    jl_StringBuilder_append0($b, $rt_s(878));
                                                                    jl_StringBuilder_append1($b, $this.$distance);
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 40:
                                                                    jl_StringBuilder_append0($b, $rt_s(877));
                                                                    jl_StringBuilder_append1($b, $this.$lookaheadId);
                                                                    jl_StringBuilder_append2($b, 41);
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 41:
                                                                    break k;
                                                                case 42:
                                                                    jl_StringBuilder_append0($b, $rt_s(879));
                                                                    jl_StringBuilder_append1($b, $this.$lookaheadId);
                                                                    jl_StringBuilder_append2($b, 41);
                                                                    jl_StringBuilder_append0($b, $rt_s(862));
                                                                    break a;
                                                                case 45:
                                                                    break n;
                                                                case 46:
                                                                    break j;
                                                                case 47:
                                                                    jl_StringBuilder_append0($b, $rt_s(880));
                                                                    jl_StringBuilder_append($b, $this.$target);
                                                                    jl_StringBuilder_append0($b, $rt_s(466));
                                                                    jl_StringBuilder_append1($b, $this.$minCount);
                                                                    jl_StringBuilder_append0($b, $rt_s(466));
                                                                    jl_StringBuilder_append1($b, $this.$maxCount);
                                                                    jl_StringBuilder_append0($b, $rt_s(881));
                                                                    if ($this.$failNext === null)
                                                                        break a;
                                                                    jl_StringBuilder_append0($b, $rt_s(876));
                                                                    jl_StringBuilder_append1($b, $this.$failNext.$instanceNum);
                                                                    jl_StringBuilder_append0($b, $rt_s(130));
                                                                    break a;
                                                                case 48:
                                                                    break i;
                                                                case 49:
                                                                    break d;
                                                                case 50:
                                                                    jl_StringBuilder_append0($b, $rt_s(882));
                                                                    break a;
                                                                case 51:
                                                                    jl_StringBuilder_append0($b, $rt_s(883));
                                                                    jl_StringBuilder_append1($b, $this.$minCount);
                                                                    jl_StringBuilder_append0($b, $rt_s(17));
                                                                    break a;
                                                                case 54:
                                                                    jl_StringBuilder_append0($b, $rt_s(884));
                                                                    jl_StringBuilder_append0($b, $rt_s(885));
                                                                    jl_StringBuilder_append1($b, $this.$memreg);
                                                                    jl_StringBuilder_append0($b, $rt_s(614));
                                                                    jl_StringBuilder_append1($b, $this.$minCount);
                                                                    jl_StringBuilder_append0($b, $rt_s(17));
                                                                    break a;
                                                                case 55:
                                                                    break m;
                                                                case 56:
                                                                    break c;
                                                                case 57:
                                                                    break l;
                                                                default:
                                                                    break b;
                                                            }
                                                            return jl_StringBuilder_toString(jl_StringBuilder_append0($b, $rt_s(650)));
                                                        }
                                                        jl_StringBuilder_append0($b, $rt_s(880));
                                                        jl_StringBuilder_append($b, $this.$target);
                                                        jl_StringBuilder_append0($b, $rt_s(886));
                                                        if ($this.$failNext === null)
                                                            break a;
                                                        jl_StringBuilder_append0($b, $rt_s(876));
                                                        jl_StringBuilder_append1($b, $this.$failNext.$instanceNum);
                                                        jl_StringBuilder_append0($b, $rt_s(130));
                                                        break a;
                                                    }
                                                    jl_StringBuilder_append0($b, $rt_s(887));
                                                    jl_StringBuilder_append1($b, $this.$memreg);
                                                    jl_StringBuilder_append0($b, $rt_s(888));
                                                    if ($this.$failNext === null)
                                                        break a;
                                                    jl_StringBuilder_append0($b, $rt_s(876));
                                                    jl_StringBuilder_append1($b, $this.$failNext.$instanceNum);
                                                    jl_StringBuilder_append0($b, $rt_s(130));
                                                    break a;
                                                }
                                                jl_StringBuilder_append0($b, $rt_s(889));
                                                jl_StringBuilder_append1($b, $this.$lookaheadId);
                                                jl_StringBuilder_append0($b, $rt_s(17));
                                                if ($this.$failNext === null)
                                                    break a;
                                                jl_StringBuilder_append0($b, $rt_s(876));
                                                jl_StringBuilder_append1($b, $this.$failNext.$instanceNum);
                                                jl_StringBuilder_append0($b, $rt_s(130));
                                                break a;
                                            }
                                            jl_StringBuilder_append0($b, $rt_s(890));
                                            jl_StringBuilder_append1($b, $this.$lookaheadId);
                                            jl_StringBuilder_append0($b, $rt_s(878));
                                            jl_StringBuilder_append1($b, $this.$distance);
                                            jl_StringBuilder_append0($b, $rt_s(862));
                                            if ($this.$failNext === null)
                                                break a;
                                            jl_StringBuilder_append0($b, $rt_s(876));
                                            jl_StringBuilder_append1($b, $this.$failNext.$instanceNum);
                                            jl_StringBuilder_append0($b, $rt_s(130));
                                            break a;
                                        }
                                        jl_StringBuilder_append0($b, $rt_s(880));
                                        jl_StringBuilder_append($b, $this.$target);
                                        jl_StringBuilder_append0($b, $rt_s(466));
                                        jl_StringBuilder_append1($b, $this.$minCount);
                                        jl_StringBuilder_append0($b, $rt_s(891));
                                        if ($this.$failNext === null)
                                            break a;
                                        jl_StringBuilder_append0($b, $rt_s(876));
                                        jl_StringBuilder_append1($b, $this.$failNext.$instanceNum);
                                        jl_StringBuilder_append0($b, $rt_s(130));
                                        break a;
                                    }
                                    jl_StringBuilder_append0($b, $rt_s(892));
                                    jl_StringBuilder_append1($b, $this.$memreg);
                                    jl_StringBuilder_append2($b, 44);
                                    jl_StringBuilder_append1($b, $this.$minCount);
                                    jl_StringBuilder_append0($b, $rt_s(891));
                                    if ($this.$failNext === null)
                                        break a;
                                    jl_StringBuilder_append0($b, $rt_s(876));
                                    jl_StringBuilder_append1($b, $this.$failNext.$instanceNum);
                                    jl_StringBuilder_append0($b, $rt_s(130));
                                    break a;
                                }
                                jl_StringBuilder_append2($b, 37);
                            }
                            jl_StringBuilder_append0($b, $rt_s(893));
                            jl_StringBuilder_append($b, $this.$target);
                            jl_StringBuilder_append0($b, $rt_s(894));
                            jl_StringBuilder_append1($b, $this.$distance);
                            if ($this.$eat)
                                jl_StringBuilder_append0($b, $rt_s(895));
                            jl_StringBuilder_append0($b, $rt_s(130));
                            break a;
                        }
                        jl_StringBuilder_append0($b, $rt_s(896));
                    }
                    jl_StringBuilder_append0($b, $rt_s(897));
                    var$3 = $this.$failNext;
                    if (var$3 === null)
                        jl_StringBuilder_append0($b, $rt_s(30));
                    else
                        jl_StringBuilder_append1($b, var$3.$instanceNum);
                    jl_StringBuilder_append0($b, $rt_s(862));
                    break a;
                }
                jl_StringBuilder_append0($b, $rt_s(892));
                jl_StringBuilder_append1($b, $this.$memreg);
                jl_StringBuilder_append2($b, 44);
                jl_StringBuilder_append1($b, $this.$minCount);
                jl_StringBuilder_append2($b, 44);
                jl_StringBuilder_append1($b, $this.$maxCount);
                jl_StringBuilder_append0($b, $rt_s(881));
                if ($this.$failNext === null)
                    break a;
                jl_StringBuilder_append0($b, $rt_s(876));
                jl_StringBuilder_append1($b, $this.$failNext.$instanceNum);
                jl_StringBuilder_append0($b, $rt_s(130));
                break a;
            }
            jl_StringBuilder_append0($b, $rt_s(898));
            jl_StringBuilder_append1($b, $this.$lookaheadId);
            jl_StringBuilder_append2($b, !$this.$isPositive ? 33 : 61);
            jl_StringBuilder_append0($b, $rt_s(862));
            if ($this.$failNext === null)
                break a;
            jl_StringBuilder_append0($b, $rt_s(876));
            jl_StringBuilder_append1($b, $this.$failNext.$instanceNum);
            jl_StringBuilder_append0($b, $rt_s(130));
            break a;
        }
        o: {
            jl_StringBuilder_append2($b, 91);
            switch ($this.$type0) {
                case 24:
                    break;
                case 25:
                    jl_StringBuilder_append0($b, $rt_s(899));
                    break o;
                case 26:
                    jl_StringBuilder_append1(jl_StringBuilder_append0($b, $rt_s(900)), $this.$maxCount);
                    break o;
                case 27:
                    jl_StringBuilder_append1(jl_StringBuilder_append0($b, $rt_s(901)), $this.$maxCount);
                    break o;
                case 28:
                    jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0($b, $rt_s(902)), $this.$memreg), $rt_s(903)), $this.$cntreg), $rt_s(903)), $this.$cntreg), $rt_s(904));
                    break o;
                case 29:
                    jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0($b, $rt_s(905)), $this.$cntreg), $rt_s(906));
                    break o;
                case 30:
                    jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0($b, $rt_s(905)), $this.$cntreg), $rt_s(907)), $this.$maxCount);
                    break o;
                case 31:
                    jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0($b, $rt_s(905)), $this.$cntreg), $rt_s(908)), $this.$maxCount);
                    break o;
                default:
                    jl_StringBuilder_append1(jl_StringBuilder_append0($b, $rt_s(909)), $this.$type0);
                    break o;
            }
            jl_StringBuilder_append0($b, $rt_s(910));
        }
        jl_StringBuilder_append0($b, $rt_s(911));
    }
    if ($this.$next3 !== null) {
        jl_StringBuilder_append0($b, $rt_s(912));
        jl_StringBuilder_append1($b, $this.$next3.$instanceNum);
        jl_StringBuilder_append0($b, $rt_s(130));
    }
    return jl_StringBuilder_toString($b);
},
r_Term_equals = ($this, $o) => {
    let $term, var$3, var$4, var$5, var$6;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        $term = $o;
        if ($this.$type0 != $term.$type0)
            return 0;
        if ($this.$inverse != $term.$inverse)
            return 0;
        if ($this.$c != $term.$c)
            return 0;
        if ($this.$distance != $term.$distance)
            return 0;
        if ($this.$eat != $term.$eat)
            return 0;
        if ($this.$weight0 != $term.$weight0)
            return 0;
        if ($this.$memreg != $term.$memreg)
            return 0;
        if ($this.$minCount != $term.$minCount)
            return 0;
        if ($this.$maxCount != $term.$maxCount)
            return 0;
        if ($this.$cntreg != $term.$cntreg)
            return 0;
        if ($this.$lookaheadId != $term.$lookaheadId)
            return 0;
        a: {
            b: {
                $o = $this.$next3;
                if ($o === null) {
                    if ($term.$next3 === null)
                        break a;
                    else
                        break b;
                }
                if ($o.$equals($term.$next3))
                    break a;
            }
            return 0;
        }
        c: {
            d: {
                $o = $this.$bitset;
                if ($o === null) {
                    if ($term.$bitset === null)
                        break c;
                    else
                        break d;
                }
                if (rd_IntBitSet_equals($o, $term.$bitset))
                    break c;
            }
            return 0;
        }
        e: {
            if (ju_Arrays_equals($this.$bitset2, $term.$bitset2)) {
                f: {
                    var$3 = $this.$categoryBitset;
                    var$4 = $term.$categoryBitset;
                    if (var$3 === var$4)
                        var$5 = 1;
                    else {
                        if (var$3 !== null && var$4 !== null) {
                            var$3 = var$3.data;
                            var$4 = var$4.data;
                            var$5 = var$3.length;
                            if (var$5 == var$4.length) {
                                var$6 = 0;
                                g: {
                                    while (true) {
                                        if (var$6 >= var$5) {
                                            var$6 = (-1);
                                            break g;
                                        }
                                        if (var$3[var$6] != var$4[var$6])
                                            break;
                                        var$6 = var$6 + 1 | 0;
                                    }
                                }
                                var$5 = var$6 >= 0 ? 0 : 1;
                                break f;
                            }
                        }
                        var$5 = 0;
                    }
                }
                if (var$5) {
                    var$5 = 1;
                    break e;
                }
            }
            var$5 = 0;
        }
        return var$5;
    }
    return 0;
},
r_Term_hashCode = $this => {
    let var$1, $result, var$3, var$4, var$5, var$6;
    var$1 = $this.$next3;
    $result = var$1 === null ? 0 : var$1.$hashCode();
    $result = 31 * ((31 * $result | 0) + $this.$type0 | 0) | 0;
    var$3 = !$this.$inverse ? 0 : 1;
    $result = 31 * ((31 * ((31 * ((31 * ($result + var$3 | 0) | 0) + $this.$c | 0) | 0) + $this.$distance | 0) | 0) + (!$this.$eat ? 0 : 1) | 0) | 0;
    var$1 = $this.$bitset;
    $result = 31 * ($result + (var$1 === null ? 0 : rd_IntBitSet_hashCode(var$1)) | 0) | 0;
    var$4 = $this.$bitset2;
    if (var$4 === null)
        var$3 = 0;
    else {
        var$3 = 1;
        var$5 = 0;
        while (true) {
            var$6 = var$4.data;
            if (var$5 >= var$6.length)
                break;
            var$3 = (31 * var$3 | 0) + ju_Objects_hashCode(var$6[var$5]) | 0;
            var$5 = var$5 + 1 | 0;
        }
    }
    $result = 31 * ($result + var$3 | 0) | 0;
    var$4 = $this.$categoryBitset;
    if (var$4 === null)
        var$3 = 0;
    else {
        var$3 = 1;
        var$5 = 0;
        while (true) {
            var$6 = var$4.data;
            if (var$5 >= var$6.length)
                break;
            var$3 = (31 * var$3 | 0) + (!var$6[var$5] ? 1237 : 1231) | 0;
            var$5 = var$5 + 1 | 0;
        }
    }
    return (31 * ((31 * ((31 * ((31 * ((31 * ((31 * ($result + var$3 | 0) | 0) + $this.$weight0 | 0) | 0) + $this.$memreg | 0) | 0) + $this.$minCount | 0) | 0) + $this.$maxCount | 0) | 0) + $this.$cntreg | 0) | 0) + $this.$lookaheadId | 0;
},
rb_MatchResult = $rt_classWithoutFields(0),
r_MatchResult = $rt_classWithoutFields(0);
function r_Matcher() {
    let a = this; jl_Object.call(a);
    a.$re = null;
    a.$counters0 = null;
    a.$memregs = null;
    a.$lookaheads = null;
    a.$counterCount = 0;
    a.$memregCount = 0;
    a.$lookaheadCount = 0;
    a.$data2 = null;
    a.$offset = 0;
    a.$end2 = 0;
    a.$wOffset = 0;
    a.$wEnd = 0;
    a.$shared0 = 0;
    a.$top0 = null;
    a.$first1 = null;
    a.$defaultEntry = null;
    a.$called = 0;
    a.$minQueueLength = 0;
    a.$cache = null;
    a.$cacheOffset = 0;
    a.$cacheLength = 0;
    a.$prefixBounds = null;
    a.$suffixBounds = null;
    a.$targetBounds = null;
}
let r_Matcher_startAnchor = null,
r_Matcher_lastMatchAnchor = null,
r_Matcher_$callClinit = () => {
    r_Matcher_$callClinit = $rt_eraseClinit(r_Matcher);
    r_Matcher__clinit_();
},
r_Matcher__init_0 = ($this, $regex) => {
    let var$2, var$3, var$4, var$5, var$6, var$7;
    r_Matcher_$callClinit();
    $this.$re = $regex;
    var$2 = $regex.$memregs0;
    if (var$2 > 0) {
        var$3 = $rt_createArray(r_MemReg, var$2);
        var$4 = var$3.data;
        var$5 = 0;
        while (var$5 < var$2) {
            var$4[var$5] = r_MemReg__init_((-1));
            var$5 = var$5 + 1 | 0;
        }
        $this.$memregs = var$3;
    }
    var$5 = $regex.$counters;
    if (var$5 > 0)
        $this.$counters0 = $rt_createIntArray(var$5);
    var$6 = $regex.$lookaheads0;
    if (var$6 > 0) {
        var$4 = $rt_createArray(r_LAEntry, var$6);
        var$3 = var$4.data;
        var$7 = 0;
        while (var$7 < var$6) {
            var$3[var$7] = new r_LAEntry;
            var$7 = var$7 + 1 | 0;
        }
        $this.$lookaheads = var$4;
    }
    $this.$memregCount = var$2;
    $this.$counterCount = var$5;
    $this.$lookaheadCount = var$6;
    $this.$first1 = new r_SearchEntry;
    $this.$defaultEntry = new r_SearchEntry;
    $this.$minQueueLength = $regex.$stringRepr.$nativeString.length / 2 | 0;
},
r_Matcher__init_ = var_0 => {
    let var_1 = new r_Matcher();
    r_Matcher__init_0(var_1, var_0);
    return var_1;
},
r_Matcher_setTarget0 = ($this, $m, $groupId) => {
    let $mr;
    $mr = r_Matcher_bounds($m, $groupId);
    if ($mr === null) {
        $mr = new jl_IllegalArgumentException;
        $m = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($m);
        jl_AbstractStringBuilder_append($m, $rt_s(743));
        $m = jl_StringBuilder_append1($m, $groupId);
        jl_AbstractStringBuilder_append($m, $rt_s(744));
        jl_Throwable__init_($mr, jl_AbstractStringBuilder_toString($m));
        $rt_throw($mr);
    }
    $this.$data2 = $m.$data2;
    $this.$offset = $mr.$in0;
    $this.$end2 = $mr.$out1;
    $this.$cache = $m.$cache;
    $this.$cacheLength = $m.$cacheLength;
    $this.$cacheOffset = $m.$cacheOffset;
    if ($m !== $this) {
        $this.$shared0 = 1;
        $m.$shared0 = 1;
    }
    r_Matcher_init($this);
},
r_Matcher_setTarget = ($this, $text) => {
    r_Matcher_setTarget1($this, $text, 0, $text.$length());
},
r_Matcher_setTarget1 = ($this, $text, $start, $len) => {
    let $mychars, $p, var$6;
    $mychars = $this.$data2;
    if (!($mychars !== null && !$this.$shared0 && $mychars.data.length >= $len)) {
        $mychars = $rt_createCharArray(1.7000000476837158 * $len | 0);
        $this.$data2 = $mychars;
        $this.$shared0 = 0;
    }
    $p = 0;
    var$6 = $start;
    while ($p < $len) {
        $mychars.data[$p] = $text.$charAt(var$6);
        var$6 = var$6 + 1 | 0;
        $p = $p + 1 | 0;
    }
    $this.$offset = 0;
    $this.$end2 = $len;
    $this.$cache = $text;
    $this.$cacheOffset =  -$start | 0;
    $this.$cacheLength = $text.$length();
    r_Matcher_init($this);
},
r_Matcher_getString = ($this, $start, $end) => {
    let $src, $co, $tOffset, $tLen, $data;
    $src = $this.$cache;
    if ($src !== null) {
        $co = $this.$cacheOffset;
        return jl_String_substring($src.$toString(), $start - $co | 0, $end - $co | 0);
    }
    $tOffset = $this.$offset;
    $tLen = $this.$end2 - $tOffset | 0;
    $data = $this.$data2;
    $co = $end - $start | 0;
    if ($co < ($tLen / 3 | 0))
        return jl_String__init_($data, $start, $co);
    $this.$cache = jl_String__init_0($data);
    $src = jl_String__init_($data, $tOffset, $tLen);
    $this.$cacheOffset = $tOffset;
    $this.$cacheLength = $tLen;
    return $src;
},
r_Matcher_matches = ($this, $s) => {
    r_Matcher_setTarget($this, $s);
    return r_Matcher_search($this, 5);
},
r_Matcher_setPosition = ($this, $pos) => {
    $this.$wOffset = $this.$offset + $pos | 0;
    $this.$wEnd = (-1);
    $this.$called = 0;
    r_Matcher_flush($this);
},
r_Matcher_find = $this => {
    let var$1, var$2;
    if ($this.$called) {
        var$1 = $this.$wEnd;
        var$2 = $this.$wOffset;
        if (var$2 != var$1) {
            if (var$1 >= 0)
                $this.$wOffset = var$1;
            else
                $this.$wOffset = 0;
            r_Matcher_flush($this);
        } else if ($this.$top0 === null) {
            $this.$wOffset = var$2 + 1 | 0;
            r_Matcher_flush($this);
        }
    }
    return r_Matcher_search($this, 0);
},
r_Matcher_init = $this => {
    $this.$wOffset = $this.$offset;
    $this.$wEnd = (-1);
    $this.$called = 0;
    r_Matcher_flush($this);
},
r_Matcher_flush = $this => {
    let var$1, $i, $mr;
    $this.$top0 = null;
    r_SearchEntry_reset($this.$defaultEntry, 0);
    r_SearchEntry_reset($this.$first1, $this.$minQueueLength);
    var$1 = $this.$memregs.data;
    $i = var$1.length - 1 | 0;
    while ($i >= 0) {
        $mr = var$1[$i];
        $mr.$out1 = (-1);
        $mr.$in0 = (-1);
        $i = $i + (-1) | 0;
    }
    $this.$called = 0;
},
r_Matcher_start = $this => {
    return $this.$wOffset - $this.$offset | 0;
},
r_Matcher_end = $this => {
    return $this.$wEnd - $this.$offset | 0;
},
r_Matcher_prefix = $this => {
    return r_Matcher_getString($this, $this.$offset, $this.$wOffset);
},
r_Matcher_group = ($this, $group) => {
    let $mr;
    $mr = r_Matcher_bounds($this, $group);
    if ($mr === null)
        return null;
    return r_Matcher_getString($this, $mr.$in0, $mr.$out1);
},
r_Matcher_getGroup = ($this, $group, $tb) => {
    return r_Matcher_getGroup0($this, $group, $tb, 0);
},
r_Matcher_getGroup0 = ($this, $group, $tb, $modes) => {
    let $mr, $j, $working, var$7, $i, var$9, $t, var$11, $t_0;
    $mr = r_Matcher_bounds($this, $group);
    if ($mr === null)
        return 0;
    $j = $mr.$in0;
    if (!$modes) {
        $working = $this.$data2;
        $group = $mr.$out1 - $j | 0;
        r_Replacer$StringBuilderBuffer_append0($tb, $working, $j, $group);
    } else {
        a: {
            $working = $rt_createCharArray($mr.$out1 - $j | 0);
            if (($modes & 2) <= 0) {
                var$7 = $working.data;
                $i = 0;
                var$9 = var$7.length;
                $t = $modes & 1;
                var$11 = $modes & 4;
                $modes = $modes & 8;
                while (true) {
                    if ($i >= var$9)
                        break a;
                    $t_0 = $this.$data2.data[$j];
                    if ($t > 0)
                        $t_0 = r_Category_caseFold($t_0);
                    else if ($modes > 0)
                        $t_0 = r_Category_caseUp($t_0);
                    if (var$11 > 0)
                        $t_0 = r_Category_matchBracket($t_0);
                    var$7[$i] = $t_0;
                    $i = $i + 1 | 0;
                    $j = $j + 1 | 0;
                }
            }
            var$7 = $working.data;
            $i = var$7.length - 1 | 0;
            var$9 = $modes & 1;
            $t_0 = $modes & 4;
            $modes = $modes & 8;
            while ($i >= 0) {
                $t = $this.$data2.data[$j];
                if (var$9 > 0)
                    $t = r_Category_caseFold($t);
                else if ($modes > 0)
                    $t = r_Category_caseUp($t);
                if ($t_0 > 0)
                    $t = r_Category_matchBracket($t);
                var$7[$i] = $t;
                $i = $i + (-1) | 0;
                $j = $j + 1 | 0;
            }
        }
        $modes = $working.data.length;
        r_Replacer$StringBuilderBuffer_append0($tb, $working, 0, $modes);
    }
    return 1;
},
r_Matcher_bounds = ($this, $id) => {
    let var$2, $mr, var$4;
    var$2 = $this.$memregs.data;
    if ($id >= var$2.length)
        return null;
    a: {
        if ($id >= 0)
            $mr = var$2[$id];
        else {
            switch ($id) {
                case -3:
                    $mr = $this.$targetBounds;
                    if ($mr === null) {
                        $mr = r_MemReg__init_((-3));
                        $this.$targetBounds = $mr;
                    }
                    $mr.$in0 = $this.$offset;
                    $mr.$out1 = $this.$end2;
                    break a;
                case -2:
                    $mr = $this.$suffixBounds;
                    if ($mr === null) {
                        $mr = r_MemReg__init_((-2));
                        $this.$suffixBounds = $mr;
                    }
                    $mr.$in0 = $this.$wEnd;
                    $mr.$out1 = $this.$end2;
                    break a;
                case -1:
                    $mr = $this.$prefixBounds;
                    if ($mr === null) {
                        $mr = r_MemReg__init_((-1));
                        $this.$prefixBounds = $mr;
                    }
                    $mr.$in0 = $this.$offset;
                    $mr.$out1 = $this.$wOffset;
                    break a;
                default:
            }
            $mr = new jl_IllegalArgumentException;
            var$4 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$4);
            jl_AbstractStringBuilder_append(var$4, $rt_s(913));
            var$4 = jl_StringBuilder_append1(var$4, $id);
            jl_AbstractStringBuilder_append(var$4, $rt_s(914));
            jl_Throwable__init_($mr, jl_AbstractStringBuilder_toString(var$4));
            $rt_throw($mr);
        }
    }
    $id = $mr.$in0;
    if ($id >= 0 && $mr.$out1 >= $id)
        return $mr;
    return null;
},
r_Matcher_isCaptured = ($this, $id) => {
    return r_Matcher_bounds($this, $id) === null ? 0 : 1;
},
r_Matcher_search = ($this, $anchors) => {
    let $end, $offset, $data, $wOffset, $wEnd, $memregs, $counters, $lookaheads, $defaultEntry, $first, $top, $matchEnd, $allowIncomplete, $re, $root, $le, $term, $i, $cnt, $regLen, var$22, $bitset2, $c, $arr, $mr, $sampleOffset, $sampleOutside, $sampleOff, $jump, $bitset, $sampleLen, $ch1Meets, $ch2Meets, $j, $inv, $bits, $memreg, $cntvalue, $le_0, $tmp_0, $countBack, $start, $exceed, $back, $sampleOff_0, $out2;
    $this.$called = 1;
    $end = $this.$end2;
    $offset = $this.$offset;
    $data = $this.$data2;
    $wOffset = $this.$wOffset;
    $wEnd = $this.$wEnd;
    $memregs = $this.$memregs;
    $counters = $this.$counters0;
    $lookaheads = $this.$lookaheads;
    $defaultEntry = $this.$defaultEntry;
    $first = $this.$first1;
    $top = $this.$top0;
    $matchEnd = ($anchors & 4) <= 0 ? 0 : 1;
    $allowIncomplete = ($anchors & 8) <= 0 ? 0 : 1;
    $re = $this.$re;
    $root = $re.$root;
    if ($top !== null) {
        $le = $top.$sub;
        $term = $top.$term;
        $i = $top.$index0;
        r_SearchEntry_popState($top, $memregs, $counters);
    } else {
        if (($anchors & 1) > 0) {
            $term = $re.$root0;
            r_Matcher_$callClinit();
            $root = r_Matcher_startAnchor;
        } else if (($anchors & 2) <= 0)
            $term = $root;
        else {
            $term = $re.$root0;
            r_Matcher_$callClinit();
            $root = r_Matcher_lastMatchAnchor;
        }
        r_SearchEntry_popState($defaultEntry, $memregs, $counters);
        $i = $wOffset;
        $le = $top;
        $top = $first;
    }
    $cnt = $top.$cnt;
    $regLen = $top.$regLen;
    var$22 = $rt_compare($wEnd, (-1));
    a: {
        b: {
            c: {
                d: while (true) {
                    if ($wOffset > $end) {
                        $first = $le;
                        break c;
                    }
                    $first = $le;
                    $le = $top;
                    e: while (true) {
                        if ($term === null) {
                            $bitset2 = $memregs.data;
                            $bitset2[0].$in0 = $wOffset;
                            $this.$wOffset = $wOffset;
                            $bitset2[0].$out1 = $i;
                            $this.$wEnd = $i;
                            $this.$top0 = $first;
                            return 1;
                        }
                        f: {
                            g: {
                                h: {
                                    i: {
                                        j: {
                                            k: {
                                                l: {
                                                    switch ($term.$type0) {
                                                        case 0:
                                                            if ($i >= $end) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            if ((!$re.$caseless ? $data.data[$i] : r_Category_caseFold($data.data[$i])) == $term.$c) {
                                                                $i = $i + 1 | 0;
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 1:
                                                            if ($i >= $end) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            $c = !$re.$caseless ? $data.data[$i] : r_Category_caseFold($data.data[$i]);
                                                            if (!(($c <= 255 && rd_IntBitSet_get($term.$bitset, $c) ? 0 : 1) ^ $term.$inverse)) {
                                                                $i = $i + 1 | 0;
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 2:
                                                            if ($i >= $end) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            $c = !$re.$caseless ? $data.data[$i] : r_Category_caseFold($data.data[$i]);
                                                            $arr = $term.$bitset2.data[$c >> 8];
                                                            if ($arr === null) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            if (!((rd_IntBitSet_get($arr, $c & 255) ? 0 : 1) ^ $term.$inverse)) {
                                                                $i = $i + 1 | 0;
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 3:
                                                            break b;
                                                        case 4:
                                                            if ($i < $end) {
                                                                $i = $i + 1 | 0;
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 5:
                                                            if ($i >= $end) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            $anchors = $data.data[$i];
                                                            if ($anchors == 13) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            if ($anchors != 10) {
                                                                $i = $i + 1 | 0;
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 6:
                                                        case 7:
                                                            $bitset2 = $memregs.data;
                                                            $anchors = $term.$memreg;
                                                            if ($anchors >= $bitset2.length) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            $mr = $bitset2[$anchors];
                                                            $sampleOffset = $mr.$in0;
                                                            $sampleOutside = $mr.$out1;
                                                            if ($sampleOffset < 0) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            $anchors = $sampleOutside - $sampleOffset | 0;
                                                            if ($anchors < 0) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            if (!$anchors) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $sampleOff = $i + $anchors | 0;
                                                            if ($sampleOff > $end) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            if (r_Matcher_compareRegions($data, $sampleOffset, $i, $anchors, $end, $term)) {
                                                                $term = $term.$next3;
                                                                $i = $sampleOff;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 8:
                                                            $jump = r_Matcher_find0($data, $i + $term.$distance | 0, $end, $term.$target);
                                                            if ($jump < 0)
                                                                break d;
                                                            $wOffset = $i + $jump | 0;
                                                            if (!$term.$eat)
                                                                $i = $wOffset;
                                                            else {
                                                                if ($wOffset == $end) {
                                                                    $i = $wOffset;
                                                                    $top = $le;
                                                                    $le = $first;
                                                                    break f;
                                                                }
                                                                $i = $wOffset + 1 | 0;
                                                            }
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 9:
                                                            $bitset2 = $memregs.data;
                                                            $bitset = $term.$target;
                                                            $mr = $bitset2[$bitset.$memreg];
                                                            $sampleOff = $mr.$in0;
                                                            $sampleLen = $mr.$out1 - $sampleOff | 0;
                                                            if ($sampleOff < 0) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            if ($sampleLen < 0) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            if (!$sampleLen) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $jump = r_Matcher_findReg($data, $i + $term.$distance | 0, $sampleOff, $sampleLen, $bitset, $end);
                                                            if ($jump < 0)
                                                                break c;
                                                            $wOffset = $i + $jump | 0;
                                                            if (!$term.$eat)
                                                                $i = $wOffset;
                                                            else {
                                                                $i = $wOffset + $sampleLen | 0;
                                                                if ($i > $end) {
                                                                    $top = $le;
                                                                    $le = $first;
                                                                    break f;
                                                                }
                                                            }
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 10:
                                                            if (!$matchEnd)
                                                                break a;
                                                            if ($i == $end)
                                                                break a;
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 11:
                                                            $ch1Meets = 0;
                                                            $ch2Meets = 0;
                                                            $bitset = $term.$bitset;
                                                            $j = $i - 1 | 0;
                                                            if ($j >= $offset) {
                                                                $c = !$re.$caseless ? $data.data[$j] : r_Category_caseFold($data.data[$j]);
                                                                $ch1Meets = $c < 256 && rd_IntBitSet_get($bitset, $c) ? 1 : 0;
                                                            }
                                                            if ($i < $end) {
                                                                $c = !$re.$caseless ? $data.data[$i] : r_Category_caseFold($data.data[$i]);
                                                                $ch2Meets = $c < 256 && rd_IntBitSet_get($bitset, $c) ? 1 : 0;
                                                            }
                                                            if ($ch1Meets ^ $ch2Meets ^ $term.$inverse) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 12:
                                                            $ch1Meets = 0;
                                                            $ch2Meets = 0;
                                                            $bitset = $term.$bitset;
                                                            $inv = $term.$inverse;
                                                            $j = $i - 1 | 0;
                                                            if ($j >= $offset) {
                                                                $c = !$re.$caseless ? $data.data[$j] : r_Category_caseFold($data.data[$j]);
                                                                $ch1Meets = $c < 256 && rd_IntBitSet_get($bitset, $c) ? 1 : 0;
                                                            }
                                                            if ($ch1Meets ^ $inv) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            if ($i < $end) {
                                                                $c = !$re.$caseless ? $data.data[$i] : r_Category_caseFold($data.data[$i]);
                                                                $ch2Meets = $c < 256 && rd_IntBitSet_get($bitset, $c) ? 1 : 0;
                                                            }
                                                            if (!(($ch2Meets ? 0 : 1) ^ $inv)) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 13:
                                                            $ch1Meets = 0;
                                                            $ch2Meets = 0;
                                                            $bitset2 = $term.$bitset2;
                                                            $j = $i - 1 | 0;
                                                            if ($j >= $offset) {
                                                                $c = !$re.$caseless ? $data.data[$j] : r_Category_caseFold($data.data[$j]);
                                                                $bits = $bitset2.data[$c >> 8];
                                                                $ch1Meets = $bits !== null && rd_IntBitSet_get($bits, $c & 255) ? 1 : 0;
                                                            }
                                                            if ($i < $end) {
                                                                $c = !$re.$caseless ? $data.data[$i] : r_Category_caseFold($data.data[$i]);
                                                                $bits = $bitset2.data[$c >> 8];
                                                                $ch2Meets = $bits !== null && rd_IntBitSet_get($bits, $c & 255) ? 1 : 0;
                                                            }
                                                            if ($ch1Meets ^ $ch2Meets ^ $term.$inverse) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 14:
                                                            $ch1Meets = 0;
                                                            $ch2Meets = 0;
                                                            $bitset2 = $term.$bitset2;
                                                            $inv = $term.$inverse;
                                                            $j = $i - 1 | 0;
                                                            if ($j >= $offset) {
                                                                $c = !$re.$caseless ? $data.data[$j] : r_Category_caseFold($data.data[$j]);
                                                                $bits = $bitset2.data[$c >> 8];
                                                                $ch1Meets = $bits !== null && rd_IntBitSet_get($bits, $c & 255) ? 1 : 0;
                                                            }
                                                            if ($ch1Meets ^ $inv) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            if ($i < $end) {
                                                                $c = !$re.$caseless ? $data.data[$i] : r_Category_caseFold($data.data[$i]);
                                                                $bits = $bitset2.data[$c >> 8];
                                                                $ch2Meets = $bits !== null && rd_IntBitSet_get($bits, $c & 255) ? 1 : 0;
                                                            }
                                                            if (!(($ch2Meets ? 0 : 1) ^ $inv)) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 15:
                                                            $memreg = $term.$memreg;
                                                            if ($memreg > 0)
                                                                $memregs.data[$memreg].$tmp0 = $i;
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 16:
                                                            $memreg = $term.$memreg;
                                                            if ($memreg > 0) {
                                                                $mr = $memregs.data[$memreg];
                                                                r_SearchEntry_saveMemregState($first === null ? $defaultEntry : $first, $memreg, $mr);
                                                                $mr.$in0 = $mr.$tmp0;
                                                                $mr.$out1 = $i;
                                                            }
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 17:
                                                            break;
                                                        case 18:
                                                            if ($i == $offset) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            if ($first !== null) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            r_Matcher_$callClinit();
                                                            if ($term === r_Matcher_startAnchor)
                                                                break c;
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 19:
                                                            if ($i >= $end) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 20:
                                                            $anchors = $rt_compare($i, $end);
                                                            if ($anchors >= 0) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $anchors = $anchors < 0 ? 0 : 1;
                                                            $sampleOff = $i + 1 | 0;
                                                            $sampleLen = $sampleOff == $end && $data.data[$i] == 10 ? 1 : 0;
                                                            m: {
                                                                $anchors = $anchors | $sampleLen;
                                                                if (($i + 2 | 0) == $end) {
                                                                    $bitset2 = $data.data;
                                                                    if ($bitset2[$i] == 13 && $bitset2[$sampleOff] == 10) {
                                                                        $sampleOff = 1;
                                                                        break m;
                                                                    }
                                                                }
                                                                $sampleOff = 0;
                                                            }
                                                            if ($anchors | $sampleOff) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 21:
                                                            if ($i == $offset) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            if ($i >= $end) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            $bitset2 = $data.data;
                                                            $anchors = $bitset2[$i - 1 | 0];
                                                            if ($anchors != 10 && $anchors != 133 && $anchors != 8232 && $anchors != 8233 && !($bitset2[$i] == 10 && $anchors == 13) && $anchors != 13) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 22:
                                                            if ($i >= $end) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $bitset2 = $data.data;
                                                            $anchors = $bitset2[$i];
                                                            if ($anchors != 10 && $anchors != 133 && $anchors != 8232 && $anchors != 8233 && !($i < ($bitset2.length - 1 | 0) && $bitset2[$i + 1 | 0] == 10 && $anchors == 13) && $anchors != 13) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 23:
                                                            if ($i != $wEnd) {
                                                                if (var$22)
                                                                    break c;
                                                                if ($i != $offset)
                                                                    break c;
                                                            }
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 24:
                                                            $cnt = 0;
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 25:
                                                            $cnt = $cnt + 1 | 0;
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 26:
                                                            if ($cnt >= $term.$maxCount) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 27:
                                                            $cnt = $le.$cnt;
                                                            if ($cnt < $term.$maxCount) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 28:
                                                            $bitset2 = $counters.data;
                                                            $anchors = $term.$cntreg;
                                                            $cntvalue = $bitset2[$anchors];
                                                            r_SearchEntry_saveCntState($first === null ? $defaultEntry : $first, $anchors, $cntvalue);
                                                            $bitset2[$anchors] = $cntvalue + 1 | 0;
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 29:
                                                            $counters.data[$term.$cntreg] = 0;
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 30:
                                                            if ($counters.data[$term.$cntreg] < $term.$maxCount) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 31:
                                                            if ($counters.data[$term.$cntreg] >= $term.$maxCount) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 32:
                                                            break k;
                                                        case 33:
                                                            break l;
                                                        case 34:
                                                            $le.$regLen = $regLen;
                                                            break l;
                                                        case 35:
                                                        case 43:
                                                            $le_0 = $lookaheads.data[$term.$lookaheadId];
                                                            $le_0.$index3 = $i;
                                                            $le_0.$actual = $le;
                                                            $le_0.$top = $first;
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 36:
                                                        case 40:
                                                        case 57:
                                                        case 59:
                                                            $le_0 = $lookaheads.data[$term.$lookaheadId];
                                                            $i = $le_0.$index3;
                                                            $le = $le_0.$actual;
                                                            $first = $le_0.$top;
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 37:
                                                            $le_0 = $lookaheads.data[$term.$lookaheadId];
                                                            $le_0.$actual = $le;
                                                            $le_0.$top = $first;
                                                            $le.$term = $term.$failNext;
                                                            $le.$index0 = $i;
                                                            $bitset = $le.$on;
                                                            if ($bitset === null) {
                                                                $bitset = r_SearchEntry__init_();
                                                                $le.$on = $bitset;
                                                                $bitset.$sub = $le;
                                                            }
                                                            $term = $term.$next3;
                                                            $first = $le;
                                                            $le = $bitset;
                                                            continue e;
                                                        case 38:
                                                        case 42:
                                                            $le = $lookaheads.data[$term.$lookaheadId];
                                                            $top = $le.$actual;
                                                            $le = $le.$top;
                                                            break f;
                                                        case 39:
                                                            $tmp_0 = $i - $term.$distance | 0;
                                                            if ($tmp_0 >= $offset) {
                                                                $le_0 = $lookaheads.data[$term.$lookaheadId];
                                                                $le_0.$index3 = $i;
                                                                $le_0.$actual = $le;
                                                                $le_0.$top = $first;
                                                                $term = $term.$next3;
                                                                $i = $tmp_0;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 41:
                                                            $tmp_0 = $i - $term.$distance | 0;
                                                            if ($tmp_0 < $offset) {
                                                                $term = $term.$failNext;
                                                                continue e;
                                                            }
                                                            $le_0 = $lookaheads.data[$term.$lookaheadId];
                                                            $le_0.$actual = $le;
                                                            $le_0.$top = $first;
                                                            $le.$term = $term.$failNext;
                                                            $le.$index0 = $i;
                                                            $bitset = $le.$on;
                                                            if ($bitset === null) {
                                                                $bitset = r_SearchEntry__init_();
                                                                $le.$on = $bitset;
                                                                $bitset.$sub = $le;
                                                            }
                                                            $term = $term.$next3;
                                                            $first = $le;
                                                            $le = $bitset;
                                                            $i = $tmp_0;
                                                            continue e;
                                                        case 44:
                                                            $le_0 = $lookaheads.data[$term.$lookaheadId];
                                                            $le = $le_0.$actual;
                                                            $first = $le_0.$top;
                                                            $term = $term.$next3;
                                                            continue e;
                                                        case 45:
                                                            $cnt = r_Matcher_repeat($data, $i, $end, $term.$target);
                                                            if ($cnt <= 0) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $i = $i + $cnt | 0;
                                                            $le.$cnt = $cnt;
                                                            $le.$term = $term.$failNext;
                                                            $le.$index0 = $i;
                                                            $bitset = $le.$on;
                                                            if ($bitset === null) {
                                                                $bitset = r_SearchEntry__init_();
                                                                $le.$on = $bitset;
                                                                $bitset.$sub = $le;
                                                            }
                                                            $term = $term.$next3;
                                                            $first = $le;
                                                            $le = $bitset;
                                                            continue e;
                                                        case 46:
                                                            break j;
                                                        case 47:
                                                            break h;
                                                        case 48:
                                                            break g;
                                                        case 49:
                                                            $mr = $memregs.data[$term.$memreg];
                                                            $sampleOffset = $mr.$in0;
                                                            $sampleOutside = $mr.$out1;
                                                            if ($sampleOffset < 0) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            $anchors = $sampleOutside - $sampleOffset | 0;
                                                            if ($anchors < 0) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            if (!$anchors) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $cnt = 0;
                                                            $countBack = $term.$maxCount;
                                                            while ($countBack > 0 && r_Matcher_compareRegions($data, $i, $sampleOffset, $anchors, $end, $term)) {
                                                                $cnt = $cnt + 1 | 0;
                                                                $i = $i + $anchors | 0;
                                                                $countBack = $countBack + (-1) | 0;
                                                            }
                                                            if ($cnt >= $term.$minCount) {
                                                                $le.$cnt = $cnt;
                                                                $le.$term = $term.$failNext;
                                                                $le.$index0 = $i;
                                                                $le.$regLen = $anchors;
                                                                $bitset = $le.$on;
                                                                if ($bitset === null) {
                                                                    $bitset = r_SearchEntry__init_();
                                                                    $le.$on = $bitset;
                                                                    $bitset.$sub = $le;
                                                                }
                                                                $term = $term.$next3;
                                                                $first = $le;
                                                                $le = $bitset;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 50:
                                                            $cnt = $le.$cnt;
                                                            if ($cnt > 0) {
                                                                $cnt = $cnt + (-1) | 0;
                                                                $i = $i + (-1) | 0;
                                                                $le.$cnt = $cnt;
                                                                $le.$index0 = $i;
                                                                $le.$term = $term;
                                                                $bitset = $le.$on;
                                                                if ($bitset === null) {
                                                                    $bitset = r_SearchEntry__init_();
                                                                    $le.$on = $bitset;
                                                                    $bitset.$sub = $le;
                                                                }
                                                                $term = $term.$next3;
                                                                $first = $le;
                                                                $le = $bitset;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 51:
                                                            break i;
                                                        case 52:
                                                            $cnt = $le.$cnt;
                                                            $anchors = $term.$minCount;
                                                            if ($cnt <= $anchors) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            $sampleOff = $term.$distance;
                                                            $start = $i + $sampleOff | 0;
                                                            if ($start > $end) {
                                                                $exceed = $start - $end | 0;
                                                                $cnt = $cnt - $exceed | 0;
                                                                if ($cnt <= $anchors) {
                                                                    $top = $le;
                                                                    $le = $first;
                                                                    break f;
                                                                }
                                                                $i = $i - $exceed | 0;
                                                            }
                                                            $back = r_Matcher_findBack($data, $i + $sampleOff | 0, $cnt - $anchors | 0, $term.$target);
                                                            if ($back >= 0) {
                                                                $cnt = $cnt - $back | 0;
                                                                if ($cnt <= $anchors) {
                                                                    $i = $i - $back | 0;
                                                                    if ($term.$eat)
                                                                        $i = $i + 1 | 0;
                                                                    $term = $term.$next3;
                                                                    continue e;
                                                                }
                                                                $i = $i - $back | 0;
                                                                $le.$cnt = $cnt;
                                                                $le.$index0 = $i;
                                                                if ($term.$eat)
                                                                    $i = $i + 1 | 0;
                                                                $le.$term = $term;
                                                                $bitset = $le.$on;
                                                                if ($bitset === null) {
                                                                    $bitset = r_SearchEntry__init_();
                                                                    $le.$on = $bitset;
                                                                    $bitset.$sub = $le;
                                                                }
                                                                $term = $term.$next3;
                                                                $first = $le;
                                                                $le = $bitset;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 53:
                                                            $cnt = $le.$cnt;
                                                            $anchors = $term.$minCount;
                                                            if ($cnt <= $anchors) {
                                                                $top = $le;
                                                                $le = $first;
                                                                break f;
                                                            }
                                                            $jump = $term.$distance;
                                                            $start = $i + $jump | 0;
                                                            if ($start > $end) {
                                                                $exceed = $start - $end | 0;
                                                                $cnt = $cnt - $exceed | 0;
                                                                if ($cnt <= $anchors) {
                                                                    $top = $le;
                                                                    $le = $first;
                                                                    break f;
                                                                }
                                                                $i = $i - $exceed | 0;
                                                            }
                                                            $bitset2 = $memregs.data;
                                                            $bitset = $term.$target;
                                                            $mr = $bitset2[$bitset.$memreg];
                                                            $sampleOff_0 = $mr.$in0;
                                                            $sampleLen = $mr.$out1 - $sampleOff_0 | 0;
                                                            if ($sampleOff_0 >= 0 && $sampleLen >= 0) {
                                                                if (!$sampleLen)
                                                                    $back = (-1);
                                                                else {
                                                                    $back = r_Matcher_findBackReg($data, $i + $jump | 0, $sampleOff_0, $sampleLen, $cnt - $anchors | 0, $bitset, $end);
                                                                    if ($back < 0) {
                                                                        $top = $le;
                                                                        $le = $first;
                                                                        break f;
                                                                    }
                                                                }
                                                                $cnt = $cnt - $back | 0;
                                                                $i = $i - $back | 0;
                                                                $le.$cnt = $cnt;
                                                                $le.$index0 = $i;
                                                                if ($term.$eat)
                                                                    $i = $i + $sampleLen | 0;
                                                                $le.$term = $term;
                                                                $bitset = $le.$on;
                                                                if ($bitset === null) {
                                                                    $bitset = r_SearchEntry__init_();
                                                                    $le.$on = $bitset;
                                                                    $bitset.$sub = $le;
                                                                }
                                                                $term = $term.$next3;
                                                                $first = $le;
                                                                $le = $bitset;
                                                                continue e;
                                                            }
                                                            $cnt = $cnt + (-1) | 0;
                                                            $i = $i + (-1) | 0;
                                                            $le.$cnt = $cnt;
                                                            $le.$index0 = $i;
                                                            $le.$term = $term;
                                                            $bitset = $le.$on;
                                                            if ($bitset === null) {
                                                                $bitset = r_SearchEntry__init_();
                                                                $le.$on = $bitset;
                                                                $bitset.$sub = $le;
                                                            }
                                                            $term = $term.$next3;
                                                            $first = $le;
                                                            $le = $bitset;
                                                            continue e;
                                                        case 54:
                                                            $cnt = $le.$cnt;
                                                            if ($cnt > $term.$minCount) {
                                                                $regLen = $le.$regLen;
                                                                $cnt = $cnt + (-1) | 0;
                                                                $i = $i - $regLen | 0;
                                                                $le.$cnt = $cnt;
                                                                $le.$index0 = $i;
                                                                $le.$term = $term;
                                                                $bitset = $le.$on;
                                                                if ($bitset === null) {
                                                                    $bitset = r_SearchEntry__init_();
                                                                    $le.$on = $bitset;
                                                                    $bitset.$sub = $le;
                                                                }
                                                                $term = $term.$next3;
                                                                $first = $le;
                                                                $le = $bitset;
                                                                continue e;
                                                            }
                                                            $top = $le;
                                                            $le = $first;
                                                            break f;
                                                        case 55:
                                                            $mr = $memregs.data[$term.$memreg];
                                                            $sampleOffset = $mr.$in0;
                                                            $sampleOutside = $mr.$out1;
                                                            if ($sampleOffset >= 0 && $sampleOutside >= 0 && $sampleOutside >= $sampleOffset) {
                                                                $term = $term.$next3;
                                                                continue e;
                                                            }
                                                            $term = $term.$failNext;
                                                            continue e;
                                                        case 56:
                                                            $le_0 = $lookaheads.data[$term.$lookaheadId];
                                                            $le_0.$index3 = $i;
                                                            $le_0.$actual = $le;
                                                            $le_0.$top = $first;
                                                            $le.$term = $term.$failNext;
                                                            $le.$index0 = $i;
                                                            $bitset = $le.$on;
                                                            if ($bitset === null) {
                                                                $bitset = r_SearchEntry__init_();
                                                                $le.$on = $bitset;
                                                                $bitset.$sub = $le;
                                                            }
                                                            $term = $term.$next3;
                                                            $first = $le;
                                                            $le = $bitset;
                                                            continue e;
                                                        case 58:
                                                            $tmp_0 = $i - $term.$distance | 0;
                                                            if ($tmp_0 < $offset) {
                                                                $term = $term.$failNext;
                                                                continue e;
                                                            }
                                                            $le_0 = $lookaheads.data[$term.$lookaheadId];
                                                            $le_0.$index3 = $i;
                                                            $le_0.$actual = $le;
                                                            $le_0.$top = $first;
                                                            $le.$term = $term.$failNext;
                                                            $le.$index0 = $i;
                                                            $bitset = $le.$on;
                                                            if ($bitset === null) {
                                                                $bitset = r_SearchEntry__init_();
                                                                $le.$on = $bitset;
                                                                $bitset.$sub = $le;
                                                            }
                                                            $term = $term.$next3;
                                                            $first = $le;
                                                            $le = $bitset;
                                                            $i = $tmp_0;
                                                            continue e;
                                                        default:
                                                            break b;
                                                    }
                                                    $term = $term.$next3;
                                                    continue e;
                                                }
                                                $le.$cnt = $cnt;
                                            }
                                            $le.$term = $term.$failNext;
                                            $le.$index0 = $i;
                                            $bitset = $le.$on;
                                            if ($bitset === null) {
                                                $bitset = r_SearchEntry__init_();
                                                $le.$on = $bitset;
                                                $bitset.$sub = $le;
                                            }
                                            $term = $term.$next3;
                                            $first = $le;
                                            $le = $bitset;
                                            continue e;
                                        }
                                        $cnt = r_Matcher_repeat($data, $i, $end, $term.$target);
                                        if ($cnt >= $term.$minCount) {
                                            $i = $i + $cnt | 0;
                                            $le.$cnt = $cnt;
                                            $le.$term = $term.$failNext;
                                            $le.$index0 = $i;
                                            $bitset = $le.$on;
                                            if ($bitset === null) {
                                                $bitset = r_SearchEntry__init_();
                                                $le.$on = $bitset;
                                                $bitset.$sub = $le;
                                            }
                                            $term = $term.$next3;
                                            $first = $le;
                                            $le = $bitset;
                                            continue e;
                                        }
                                        $top = $le;
                                        $le = $first;
                                        break f;
                                    }
                                    $cnt = $le.$cnt;
                                    if ($cnt > $term.$minCount) {
                                        $cnt = $cnt + (-1) | 0;
                                        $i = $i + (-1) | 0;
                                        $le.$cnt = $cnt;
                                        $le.$index0 = $i;
                                        $le.$term = $term;
                                        $bitset = $le.$on;
                                        if ($bitset === null) {
                                            $bitset = r_SearchEntry__init_();
                                            $le.$on = $bitset;
                                            $bitset.$sub = $le;
                                        }
                                        $term = $term.$next3;
                                        $first = $le;
                                        $le = $bitset;
                                        continue e;
                                    }
                                    $top = $le;
                                    $le = $first;
                                    break f;
                                }
                                $out2 = $i + $term.$maxCount | 0;
                                if ($end < $out2)
                                    $out2 = $end;
                                $cnt = r_Matcher_repeat($data, $i, $out2, $term.$target);
                                if ($cnt >= $term.$minCount) {
                                    $i = $i + $cnt | 0;
                                    $le.$cnt = $cnt;
                                    $le.$term = $term.$failNext;
                                    $le.$index0 = $i;
                                    $bitset = $le.$on;
                                    if ($bitset === null) {
                                        $bitset = r_SearchEntry__init_();
                                        $le.$on = $bitset;
                                        $bitset.$sub = $le;
                                    }
                                    $term = $term.$next3;
                                    $first = $le;
                                    $le = $bitset;
                                    continue e;
                                }
                                $top = $le;
                                $le = $first;
                                break f;
                            }
                            $mr = $memregs.data[$term.$memreg];
                            $sampleOffset = $mr.$in0;
                            $sampleOutside = $mr.$out1;
                            if ($sampleOffset < 0) {
                                $top = $le;
                                $le = $first;
                            } else {
                                $anchors = $sampleOutside - $sampleOffset | 0;
                                if ($anchors < 0) {
                                    $top = $le;
                                    $le = $first;
                                } else {
                                    if (!$anchors) {
                                        $term = $term.$next3;
                                        continue e;
                                    }
                                    $cnt = 0;
                                    while (r_Matcher_compareRegions($data, $i, $sampleOffset, $anchors, $end, $term)) {
                                        $cnt = $cnt + 1 | 0;
                                        $i = $i + $anchors | 0;
                                    }
                                    if ($cnt >= $term.$minCount) {
                                        $le.$cnt = $cnt;
                                        $le.$term = $term.$failNext;
                                        $le.$index0 = $i;
                                        $le.$regLen = $anchors;
                                        $bitset = $le.$on;
                                        if ($bitset === null) {
                                            $bitset = r_SearchEntry__init_();
                                            $le.$on = $bitset;
                                            $bitset.$sub = $le;
                                        }
                                        $term = $term.$next3;
                                        $first = $le;
                                        $le = $bitset;
                                        continue e;
                                    }
                                    $top = $le;
                                    $le = $first;
                                }
                            }
                        }
                        if ($allowIncomplete && $i == $end) {
                            $bitset2 = $memregs.data;
                            $bitset2[0].$in0 = $wOffset;
                            $this.$wOffset = $wOffset;
                            $bitset2[0].$out1 = $i;
                            $this.$wEnd = $i;
                            $this.$top0 = $le;
                            return 1;
                        }
                        if ($le === null)
                            break;
                        $first = $le.$sub;
                        $term = $le.$term;
                        $i = $le.$index0;
                        if (!$le.$isState)
                            continue;
                        r_SearchEntry_popState($le, $memregs, $counters);
                    }
                    if ($defaultEntry.$isState)
                        r_SearchEntry_popState($defaultEntry, $memregs, $counters);
                    $i = $wOffset + 1 | 0;
                    $term = $root;
                    $wOffset = $i;
                }
            }
            $this.$wOffset = $wOffset;
            $this.$top0 = $first;
            return 0;
        }
        $rt_throw(jl_Error__init_0(jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(915)), $term.$type0))));
    }
    $bitset2 = $memregs.data;
    $bitset2[0].$in0 = $wOffset;
    $this.$wOffset = $wOffset;
    $bitset2[0].$out1 = $i;
    $this.$wEnd = $i;
    $this.$top0 = $first;
    return 1;
},
r_Matcher_compareRegions = ($arr, $off1, $off2, $len, $out, $opts) => {
    let var$7, var$8, var$9, var$10, var$11;
    r_Matcher_$callClinit();
    if (!$opts.$mode_reverse) {
        var$7 = !$opts.$mode_insensitive && !$opts.$mode_upper ? 0 : 1;
        a: {
            var$8 = $opts.$mode_bracket;
            $off1 = ($off1 + $len | 0) - 1 | 0;
            $off2 = ($off2 + $len | 0) - 1 | 0;
            if ($off1 < $out && $off2 < $out) {
                while ($len > 0) {
                    var$9 = $arr.data;
                    $out = var$9[$off1];
                    var$10 = var$9[$off2];
                    if (var$7) {
                        $out = r_Category_caseFold($out);
                        var$10 = r_Category_caseFold(var$10);
                    }
                    if (var$8)
                        var$10 = r_Category_matchBracket(var$10);
                    if ($out != var$10) {
                        $off1 = 0;
                        break a;
                    }
                    $len = $len + (-1) | 0;
                    $off1 = $off1 + (-1) | 0;
                    $off2 = $off2 + (-1) | 0;
                }
                $off1 = 1;
            } else
                $off1 = 0;
        }
        return $off1;
    }
    var$7 = !$opts.$mode_insensitive && !$opts.$mode_upper ? 0 : 1;
    b: {
        var$10 = $opts.$mode_bracket;
        $off1 = ($off1 + $len | 0) - 1 | 0;
        if ($off1 < $out && $off2 < $out) {
            while ($len > 0 && $off2 < $out) {
                var$9 = $arr.data;
                var$8 = var$9[$off1];
                var$11 = var$9[$off2];
                if (var$7) {
                    var$8 = r_Category_caseFold(var$8);
                    var$11 = r_Category_caseFold(var$11);
                }
                if (var$10)
                    var$11 = r_Category_matchBracket(var$11);
                if (var$8 != var$11) {
                    $off1 = 0;
                    break b;
                }
                $len = $len + (-1) | 0;
                $off1 = $off1 + (-1) | 0;
                $off2 = $off2 + 1 | 0;
            }
            $off1 = 1;
        } else
            $off1 = 0;
    }
    return $off1;
},
r_Matcher_repeat = ($data, $off, $out, $term) => {
    let $c, $i, $arr, var$8, $bitset2, var$10, var$11, var$12;
    r_Matcher_$callClinit();
    a: {
        switch ($term.$type0) {
            case 0:
                $c = $term.$c;
                $i = $off;
                b: {
                    while (true) {
                        if ($i >= $out)
                            break b;
                        if ($data.data[$i] != $c)
                            break;
                        $i = $i + 1 | 0;
                    }
                }
                return $i - $off | 0;
            case 1:
                c: {
                    $arr = $term.$bitset;
                    if (!$term.$inverse) {
                        $c = $off;
                        while ($c < $out) {
                            $i = $data.data[$c];
                            if ($i > 255)
                                break c;
                            if (!rd_IntBitSet_get($arr, $i))
                                break c;
                            $c = $c + 1 | 0;
                        }
                    } else {
                        $c = $off;
                        while ($c < $out) {
                            var$8 = $data.data[$c];
                            if (var$8 <= 255 && rd_IntBitSet_get($arr, var$8))
                                break c;
                            $c = $c + 1 | 0;
                        }
                    }
                }
                return $c - $off | 0;
            case 2:
                d: {
                    $bitset2 = $term.$bitset2;
                    if (!$term.$inverse) {
                        $i = $off;
                        while ($i < $out) {
                            var$10 = $data.data;
                            var$11 = $bitset2.data;
                            $c = var$10[$i];
                            $arr = var$11[$c >> 8];
                            if ($arr === null)
                                break d;
                            if (!rd_IntBitSet_get($arr, $c & 255))
                                break d;
                            $i = $i + 1 | 0;
                        }
                    } else {
                        $i = $off;
                        while ($i < $out) {
                            var$10 = $data.data;
                            var$11 = $bitset2.data;
                            $c = var$10[$i];
                            $arr = var$11[$c >> 8];
                            if ($arr !== null && rd_IntBitSet_get($arr, $c & 255))
                                break d;
                            $i = $i + 1 | 0;
                        }
                    }
                }
                return $i - $off | 0;
            case 3:
                break a;
            case 4:
                break;
            case 5:
                $i = $off;
                e: {
                    while (true) {
                        if ($i >= $out)
                            break e;
                        $c = $data.data[$i];
                        if ($c == 13)
                            break e;
                        if ($c == 10)
                            break;
                        $i = $i + 1 | 0;
                    }
                }
                return $i - $off | 0;
            default:
                break a;
        }
        return $out - $off | 0;
    }
    $arr = new jl_Error;
    var$12 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$12);
    jl_AbstractStringBuilder_append(var$12, $rt_s(916));
    jl_Throwable__init_($arr, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$12, $term.$type0)));
    $rt_throw($arr);
},
r_Matcher_find0 = ($data, $off, $out, $term) => {
    let $c, $i, $arr, var$8, $bitset2, var$10, var$11, var$12;
    r_Matcher_$callClinit();
    if ($off >= $out)
        return (-1);
    switch ($term.$type0) {
        case 0:
            $c = $term.$c;
            $i = $off;
            a: {
                while (true) {
                    if ($i >= $out)
                        break a;
                    if ($data.data[$i] == $c)
                        break;
                    $i = $i + 1 | 0;
                }
            }
            return $i - $off | 0;
        case 1:
            b: {
                $arr = $term.$bitset;
                if ($term.$inverse) {
                    var$8 = $off;
                    while (var$8 < $out) {
                        $c = $data.data[var$8];
                        if ($c > 255)
                            break b;
                        if (!rd_IntBitSet_get($arr, $c))
                            break b;
                        var$8 = var$8 + 1 | 0;
                    }
                } else {
                    var$8 = $off;
                    while (var$8 < $out) {
                        $c = $data.data[var$8];
                        if ($c <= 255 && rd_IntBitSet_get($arr, $c))
                            break b;
                        var$8 = var$8 + 1 | 0;
                    }
                }
            }
            return var$8 - $off | 0;
        case 2:
            c: {
                $bitset2 = $term.$bitset2;
                if ($term.$inverse) {
                    $c = $off;
                    while ($c < $out) {
                        var$10 = $data.data;
                        var$11 = $bitset2.data;
                        $i = var$10[$c];
                        $arr = var$11[$i >> 8];
                        if ($arr === null)
                            break c;
                        if (!rd_IntBitSet_get($arr, $i & 255))
                            break c;
                        $c = $c + 1 | 0;
                    }
                } else {
                    $c = $off;
                    while ($c < $out) {
                        var$10 = $data.data;
                        var$11 = $bitset2.data;
                        $i = var$10[$c];
                        $arr = var$11[$i >> 8];
                        if ($arr !== null && rd_IntBitSet_get($arr, $i & 255))
                            break c;
                        $c = $c + 1 | 0;
                    }
                }
            }
            return $c - $off | 0;
        default:
    }
    $arr = new jl_IllegalArgumentException;
    var$12 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$12);
    jl_AbstractStringBuilder_append(var$12, $rt_s(917));
    jl_Throwable__init_($arr, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$12, $term.$type0)));
    $rt_throw($arr);
},
r_Matcher_findReg = ($data, $off, $regOff, $regLen, $term, $out) => {
    let var$7, var$8, var$9, var$10;
    r_Matcher_$callClinit();
    if ($off >= $out)
        return (-1);
    var$7 = $term.$type0;
    if (var$7 == 6)
        var$8 = $off;
    else {
        if (var$7 != 7) {
            var$9 = new jl_IllegalArgumentException;
            var$10 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$10);
            jl_AbstractStringBuilder_append(var$10, $rt_s(918));
            jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$10, $term.$type0)));
            $rt_throw(var$9);
        }
        var$8 = $off;
    }
    a: {
        while (true) {
            if (var$8 >= $out)
                break a;
            if (r_Matcher_compareRegions($data, var$8, $regOff, $regLen, $out, $term))
                break;
            var$8 = var$8 + 1 | 0;
        }
    }
    return $off - var$8 | 0;
},
r_Matcher_findBack = ($data, $off, $maxCount, $term) => {
    let $c, $iMin, $bitset2, $arr, var$9, var$10, var$11, var$12;
    r_Matcher_$callClinit();
    switch ($term.$type0) {
        case 0:
            $c = $term.$c;
            $iMin = $off - $maxCount | 0;
            $maxCount = $off;
            while (true) {
                $bitset2 = $data.data;
                $maxCount = $maxCount + (-1) | 0;
                if ($bitset2[$maxCount] == $c)
                    break;
                if ($maxCount <= $iMin)
                    return (-1);
            }
            return $off - $maxCount | 0;
        case 1:
            a: {
                $arr = $term.$bitset;
                $iMin = $off - $maxCount | 0;
                if ($term.$inverse) {
                    var$9 = $off;
                    while (true) {
                        $bitset2 = $data.data;
                        var$9 = var$9 + (-1) | 0;
                        $c = $bitset2[var$9];
                        if ($c > 255)
                            break a;
                        if (!rd_IntBitSet_get($arr, $c))
                            break a;
                        if (var$9 <= $iMin)
                            break;
                    }
                    return (-1);
                }
                var$9 = $off;
                while (true) {
                    $bitset2 = $data.data;
                    var$9 = var$9 + (-1) | 0;
                    $maxCount = $bitset2[var$9];
                    if ($maxCount <= 255 && rd_IntBitSet_get($arr, $maxCount))
                        break a;
                    if (var$9 <= $iMin)
                        break;
                }
                return (-1);
            }
            return $off - var$9 | 0;
        case 2:
            b: {
                $bitset2 = $term.$bitset2;
                $iMin = $off - $maxCount | 0;
                if ($term.$inverse) {
                    $c = $off;
                    while (true) {
                        var$10 = $data.data;
                        var$11 = $bitset2.data;
                        $c = $c + (-1) | 0;
                        $maxCount = var$10[$c];
                        $arr = var$11[$maxCount >> 8];
                        if ($arr === null)
                            break b;
                        if (rd_IntBitSet_get($arr, $maxCount & 255))
                            break b;
                        if ($c <= $iMin)
                            break;
                    }
                    return (-1);
                }
                $c = $off;
                while (true) {
                    var$10 = $data.data;
                    var$11 = $bitset2.data;
                    $c = $c + (-1) | 0;
                    $maxCount = var$10[$c];
                    $arr = var$11[$maxCount >> 8];
                    if ($arr !== null && rd_IntBitSet_get($arr, $maxCount & 255))
                        break b;
                    if ($c <= $iMin)
                        break;
                }
                return (-1);
            }
            return $off - $c | 0;
        default:
    }
    $arr = new jl_IllegalArgumentException;
    var$12 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$12);
    jl_AbstractStringBuilder_append(var$12, $rt_s(919));
    jl_Throwable__init_($arr, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$12, $term.$type0)));
    $rt_throw($arr);
},
r_Matcher_findBackReg = ($data, $off, $regOff, $regLen, $maxCount, $term, $out) => {
    let $iMin, var$9, var$10, var$11, $first, var$13;
    r_Matcher_$callClinit();
    $iMin = $off - $maxCount | 0;
    $maxCount = $term.$type0;
    if ($maxCount != 6 && $maxCount != 7) {
        var$9 = new jl_IllegalArgumentException;
        var$10 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$10);
        jl_AbstractStringBuilder_append(var$10, $rt_s(920));
        jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$10, $term.$type0)));
        $rt_throw(var$9);
    }
    var$11 = $data.data;
    $first = var$11[$regOff];
    $regOff = $regOff + 1 | 0;
    $maxCount = $regLen + (-1) | 0;
    var$13 = $off;
    while (true) {
        var$13 = var$13 + (-1) | 0;
        if (var$11[var$13] == $first && r_Matcher_compareRegions($data, var$13 + 1 | 0, $regOff, $maxCount, $out, $term))
            return $off - var$13 | 0;
        if (var$13 <= $iMin)
            break;
    }
    return (-1);
},
r_Matcher_replaceFirst = ($this, $replacement) => {
    let $tb, var$3, var$4, var$5;
    $tb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0($tb, $this.$data2.data.length);
    $tb = r_Replacer_wrap($tb);
    var$3 = r_PerlSubstitution__init_($replacement);
    var$4 = 1;
    var$5 = 0;
    $replacement = var$3;
    while (var$5 < 1 && r_Matcher_find($this)) {
        if (!r_Matcher_end($this) && !var$4)
            continue;
        if (r_Matcher_start($this) > 0)
            r_Matcher_getGroup($this, (-1), $tb);
        r_PerlSubstitution_appendSubstitution($replacement, $this, $tb);
        var$5 = var$5 + 1 | 0;
        r_Matcher_setTarget0($this, $this, (-2));
        var$4 = 0;
    }
    r_Matcher_getGroup($this, (-3), $tb);
    return r_Replacer$StringBuilderBuffer_toString($tb);
},
r_Matcher__clinit_ = () => {
    r_Matcher_startAnchor = r_Term__init_(18);
    r_Matcher_lastMatchAnchor = r_Term__init_(23);
},
jn_ArrayBufferViewProvider = $rt_classWithoutFields(0);
function jn_ByteBufferJsImpl() {
    let a = this; jn_ByteBuffer.call(a);
    a.$array3 = null;
    a.$arrayOffset = 0;
    a.$data0 = null;
    a.$direct = 0;
    a.$readOnly0 = 0;
}
let jn_ByteBufferJsImpl__init_0 = ($this, $array, $arrayOffset, $data, $direct, $readOnly) => {
    jn_Buffer__init_($this);
    $this.$order0 = jn_ByteOrder_BIG_ENDIAN;
    $this.$array3 = $array;
    $this.$arrayOffset = $arrayOffset;
    $this.$data0 = $data;
    $this.$direct = $direct;
    $this.$readOnly0 = $readOnly;
},
jn_ByteBufferJsImpl__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jn_ByteBufferJsImpl();
    jn_ByteBufferJsImpl__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jn_ByteBufferJsImpl_capacityImpl = $this => {
    return $this.$data0.length;
},
jn_ByteBufferJsImpl_get = ($this, $index) => {
    let var$2;
    if ($index >= 0 && $index < $this.$limit0)
        return $this.$data0[$index];
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$2);
    $rt_throw(var$2);
},
jn_ByteBufferJsImpl_asShortBuffer = $this => {
    let $sz, $slice, var$3, var$4, var$5;
    $sz = jn_Buffer_remaining($this) / 2 | 0;
    if ($this.$order0 === jn_ByteOrder_nativeOrder()) {
        $slice = new Int16Array($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz);
        return jn_ShortBufferOverTypedArray__init_(0, $sz, $this.$readOnly0, $slice, null);
    }
    $slice = new DataView($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz * 2 | 0);
    var$3 = new jn_ShortBufferOverDataView;
    var$4 = $this.$readOnly0;
    var$5 = $this.$order0 !== jn_ByteOrder_LITTLE_ENDIAN ? 0 : 1;
    jn_ShortBufferImpl__init_(var$3, 0, $sz);
    var$3.$readOnly4 = var$4;
    var$3.$data7 = $slice;
    var$3.$littleEndian3 = var$5;
    return var$3;
},
jn_ByteBufferJsImpl_asIntBuffer = $this => {
    let $sz, $slice, var$3, var$4, var$5;
    $sz = jn_Buffer_remaining($this) / 4 | 0;
    if ($this.$order0 === jn_ByteOrder_nativeOrder()) {
        $slice = new Int32Array($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz);
        return jn_IntBufferOverTypedArray__init_(0, $sz, $this.$readOnly0, $slice, null);
    }
    $slice = new DataView($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz * 4 | 0);
    var$3 = new jn_IntBufferOverDataView;
    var$4 = $this.$readOnly0;
    var$5 = $this.$order0 !== jn_ByteOrder_LITTLE_ENDIAN ? 0 : 1;
    jn_IntBufferImpl__init_(var$3, 0, $sz);
    var$3.$readOnly3 = var$4;
    var$3.$data10 = $slice;
    var$3.$littleEndian1 = var$5;
    return var$3;
},
jn_ByteBufferJsImpl_asFloatBuffer = $this => {
    let $sz, $slice, var$3, var$4, var$5;
    $sz = jn_Buffer_remaining($this) / 4 | 0;
    if ($this.$order0 === jn_ByteOrder_nativeOrder()) {
        $slice = new Float32Array($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz);
        return jn_FloatBufferOverTypedArray__init_(0, $sz, $this.$readOnly0, $slice, null);
    }
    $slice = new DataView($this.$data0.buffer, $this.$data0.byteOffset + $this.$position0 | 0, $sz * 4 | 0);
    var$3 = new jn_FloatBufferOverDataView;
    var$4 = $this.$readOnly0;
    var$5 = $this.$order0 !== jn_ByteOrder_LITTLE_ENDIAN ? 0 : 1;
    jn_FloatBufferImpl__init_(var$3, 0, $sz);
    var$3.$readOnly5 = var$4;
    var$3.$data6 = $slice;
    var$3.$littleEndian = var$5;
    return var$3;
},
jn_ByteBufferJsImpl_getArrayBufferView = $this => {
    return $this.$data0;
};
function cbgm_EarClippingTriangulator() {
    let a = this; jl_Object.call(a);
    a.$indicesArray = null;
    a.$vertexTypes = null;
    a.$triangles0 = null;
}
function r_PerlSubstitution$Element() {
    let a = this; jl_Object.call(a);
    a.$prefix0 = null;
    a.$next9 = null;
}
function r_PerlSubstitution$PlainElement() {
    r_PerlSubstitution$Element.call(this);
    this.$str = null;
}
let r_PerlSubstitution$PlainElement_append = ($this, $match, $dest) => {
    $match = $this.$prefix0;
    if ($match !== null)
        r_Replacer$StringBuilderBuffer_append($dest, $match);
    $match = $this.$str;
    if ($match !== null)
        r_Replacer$StringBuilderBuffer_append($dest, $match);
};
function r_PerlSubstitution$IntRefHandler() {
    let a = this; r_PerlSubstitution$Element.call(a);
    a.$index11 = null;
    a.$modes = 0;
}
let r_PerlSubstitution$IntRefHandler__init_0 = ($this, $s, $ind, $modes) => {
    $this.$prefix0 = $s;
    $this.$index11 = $ind;
    $this.$modes = $modes;
},
r_PerlSubstitution$IntRefHandler__init_ = (var_0, var_1, var_2) => {
    let var_3 = new r_PerlSubstitution$IntRefHandler();
    r_PerlSubstitution$IntRefHandler__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
r_PerlSubstitution$IntRefHandler_append = ($this, $match, $dest) => {
    let var$3, $i;
    var$3 = $this.$prefix0;
    if (var$3 !== null)
        r_Replacer$StringBuilderBuffer_append($dest, var$3);
    var$3 = $this.$index11;
    if (var$3 === null)
        return;
    $i = var$3.$value0;
    $match = $match;
    if ($i >= $match.$re.$memregs0)
        return;
    if (r_Matcher_isCaptured($match, $i))
        r_Matcher_getGroup0($match, $i, $dest, $this.$modes);
};
function r_PerlSubstitution$StringRefHandler() {
    let a = this; r_PerlSubstitution$Element.call(a);
    a.$index12 = null;
    a.$modes0 = 0;
}
let r_PerlSubstitution$StringRefHandler_append = ($this, $match, $dest) => {
    let var$3, var$4, $i;
    var$3 = $this.$prefix0;
    if (var$3 !== null)
        r_Replacer$StringBuilderBuffer_append($dest, var$3);
    var$3 = $this.$index12;
    if (var$3 === null)
        return;
    var$4 = $match;
    $i = (r_Pattern_groupId(var$4.$re, var$3)).$value0;
    if (r_Matcher_isCaptured(var$4, $i))
        r_Matcher_getGroup0(var$4, $i, $dest, $this.$modes0);
},
r_PatternSyntaxException = $rt_classWithoutFields(jl_IllegalArgumentException),
r_PatternSyntaxException__init_0 = ($this, $s) => {
    jl_Throwable__init_($this, $s);
},
r_PatternSyntaxException__init_ = var_0 => {
    let var_1 = new r_PatternSyntaxException();
    r_PatternSyntaxException__init_0(var_1, var_0);
    return var_1;
},
jn_IntBufferImpl = $rt_classWithoutFields(jn_IntBuffer),
jn_IntBufferImpl__init_ = ($this, $position, $limit) => {
    jn_Buffer__init_($this);
    $this.$position0 = $position;
    $this.$limit0 = $limit;
},
jn_IntBufferImpl_get0 = $this => {
    let var$1, var$2;
    var$1 = $this.$position0;
    if (var$1 < $this.$limit0) {
        $this.$position0 = var$1 + 1 | 0;
        return $this.$getElement(var$1);
    }
    var$2 = new jn_BufferUnderflowException;
    jl_Exception__init_(var$2);
    $rt_throw(var$2);
},
jn_IntBufferImpl_get = ($this, $index) => {
    let var$2, var$3, var$4;
    if ($index >= 0 && $index < $this.$limit0)
        return $this.$getElement($index);
    var$2 = new jl_IndexOutOfBoundsException;
    var$3 = $this.$limit0;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(var$4, $rt_s(921)), $index), $rt_s(753)), var$3), 41);
    jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$2);
},
jn_IntBufferImpl_put = ($this, $index, $b) => {
    let var$3, var$4;
    if ($this.$readOnly()) {
        var$3 = new jn_ReadOnlyBufferException;
        jl_Exception__init_(var$3);
        $rt_throw(var$3);
    }
    if ($index >= 0 && $index < $this.$limit0) {
        $this.$putElement($index, $b);
        return $this;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    $b = $this.$limit0;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(var$4, $rt_s(921)), $index), $rt_s(753)), $b), 41);
    jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$3);
},
jn_IntBufferImpl_isReadOnly = $this => {
    return $this.$readOnly();
};
function jn_IntBufferOverTypedArray() {
    let a = this; jn_IntBufferImpl.call(a);
    a.$readOnly7 = 0;
    a.$data8 = null;
    a.$array8 = null;
}
let jn_IntBufferOverTypedArray__init_0 = ($this, $position, $limit, $readOnly, $data, $array) => {
    jn_IntBufferImpl__init_($this, $position, $limit);
    $this.$readOnly7 = $readOnly;
    $this.$data8 = $data;
    $this.$array8 = $array;
},
jn_IntBufferOverTypedArray__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jn_IntBufferOverTypedArray();
    jn_IntBufferOverTypedArray__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jn_IntBufferOverTypedArray_readOnly = $this => {
    return $this.$readOnly7;
},
jn_IntBufferOverTypedArray_getElement = ($this, $index) => {
    return $this.$data8[$index];
},
jn_IntBufferOverTypedArray_putElement = ($this, $index, $value) => {
    $this.$data8[$index] = $value;
},
jn_IntBufferOverTypedArray_capacityImpl = $this => {
    return $this.$data8.length;
},
otjt_Int32Array = $rt_classWithoutFields(otjt_TypedArray),
jn_FloatBufferImpl = $rt_classWithoutFields(jn_FloatBuffer),
jn_FloatBufferImpl__init_ = ($this, $position, $limit) => {
    jn_Buffer__init_($this);
    $this.$position0 = $position;
    $this.$limit0 = $limit;
},
jn_FloatBufferImpl_get = ($this, $index) => {
    let var$2, var$3, var$4;
    if ($index >= 0 && $index < $this.$limit0)
        return $this.$getElement0($index);
    var$2 = new jl_IndexOutOfBoundsException;
    var$3 = $this.$limit0;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(var$4, $rt_s(921)), $index), $rt_s(753)), var$3), 41);
    jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$2);
},
jn_FloatBufferImpl_put = ($this, $index, $b) => {
    let var$3, var$4, var$5;
    if ($this.$readOnly()) {
        var$3 = new jn_ReadOnlyBufferException;
        jl_Exception__init_(var$3);
        $rt_throw(var$3);
    }
    if ($index >= 0 && $index < $this.$limit0) {
        $this.$putElement0($index, $b);
        return $this;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    var$4 = $this.$limit0;
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(var$5, $rt_s(921)), $index), $rt_s(753)), var$4), 41);
    jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$5));
    $rt_throw(var$3);
},
jn_FloatBufferImpl_isReadOnly = $this => {
    return $this.$readOnly();
};
function jn_FloatBufferOverTypedArray() {
    let a = this; jn_FloatBufferImpl.call(a);
    a.$readOnly6 = 0;
    a.$data5 = null;
    a.$array6 = null;
}
let jn_FloatBufferOverTypedArray__init_0 = ($this, $position, $limit, $readOnly, $data, $array) => {
    jn_FloatBufferImpl__init_($this, $position, $limit);
    $this.$readOnly6 = $readOnly;
    $this.$data5 = $data;
    $this.$array6 = $array;
},
jn_FloatBufferOverTypedArray__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jn_FloatBufferOverTypedArray();
    jn_FloatBufferOverTypedArray__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jn_FloatBufferOverTypedArray_readOnly = $this => {
    return $this.$readOnly6;
},
jn_FloatBufferOverTypedArray_getElement = ($this, $index) => {
    return $this.$data5[$index];
},
jn_FloatBufferOverTypedArray_putElement = ($this, $index, $value) => {
    $this.$data5[$index] = $value;
},
jn_FloatBufferOverTypedArray_capacityImpl = $this => {
    return $this.$data5.length;
},
jn_FloatBufferOverTypedArray_putImpl = ($this, $index, $src, $offset, $length) => {
    let $slice;
    $slice = $src.data.buffer;
    $offset = $offset * 4 | 0;
    $slice = new Float32Array($slice, $offset, $length);
    $this.$data5.set($slice, $index);
},
jn_FloatBufferOverTypedArray_getArrayBufferView = $this => {
    return $this.$data5;
},
otjt_Float32Array = $rt_classWithoutFields(otjt_TypedArray),
jn_JSBufferHelper = $rt_classWithoutFields(),
jn_JSBufferHelper_getArrayBufferView = $buffer => {
    let $provider;
    if ($rt_isInstance($buffer, jn_ArrayBufferViewProvider))
        return $buffer.$getArrayBufferView0();
    $provider = new jl_IllegalArgumentException;
    jl_Throwable__init_($provider, $rt_s(922));
    $rt_throw($provider);
},
jn_JSBufferHelper_toInt8Array = $view => {
    return new Int8Array($view.buffer, $view.byteOffset, $view.byteLength);
};
function cbgu_ShortArray() {
    let a = this; jl_Object.call(a);
    a.$items4 = null;
    a.$ordered1 = 0;
}
let cbgu_ShortArray__init_0 = $this => {
    $this.$ordered1 = 1;
    $this.$items4 = $rt_createShortArray(16);
},
cbgu_ShortArray__init_ = () => {
    let var_0 = new cbgu_ShortArray();
    cbgu_ShortArray__init_0(var_0);
    return var_0;
};
function r_Pretokenizer() {
    let a = this; jl_Object.call(a);
    a.$tOffset = 0;
    a.$tOutside = 0;
    a.$skip = 0;
    a.$offset2 = 0;
    a.$end5 = 0;
    a.$ttype = 0;
    a.$data13 = null;
    a.$flags2 = 0;
    a.$flagsChanged = 0;
    a.$groupName = null;
    a.$groupDeclared = 0;
}
let r_Pretokenizer_flags = ($this, $def) => {
    if ($this.$flagsChanged)
        $def = $this.$flags2;
    return $def;
},
r_Pretokenizer_next = $this => {
    let $tOffset, $skip, var$3, $end, $data, $esc, $i, var$8, $c, $c2, $p, $mLen, $isDecl;
    $tOffset = $this.$tOutside;
    $skip = $this.$skip;
    var$3 = $tOffset + $skip | 0;
    $this.$flagsChanged = 0;
    $end = $this.$end5;
    $data = $this.$data13;
    $esc = 0;
    $i = var$3;
    a: while (true) {
        if ($i >= $end) {
            $this.$ttype = 2;
            $this.$tOffset = var$3;
            $this.$tOutside = $end;
            return;
        }
        b: {
            var$8 = $data.data;
            $c = var$8[$i];
            if ($esc) {
                if ($c != 81)
                    $esc = 0;
                else {
                    $c2 = $i;
                    while ($c2 < $end) {
                        if (var$8[$c2] == 92) {
                            $i = $c2 + 1 | 0;
                            if ($i < $end && var$8[$i] == 69) {
                                $esc = 0;
                                break b;
                            }
                        }
                        $c2 = $c2 + 1 | 0;
                    }
                    $i = $c2;
                }
            } else
                switch ($c) {
                    case 40:
                        c: {
                            $esc = $i + 2 | 0;
                            $tOffset = $rt_compare($esc, $end);
                            if ($tOffset < 0 && var$8[$i + 1 | 0] == 63)
                                d: {
                                    switch (var$8[$esc]) {
                                        case 33:
                                            break;
                                        case 35:
                                            $this.$ttype = 9;
                                            $skip = 3;
                                            break d;
                                        case 40:
                                            $this.$ttype = 10;
                                            $skip = 2;
                                            break d;
                                        case 58:
                                            $this.$ttype = 3;
                                            $skip = 3;
                                            break d;
                                        case 60:
                                            e: {
                                                $esc = $i + 3 | 0;
                                                $c2 = var$8[$esc];
                                                switch ($c2) {
                                                    case 33:
                                                        break;
                                                    case 61:
                                                        $this.$ttype = 6;
                                                        $skip = 4;
                                                        break e;
                                                    default:
                                                        $skip = 4;
                                                        r_Category_$callClinit();
                                                        if (r_Category_contains(r_Category_N, $c2))
                                                            $rt_throw(r_PatternSyntaxException__init_($rt_s(923)));
                                                        $tOffset = $esc;
                                                        while (true) {
                                                            if (!r_Category_contains(r_Category_IdentifierPart, $c2)) {
                                                                if ($c2 != 62)
                                                                    $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(924)), $tOffset - $i | 0), $rt_s(925)), jl_String__init_($data, $i, $end - $i | 0)))));
                                                                $this.$groupName = jl_String__init_($data, $esc, $tOffset - $esc | 0);
                                                                $this.$groupDeclared = 1;
                                                                $this.$ttype = 13;
                                                                break e;
                                                            }
                                                            $tOffset = $tOffset + 1 | 0;
                                                            $c2 = var$8[$tOffset];
                                                            $skip = $skip + 1 | 0;
                                                            if ($tOffset == $end)
                                                                break;
                                                        }
                                                        $rt_throw(r_PatternSyntaxException__init_($rt_s(926)));
                                                }
                                                $this.$ttype = 7;
                                                $skip = 4;
                                            }
                                            break d;
                                        case 61:
                                            $this.$ttype = 4;
                                            $skip = 3;
                                            break d;
                                        case 62:
                                            $this.$ttype = 8;
                                            $skip = 3;
                                            break d;
                                        case 91:
                                            $this.$ttype = 12;
                                            $skip = 2;
                                            break d;
                                        default:
                                            $p = $esc;
                                            while ($p < $end) {
                                                $c2 = var$8[$p];
                                                switch ($c2) {
                                                    case 41:
                                                        $tOffset = $p - $esc | 0;
                                                        $this.$flags2 = r_Pattern_parseFlags($data, $esc, $tOffset);
                                                        $this.$flagsChanged = 1;
                                                        $this.$ttype = 11;
                                                        $skip = $tOffset + 3 | 0;
                                                        break d;
                                                    case 45:
                                                    case 88:
                                                    case 105:
                                                    case 109:
                                                    case 115:
                                                    case 117:
                                                    case 120:
                                                        break;
                                                    case 58:
                                                        $mLen = $p - $esc | 0;
                                                        if ($mLen > 0) {
                                                            $this.$flags2 = r_Pattern_parseFlags($data, $esc, $mLen);
                                                            $this.$flagsChanged = 1;
                                                        }
                                                        $this.$ttype = 3;
                                                        $skip = $mLen + 3 | 0;
                                                        break d;
                                                    default:
                                                        $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append2(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(927)), $c2))));
                                                }
                                                $p = $p + 1 | 0;
                                            }
                                            break d;
                                    }
                                    $this.$ttype = 5;
                                    $skip = 3;
                                }
                            else {
                                if ($tOffset < 0 && var$8[$i + 1 | 0] == 123) {
                                    $skip = 3;
                                    $tOffset = var$8[$esc];
                                    while (true) {
                                        r_Category_$callClinit();
                                        if (!r_Category_contains(r_Category_Space, $tOffset)) {
                                            if ($tOffset != 61)
                                                $isDecl = 1;
                                            else {
                                                $isDecl = 0;
                                                $esc = $esc + 1 | 0;
                                                $tOffset = var$8[$esc];
                                                $skip = $skip + 1 | 0;
                                                if ($esc == $end)
                                                    $rt_throw(r_PatternSyntaxException__init_($rt_s(926)));
                                            }
                                            $p = $esc;
                                            while (true) {
                                                if (!r_Category_contains(r_Category_IdentifierPart, $tOffset)) {
                                                    $c2 = $p;
                                                    while (true) {
                                                        if (!r_Category_contains(r_Category_Space, $tOffset)) {
                                                            if ($tOffset == 125) {
                                                                $this.$groupName = jl_String__init_($data, $esc, $p - $esc | 0);
                                                                $this.$groupDeclared = $isDecl;
                                                                $this.$ttype = 13;
                                                                break c;
                                                            }
                                                            $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(928)), $c2 - $i | 0), $rt_s(925)), jl_String__init_($data, $i, $end - $i | 0)))));
                                                        }
                                                        $c2 = $c2 + 1 | 0;
                                                        $tOffset = var$8[$c2];
                                                        $skip = $skip + 1 | 0;
                                                        if ($c2 == $end)
                                                            break;
                                                    }
                                                    $rt_throw(r_PatternSyntaxException__init_($rt_s(926)));
                                                }
                                                $p = $p + 1 | 0;
                                                $tOffset = var$8[$p];
                                                $skip = $skip + 1 | 0;
                                                if ($p == $end)
                                                    break;
                                            }
                                            $rt_throw(r_PatternSyntaxException__init_($rt_s(926)));
                                        }
                                        $esc = $esc + 1 | 0;
                                        $tOffset = var$8[$esc];
                                        $skip = $skip + 1 | 0;
                                        if ($esc == $end)
                                            break;
                                    }
                                    $rt_throw(r_PatternSyntaxException__init_($rt_s(926)));
                                }
                                $this.$ttype = 40;
                                $skip = 1;
                            }
                        }
                        $this.$tOffset = var$3;
                        $this.$tOutside = $i;
                        $this.$skip = $skip;
                        return;
                    case 41:
                    case 124:
                        $this.$ttype = $c;
                        $this.$tOffset = var$3;
                        $this.$tOutside = $i;
                        $this.$skip = 1;
                        return;
                    case 92:
                        $esc = 1;
                        break b;
                    case 91:
                        f: while (true) {
                            if ($i == $end)
                                break a;
                            g: {
                                switch (var$8[$i]) {
                                    case 92:
                                        $i = $i + 1 | 0;
                                        break g;
                                    case 93:
                                        break f;
                                    default:
                                }
                            }
                            $i = $i + 1 | 0;
                        }
                        break b;
                    default:
                }
        }
        $i = $i + 1 | 0;
    }
    $rt_throw(r_PatternSyntaxException__init_($rt_s(929)));
},
r_Group = $rt_classWithoutFields(r_Term),
r_Group__init_1 = $this => {
    r_Group__init_($this, 0);
},
r_Group__init_0 = () => {
    let var_0 = new r_Group();
    r_Group__init_1(var_0);
    return var_0;
},
r_Group__init_ = ($this, $memreg) => {
    let var$2;
    r_Term__init_1($this);
    $this.$type0 = 15;
    $this.$memreg = $memreg;
    $this.$current = null;
    $this.$in = $this;
    $this.$prev = null;
    var$2 = r_Term__init_0();
    $this.$out0 = var$2;
    var$2.$type0 = 16;
    var$2.$memreg = $memreg;
},
r_Group__init_2 = var_0 => {
    let var_1 = new r_Group();
    r_Group__init_(var_1, var_0);
    return var_1;
};
function r_Optimizer() {
    let a = this; jl_Object.call(a);
    a.$atom = null;
    a.$distance8 = 0;
}
let r_Optimizer_find0 = $entry => {
    return r_Optimizer_find($entry, 0);
},
r_Optimizer_find = ($term, $dist) => {
    let $next, $type;
    if ($term === null)
        return null;
    $next = $term.$next3;
    $type = $term.$type0;
    switch ($type) {
        case 0:
        case 6:
        case 7:
        case 15:
            break;
        case 1:
        case 2:
            if ($term.$weight0 <= 20)
                return r_Optimizer__init_($term, $dist);
            return r_Optimizer_find($next, $dist + 1 | 0);
        case 4:
        case 5:
            return r_Optimizer_find($next, $dist + 1 | 0);
        case 46:
        case 47:
            if ($term.$minCount <= 0)
                return null;
            return r_Optimizer_find($term.$target, $dist);
        default:
            if ($type >= 11 && $type <= 31)
                return r_Optimizer_find($next, $dist);
            return null;
    }
    return r_Optimizer__init_($term, $dist);
},
r_Optimizer__init_0 = ($this, $atom, $distance) => {
    $this.$atom = $atom;
    $this.$distance8 = $distance;
},
r_Optimizer__init_ = (var_0, var_1) => {
    let var_2 = new r_Optimizer();
    r_Optimizer__init_0(var_2, var_0, var_1);
    return var_2;
},
r_TermIterator = $rt_classWithoutFields(r_Term),
r_TermIterator__init_0 = ($this, $term, $min, $max, $collection) => {
    let $back;
    r_Term__init_1($this);
    ju_ArrayList_add($collection, $this);
    switch ($term.$type0) {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
            $this.$target = $term;
            $back = r_Term__init_0();
            if ($min <= 0 && $max < 0) {
                $this.$type0 = 45;
                $back.$type0 = 50;
            } else if ($min > 0 && $max < 0) {
                $this.$type0 = 46;
                $back.$type0 = 51;
                $back.$minCount = $min;
                $this.$minCount = $min;
            } else {
                $this.$type0 = 47;
                $back.$type0 = 51;
                $back.$minCount = $min;
                $this.$minCount = $min;
                $this.$maxCount = $max;
            }
            $this.$failNext = $back;
            $this.$in = $this;
            $this.$out0 = $this;
            $this.$out10 = $back;
            $this.$branchOut = null;
            return;
        case 3:
            break;
        case 6:
            $this.$target = $term;
            $this.$memreg = $term.$memreg;
            $back = r_Term__init_0();
            if ($max < 0) {
                $this.$type0 = 48;
                $back.$type0 = 54;
                $back.$minCount = $min;
                $this.$minCount = $min;
            } else {
                $this.$type0 = 49;
                $back.$type0 = 54;
                $back.$minCount = $min;
                $this.$minCount = $min;
                $this.$maxCount = $max;
            }
            $this.$failNext = $back;
            $this.$in = $this;
            $this.$out0 = $this;
            $this.$out10 = $back;
            $this.$branchOut = null;
            return;
        default:
    }
    $collection = new r_PatternSyntaxException;
    $back = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($back);
    jl_AbstractStringBuilder_append($back, $rt_s(930));
    jl_Throwable__init_($collection, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1($back, $term.$type0)));
    $rt_throw($collection);
},
r_TermIterator__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new r_TermIterator();
    r_TermIterator__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
};
function r_MemReg() {
    let a = this; jl_Object.call(a);
    a.$index13 = 0;
    a.$in0 = 0;
    a.$out1 = 0;
    a.$tmp0 = 0;
}
let r_MemReg__init_0 = ($this, $index) => {
    $this.$in0 = (-1);
    $this.$out1 = (-1);
    $this.$tmp0 = (-1);
    $this.$index13 = $index;
},
r_MemReg__init_ = var_0 => {
    let var_1 = new r_MemReg();
    r_MemReg__init_0(var_1, var_0);
    return var_1;
};
function r_Lookahead() {
    r_Term.call(this);
    this.$isPositive = 0;
}
let r_Lookahead__init_ = ($this, $id, $isPositive) => {
    let var$3;
    r_Term__init_1($this);
    $this.$isPositive = $isPositive;
    $this.$in = $this;
    var$3 = r_Term__init_0();
    $this.$out0 = var$3;
    if ($isPositive) {
        $this.$type0 = 35;
        var$3.$type0 = 36;
    } else {
        $this.$type0 = 37;
        var$3.$type0 = 38;
        $this.$branchOut = $this;
    }
    $this.$lookaheadId = $id;
    var$3.$lookaheadId = $id;
},
r_Lookahead__init_0 = (var_0, var_1) => {
    let var_2 = new r_Lookahead();
    r_Lookahead__init_(var_2, var_0, var_1);
    return var_2;
},
r_Lookahead_equals = ($this, $o) => {
    let $lookahead;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        if (!r_Term_equals($this, $o))
            return 0;
        $lookahead = $o;
        return $this.$isPositive != $lookahead.$isPositive ? 0 : 1;
    }
    return 0;
},
r_Lookahead_hashCode = $this => {
    return (31 * r_Term_hashCode($this) | 0) + (!$this.$isPositive ? 0 : 1) | 0;
};
function r_Lookbehind() {
    let a = this; r_Term.call(a);
    a.$isPositive0 = 0;
    a.$prevDistance = 0;
}
let r_Lookbehind__init_ = ($this, $id, $isPositive) => {
    let var$3;
    r_Term__init_1($this);
    $this.$prevDistance = (-1);
    $this.$distance = 0;
    $this.$isPositive0 = $isPositive;
    $this.$in = $this;
    var$3 = r_Term__init_0();
    $this.$out0 = var$3;
    if ($isPositive) {
        $this.$type0 = 39;
        var$3.$type0 = 40;
    } else {
        $this.$type0 = 41;
        var$3.$type0 = 42;
        $this.$branchOut = $this;
    }
    $this.$lookaheadId = $id;
    var$3.$lookaheadId = $id;
},
r_Lookbehind__init_0 = (var_0, var_1) => {
    let var_2 = new r_Lookbehind();
    r_Lookbehind__init_(var_2, var_0, var_1);
    return var_2;
},
r_Lookbehind_append = ($this, $t) => {
    $this.$distance = $this.$distance + r_Lookbehind_length($t) | 0;
    return r_Term_append($this, $t);
},
r_Lookbehind_replaceCurrent = ($this, $t) => {
    $this.$distance = $this.$distance + (r_Lookbehind_length($t) - r_Lookbehind_length($this.$current) | 0) | 0;
    return r_Term_replaceCurrent($this, $t);
},
r_Lookbehind_length = $t => {
    let $type, var$3;
    a: {
        $type = $t.$type0;
        switch ($type) {
            case 0:
            case 1:
            case 2:
            case 4:
            case 5:
                break;
            case 3:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
                break a;
            case 11:
            case 12:
            case 13:
            case 14:
                return 0;
            default:
                break a;
        }
        return 1;
    }
    if ($type >= 11 && $type <= 31)
        return 0;
    var$3 = new r_PatternSyntaxException;
    jl_Throwable__init_(var$3, $rt_s(931));
    $rt_throw(var$3);
},
r_Lookbehind_startNewBranch = $this => {
    $this.$prevDistance = $this.$distance;
    $this.$distance = 0;
    r_Term_startNewBranch($this);
},
r_Lookbehind_close = $this => {
    let $pd, var$2;
    $pd = $this.$prevDistance;
    if ($pd >= 0 && $this.$distance != $pd) {
        var$2 = new r_PatternSyntaxException;
        jl_Throwable__init_(var$2, $rt_s(932));
        $rt_throw(var$2);
    }
    r_Term_close($this);
},
r_Lookbehind_equals = ($this, $o) => {
    let $that;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        if (!r_Term_equals($this, $o))
            return 0;
        $that = $o;
        return $this.$isPositive0 == $that.$isPositive0 && $this.$prevDistance == $that.$prevDistance ? 1 : 0;
    }
    return 0;
},
r_Lookbehind_hashCode = $this => {
    return (31 * ((31 * r_Term_hashCode($this) | 0) + (!$this.$isPositive0 ? 0 : 1) | 0) | 0) + $this.$prevDistance | 0;
},
r_IndependentGroup = $rt_classWithoutFields(r_Term),
r_IndependentGroup__init_ = ($this, $id) => {
    let var$2;
    r_Term__init_2($this, 0);
    $this.$in = $this;
    var$2 = r_Term__init_0();
    $this.$out0 = var$2;
    $this.$type0 = 43;
    var$2.$type0 = 44;
    var$2.$lookaheadId = $id;
    $this.$lookaheadId = $id;
},
r_IndependentGroup__init_0 = var_0 => {
    let var_1 = new r_IndependentGroup();
    r_IndependentGroup__init_(var_1, var_0);
    return var_1;
},
r_UnicodeConstants = $rt_classWithoutFields(0),
r_CharacterClass = $rt_classWithoutFields(r_Term),
r_CharacterClass_DIGIT = null,
r_CharacterClass_WORDCHAR = null,
r_CharacterClass_SPACE = null,
r_CharacterClass_HSPACE = null,
r_CharacterClass_VSPACE = null,
r_CharacterClass_UDIGIT = null,
r_CharacterClass_UWORDCHAR = null,
r_CharacterClass_USPACE = null,
r_CharacterClass_UHSPACE = null,
r_CharacterClass_UVSPACE = null,
r_CharacterClass_NONDIGIT = null,
r_CharacterClass_NONWORDCHAR = null,
r_CharacterClass_NONSPACE = null,
r_CharacterClass_NONHSPACE = null,
r_CharacterClass_NONVSPACE = null,
r_CharacterClass_UNONDIGIT = null,
r_CharacterClass_UNONWORDCHAR = null,
r_CharacterClass_UNONSPACE = null,
r_CharacterClass_UNONHSPACE = null,
r_CharacterClass_UNONVSPACE = null,
r_CharacterClass_namesInitialized = 0,
r_CharacterClass_namedClasses = null,
r_CharacterClass_unicodeBlocks = null,
r_CharacterClass_posixClasses = null,
r_CharacterClass_unicodeCategories = null,
r_CharacterClass_blockDataStarts = null,
r_CharacterClass_blockDataEnds = null,
r_CharacterClass_blockDataNames = null,
r_CharacterClass_b0 = null,
r_CharacterClass_b2 = null,
r_CharacterClass_$callClinit = () => {
    r_CharacterClass_$callClinit = $rt_eraseClinit(r_CharacterClass);
    r_CharacterClass__clinit_();
},
r_CharacterClass_registerClass = ($name, $cls, $realm) => {
    let var$4, var$5;
    r_CharacterClass_$callClinit();
    ju_HashMap_put(r_CharacterClass_namedClasses, $name, $cls);
    $name = jl_String_toUpperCase(jl_String_replace(jl_String_replace($name, $rt_s(560), $rt_s(24)), $rt_s(933), $rt_s(24)));
    var$4 = ju_AbstractList_iterator($realm);
    a: {
        while (ju_AbstractList$1_hasNext(var$4)) {
            if (ju_Objects_equals(ju_AbstractList$1_next(var$4), $name)) {
                var$5 = 1;
                break a;
            }
        }
        var$5 = 0;
    }
    if (!var$5)
        ju_ArrayList_add($realm, $name);
},
r_CharacterClass_initPosixClasses = () => {
    let $lower, $upper, $ascii, $alpha, $digit, $alnum, $punct, $graph, $blank, $cntrl, $xdigit, $space;
    r_CharacterClass_$callClinit();
    $lower = r_BlockSet__init_();
    r_BlockSet_setRange($lower, 97, 122);
    r_CharacterClass_registerClass($rt_s(195), $lower, r_CharacterClass_posixClasses);
    $upper = r_BlockSet__init_();
    r_BlockSet_setRange($upper, 65, 90);
    r_CharacterClass_registerClass($rt_s(196), $upper, r_CharacterClass_posixClasses);
    $ascii = r_BlockSet__init_();
    r_BlockSet_setRange($ascii, 0, 127);
    r_CharacterClass_registerClass($rt_s(197), $ascii, r_CharacterClass_posixClasses);
    $alpha = r_BlockSet__init_();
    r_BlockSet_add($alpha, $lower);
    r_BlockSet_add($alpha, $upper);
    r_CharacterClass_registerClass($rt_s(198), $alpha, r_CharacterClass_posixClasses);
    $digit = r_BlockSet__init_();
    r_BlockSet_setRange($digit, 48, 57);
    r_CharacterClass_registerClass($rt_s(199), $digit, r_CharacterClass_posixClasses);
    $alnum = r_BlockSet__init_();
    r_BlockSet_add($alnum, $alpha);
    r_BlockSet_add($alnum, $digit);
    r_CharacterClass_registerClass($rt_s(200), $alnum, r_CharacterClass_posixClasses);
    $punct = r_BlockSet__init_();
    r_BlockSet_setChars($punct, $rt_s(934));
    r_CharacterClass_registerClass($rt_s(201), $punct, r_CharacterClass_posixClasses);
    $graph = r_BlockSet__init_();
    r_BlockSet_add($graph, $alnum);
    r_BlockSet_add($graph, $punct);
    r_CharacterClass_registerClass($rt_s(202), $graph, r_CharacterClass_posixClasses);
    r_CharacterClass_registerClass($rt_s(203), $graph, r_CharacterClass_posixClasses);
    $blank = r_BlockSet__init_();
    r_BlockSet_setChars($blank, $rt_s(935));
    r_CharacterClass_registerClass($rt_s(204), $blank, r_CharacterClass_posixClasses);
    $cntrl = r_BlockSet__init_();
    r_BlockSet_setRange($cntrl, 0, 31);
    r_BlockSet_setRange($cntrl, 127, 127);
    r_CharacterClass_registerClass($rt_s(205), $cntrl, r_CharacterClass_posixClasses);
    $xdigit = r_BlockSet__init_();
    r_BlockSet_setRange($xdigit, 48, 57);
    r_BlockSet_setRange($xdigit, 97, 102);
    r_BlockSet_setRange($xdigit, 65, 70);
    r_CharacterClass_registerClass($rt_s(206), $xdigit, r_CharacterClass_posixClasses);
    $space = r_BlockSet__init_();
    r_BlockSet_setChars($space, $rt_s(936));
    r_CharacterClass_registerClass($rt_s(223), $space, r_CharacterClass_posixClasses);
},
r_CharacterClass_initNames = () => {
    let $bs, $e, $i, var$4, $$je;
    r_CharacterClass_$callClinit();
    r_CharacterClass_initNamedCategory($rt_s(937));
    r_CharacterClass_initNamedCategory($rt_s(352));
    r_CharacterClass_initNamedCategory($rt_s(372));
    r_CharacterClass_initNamedCategory($rt_s(373));
    r_CharacterClass_initNamedCategory($rt_s(374));
    r_CharacterClass_initNamedCategory($rt_s(375));
    r_CharacterClass_initNamedCategory($rt_s(938));
    r_CharacterClass_initNamedCategory($rt_s(354));
    r_CharacterClass_initNamedCategory($rt_s(355));
    r_CharacterClass_initNamedCategory($rt_s(356));
    r_CharacterClass_initNamedCategory($rt_s(357));
    r_CharacterClass_initNamedCategory($rt_s(358));
    r_CharacterClass_initNamedCategory($rt_s(939));
    r_CharacterClass_initNamedCategory($rt_s(360));
    r_CharacterClass_initNamedCategory($rt_s(361));
    r_CharacterClass_initNamedCategory($rt_s(362));
    r_CharacterClass_initNamedCategory($rt_s(363));
    r_CharacterClass_initNamedCategory($rt_s(364));
    r_CharacterClass_initNamedCategory($rt_s(365));
    r_CharacterClass_initNamedCategory($rt_s(366));
    r_CharacterClass_initNamedCategory($rt_s(940));
    r_CharacterClass_initNamedCategory($rt_s(368));
    r_CharacterClass_initNamedCategory($rt_s(369));
    r_CharacterClass_initNamedCategory($rt_s(370));
    r_CharacterClass_initNamedCategory($rt_s(941));
    r_CharacterClass_initNamedCategory($rt_s(942));
    r_CharacterClass_initNamedCategory($rt_s(943));
    r_CharacterClass_initNamedCategory($rt_s(377));
    r_CharacterClass_initNamedCategory($rt_s(378));
    r_CharacterClass_initNamedCategory($rt_s(387));
    r_CharacterClass_initNamedCategory($rt_s(379));
    r_CharacterClass_initNamedCategory($rt_s(388));
    r_CharacterClass_initNamedCategory($rt_s(380));
    r_CharacterClass_initNamedCategory($rt_s(381));
    r_CharacterClass_initNamedCategory($rt_s(227));
    r_CharacterClass_initNamedCategory($rt_s(383));
    r_CharacterClass_initNamedCategory($rt_s(384));
    r_CharacterClass_initNamedCategory($rt_s(385));
    r_CharacterClass_initNamedCategory($rt_s(386));
    r_CharacterClass_initNamedCategory($rt_s(944));
    r_CharacterClass_initNamedCategory($rt_s(945));
    r_CharacterClass_initNamedCategory($rt_s(946));
    r_CharacterClass_initNamedCategory($rt_s(947));
    r_CharacterClass_initNamedCategory($rt_s(948));
    r_CharacterClass_initNamedCategory($rt_s(949));
    r_CharacterClass_initNamedCategory($rt_s(950));
    r_CharacterClass_initNamedCategory($rt_s(951));
    r_CharacterClass_initNamedCategory($rt_s(952));
    r_CharacterClass_initNamedCategory($rt_s(953));
    r_CharacterClass_initNamedCategory($rt_s(954));
    r_CharacterClass_initNamedCategory($rt_s(955));
    r_CharacterClass_initNamedCategory($rt_s(956));
    r_CharacterClass_initNamedCategory($rt_s(957));
    r_CharacterClass_initNamedCategory($rt_s(958));
    r_CharacterClass_initNamedCategory($rt_s(959));
    r_CharacterClass_initNamedCategory($rt_s(960));
    r_CharacterClass_initNamedCategory($rt_s(961));
    r_CharacterClass_initNamedCategory($rt_s(962));
    r_CharacterClass_initNamedCategory($rt_s(963));
    r_CharacterClass_initNamedCategory($rt_s(964));
    r_CharacterClass_initNamedCategory($rt_s(965));
    r_CharacterClass_initNamedCategory($rt_s(966));
    r_CharacterClass_initNamedCategory($rt_s(967));
    r_CharacterClass_initNamedCategory($rt_s(968));
    r_CharacterClass_initNamedCategory($rt_s(969));
    r_CharacterClass_initNamedCategory($rt_s(970));
    r_CharacterClass_initNamedCategory($rt_s(971));
    r_CharacterClass_initNamedCategory($rt_s(972));
    r_CharacterClass_initNamedCategory($rt_s(973));
    r_CharacterClass_initNamedCategory($rt_s(974));
    r_CharacterClass_initNamedCategory($rt_s(975));
    r_CharacterClass_initNamedCategory($rt_s(976));
    r_CharacterClass_initNamedCategory($rt_s(977));
    r_CharacterClass_initNamedCategory($rt_s(978));
    r_CharacterClass_initNamedCategory($rt_s(979));
    r_CharacterClass_initNamedCategory($rt_s(980));
    r_CharacterClass_initNamedCategory($rt_s(981));
    r_CharacterClass_initNamedCategory($rt_s(982));
    r_CharacterClass_initNamedCategory($rt_s(983));
    r_CharacterClass_initNamedCategory($rt_s(984));
    r_CharacterClass_initNamedCategory($rt_s(985));
    r_CharacterClass_initNamedCategory($rt_s(986));
    r_CharacterClass_initNamedCategory($rt_s(987));
    r_CharacterClass_initNamedCategory($rt_s(988));
    r_CharacterClass_initNamedCategory($rt_s(223));
    r_CharacterClass_initNamedCategory($rt_s(989));
    r_CharacterClass_initNamedCategory($rt_s(990));
    r_CharacterClass_initNamedCategory($rt_s(991));
    r_CharacterClass_initNamedCategory($rt_s(992));
    $bs = r_BlockSet__init_();
    r_BlockSet_setCategory($bs, $rt_s(352));
    r_CharacterClass_registerClass($rt_s(993), $bs, r_CharacterClass_unicodeCategories);
    $e = r_BlockSet__init_();
    r_BlockSet_setCategory($e, $rt_s(352));
    $e.$positive = 0;
    r_CharacterClass_registerClass($rt_s(994), $e, r_CharacterClass_unicodeCategories);
    $i = 0;
    while (true) {
        var$4 = r_CharacterClass_blockDataStarts.data;
        if ($i >= var$4.length)
            break;
        a: {
            try {
                r_CharacterClass_initNamedBlock(r_CharacterClass_blockDataNames.data[$i], var$4[$i], r_CharacterClass_blockDataEnds.data[$i]);
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            jl_Throwable_printStackTrace($e);
        }
        $i = $i + 1 | 0;
    }
    r_CharacterClass_initNamedBlock($rt_s(995), 0, 65535);
    r_CharacterClass_namesInitialized = 1;
},
r_CharacterClass_initNamedBlock = ($name, $first, $last) => {
    let $bs, var$5;
    r_CharacterClass_$callClinit();
    if ($first >= 0 && $first <= 65535) {
        if ($last >= 0 && $last <= 65535) {
            if ($last < $first) {
                $bs = new jl_IllegalArgumentException;
                var$5 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$5);
                jl_AbstractStringBuilder_append(var$5, $rt_s(996));
                jl_AbstractStringBuilder_append(var$5, $name);
                jl_Throwable__init_($bs, jl_AbstractStringBuilder_toString(var$5));
                $rt_throw($bs);
            }
            $name = jl_String_toUpperCase(jl_String_replace(jl_String_replace($name, $rt_s(560), $rt_s(24)), $rt_s(933), $rt_s(24)));
            $bs = ju_HashMap_get(r_CharacterClass_namedClasses, $name);
            if ($bs === null) {
                $bs = r_BlockSet__init_();
                r_CharacterClass_registerClass($name, $bs, r_CharacterClass_unicodeBlocks);
            }
            r_BlockSet_setRange($bs, $first & 65535, $last & 65535);
            return;
        }
        $bs = new jl_IllegalArgumentException;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_AbstractStringBuilder_append(var$5, $rt_s(997));
        var$5 = jl_StringBuilder_append1(var$5, $last);
        jl_AbstractStringBuilder_append(var$5, $rt_s(998));
        jl_AbstractStringBuilder_append(var$5, $name);
        jl_Throwable__init_($bs, jl_AbstractStringBuilder_toString(var$5));
        $rt_throw($bs);
    }
    var$5 = new jl_IllegalArgumentException;
    $bs = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($bs);
    jl_AbstractStringBuilder_append($bs, $rt_s(999));
    $bs = jl_StringBuilder_append1($bs, $first);
    jl_AbstractStringBuilder_append($bs, $rt_s(998));
    jl_AbstractStringBuilder_append($bs, $name);
    jl_Throwable__init_(var$5, jl_AbstractStringBuilder_toString($bs));
    $rt_throw(var$5);
},
r_CharacterClass_initNamedCategory = $name => {
    let $bs;
    r_CharacterClass_$callClinit();
    $bs = r_BlockSet__init_();
    r_BlockSet_setCategory($bs, $name);
    r_CharacterClass_registerClass(jl_String_toUpperCase($name), $bs, r_CharacterClass_unicodeCategories);
};
let r_CharacterClass_getNamedClass = $name => {
    r_CharacterClass_$callClinit();
    if (!r_CharacterClass_namesInitialized)
        r_CharacterClass_initNames();
    return ju_HashMap_get(r_CharacterClass_namedClasses, jl_String_toUpperCase(jl_String_replace(jl_String_replace($name, $rt_s(560), $rt_s(24)), $rt_s(933), $rt_s(24))));
},
r_CharacterClass_makeDigit = ($term, $inverse, $unicode) => {
    r_CharacterClass_$callClinit();
    r_BlockSet_unify(!$unicode ? (!$inverse ? r_CharacterClass_DIGIT : r_CharacterClass_NONDIGIT) : !$inverse ? r_CharacterClass_UDIGIT : r_CharacterClass_UNONDIGIT, $term);
},
r_CharacterClass_makeSpace = ($term, $inverse, $unicode) => {
    r_CharacterClass_$callClinit();
    r_BlockSet_unify(!$unicode ? (!$inverse ? r_CharacterClass_SPACE : r_CharacterClass_NONSPACE) : !$inverse ? r_CharacterClass_USPACE : r_CharacterClass_UNONSPACE, $term);
},
r_CharacterClass_makeHSpace = ($term, $inverse, $unicode) => {
    r_CharacterClass_$callClinit();
    r_BlockSet_unify(!$unicode ? (!$inverse ? r_CharacterClass_HSPACE : r_CharacterClass_NONHSPACE) : !$inverse ? r_CharacterClass_UHSPACE : r_CharacterClass_UNONHSPACE, $term);
},
r_CharacterClass_makeVSpace = ($term, $inverse, $unicode) => {
    r_CharacterClass_$callClinit();
    r_BlockSet_unify(!$unicode ? (!$inverse ? r_CharacterClass_VSPACE : r_CharacterClass_NONVSPACE) : !$inverse ? r_CharacterClass_UVSPACE : r_CharacterClass_UNONVSPACE, $term);
},
r_CharacterClass_makeWordChar = ($term, $inverse, $unicode) => {
    r_CharacterClass_$callClinit();
    r_BlockSet_unify(!$unicode ? (!$inverse ? r_CharacterClass_WORDCHAR : r_CharacterClass_NONWORDCHAR) : !$inverse ? r_CharacterClass_UWORDCHAR : r_CharacterClass_UNONWORDCHAR, $term);
},
r_CharacterClass_makeWordBoundary = ($term, $inverse, $unicode) => {
    r_CharacterClass_$callClinit();
    r_CharacterClass_makeWordChar($term, $inverse, $unicode);
    $term.$type0 = !$unicode ? 11 : 13;
},
r_CharacterClass_makeWordStart = ($term, $unicode) => {
    r_CharacterClass_$callClinit();
    r_CharacterClass_makeWordChar($term, 0, $unicode);
    $term.$type0 = !$unicode ? 12 : 14;
},
r_CharacterClass_makeWordEnd = ($term, $unicode) => {
    r_CharacterClass_$callClinit();
    r_CharacterClass_makeWordChar($term, 1, $unicode);
    $term.$type0 = !$unicode ? 12 : 14;
},
r_CharacterClass_parseGroup = ($data, $i, $out, $term, $icase, $skipspaces, $unicode, $xml) => {
    let $sum, $bs, $mode, var$12, var$13;
    r_CharacterClass_$callClinit();
    $sum = r_BlockSet__init_();
    $bs = r_BlockSet__init_();
    $mode = 1;
    a: while ($i < $out) {
        var$12 = $data.data;
        var$13 = $i + 1 | 0;
        switch (var$12[$i]) {
            case 38:
                $mode = 3;
                $i = var$13;
                continue a;
            case 41:
                $term = new r_PatternSyntaxException;
                jl_Throwable__init_($term, $rt_s(1000));
                $rt_throw($term);
            case 43:
                $mode = 1;
                $i = var$13;
                continue a;
            case 45:
                $mode = 2;
                $i = var$13;
                continue a;
            case 91:
                b: {
                    r_BlockSet_reset($bs);
                    $i = r_CharacterClass_parseClass($data, var$13, $out, $bs, $icase, $skipspaces, $unicode, $xml);
                    switch ($mode) {
                        case 1:
                            break;
                        case 2:
                            r_BlockSet_subtract1($sum, $bs);
                            break b;
                        case 3:
                            r_BlockSet_subtract0($sum, $bs, 1);
                            break b;
                        default:
                            break b;
                    }
                    r_BlockSet_add($sum, $bs);
                }
                continue a;
            default:
        }
        $i = var$13;
    }
    r_BlockSet_unify($sum, $term);
},
r_CharacterClass_parseClass0 = ($data, $i, $out, $term, $icase, $skipspaces, $unicode, $xml) => {
    let $bs;
    r_CharacterClass_$callClinit();
    $bs = r_BlockSet__init_();
    $i = r_CharacterClass_parseClass($data, $i, $out, $bs, $icase, $skipspaces, $unicode, $xml);
    r_BlockSet_unify($bs, $term);
    return $i;
},
r_CharacterClass_parseName0 = ($data, $i, $out, $term, $inverse, $skipspaces) => {
    let $sb, $bs;
    r_CharacterClass_$callClinit();
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    $i = r_CharacterClass_parseName($data, $i, $out, $sb, $skipspaces);
    $bs = r_CharacterClass_getNamedClass(jl_AbstractStringBuilder_toString($sb));
    if ($bs !== null) {
        r_BlockSet_unify($bs, $term);
        $term.$inverse = $inverse;
        return $i;
    }
    $term = new r_PatternSyntaxException;
    $bs = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($bs);
    jl_AbstractStringBuilder_append($bs, $rt_s(1001));
    $sb = jl_StringBuilder_append($bs, $sb);
    jl_AbstractStringBuilder_append($sb, $rt_s(881));
    jl_Throwable__init_($term, jl_AbstractStringBuilder_toString($sb));
    $rt_throw($term);
},
r_CharacterClass_parseClass = ($data, $i, $out, $bs, $icase, $skipspaces, $unicode, $xml) => {
    let $prev, $isFirst, $setFirst, $inRange, $bs1, $sb, $c1, var$16, var$17, $c0, $d, $inv, $d_0, $dec, $nc, $hex, $c1_0;
    r_CharacterClass_$callClinit();
    $prev = (-1);
    $isFirst = 1;
    $setFirst = 0;
    $inRange = 0;
    $bs1 = null;
    $sb = null;
    $c1 = $out - 2 | 0;
    var$16 = $out - 4 | 0;
    a: {
        while ($i < $out) {
            b: {
                c: {
                    d: {
                        var$17 = $data.data;
                        $c0 = $i + 1 | 0;
                        $d = var$17[$i];
                        switch ($d) {
                            case 9:
                            case 10:
                            case 12:
                            case 13:
                            case 32:
                                if ($skipspaces) {
                                    $d = $prev;
                                    $i = $c0;
                                    break b;
                                }
                                $i = $c0;
                                break c;
                            case 45:
                                break d;
                            case 91:
                                if (!$inRange) {
                                    $i = $c0;
                                    break c;
                                }
                                if ($xml) {
                                    if ($prev >= 0)
                                        r_BlockSet_setChar($bs, $prev & 65535);
                                    if ($bs1 !== null)
                                        r_BlockSet_reset($bs1);
                                    else
                                        $bs1 = r_BlockSet__init_();
                                    $i = r_CharacterClass_parseClass($data, $c0, $out, $bs1, $icase, $skipspaces, $unicode, $xml);
                                    r_BlockSet_subtract1($bs, $bs1);
                                    $inRange = 0;
                                    $d = (-1);
                                    break b;
                                }
                                $i = $c0;
                                break c;
                            case 92:
                                e: {
                                    f: {
                                        g: {
                                            h: {
                                                i: {
                                                    j: {
                                                        k: {
                                                            l: {
                                                                m: {
                                                                    n: {
                                                                        $inv = 0;
                                                                        $i = $c0 + 1 | 0;
                                                                        $d = var$17[$c0];
                                                                        switch ($d) {
                                                                            case 48:
                                                                            case 49:
                                                                            case 50:
                                                                            case 51:
                                                                            case 52:
                                                                            case 53:
                                                                            case 54:
                                                                            case 55:
                                                                                $d = 0;
                                                                                o: {
                                                                                    while (true) {
                                                                                        $d_0 = var$17[$i - 1 | 0];
                                                                                        if ($d_0 < 48)
                                                                                            break;
                                                                                        if ($d_0 > 55)
                                                                                            break;
                                                                                        $i = $i + 1 | 0;
                                                                                        $c0 = $d * 8 | 0;
                                                                                        $dec = $d_0 - 48 | 0;
                                                                                        $d = $c0 + $dec | 0;
                                                                                        if ($d > 65535) {
                                                                                            $d = ($d - $dec | 0) / 8 | 0;
                                                                                            break o;
                                                                                        }
                                                                                    }
                                                                                    $i = $i + (-1) | 0;
                                                                                }
                                                                                $d = $d & 65535;
                                                                                break c;
                                                                            case 56:
                                                                            case 57:
                                                                            case 58:
                                                                            case 59:
                                                                            case 60:
                                                                            case 61:
                                                                            case 62:
                                                                            case 63:
                                                                            case 64:
                                                                            case 65:
                                                                            case 66:
                                                                            case 67:
                                                                            case 70:
                                                                            case 71:
                                                                            case 72:
                                                                            case 73:
                                                                            case 74:
                                                                            case 75:
                                                                            case 76:
                                                                            case 77:
                                                                            case 78:
                                                                            case 79:
                                                                            case 82:
                                                                            case 84:
                                                                            case 85:
                                                                            case 86:
                                                                            case 88:
                                                                            case 89:
                                                                            case 90:
                                                                            case 91:
                                                                            case 92:
                                                                            case 93:
                                                                            case 94:
                                                                            case 95:
                                                                            case 96:
                                                                            case 97:
                                                                            case 101:
                                                                            case 103:
                                                                            case 105:
                                                                            case 106:
                                                                            case 107:
                                                                            case 108:
                                                                            case 113:
                                                                                break h;
                                                                            case 68:
                                                                                break j;
                                                                            case 69:
                                                                            case 81:
                                                                                $rt_throw(r_PatternSyntaxException__init_($rt_s(1002)));
                                                                            case 80:
                                                                                if ($inRange)
                                                                                    $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(1003)), $prev), $rt_s(1004)))));
                                                                                $inv = 1;
                                                                                break g;
                                                                            case 83:
                                                                                $nc = !$unicode ? r_CharacterClass_NONSPACE : r_CharacterClass_UNONSPACE;
                                                                                break i;
                                                                            case 87:
                                                                                $nc = !$unicode ? r_CharacterClass_NONWORDCHAR : r_CharacterClass_UNONWORDCHAR;
                                                                                break i;
                                                                            case 98:
                                                                                $d = 8;
                                                                                break c;
                                                                            case 99:
                                                                                $c0 = $i + 1 | 0;
                                                                                $d = var$17[$i] & 31 & 65535;
                                                                                $i = $c0;
                                                                                break c;
                                                                            case 100:
                                                                                break;
                                                                            case 102:
                                                                                $d = 12;
                                                                                break c;
                                                                            case 104:
                                                                                break n;
                                                                            case 109:
                                                                                $dec = 0;
                                                                                p: {
                                                                                    while (true) {
                                                                                        $c0 = $i + 1 | 0;
                                                                                        $d = var$17[$i];
                                                                                        if ($d < 48)
                                                                                            break;
                                                                                        if ($d > 57)
                                                                                            break p;
                                                                                        $i = $dec * 10 | 0;
                                                                                        $d = $d - 48 | 0;
                                                                                        $dec = $i + $d | 0;
                                                                                        if ($dec > 65535) {
                                                                                            $dec = ($dec - $d | 0) / 10 | 0;
                                                                                            break p;
                                                                                        }
                                                                                        $i = $c0;
                                                                                    }
                                                                                }
                                                                                $d = $dec & 65535;
                                                                                $i = $c0;
                                                                                break c;
                                                                            case 110:
                                                                                $d = 10;
                                                                                break c;
                                                                            case 111:
                                                                                break e;
                                                                            case 114:
                                                                                $d = 13;
                                                                                break c;
                                                                            case 115:
                                                                                break m;
                                                                            case 116:
                                                                                $d = 9;
                                                                                break c;
                                                                            case 117:
                                                                                break f;
                                                                            case 118:
                                                                                break l;
                                                                            case 119:
                                                                                break k;
                                                                            case 120:
                                                                                $hex = 0;
                                                                                $dec = $i + 1 | 0;
                                                                                $c0 = var$17[$i];
                                                                                if ($c0 != 123) {
                                                                                    if ($dec >= $c1)
                                                                                        $rt_throw(r_PatternSyntaxException__init_($rt_s(1005)));
                                                                                    $c0 = r_CharacterClass_toHexDigit($c0) << 4;
                                                                                    $i = $dec + 1 | 0;
                                                                                    $hex = $c0 + r_CharacterClass_toHexDigit(var$17[$dec]) | 0;
                                                                                } else {
                                                                                    q: {
                                                                                        while ($dec < $out) {
                                                                                            $i = $dec + 1 | 0;
                                                                                            $c0 = var$17[$dec];
                                                                                            if ($c0 == 125) {
                                                                                                $dec = $i;
                                                                                                break q;
                                                                                            }
                                                                                            $hex = ($hex << 4) + r_CharacterClass_toHexDigit($c0) | 0;
                                                                                            $dec = $i;
                                                                                        }
                                                                                    }
                                                                                    if ($hex > 65535)
                                                                                        break a;
                                                                                    if ($dec == $out)
                                                                                        break a;
                                                                                    $i = $dec;
                                                                                }
                                                                                $d = $hex & 65535;
                                                                                break c;
                                                                            case 112:
                                                                                break g;
                                                                            default:
                                                                                break h;
                                                                        }
                                                                        if ($inRange)
                                                                            $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(1003)), $prev), $rt_s(1006)))));
                                                                        r_BlockSet_setDigit($bs, $unicode);
                                                                        $d = $prev;
                                                                        break b;
                                                                    }
                                                                    if ($inRange)
                                                                        $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(1003)), $prev), $rt_s(1007)))));
                                                                    r_BlockSet_setHorizontalSpace($bs, $unicode);
                                                                    $d = $prev;
                                                                    break b;
                                                                }
                                                                if ($inRange)
                                                                    $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(1003)), $prev), $rt_s(1008)))));
                                                                r_BlockSet_setSpace($bs, $unicode);
                                                                $d = $prev;
                                                                break b;
                                                            }
                                                            if ($inRange)
                                                                $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(1003)), $prev), $rt_s(1007)))));
                                                            r_BlockSet_setVerticalSpace($bs, $unicode);
                                                            $d = $prev;
                                                            break b;
                                                        }
                                                        if ($inRange)
                                                            $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(1003)), $prev), $rt_s(1007)))));
                                                        r_BlockSet_setWordChar($bs, $unicode);
                                                        $d = $prev;
                                                        break b;
                                                    }
                                                    $nc = !$unicode ? r_CharacterClass_NONDIGIT : r_CharacterClass_UNONDIGIT;
                                                }
                                                if ($inRange)
                                                    $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append2(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(1003)), $prev), $rt_s(1009)), $d), $rt_s(1010)))));
                                                r_BlockSet_add($bs, $nc);
                                                $d = $prev;
                                                break b;
                                            }
                                            break c;
                                        }
                                        if ($inRange)
                                            $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(1003)), $prev), $rt_s(1011)))));
                                        if ($sb !== null)
                                            jl_StringBuilder_setLength($sb, 0);
                                        else
                                            $sb = jl_StringBuilder__init_();
                                        $i = r_CharacterClass_parseName($data, $i, $out, $sb, $skipspaces);
                                        $nc = r_CharacterClass_getNamedClass(jl_StringBuilder_toString($sb));
                                        if ($nc === null)
                                            $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(1012)), $sb), $rt_s(881)))));
                                        r_BlockSet_add1($bs, $nc, $inv);
                                        $d = $prev;
                                        break b;
                                    }
                                    if ($i >= var$16)
                                        $rt_throw(r_PatternSyntaxException__init_($rt_s(1013)));
                                    $c0 = $i + 1 | 0;
                                    $i = r_CharacterClass_toHexDigit(var$17[$i]) << 12;
                                    $dec = $c0 + 1 | 0;
                                    $i = $i + (r_CharacterClass_toHexDigit(var$17[$c0]) << 8) | 0;
                                    $c0 = $dec + 1 | 0;
                                    $dec = $i + (r_CharacterClass_toHexDigit(var$17[$dec]) << 4) | 0;
                                    $i = $c0 + 1 | 0;
                                    $d = ($dec + r_CharacterClass_toHexDigit(var$17[$c0]) | 0) & 65535;
                                    break c;
                                }
                                $c0 = 0;
                                r: {
                                    while (true) {
                                        $dec = $i + 1 | 0;
                                        $d = var$17[$i];
                                        if ($d < 48)
                                            break;
                                        if ($d > 55)
                                            break r;
                                        $i = $c0 * 8 | 0;
                                        $d = $d - 48 | 0;
                                        $c0 = $i + $d | 0;
                                        if ($c0 > 65535) {
                                            $c0 = ($c0 - $d | 0) / 8 | 0;
                                            break r;
                                        }
                                        $i = $dec;
                                    }
                                }
                                $d = $c0 & 65535;
                                $i = $dec;
                                break c;
                            case 93:
                                if (!$isFirst) {
                                    if ($inRange)
                                        r_BlockSet_setChar($bs, 45);
                                    if ($prev >= 0) {
                                        $c1 = $prev & 65535;
                                        if (!$icase)
                                            r_BlockSet_setChar($bs, $c1);
                                        else
                                            r_BlockSet_setChar($bs, r_Category_caseFold($c1));
                                    }
                                    return $c0;
                                }
                                $i = $c0;
                                break c;
                            case 94:
                                if ($isFirst) {
                                    r_BlockSet_setPositive($bs, 0);
                                    $setFirst = 1;
                                    $d = $prev;
                                    $i = $c0;
                                    break b;
                                }
                                $i = $c0;
                                break c;
                            default:
                        }
                        $i = $c0;
                        break c;
                    }
                    if ($isFirst)
                        $i = $c0;
                    else {
                        if (!$inRange) {
                            $inRange = 1;
                            $d = $prev;
                            $i = $c0;
                            break b;
                        }
                        $i = $c0;
                    }
                }
                if ($prev < 0)
                    $inRange = 0;
                else if (!$inRange) {
                    $c1_0 = $prev & 65535;
                    if (!$icase)
                        r_BlockSet_setChar($bs, $c1_0);
                    else
                        r_BlockSet_setChar($bs, r_Category_caseFold($c1_0));
                } else {
                    if ($prev > $d)
                        $rt_throw(r_PatternSyntaxException__init_(jl_StringBuilder_toString(jl_StringBuilder_append2(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(1014)), $prev), $rt_s(787)), $d))));
                    $c0 = $prev & 65535;
                    $inRange = 0;
                    if (!$icase) {
                        r_BlockSet_setRange($bs, $c0, $d);
                        $d = (-1);
                    } else {
                        r_BlockSet_setRange($bs, r_Category_caseFold($c0), r_Category_caseFold($d));
                        $d = (-1);
                    }
                }
            }
            $isFirst = $setFirst;
            $setFirst = 0;
            $prev = $d;
        }
        $rt_throw(r_PatternSyntaxException__init_($rt_s(1015)));
    }
    $rt_throw(r_PatternSyntaxException__init_($rt_s(798)));
},
r_CharacterClass_parseName = ($data, $i, $out, $sb, $skipspaces) => {
    let $start, var$7, var$8, $start_0;
    r_CharacterClass_$callClinit();
    $start = (-1);
    a: while (true) {
        if ($i >= $out) {
            var$7 = new r_PatternSyntaxException;
            $sb = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($sb);
            jl_AbstractStringBuilder_append($sb, $rt_s(1016));
            jl_AbstractStringBuilder_append($sb, jl_String__init_($data, $i, $out - $i | 0));
            jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString($sb));
            $rt_throw(var$7);
        }
        b: {
            c: {
                d: {
                    var$8 = $data.data;
                    $start_0 = $i + 1 | 0;
                    $i = var$8[$i];
                    switch ($i) {
                        case 9:
                        case 10:
                        case 12:
                        case 13:
                        case 32:
                            if (!$skipspaces)
                                break d;
                            $i = $start_0;
                            continue a;
                        case 67:
                        case 71:
                        case 74:
                        case 76:
                        case 77:
                        case 78:
                        case 80:
                        case 83:
                        case 90:
                            break c;
                        case 73:
                            break d;
                        case 123:
                            break;
                        case 125:
                            break a;
                        default:
                            break b;
                    }
                    $i = $start_0;
                    $start = $start_0;
                    continue a;
                }
                if ($start > 0 && ($start + 1 | 0) == $start_0) {
                    if (var$8[$start_0] != 115 && var$8[$start_0] != 110)
                        break c;
                    $i = $start_0 + 1 | 0;
                    continue a;
                }
                if ($start < 0) {
                    $sb = new r_PatternSyntaxException;
                    jl_Throwable__init_($sb, $rt_s(1017));
                    $rt_throw($sb);
                }
            }
            if ($start < 0) {
                jl_AbstractStringBuilder_append0($sb, $i);
                return $start_0;
            }
        }
        if ($start < 0) {
            $sb = new r_PatternSyntaxException;
            jl_Throwable__init_($sb, $rt_s(1018));
            $rt_throw($sb);
        }
        jl_AbstractStringBuilder_append0($sb, $i);
        $i = $start_0;
    }
    return $start_0;
},
r_CharacterClass_stringValue0 = $arr => {
    let $c, $last, var$4, var$5;
    r_CharacterClass_$callClinit();
    r_CharacterClass_b0.$length2 = 0;
    $c = 0;
    a: {
        while (true) {
            $last = $c >>> 5 | 0;
            b: {
                while ($last < 8 && $c < 256) {
                    var$4 = jl_Integer_numberOfTrailingZeros(jl_Integer_lowestOneBit($arr.$data1.data[$c >>> 5 | 0] >>> ($c & 31) | 0));
                    if (var$4 != 32) {
                        var$4 = $c + var$4 | 0;
                        break b;
                    }
                    $c = ($c & 224) + 32 | 0;
                    $last = $last + 1 | 0;
                }
                var$4 = (-1);
            }
            if (var$4 < 0)
                break a;
            if (var$4 >= 255)
                break;
            $last = var$4 >>> 5 | 0;
            var$5 = var$4;
            c: {
                while ($last < 8 && var$5 < 256) {
                    $c = jl_Integer_numberOfTrailingZeros(jl_Integer_lowestOneBit(($arr.$data1.data[var$5 >>> 5 | 0] >>> (var$5 & 31) | 0) ^ (-1)));
                    if ($c != 32) {
                        $c = var$5 + $c | 0;
                        break c;
                    }
                    var$5 = (var$5 & 224) + 32 | 0;
                    $last = $last + 1 | 0;
                }
                $c = (-1);
            }
            $last = $c > 0 && $c <= 255 ? $c - 1 | 0 : 255;
            if ($last == var$4)
                jl_AbstractStringBuilder_append(r_CharacterClass_b0, r_CharacterClass_stringValue($last));
            else {
                jl_AbstractStringBuilder_append(r_CharacterClass_b0, r_CharacterClass_stringValue(var$4));
                jl_AbstractStringBuilder_append0(r_CharacterClass_b0, 45);
                jl_AbstractStringBuilder_append(r_CharacterClass_b0, r_CharacterClass_stringValue($last));
            }
        }
    }
    return jl_AbstractStringBuilder_toString(r_CharacterClass_b0);
},
r_CharacterClass_stringValue2 = $arr => {
    let $c, var$3, var$4, $marks, var$6, $last;
    r_CharacterClass_$callClinit();
    r_CharacterClass_b2.$length2 = 0;
    $c = 0;
    a: {
        while (true) {
            var$3 = $c;
            while (true) {
                var$4 = $arr.data;
                $marks = var$4[var$3 >> 8];
                if ($marks !== null && rd_IntBitSet_get($marks, var$3 & 255))
                    break;
                var$3 = var$3 + 1 | 0;
                if (var$3 > 65535)
                    break a;
            }
            $c = var$3;
            b: {
                while (true) {
                    var$6 = $rt_compare($c, 65535);
                    if (var$6 > 0)
                        break b;
                    $marks = var$4[$c >> 8];
                    if ($marks === null)
                        break b;
                    if (!rd_IntBitSet_get($marks, $c & 255))
                        break;
                    $c = $c + 1 | 0;
                }
            }
            $last = $c - 1 | 0;
            if ($last == var$3)
                jl_AbstractStringBuilder_append(r_CharacterClass_b2, r_CharacterClass_stringValue($last));
            else {
                jl_AbstractStringBuilder_append(r_CharacterClass_b2, r_CharacterClass_stringValue(var$3));
                jl_AbstractStringBuilder_append0(r_CharacterClass_b2, 45);
                jl_AbstractStringBuilder_append(r_CharacterClass_b2, r_CharacterClass_stringValue($last));
            }
            if (var$6 > 0)
                break;
        }
    }
    return jl_AbstractStringBuilder_toString(r_CharacterClass_b2);
},
r_CharacterClass_stringValue = $c => {
    let var$2;
    r_CharacterClass_$callClinit();
    if ($c >= 32)
        return jl_String_valueOf1($c & 65535);
    a: {
        switch ($c) {
            case 9:
                break;
            case 10:
                return $rt_s(1019);
            case 11:
                break a;
            case 12:
                return $rt_s(1020);
            case 13:
                return $rt_s(1021);
            default:
                break a;
        }
        return $rt_s(1022);
    }
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(1023));
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$2, $c));
},
r_CharacterClass_toHexDigit = $d => {
    let $val, var$3, var$4;
    r_CharacterClass_$callClinit();
    a: {
        if ($d >= 48 && $d <= 57)
            $val = $d - 48 | 0;
        else if ($d >= 97 && $d <= 102)
            $val = (10 + $d | 0) - 97 | 0;
        else {
            if ($d < 65)
                break a;
            if ($d > 70)
                break a;
            $val = (10 + $d | 0) - 65 | 0;
        }
        return $val;
    }
    var$3 = new r_PatternSyntaxException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(1024));
    jl_AbstractStringBuilder_append0(var$4, $d);
    jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$3);
},
r_CharacterClass__clinit_ = () => {
    r_CharacterClass_DIGIT = r_BlockSet__init_();
    r_CharacterClass_WORDCHAR = r_BlockSet__init_();
    r_CharacterClass_SPACE = r_BlockSet__init_();
    r_CharacterClass_HSPACE = r_BlockSet__init_();
    r_CharacterClass_VSPACE = r_BlockSet__init_();
    r_CharacterClass_UDIGIT = r_BlockSet__init_();
    r_CharacterClass_UWORDCHAR = r_BlockSet__init_();
    r_CharacterClass_USPACE = r_BlockSet__init_();
    r_CharacterClass_UHSPACE = r_BlockSet__init_();
    r_CharacterClass_UVSPACE = r_BlockSet__init_();
    r_CharacterClass_NONDIGIT = r_BlockSet__init_();
    r_CharacterClass_NONWORDCHAR = r_BlockSet__init_();
    r_CharacterClass_NONSPACE = r_BlockSet__init_();
    r_CharacterClass_NONHSPACE = r_BlockSet__init_();
    r_CharacterClass_NONVSPACE = r_BlockSet__init_();
    r_CharacterClass_UNONDIGIT = r_BlockSet__init_();
    r_CharacterClass_UNONWORDCHAR = r_BlockSet__init_();
    r_CharacterClass_UNONSPACE = r_BlockSet__init_();
    r_CharacterClass_UNONHSPACE = r_BlockSet__init_();
    r_CharacterClass_UNONVSPACE = r_BlockSet__init_();
    r_CharacterClass_namesInitialized = 0;
    r_CharacterClass_namedClasses = ju_HashMap__init_();
    r_CharacterClass_unicodeBlocks = ju_ArrayList__init_();
    r_CharacterClass_posixClasses = ju_ArrayList__init_();
    r_CharacterClass_unicodeCategories = ju_ArrayList__init_();
    r_CharacterClass_blockDataStarts = $rt_createIntArrayFromData([0, 128, 256, 384, 592, 688, 768, 880, 1024, 1280, 1328, 1424, 1536, 1792, 1872, 1920, 1984, 2048, 2112, 2144, 2208, 2304, 2432, 2560, 2688, 2816, 2944, 3072, 3200, 3328, 3456, 3584, 3712, 3840, 4096, 4256, 4352, 4608, 4992, 5024, 5120, 5760, 5792, 5888, 5920, 5952, 5984, 6016, 6144, 6320, 6400, 6480, 6528, 6624, 6656, 6688, 6832, 6912, 7040, 7104, 7168, 7248, 7296, 7360, 7376, 7424, 7552, 7616, 7680, 7936, 8192, 8304, 8352, 8400, 8448, 8528,
    8592, 8704, 8960, 9216, 9280, 9312, 9472, 9600, 9632, 9728, 9984, 10176, 10224, 10240, 10496, 10624, 10752, 11008, 11264, 11360, 11392, 11520, 11568, 11648, 11744, 11776, 11904, 12032, 12272, 12288, 12352, 12448, 12544, 12592, 12688, 12704, 12736, 12784, 12800, 13056, 13312, 19904, 19968, 40960, 42128, 42192, 42240, 42560, 42656, 42752, 42784, 43008, 43056, 43072, 43136, 43232, 43264, 43312, 43360, 43392, 43488, 43520, 43616, 43648, 43744, 43776, 43824, 43888, 43968, 44032, 55216, 55296, 56192, 56320, 57344,
    63744, 64256, 64336, 65024, 65040, 65056, 65072, 65104, 65136, 65280, 65520]);
    r_CharacterClass_blockDataEnds = $rt_createIntArrayFromData([127, 255, 383, 591, 687, 767, 879, 1023, 1279, 1327, 1423, 1535, 1791, 1871, 1919, 1983, 2047, 2111, 2143, 2159, 2303, 2431, 2559, 2687, 2815, 2943, 3071, 3199, 3327, 3455, 3583, 3711, 3839, 4095, 4255, 4351, 4607, 4991, 5023, 5119, 5759, 5791, 5887, 5919, 5951, 5983, 6015, 6143, 6319, 6399, 6479, 6527, 6623, 6655, 6687, 6831, 6911, 7039, 7103, 7167, 7247, 7295, 7311, 7375, 7423, 7551, 7615, 7679, 7935, 8191, 8303, 8351, 8399, 8447, 8527, 8591,
    8703, 8959, 9215, 9279, 9311, 9471, 9599, 9631, 9727, 9983, 10175, 10223, 10239, 10495, 10623, 10751, 11007, 11263, 11359, 11391, 11519, 11567, 11647, 11743, 11775, 11903, 12031, 12255, 12287, 12351, 12447, 12543, 12591, 12687, 12703, 12735, 12783, 12799, 13055, 13311, 19903, 19967, 40959, 42127, 42191, 42239, 42559, 42655, 42751, 42783, 43007, 43055, 43071, 43135, 43231, 43263, 43311, 43359, 43391, 43487, 43519, 43615, 43647, 43743, 43775, 43823, 43887, 43967, 44031, 55215, 55295, 56191, 56319, 57343, 63743,
    64255, 64335, 65023, 65039, 65055, 65071, 65103, 65135, 65279, 65519, 65533]);
    r_CharacterClass_blockDataNames = $rt_wrapArray(jl_String, [$rt_s(1025), $rt_s(1026), $rt_s(1027), $rt_s(1028), $rt_s(1029), $rt_s(1030), $rt_s(1031), $rt_s(1032), $rt_s(1033), $rt_s(1034), $rt_s(1035), $rt_s(1036), $rt_s(1037), $rt_s(1038), $rt_s(1039), $rt_s(1040), $rt_s(1041), $rt_s(1042), $rt_s(1043), $rt_s(1044), $rt_s(1045), $rt_s(1046), $rt_s(1047), $rt_s(1048), $rt_s(1049), $rt_s(1050), $rt_s(1051), $rt_s(1052), $rt_s(1053), $rt_s(1054), $rt_s(1055), $rt_s(1056), $rt_s(1057), $rt_s(1058), $rt_s(1059),
    $rt_s(1060), $rt_s(1061), $rt_s(1062), $rt_s(1063), $rt_s(1064), $rt_s(1065), $rt_s(1066), $rt_s(1067), $rt_s(1068), $rt_s(1069), $rt_s(1070), $rt_s(1071), $rt_s(1072), $rt_s(1073), $rt_s(1074), $rt_s(1075), $rt_s(1076), $rt_s(1077), $rt_s(1078), $rt_s(1079), $rt_s(1080), $rt_s(1081), $rt_s(1082), $rt_s(1083), $rt_s(1084), $rt_s(1085), $rt_s(1086), $rt_s(1087), $rt_s(1088), $rt_s(1089), $rt_s(1090), $rt_s(1091), $rt_s(1092), $rt_s(1093), $rt_s(1094), $rt_s(1095), $rt_s(1096), $rt_s(1097), $rt_s(1098), $rt_s(1099),
    $rt_s(1100), $rt_s(1101), $rt_s(1102), $rt_s(1103), $rt_s(1104), $rt_s(1105), $rt_s(1106), $rt_s(1107), $rt_s(1108), $rt_s(1109), $rt_s(1110), $rt_s(1111), $rt_s(1112), $rt_s(1113), $rt_s(1114), $rt_s(1115), $rt_s(1116), $rt_s(1117), $rt_s(1118), $rt_s(1119), $rt_s(1120), $rt_s(1121), $rt_s(1122), $rt_s(1123), $rt_s(1124), $rt_s(1125), $rt_s(1126), $rt_s(1127), $rt_s(1128), $rt_s(1129), $rt_s(1130), $rt_s(1131), $rt_s(1132), $rt_s(1133), $rt_s(1134), $rt_s(1135), $rt_s(1136), $rt_s(1137), $rt_s(1138), $rt_s(1139),
    $rt_s(1140), $rt_s(1141), $rt_s(1142), $rt_s(1143), $rt_s(1144), $rt_s(1145), $rt_s(1146), $rt_s(1147), $rt_s(1148), $rt_s(1149), $rt_s(1150), $rt_s(1151), $rt_s(1152), $rt_s(1153), $rt_s(1154), $rt_s(1155), $rt_s(1156), $rt_s(1157), $rt_s(1158), $rt_s(1159), $rt_s(1160), $rt_s(1161), $rt_s(1162), $rt_s(1163), $rt_s(1164), $rt_s(1165), $rt_s(1166), $rt_s(1167), $rt_s(1168), $rt_s(1169), $rt_s(1170), $rt_s(1171), $rt_s(1172), $rt_s(1173), $rt_s(1174), $rt_s(1175), $rt_s(1176), $rt_s(1177), $rt_s(1178), $rt_s(1179),
    $rt_s(1180), $rt_s(1181), $rt_s(1182), $rt_s(1183), $rt_s(1184), $rt_s(1185), $rt_s(1186)]);
    r_BlockSet_setDigit(r_CharacterClass_DIGIT, 0);
    r_BlockSet_setWordChar(r_CharacterClass_WORDCHAR, 0);
    r_BlockSet_setSpace(r_CharacterClass_SPACE, 0);
    r_BlockSet_setHorizontalSpace(r_CharacterClass_HSPACE, 0);
    r_BlockSet_setVerticalSpace(r_CharacterClass_VSPACE, 0);
    r_BlockSet_setDigit(r_CharacterClass_UDIGIT, 1);
    r_BlockSet_setWordChar(r_CharacterClass_UWORDCHAR, 1);
    r_BlockSet_setSpace(r_CharacterClass_USPACE, 1);
    r_BlockSet_setHorizontalSpace(r_CharacterClass_UHSPACE, 1);
    r_BlockSet_setVerticalSpace(r_CharacterClass_UVSPACE, 1);
    r_BlockSet_setDigit(r_CharacterClass_NONDIGIT, 0);
    r_BlockSet_setPositive(r_CharacterClass_NONDIGIT, 0);
    r_BlockSet_setWordChar(r_CharacterClass_NONWORDCHAR, 0);
    r_BlockSet_setPositive(r_CharacterClass_NONWORDCHAR, 0);
    r_BlockSet_setSpace(r_CharacterClass_NONSPACE, 0);
    r_BlockSet_setPositive(r_CharacterClass_NONSPACE, 0);
    r_BlockSet_setHorizontalSpace(r_CharacterClass_NONHSPACE, 0);
    r_BlockSet_setPositive(r_CharacterClass_NONHSPACE, 0);
    r_BlockSet_setVerticalSpace(r_CharacterClass_NONVSPACE, 0);
    r_BlockSet_setPositive(r_CharacterClass_NONVSPACE, 0);
    r_BlockSet_setDigit(r_CharacterClass_UNONDIGIT, 1);
    r_BlockSet_setPositive(r_CharacterClass_UNONDIGIT, 0);
    r_BlockSet_setWordChar(r_CharacterClass_UNONWORDCHAR, 1);
    r_BlockSet_setPositive(r_CharacterClass_UNONWORDCHAR, 0);
    r_BlockSet_setSpace(r_CharacterClass_UNONSPACE, 1);
    r_BlockSet_setPositive(r_CharacterClass_UNONSPACE, 0);
    r_BlockSet_setHorizontalSpace(r_CharacterClass_UNONHSPACE, 1);
    r_BlockSet_setPositive(r_CharacterClass_UNONHSPACE, 0);
    r_BlockSet_setVerticalSpace(r_CharacterClass_UNONVSPACE, 1);
    r_BlockSet_setPositive(r_CharacterClass_UNONVSPACE, 0);
    r_CharacterClass_initPosixClasses();
    r_CharacterClass_b0 = jl_StringBuilder__init_0(100);
    r_CharacterClass_b2 = jl_StringBuilder__init_0(100);
};
function r_ConditionalExpr() {
    let a = this; r_Group.call(a);
    a.$node = null;
    a.$newBranchStarted = 0;
    a.$linkAsBranch = 0;
}
let r_ConditionalExpr__init_4 = ($this, $la) => {
    let var$2, var$3;
    r_Group__init_($this, 0);
    $this.$newBranchStarted = 0;
    $this.$linkAsBranch = 1;
    var$2 = $la.$in;
    var$2.$type0 = 56;
    var$3 = $la.$out0;
    var$3.$type0 = 57;
    if (!$la.$isPositive) {
        $this.$node = var$3;
        $this.$linkAsBranch = 0;
        var$3.$next3 = $this.$out0;
    } else {
        $this.$node = var$2;
        $this.$linkAsBranch = 1;
        var$2.$failNext = $this.$out0;
    }
    var$2 = $this.$in;
    $la.$prev = var$2;
    var$2.$next3 = $la;
    $this.$current = $la;
},
r_ConditionalExpr__init_ = var_0 => {
    let var_1 = new r_ConditionalExpr();
    r_ConditionalExpr__init_4(var_1, var_0);
    return var_1;
},
r_ConditionalExpr__init_1 = ($this, $lb) => {
    let var$2, var$3;
    r_Group__init_($this, 0);
    $this.$newBranchStarted = 0;
    $this.$linkAsBranch = 1;
    var$2 = $lb.$in;
    var$2.$type0 = 58;
    var$3 = $lb.$out0;
    var$3.$type0 = 59;
    if (!$lb.$isPositive0) {
        $this.$node = var$3;
        $this.$linkAsBranch = 0;
        var$3.$next3 = $this.$out0;
    } else {
        $this.$node = var$2;
        $this.$linkAsBranch = 1;
        var$2.$failNext = $this.$out0;
    }
    var$2 = $this.$in;
    $lb.$prev = var$2;
    var$2.$next3 = $lb;
    $this.$current = $lb;
},
r_ConditionalExpr__init_3 = var_0 => {
    let var_1 = new r_ConditionalExpr();
    r_ConditionalExpr__init_1(var_1, var_0);
    return var_1;
},
r_ConditionalExpr__init_0 = ($this, $memreg) => {
    let $condition, var$3;
    r_Group__init_($this, 0);
    $this.$newBranchStarted = 0;
    $this.$linkAsBranch = 1;
    $condition = r_Term__init_(55);
    $condition.$memreg = $memreg;
    $condition.$out0 = $condition;
    $condition.$out10 = null;
    $condition.$branchOut = null;
    $condition.$failNext = $this.$out0;
    $this.$current = $condition;
    $this.$node = $condition;
    $this.$linkAsBranch = 1;
    var$3 = $this.$in;
    $condition.$prev = var$3;
    var$3.$next3 = $condition;
    $this.$current = $condition;
},
r_ConditionalExpr__init_2 = var_0 => {
    let var_1 = new r_ConditionalExpr();
    r_ConditionalExpr__init_0(var_1, var_0);
    return var_1;
},
r_ConditionalExpr_startNewBranch = $this => {
    let $node;
    if ($this.$newBranchStarted) {
        $node = new r_PatternSyntaxException;
        jl_Throwable__init_($node, $rt_s(1187));
        $rt_throw($node);
    }
    $node = $this.$node;
    $node.$out10 = null;
    if (!$this.$linkAsBranch) {
        $node.$out0 = $node;
        $node.$branchOut = null;
    } else {
        $node.$out0 = null;
        $node.$branchOut = $node;
    }
    $this.$newBranchStarted = 1;
    $this.$current = $node;
},
r_ConditionalExpr_equals = ($this, $o) => {
    let $that, var$3;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        if (!r_Term_equals($this, $o))
            return 0;
        a: {
            b: {
                c: {
                    $that = $o;
                    if ($this.$newBranchStarted == $that.$newBranchStarted && $this.$linkAsBranch == $that.$linkAsBranch) {
                        $o = $this.$node;
                        if ($o === null) {
                            if ($that.$node !== null)
                                break c;
                            else
                                break b;
                        }
                        if ($o.$equals($that.$node))
                            break b;
                    }
                }
                var$3 = 0;
                break a;
            }
            var$3 = 1;
        }
        return var$3;
    }
    return 0;
},
r_ConditionalExpr_hashCode = $this => {
    let $result, var$2;
    $result = 31 * r_Term_hashCode($this) | 0;
    var$2 = $this.$node;
    return (31 * ((31 * ($result + (var$2 === null ? 0 : var$2.$hashCode()) | 0) | 0) + (!$this.$newBranchStarted ? 0 : 1) | 0) | 0) + (!$this.$linkAsBranch ? 0 : 1) | 0;
},
jn_ShortBufferImpl = $rt_classWithoutFields(jn_ShortBuffer),
jn_ShortBufferImpl__init_ = ($this, $position, $limit) => {
    jn_Buffer__init_($this);
    $this.$position0 = $position;
    $this.$limit0 = $limit;
},
jn_ShortBufferImpl_isReadOnly = $this => {
    return $this.$readOnly();
};
function jn_ShortBufferOverTypedArray() {
    let a = this; jn_ShortBufferImpl.call(a);
    a.$readOnly2 = 0;
    a.$data9 = null;
    a.$array7 = null;
}
let jn_ShortBufferOverTypedArray__init_0 = ($this, $position, $limit, $readOnly, $data, $array) => {
    jn_ShortBufferImpl__init_($this, $position, $limit);
    $this.$readOnly2 = $readOnly;
    $this.$data9 = $data;
    $this.$array7 = $array;
},
jn_ShortBufferOverTypedArray__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jn_ShortBufferOverTypedArray();
    jn_ShortBufferOverTypedArray__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jn_ShortBufferOverTypedArray_readOnly = $this => {
    return $this.$readOnly2;
},
jn_ShortBufferOverTypedArray_capacityImpl = $this => {
    return $this.$data9.length;
},
jn_ShortBufferOverTypedArray_putImpl = ($this, $index, $src, $offset, $length) => {
    let $slice;
    $slice = $src.data.buffer;
    $offset = $offset * 2 | 0;
    $slice = new Int16Array($slice, $offset, $length);
    $this.$data9.set($slice, $index);
},
jn_ShortBufferOverTypedArray_getArrayBufferView = $this => {
    return $this.$data9;
},
otjt_Int16Array = $rt_classWithoutFields(otjt_TypedArray);
function r_Category() {
    let a = this; jl_Object.call(a);
    a.$length6 = 0;
    a.$n = 0;
    a.$cal = null;
    a.$blocks0 = null;
}
let r_Category_C = null,
r_Category_Other = null,
r_Category_Co = null,
r_Category_PrivateUse = null,
r_Category_Cn = null,
r_Category_Unassigned = null,
r_Category_Cc = null,
r_Category_Control = null,
r_Category_Cf = null,
r_Category_Format = null,
r_Category_Cs = null,
r_Category_Surrogate = null,
r_Category_L = null,
r_Category_Letter = null,
r_Category_Lu = null,
r_Category_UppercaseLetter = null,
r_Category_Ll = null,
r_Category_LowercaseLetter = null,
r_Category_Lt = null,
r_Category_TitlecaseLetter = null,
r_Category_Lm = null,
r_Category_ModifierLetter = null,
r_Category_Lo = null,
r_Category_OtherLetter = null,
r_Category_Lc = null,
r_Category_CasedLetter = null,
r_Category_M = null,
r_Category_Mark = null,
r_Category_Mn = null,
r_Category_NonspacingMark = null,
r_Category_Me = null,
r_Category_EnclosingMark = null,
r_Category_Mc = null,
r_Category_SpacingMark = null,
r_Category_N = null,
r_Category_Number = null,
r_Category_Nd = null,
r_Category_DecimalNumber = null,
r_Category_Nl = null,
r_Category_LetterNumber = null,
r_Category_No = null,
r_Category_OtherNumber = null,
r_Category_Z = null,
r_Category_Separator = null,
r_Category_Zs = null,
r_Category_SpaceSeparator = null,
r_Category_Zl = null,
r_Category_LineSeparator = null,
r_Category_Zp = null,
r_Category_ParagraphSeparator = null;
let r_Category_P = null,
r_Category_Punctuation = null,
r_Category_Pd = null,
r_Category_DashPunctuation = null,
r_Category_Ps = null,
r_Category_OpenPunctuation = null,
r_Category_Pi = null,
r_Category_InitialPunctuation = null,
r_Category_Pe = null,
r_Category_ClosePunctuation = null,
r_Category_Pf = null,
r_Category_FinalPunctuation = null,
r_Category_Pc = null,
r_Category_ConnectorPunctuation = null,
r_Category_Po = null,
r_Category_OtherPunctuation = null,
r_Category_S = null,
r_Category_Symbol = null,
r_Category_Sm = null,
r_Category_MathSymbol = null,
r_Category_Sc = null,
r_Category_CurrencySymbol = null,
r_Category_Sk = null,
r_Category_ModifierSymbol = null,
r_Category_So = null,
r_Category_OtherSymbol = null,
r_Category_Word = null,
r_Category_J = null,
r_Category_Identifier = null,
r_Category_Js = null,
r_Category_IdentifierStart = null,
r_Category_Jp = null,
r_Category_IdentifierPart = null,
r_Category_Gh = null,
r_Category_Horizontal = null,
r_Category_Gv = null,
r_Category_Vertical = null,
r_Category_G = null,
r_Category_Space = null,
r_Category_openers = null,
r_Category_closers = null,
r_Category_OPENING_BRACKETS = null,
r_Category_CLOSING_BRACKETS = null,
r_Category_openBrackets = null,
r_Category_closingBrackets = null,
r_Category_categories = null,
r_Category_superCategories = null,
r_Category_$callClinit = () => {
    r_Category_$callClinit = $rt_eraseClinit(r_Category);
    r_Category__clinit_();
},
r_Category__init_0 = ($this, $directory, $data) => {
    let var$3, $j, $len, $i, var$7, var$8, var$9, var$10;
    r_Category_$callClinit();
    var$3 = $data.$nativeString.length;
    $this.$n = var$3;
    $j = 0;
    $len = 0;
    $this.$cal = $rt_createCharArray(var$3);
    $i = 0;
    while ($i < $this.$n) {
        var$7 = $directory.data;
        var$8 = $this.$cal.data;
        $j = $j + var$7[jl_String_charAt($data, $i) - 32 | 0] | 0;
        var$8[$i] = $j & 65535;
        if (($i & 1) == 1)
            $len = $len + ((1 + $j | 0) - $this.$cal.data[$i - 1 | 0] | 0) | 0;
        $i = $i + 1 | 0;
    }
    $this.$length6 = $len;
    $directory = $rt_createArray(r_Block, 256);
    var$8 = $rt_createArray(rd_IntBitSet, 256).data;
    $len = 0;
    while ($len < ($this.$n - 1 | 0)) {
        var$7 = $this.$cal.data;
        $j = var$7[$len];
        var$3 = var$7[$len + 1 | 0];
        $i = $j >>> 8 | 0;
        var$9 = var$3 >>> 8 | 0;
        if (var$8[$i] === null)
            var$8[$i] = rd_IntBitSet__init_();
        if ($i == var$9)
            rd_IntBitSet_set(var$8[$i], $j & 255, var$3 & 255);
        else {
            var$10 = $i + 1 | 0;
            rd_IntBitSet_set(var$8[$i], $j & 255, 255);
            while (var$10 != var$9) {
                if (var$8[var$10] === null)
                    var$8[var$10] = rd_IntBitSet__init_();
                $j = var$10 + 1 | 0;
                rd_IntBitSet_set(var$8[var$10], 0, 255);
                var$10 = $j;
            }
            if (var$8[var$9] === null)
                var$8[var$9] = rd_IntBitSet__init_();
            rd_IntBitSet_set(var$8[var$9], 0, var$3 & 255);
        }
        $len = $len + 2 | 0;
    }
    var$7 = $directory.data;
    $j = 0;
    while ($j < 256) {
        if (var$8[$j] === null)
            var$7[$j] = r_Block__init_();
        else
            var$7[$j] = r_Block__init_0(var$8[$j]);
        $j = $j + 1 | 0;
    }
    $this.$blocks0 = $directory;
},
r_Category__init_ = (var_0, var_1) => {
    let var_2 = new r_Category();
    r_Category__init_0(var_2, var_0, var_1);
    return var_2;
};
let r_Category_contains = ($this, $checking) => {
    let $i, var$3;
    $i = 0;
    while ($i < ($this.$n - 1 | 0)) {
        var$3 = $this.$cal.data;
        if ($checking >= var$3[$i] && $checking <= var$3[$i + 1 | 0])
            return 1;
        $i = $i + 2 | 0;
    }
    return 0;
},
r_Category_caseFold = $c => {
    r_Category_$callClinit();
    r_Casing_$callClinit();
    return r_Casing_allToLower.data[$c];
},
r_Category_caseDown = $c => {
    r_Category_$callClinit();
    r_Casing_$callClinit();
    return r_Casing_allToLower.data[$c];
},
r_Category_caseUp = $c => {
    r_Category_$callClinit();
    r_Casing_$callClinit();
    return r_Casing_allToUpper.data[$c];
},
r_Category_matchBracket = $c => {
    let var$2, var$3;
    r_Category_$callClinit();
    var$2 = r_Category_openBrackets;
    if (!(!$c ? var$2.$hasZeroValue0 : rd_CharCharMap_locateKey(var$2, $c) < 0 ? 0 : 1)) {
        var$2 = r_Category_closingBrackets;
        if ($c) {
            var$3 = rd_CharCharMap_locateKey(var$2, $c);
            if (var$3 >= 0)
                $c = var$2.$valueTable3.data[var$3];
        } else if (var$2.$hasZeroValue0)
            $c = var$2.$zeroValue1;
        return $c;
    }
    var$2 = r_Category_openBrackets;
    if (!$c)
        $c = !var$2.$hasZeroValue0 ? var$2.$defaultReturnValue : var$2.$zeroValue1;
    else {
        $c = rd_CharCharMap_locateKey(var$2, $c);
        $c = $c < 0 ? var$2.$defaultReturnValue : var$2.$valueTable3.data[$c];
    }
    return $c;
},
r_Category__clinit_ = () => {
    let var$1, var$2;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 1, 2, 3, 4, 5, 8, 6, 7, 11, 9, 10, 12, 14, 13, 23, 15, 16, 27, 25, 32, 20, 24, 31, 34, 44, 19, 21, 33, 37, 50, 56, 60, 87, 90, 17, 28, 29, 30, 36, 39, 43, 49, 52, 57, 61, 63, 71, 95, 104, 127, 18, 22, 26, 40, 42, 45, 46, 48, 51, 54, 55, 58, 59, 66, 68, 73, 76, 78, 79, 81, 96, 102, 107, 117, 126, 136, 141, 162, 167, 185, 191, 193, 199, 207, 215, 349, 350, 367, 378, 398, 446, 535, 667, 670, 715, 1813, 8451, 11173, 29294]), $rt_s(1188));
    r_Category_C = var$1;
    r_Category_Other = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([1792, 6399, 57344]), $rt_s(1189));
    r_Category_Co = var$1;
    r_Category_PrivateUse = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 1, 2, 3, 4, 5, 8, 6, 7, 11, 9, 10, 13, 14, 23, 12, 27, 16, 25, 15, 20, 24, 32, 34, 44, 19, 21, 31, 33, 37, 56, 61, 87, 90, 17, 28, 29, 30, 36, 39, 43, 50, 52, 57, 60, 63, 71, 95, 102, 104, 127, 18, 22, 26, 40, 42, 45, 46, 48, 49, 51, 54, 55, 58, 59, 66, 68, 73, 78, 79, 81, 107, 117, 126, 136, 141, 167, 185, 191, 199, 207, 215, 238, 271, 349, 350, 378, 398, 446, 535, 667, 670, 888, 1813, 8815, 11173, 29294]), $rt_s(1190));
    r_Category_Cn = var$1;
    r_Category_Unassigned = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 31, 32, 96]), $rt_s(1191));
    r_Category_Cc = var$1;
    r_Category_Control = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 4, 2, 50, 1, 5, 9, 23, 27, 81, 173, 193, 250, 385, 1363, 2045, 3884, 56976]), $rt_s(1192));
    r_Category_Cf = var$1;
    r_Category_Format = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([2047, 55296]), $rt_s(1193));
    r_Category_Cs = var$1;
    r_Category_Surrogate = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([2, 0, 3, 4, 1, 6, 5, 7, 8, 17, 11, 15, 22, 10, 12, 9, 25, 21, 42, 13, 16, 18, 30, 14, 37, 19, 23, 24, 29, 32, 35, 40, 46, 53, 27, 31, 43, 49, 55, 59, 65, 88, 26, 28, 33, 36, 41, 48, 50, 51, 52, 63, 66, 68, 69, 85, 102, 117, 20, 34, 38, 39, 45, 47, 56, 64, 72, 74, 81, 82, 83, 89, 93, 94, 98, 105, 107, 114, 116, 130, 134, 138, 165, 191, 228, 268, 277, 332, 362, 365, 457, 470, 513, 619, 2684, 6591, 8453, 11171, 22156]), $rt_s(1194));
    r_Category_L = var$1;
    r_Category_Letter = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 2, 3, 1, 4, 7, 9, 5, 6, 8, 10, 11, 13, 25, 12, 37, 49, 16, 20, 22, 34, 36, 42, 47, 50, 62, 65, 73, 85, 102, 136, 197, 263, 290, 321, 723, 2196, 2685, 2890, 22316, 31054]), $rt_s(1195));
    r_Category_Lu = var$1;
    r_Category_UppercaseLetter = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 2, 3, 1, 4, 5, 7, 9, 6, 8, 11, 13, 42, 25, 28, 47, 10, 12, 19, 20, 23, 26, 27, 33, 34, 37, 40, 43, 49, 52, 54, 59, 64, 68, 79, 97, 103, 118, 136, 165, 194, 275, 761, 822, 1066, 2179, 2732, 2888, 20289, 30996]), $rt_s(1196));
    r_Category_Ll = var$1;
    r_Category_LowercaseLetter = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 7, 3, 9, 13, 16, 39, 48, 453, 7574]), $rt_s(1197));
    r_Category_Lt = var$1;
    r_Category_TitlecaseLetter = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 1, 4, 5, 2, 6, 8, 10, 14, 17, 470, 3, 11, 12, 15, 22, 23, 24, 29, 32, 35, 36, 44, 46, 62, 81, 94, 96, 98, 104, 106, 108, 109, 115, 122, 128, 134, 138, 161, 165, 168, 175, 192, 231, 242, 270, 271, 465, 479, 566, 612, 688, 690, 1237, 1251, 1755, 3040, 21511, 28439]), $rt_s(1198));
    r_Category_Lm = var$1;
    r_Category_ModifierLetter = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([2, 0, 3, 4, 1, 5, 6, 8, 9, 11, 15, 7, 17, 22, 12, 21, 25, 10, 16, 18, 14, 30, 23, 24, 29, 31, 32, 40, 46, 13, 19, 27, 34, 35, 42, 43, 49, 53, 55, 68, 114, 26, 28, 33, 41, 50, 51, 52, 60, 63, 69, 170, 20, 36, 38, 39, 44, 47, 48, 54, 56, 59, 64, 65, 66, 67, 74, 85, 88, 89, 93, 98, 104, 105, 106, 107, 116, 117, 134, 146, 177, 209, 257, 267, 328, 362, 365, 513, 552, 619, 828, 1083, 1142, 3064, 6591, 8453, 11171, 21012]), $rt_s(1199));
    r_Category_Lo = var$1;
    r_Category_OtherLetter = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([2, 0, 3, 4, 5, 6, 7, 1, 25, 37, 42, 8, 9, 10, 12, 13, 19, 22, 30, 65, 102, 165, 11, 26, 27, 33, 40, 43, 45, 52, 53, 59, 61, 64, 77, 79, 82, 85, 123, 135, 138, 193, 194, 207, 262, 277, 673, 822, 1034, 2179, 2684, 2840, 20289, 30995]), $rt_s(1200));
    r_Category_Lc = var$1;
    r_Category_CasedLetter = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([2, 0, 1, 3, 6, 4, 5, 10, 8, 11, 13, 31, 7, 12, 57, 17, 30, 19, 9, 49, 14, 15, 16, 20, 23, 24, 26, 27, 28, 32, 35, 39, 44, 46, 48, 50, 51, 56, 60, 21, 25, 29, 33, 36, 37, 41, 42, 43, 45, 55, 58, 59, 62, 63, 65, 68, 71, 73, 74, 81, 84, 92, 97, 99, 101, 102, 106, 111, 118, 119, 142, 153, 199, 220, 237, 264, 273, 276, 464, 555, 704, 721, 738, 768, 947, 3071, 20273, 30165]), $rt_s(1201));
    r_Category_M = var$1;
    r_Category_Mark = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 2, 1, 3, 5, 4, 6, 7, 10, 8, 9, 31, 12, 13, 59, 17, 21, 26, 30, 49, 15, 56, 58, 11, 14, 23, 27, 33, 35, 43, 44, 73, 16, 20, 25, 28, 29, 36, 39, 40, 41, 46, 47, 48, 50, 51, 52, 57, 60, 62, 63, 65, 68, 74, 81, 91, 92, 97, 99, 102, 103, 108, 111, 118, 119, 142, 152, 153, 199, 220, 239, 266, 273, 276, 464, 555, 704, 721, 738, 768, 947, 3071, 20273, 30165]), $rt_s(1202));
    r_Category_Mn = var$1;
    r_Category_NonspacingMark = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([2, 0, 1, 3, 1160, 1567, 5685, 34188]), $rt_s(1203));
    r_Category_Me = var$1;
    r_Category_EnclosingMark = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([1, 0, 2, 3, 5, 7, 59, 11, 4, 6, 9, 49, 62, 10, 15, 22, 31, 51, 172, 8, 19, 25, 26, 29, 42, 43, 44, 46, 48, 54, 56, 61, 64, 67, 76, 89, 103, 110, 111, 130, 143, 146, 225, 238, 331, 347, 1657, 2307, 4919, 21523, 30708]), $rt_s(1204));
    r_Category_Mc = var$1;
    r_Category_SpacingMark = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([9, 5, 7, 0, 2, 3, 119, 6, 199, 4, 8, 14, 19, 23, 71, 87, 135, 1, 10, 12, 15, 18, 21, 26, 29, 31, 33, 39, 40, 48, 50, 59, 79, 97, 104, 105, 109, 110, 111, 116, 121, 129, 139, 155, 166, 183, 189, 230, 240, 269, 301, 321, 344, 407, 413, 631, 720, 727, 778, 882, 1047, 1386, 1442, 21271, 29537]), $rt_s(1205));
    r_Category_N = var$1;
    r_Category_Number = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([9, 119, 7, 39, 71, 87, 135, 199, 23, 48, 97, 129, 167, 183, 230, 279, 301, 407, 413, 679, 1575, 1863, 21271, 35271]), $rt_s(1206));
    r_Category_Nd = var$1;
    r_Category_DecimalNumber = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([2, 3, 0, 8, 9, 15, 26, 34, 2672, 3711, 5870, 22800, 30380]), $rt_s(1207));
    r_Category_Nl = var$1;
    r_Category_LetterNumber = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 9, 5, 2, 6, 3, 7, 14, 1, 4, 8, 15, 18, 19, 21, 29, 31, 33, 40, 42, 59, 79, 121, 134, 139, 178, 199, 218, 377, 434, 481, 631, 727, 1078, 1140, 1173, 1386, 1686, 2358, 22474, 30065]), $rt_s(1208));
    r_Category_No = var$1;
    r_Category_OtherNumber = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 1, 6, 10, 30, 32, 48, 128, 2432, 4001, 5600]), $rt_s(1209));
    r_Category_Z = var$1;
    r_Category_Separator = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 10, 32, 37, 48, 128, 2432, 4001, 5600]), $rt_s(1210));
    r_Category_Zs = var$1;
    r_Category_SpaceSeparator = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 8232]), $rt_s(1193));
    r_Category_Zl = var$1;
    r_Category_LineSeparator = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 8233]), $rt_s(1193));
    r_Category_Zp = var$1;
    r_Category_ParagraphSeparator = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 2, 1, 3, 11, 5, 4, 9, 13, 6, 12, 14, 17, 21, 23, 27, 28, 31, 32, 33, 38, 45, 72, 75, 91, 125, 7, 8, 10, 15, 19, 29, 30, 34, 36, 41, 42, 44, 46, 48, 50, 52, 55, 60, 63, 64, 65, 79, 80, 87, 98, 99, 100, 103, 112, 113, 116, 121, 122, 127, 129, 141, 144, 150, 152, 154, 158, 161, 169, 172, 209, 217, 234, 250, 262, 270, 314, 368, 381, 391, 404, 420, 467, 613, 622, 634, 703, 764, 829, 1086, 20819, 29699]), $rt_s(1211));
    r_Category_P = var$1;
    r_Category_Punctuation = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 1, 5, 3, 11, 20, 29, 32, 38, 45, 52, 112, 170, 242, 447, 1030, 1373, 2058, 3586, 3650, 52625]), $rt_s(1212));
    r_Category_Pd = var$1;
    r_Category_DashPunctuation = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 2, 4, 3, 32, 51, 16, 18, 19, 26, 30, 31, 33, 34, 39, 40, 56, 65, 81, 171, 216, 405, 429, 635, 1062, 1087, 1887, 2431, 3775, 52514]), $rt_s(1213));
    r_Category_Ps = var$1;
    r_Category_OpenPunctuation = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 3, 1, 2, 4, 5, 16, 26, 171, 3529, 8045]), $rt_s(1214));
    r_Category_Pi = var$1;
    r_Category_InitialPunctuation = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 2, 3, 4, 32, 52, 1, 16, 18, 30, 31, 33, 34, 41, 45, 56, 65, 81, 171, 218, 405, 429, 635, 1062, 1087, 1887, 2474, 3774, 52511]), $rt_s(1215));
    r_Category_Pe = var$1;
    r_Category_ClosePunctuation = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 4, 2, 3, 5, 16, 29, 187, 3529, 8030]), $rt_s(1216));
    r_Category_Pf = var$1;
    r_Category_FinalPunctuation = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 1, 2, 20, 25, 95, 240, 8160, 56799]), $rt_s(1217));
    r_Category_Pc = var$1;
    r_Category_ConnectorPunctuation = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 2, 1, 3, 4, 5, 11, 8, 9, 6, 7, 12, 14, 125, 13, 17, 21, 28, 55, 75, 113, 10, 15, 23, 29, 32, 33, 37, 38, 41, 42, 44, 45, 48, 50, 58, 60, 63, 65, 69, 72, 87, 91, 98, 100, 103, 112, 116, 121, 122, 127, 129, 141, 144, 150, 154, 158, 161, 169, 172, 190, 217, 234, 250, 262, 270, 314, 368, 381, 391, 429, 467, 613, 703, 774, 835, 3227, 21029, 29699]), $rt_s(1218));
    r_Category_Po = var$1;
    r_Category_OtherPunctuation = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 2, 1, 3, 5, 6, 14, 7, 11, 16, 9, 10, 13, 15, 31, 32, 4, 12, 17, 23, 28, 8, 20, 22, 30, 33, 36, 45, 104, 137, 158, 198, 21, 25, 27, 29, 37, 38, 40, 42, 47, 48, 54, 59, 62, 63, 64, 70, 77, 82, 88, 92, 99, 113, 118, 119, 127, 128, 130, 131, 133, 134, 140, 155, 194, 207, 208, 213, 226, 230, 244, 246, 248, 254, 267, 319, 354, 357, 358, 362, 366, 373, 375, 382, 402, 459, 570, 574, 615, 724, 753, 1089, 6593, 20414, 22161]), $rt_s(1219));
    r_Category_S = var$1;
    r_Category_Symbol = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 2, 3, 5, 1, 4, 7, 32, 62, 14, 17, 31, 40, 257, 6, 8, 10, 11, 15, 19, 20, 23, 24, 30, 33, 38, 41, 43, 46, 49, 55, 69, 91, 112, 130, 132, 140, 165, 267, 337, 470, 528, 767, 825, 6716, 53213]), $rt_s(1220));
    r_Category_Sm = var$1;
    r_Category_MathSymbol = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 1, 499, 3, 4, 8, 25, 32, 36, 109, 124, 126, 155, 220, 246, 264, 582, 1258, 2245, 2460, 21956, 34680]), $rt_s(1221));
    r_Category_Sc = var$1;
    r_Category_CurrencySymbol = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 2, 1, 14, 6, 13, 15, 16, 3, 4, 5, 7, 10, 12, 22, 28, 72, 94, 104, 118, 163, 522, 892, 977, 1283, 4253, 5941, 20551, 30308]), $rt_s(1222));
    r_Category_Sk = var$1;
    r_Category_ModifierSymbol = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 2, 1, 3, 5, 7, 9, 10, 11, 6, 15, 16, 30, 4, 8, 12, 13, 14, 22, 23, 29, 31, 33, 38, 47, 128, 17, 19, 20, 21, 25, 26, 27, 37, 39, 42, 43, 45, 46, 53, 54, 59, 63, 65, 71, 77, 80, 82, 88, 104, 110, 131, 133, 134, 158, 166, 182, 198, 207, 208, 213, 230, 247, 248, 255, 267, 269, 319, 337, 354, 358, 374, 392, 485, 513, 516, 574, 723, 724, 753, 866, 978, 1412, 6593, 21191, 22161]), $rt_s(1223));
    r_Category_So = var$1;
    r_Category_OtherSymbol = var$1;
    r_Category_Word = r_Category__init_($rt_createIntArrayFromData([2, 3, 0, 4, 5, 6, 1, 9, 7, 8, 10, 11, 15, 12, 13, 14, 21, 18, 19, 22, 25, 17, 48, 23, 30, 42, 35, 37, 40, 16, 27, 31, 33, 38, 53, 26, 28, 39, 45, 50, 52, 55, 57, 58, 65, 66, 69, 73, 74, 85, 88, 116, 20, 24, 29, 32, 34, 41, 43, 44, 47, 49, 51, 54, 56, 59, 62, 63, 64, 68, 72, 76, 77, 79, 82, 83, 89, 93, 100, 101, 102, 105, 107, 114, 115, 122, 128, 134, 138, 165, 228, 268, 321, 332, 362, 365, 457, 470, 533, 619, 631, 727, 1133, 6591, 8453, 11171,
    22156]), $rt_s(1224));
    var$1 = r_Category__init_($rt_createIntArrayFromData([2, 3, 0, 4, 5, 1, 6, 9, 7, 8, 10, 12, 15, 13, 11, 25, 19, 21, 18, 22, 14, 17, 23, 42, 48, 16, 30, 37, 40, 26, 27, 28, 31, 32, 33, 35, 38, 53, 39, 50, 55, 57, 58, 66, 69, 73, 74, 85, 88, 20, 24, 29, 34, 41, 43, 44, 45, 47, 49, 51, 52, 54, 56, 59, 62, 63, 64, 65, 67, 68, 72, 76, 77, 79, 82, 83, 89, 93, 100, 101, 102, 105, 107, 114, 115, 116, 122, 128, 134, 138, 165, 228, 268, 321, 332, 362, 365, 457, 470, 533, 619, 631, 727, 1133, 6591, 8453, 11171, 22156]),
    $rt_s(1225));
    r_Category_J = var$1;
    r_Category_Identifier = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([2, 0, 3, 4, 1, 5, 6, 8, 7, 12, 17, 22, 25, 10, 15, 11, 9, 16, 18, 21, 42, 29, 40, 13, 30, 14, 23, 32, 19, 26, 37, 55, 24, 27, 31, 35, 36, 41, 46, 49, 59, 65, 66, 88, 20, 28, 33, 43, 51, 52, 53, 63, 68, 85, 34, 38, 39, 45, 47, 48, 50, 56, 64, 67, 69, 74, 79, 81, 82, 83, 89, 93, 94, 98, 102, 105, 107, 114, 116, 130, 134, 138, 165, 191, 228, 268, 277, 332, 362, 365, 457, 470, 513, 619, 2680, 6591, 8453, 11171, 22156]), $rt_s(1226));
    r_Category_Js = var$1;
    r_Category_IdentifierStart = var$1;
    r_Category_Jp = r_Category_J;
    r_Category_IdentifierPart = r_Category_Identifier;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 9, 10, 23, 37, 48, 128, 2432, 4001, 5600]), $rt_s(1227));
    r_Category_Gh = var$1;
    r_Category_Horizontal = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 1, 3, 10, 120, 8099]), $rt_s(1228));
    r_Category_Gv = var$1;
    r_Category_Vertical = var$1;
    var$1 = r_Category__init_($rt_createIntArrayFromData([0, 1, 4, 6, 9, 10, 19, 27, 30, 48, 101, 2432, 4001, 5600]), $rt_s(1229));
    r_Category_G = var$1;
    r_Category_Space = var$1;
    var$2 = $rt_createCharArrayFromData([40, 60, 91, 123, 3898, 3900, 5787, 8218, 8222, 8261, 8317, 8333, 8968, 8970, 9001, 10088, 10090, 10092, 10094, 10096, 10098, 10100, 10181, 10214, 10216, 10218, 10220, 10222, 10627, 10629, 10631, 10633, 10635, 10637, 10639, 10641, 10643, 10645, 10647, 10712, 10714, 10748, 11810, 11812, 11814, 11816, 11842, 11861, 11863, 11865, 11867, 12296, 12298, 12300, 12302, 12304, 12308, 12310, 12312, 12314, 12317, 64831, 65047, 65077, 65079, 65081, 65083, 65085, 65087, 65089, 65091,
    65095, 65113, 65115, 65117, 65288, 65339, 65371, 65375, 65378]);
    r_Category_openers = var$2;
    r_Category_closers = $rt_createCharArrayFromData([41, 62, 93, 125, 3899, 3901, 5788, 8219, 8223, 8262, 8318, 8334, 8969, 8971, 9002, 10089, 10091, 10093, 10095, 10097, 10099, 10101, 10182, 10215, 10217, 10219, 10221, 10223, 10628, 10630, 10632, 10634, 10636, 10638, 10640, 10642, 10644, 10646, 10648, 10713, 10715, 10749, 11811, 11813, 11815, 11817, 12319, 11862, 11864, 11866, 11868, 12297, 12299, 12301, 12303, 12305, 12309, 12311, 12313, 12315, 12318, 64830, 65048, 65078, 65080, 65082, 65084, 65086, 65088,
    65090, 65092, 65096, 65114, 65116, 65118, 65289, 65341, 65373, 65376, 65379]);
    r_Category_OPENING_BRACKETS = jl_String_valueOf2(var$2);
    r_Category_CLOSING_BRACKETS = jl_String_valueOf2(r_Category_closers);
    r_Category_openBrackets = rd_CharCharMap__init_(r_Category_openers, r_Category_closers);
    r_Category_closingBrackets = rd_CharCharMap__init_(r_Category_closers, r_Category_openers);
    var$1 = ju_LinkedHashMap__init_(32);
    r_Category_superCategories = var$1;
    ju_LinkedHashMap_put(var$1, $rt_s(937), r_Category_C);
    ju_LinkedHashMap_put(r_Category_superCategories, $rt_s(938), r_Category_L);
    ju_LinkedHashMap_put(r_Category_superCategories, $rt_s(939), r_Category_M);
    ju_LinkedHashMap_put(r_Category_superCategories, $rt_s(363), r_Category_N);
    ju_LinkedHashMap_put(r_Category_superCategories, $rt_s(940), r_Category_Z);
    ju_LinkedHashMap_put(r_Category_superCategories, $rt_s(943), r_Category_P);
    ju_LinkedHashMap_put(r_Category_superCategories, $rt_s(227), r_Category_S);
    ju_LinkedHashMap_put(r_Category_superCategories, $rt_s(944), r_Category_J);
    ju_LinkedHashMap_put(r_Category_superCategories, $rt_s(947), r_Category_G);
    var$1 = ju_LinkedHashMap__init_(128);
    r_Category_categories = var$1;
    ju_LinkedHashMap_put(var$1, $rt_s(937), r_Category_C);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(938), r_Category_L);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(939), r_Category_M);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(363), r_Category_N);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(940), r_Category_Z);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(943), r_Category_P);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(227), r_Category_S);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(944), r_Category_J);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(947), r_Category_G);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(372), r_Category_Cc);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(373), r_Category_Cf);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(374), r_Category_Co);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(352), r_Category_Cn);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(375), r_Category_Cs);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(354), r_Category_Lu);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(355), r_Category_Ll);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(356), r_Category_Lt);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(357), r_Category_Lm);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(358), r_Category_Lo);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(1230), r_Category_Lc);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(360), r_Category_Mn);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(361), r_Category_Me);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(362), r_Category_Mc);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(364), r_Category_Nd);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(365), r_Category_Nl);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(366), r_Category_No);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(368), r_Category_Zs);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(369), r_Category_Zl);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(370), r_Category_Zp);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(377), r_Category_Pd);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(378), r_Category_Ps);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(387), r_Category_Pi);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(379), r_Category_Pe);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(388), r_Category_Pf);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(380), r_Category_Pc);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(381), r_Category_Po);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(383), r_Category_Sm);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(384), r_Category_Sc);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(385), r_Category_Sk);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(386), r_Category_So);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(941), r_Category_Gh);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(942), r_Category_Gv);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(948), r_Category_Gh);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(949), r_Category_Gv);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(945), r_Category_Js);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(946), r_Category_Jp);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(950), r_Category_Other);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(951), r_Category_PrivateUse);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(952), r_Category_Unassigned);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(953), r_Category_Control);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(954), r_Category_Format);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(955), r_Category_Surrogate);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(956), r_Category_Letter);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(957), r_Category_UppercaseLetter);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(958), r_Category_LowercaseLetter);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(959), r_Category_TitlecaseLetter);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(960), r_Category_ModifierLetter);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(961), r_Category_OtherLetter);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(962), r_Category_CasedLetter);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(963), r_Category_Mark);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(964), r_Category_NonspacingMark);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(965), r_Category_EnclosingMark);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(966), r_Category_SpacingMark);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(967), r_Category_Number);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(968), r_Category_DecimalNumber);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(969), r_Category_LetterNumber);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(970), r_Category_OtherNumber);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(971), r_Category_Separator);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(972), r_Category_SpaceSeparator);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(973), r_Category_LineSeparator);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(974), r_Category_ParagraphSeparator);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(975), r_Category_Punctuation);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(976), r_Category_DashPunctuation);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(977), r_Category_OpenPunctuation);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(978), r_Category_InitialPunctuation);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(979), r_Category_ClosePunctuation);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(980), r_Category_FinalPunctuation);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(981), r_Category_ConnectorPunctuation);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(982), r_Category_OtherPunctuation);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(983), r_Category_Symbol);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(984), r_Category_MathSymbol);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(985), r_Category_CurrencySymbol);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(986), r_Category_ModifierSymbol);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(987), r_Category_OtherSymbol);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(988), r_Category_Identifier);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(223), r_Category_Space);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(989), r_Category_Horizontal);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(990), r_Category_Vertical);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(991), r_Category_IdentifierStart);
    ju_LinkedHashMap_put(r_Category_categories, $rt_s(992), r_Category_IdentifierPart);
},
r_BackReference = $rt_classWithoutFields(r_Term),
r_BackReference__init_0 = ($this, $no, $icase, $reverse, $bracket, $upper) => {
    r_Term__init_2($this, !$icase ? 6 : 7);
    $this.$mode_reverse = $reverse;
    $this.$mode_bracket = $bracket;
    $this.$mode_insensitive = $icase;
    $this.$mode_upper = !$icase && $upper ? 1 : 0;
    $this.$memreg = $no;
},
r_BackReference__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new r_BackReference();
    r_BackReference__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
};
function r_BlockSet() {
    let a = this; jl_Object.call(a);
    a.$positive = 0;
    a.$isLarge = 0;
    a.$block0 = null;
    a.$blocks = null;
    a.$weight = 0;
}
let r_BlockSet_emptyBlock0 = null,
r_BlockSet__init_0 = $this => {
    $this.$positive = 1;
    $this.$isLarge = 0;
    $this.$block0 = rd_IntBitSet__init_();
},
r_BlockSet__init_ = () => {
    let var_0 = new r_BlockSet();
    r_BlockSet__init_0(var_0);
    return var_0;
},
r_BlockSet_reset = $this => {
    $this.$positive = 1;
    $this.$block0 = null;
    $this.$blocks = null;
    $this.$isLarge = 0;
    $this.$weight = 0;
},
r_BlockSet_unify = ($bs, $term) => {
    let var$3, var$4, var$5, var$6, var$7, var$8;
    if ($bs.$isLarge) {
        $term.$type0 = 2;
        var$3 = $bs.$blocks.data;
        var$4 = var$3.length;
        var$5 = $rt_createArray(rd_IntBitSet, var$4);
        var$6 = var$5.data;
        var$7 = 0;
        while (var$7 < var$4) {
            var$8 = var$3[var$7];
            if (var$8 !== null) {
                if (!var$8.$isFull)
                    var$6[var$7] = var$8.$bits0;
                else
                    var$6[var$7] = r_Block_FULL_BITS;
            }
            var$7 = var$7 + 1 | 0;
        }
        $term.$bitset2 = var$5;
    } else {
        $term.$type0 = 1;
        var$8 = $bs.$block0;
        if (var$8 === null)
            var$8 = r_BlockSet_emptyBlock0;
        $term.$bitset = var$8;
    }
    var$4 = $bs.$positive;
    $term.$inverse = var$4 ? 0 : 1;
    $term.$weight0 = var$4 ? $bs.$weight : 65536 - $bs.$weight | 0;
},
r_BlockSet_setPositive = ($this, $b) => {
    $this.$positive = $b;
},
r_BlockSet_enableLargeMode = $this => {
    let $blocks, var$2;
    if ($this.$isLarge)
        return;
    $blocks = $rt_createArray(r_Block, 256);
    $this.$blocks = $blocks;
    var$2 = $this.$block0;
    if (var$2 !== null)
        $blocks.data[0] = r_Block__init_0(var$2);
    $this.$isLarge = 1;
},
r_BlockSet_setWordChar = ($this, $unicode) => {
    let var$2, var$3;
    if (!$unicode) {
        r_BlockSet_setRange($this, 97, 122);
        r_BlockSet_setRange($this, 65, 90);
        r_BlockSet_setRange($this, 48, 57);
        r_BlockSet_setRange($this, 95, 95);
    } else {
        if (!$this.$isLarge)
            r_BlockSet_enableLargeMode($this);
        var$2 = $this.$weight;
        var$3 = $this.$blocks;
        r_Category_$callClinit();
        $this.$weight = var$2 + r_Block_add(var$3, r_Category_Word.$blocks0, 0, 255, 0) | 0;
    }
},
r_BlockSet_setDigit = ($this, $unicode) => {
    if ($unicode)
        r_BlockSet_setCategory($this, $rt_s(364));
    else
        r_BlockSet_setRange($this, 48, 57);
},
r_BlockSet_setSpace = ($this, $unicode) => {
    if ($unicode)
        r_BlockSet_setCategory($this, $rt_s(947));
    else {
        r_BlockSet_setRange($this, 32, 32);
        r_BlockSet_setRange($this, 13, 13);
        r_BlockSet_setRange($this, 10, 10);
        r_BlockSet_setRange($this, 9, 9);
        r_BlockSet_setRange($this, 12, 12);
    }
},
r_BlockSet_setHorizontalSpace = ($this, $unicode) => {
    if ($unicode)
        r_BlockSet_setCategory($this, $rt_s(948));
    else {
        r_BlockSet_setRange($this, 32, 32);
        r_BlockSet_setRange($this, 9, 9);
    }
},
r_BlockSet_setVerticalSpace = ($this, $unicode) => {
    if ($unicode)
        r_BlockSet_setCategory($this, $rt_s(949));
    else {
        r_BlockSet_setRange($this, 10, 10);
        r_BlockSet_setRange($this, 13, 13);
        r_BlockSet_setRange($this, 12, 12);
        r_BlockSet_setRange($this, 11, 11);
    }
},
r_BlockSet_setCategory = ($this, $c) => {
    let var$2, var$3, var$4, $catBits;
    if (!$this.$isLarge)
        r_BlockSet_enableLargeMode($this);
    r_Category_$callClinit();
    var$2 = r_Category_categories;
    var$3 = null;
    if ($c === null)
        $c = ju_HashMap_findNullKeyEntry(var$2);
    else {
        var$4 = jl_String_hashCode($c);
        $c = ju_HashMap_findNonNullKeyEntry(var$2, $c, (var$4 & 2147483647) % var$2.$elementData.data.length | 0, var$4);
    }
    if ($c !== null) {
        if (var$2.$accessOrder)
            ju_LinkedHashMap_linkEntry(var$2, $c, 0);
        var$3 = $c.$value;
    }
    $catBits = var$3.$blocks0;
    $this.$weight = $this.$weight + r_Block_add($this.$blocks, $catBits, 0, 255, 0) | 0;
},
r_BlockSet_setChars = ($this, $chars) => {
    let $i, var$3;
    $i = $chars.$nativeString.length - 1 | 0;
    while ($i >= 0) {
        var$3 = jl_String_charAt($chars, $i);
        r_BlockSet_setRange($this, var$3, var$3);
        $i = $i + (-1) | 0;
    }
},
r_BlockSet_setChar = ($this, $c) => {
    r_BlockSet_setRange($this, $c, $c);
},
r_BlockSet_setRange = ($this, $c, $c2) => {
    let $block0, $i, $i2, $s, $blocks, var$8, $block;
    if ($c2 < 256 && !$this.$isLarge) {
        $block0 = $this.$block0;
        if ($block0 === null) {
            $block0 = rd_IntBitSet__init_();
            $this.$block0 = $block0;
        }
        $i = $this.$weight;
        $i2 = rd_IntBitSet_cardinality($block0);
        rd_IntBitSet_set($block0, $c, $c2);
        $this.$weight = $i + (rd_IntBitSet_cardinality($block0) - $i2 | 0) | 0;
    } else {
        $s = 0;
        if (!$this.$isLarge)
            r_BlockSet_enableLargeMode($this);
        $blocks = $this.$blocks;
        while ($c <= $c2) {
            var$8 = $blocks.data;
            $i2 = $c >> 8 & 255;
            $i = $c & 255;
            $block = var$8[$i2];
            if ($block === null) {
                $block = r_Block__init_();
                var$8[$i2] = $block;
            }
            if ($block.$isFull)
                $i = 0;
            else {
                $block0 = $block.$bits0;
                if ($block0 === null) {
                    $block0 = rd_IntBitSet__init_();
                    $block.$bits0 = $block0;
                    $block.$shared = 0;
                    rd_IntBitSet_set0($block0, $i);
                    $i = 1;
                } else if (rd_IntBitSet_get($block0, $i))
                    $i = 0;
                else {
                    if ($block.$shared)
                        $block0 = r_Block_copyBits($block);
                    rd_IntBitSet_set0($block0, $i);
                    $i = 1;
                }
            }
            if ($i)
                $s = $s + 1 | 0;
            $c = $c + 1 | 0;
        }
        $this.$weight = $this.$weight + $s | 0;
    }
},
r_BlockSet_add = ($this, $bs) => {
    r_BlockSet_add1($this, $bs, 0);
},
r_BlockSet_add1 = ($this, $bs, $inverse) => {
    let var$3, var$4, var$5, var$6;
    var$3 = $this.$weight;
    $inverse = ($bs.$positive ? 0 : 1) ^ $inverse;
    var$4 = 0;
    var$5 = $this.$isLarge;
    if (!(!var$5 && !$bs.$isLarge && !$inverse)) {
        if (!var$5)
            r_BlockSet_enableLargeMode($this);
        if (!$bs.$isLarge)
            r_BlockSet_enableLargeMode($bs);
        var$4 = var$4 + r_Block_add($this.$blocks, $bs.$blocks, 0, 255, $inverse) | 0;
    } else if ($bs.$block0 !== null) {
        var$6 = $this.$block0;
        if (var$6 === null) {
            var$6 = rd_IntBitSet__init_();
            $this.$block0 = var$6;
        }
        var$4 = var$4 + r_BlockSet_add0(var$6, $bs.$block0, 0, 255, 0) | 0;
    }
    $this.$weight = var$3 + var$4 | 0;
},
r_BlockSet_subtract1 = ($this, $bs) => {
    r_BlockSet_subtract0($this, $bs, 0);
},
r_BlockSet_subtract0 = ($this, $bs, $inverse) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12;
    var$3 = $this.$weight;
    var$4 = ($bs.$positive ? 0 : 1) ^ $inverse;
    var$5 = 0;
    $inverse = $this.$isLarge;
    if (!$inverse && !$bs.$isLarge && !var$4) {
        $bs = $bs.$block0;
        if ($bs !== null) {
            var$6 = $this.$block0;
            var$5 = var$6 === null ? 0 : var$5 + r_BlockSet_subtract(var$6, $bs, 0) | 0;
        }
    } else {
        if (!$inverse)
            r_BlockSet_enableLargeMode($this);
        if (!$bs.$isLarge)
            r_BlockSet_enableLargeMode($bs);
        var$7 = $this.$blocks;
        var$8 = $bs.$blocks;
        var$9 = 0;
        var$10 = 0;
        while (var$9 <= 255) {
            var$11 = var$7.data[var$9];
            if (var$11 !== null) {
                $inverse = var$11.$isFull;
                if (!(!$inverse && var$11.$bits0 === null)) {
                    $bs = var$8.data[var$9];
                    if ($bs !== null) {
                        if ($bs.$isFull) {
                            if (var$4)
                                var$12 = 0;
                            else {
                                var$12 = $inverse ? 256 : rd_IntBitSet_cardinality(var$11.$bits0);
                                var$11.$isFull = 0;
                                var$11.$bits0 = null;
                                var$11.$shared = 0;
                            }
                        } else {
                            $bs = $bs.$bits0;
                            if ($bs === null) {
                                if (!var$4)
                                    var$12 = 0;
                                else {
                                    var$12 = $inverse ? 256 : rd_IntBitSet_cardinality(var$11.$bits0);
                                    var$11.$isFull = 0;
                                    var$11.$bits0 = null;
                                    var$11.$shared = 0;
                                }
                            } else if (!$inverse)
                                var$12 = r_BlockSet_subtract(!var$11.$shared ? var$11.$bits0 : r_Block_copyBits(var$11), $bs, var$4);
                            else {
                                var$6 = var$11.$bits0;
                                if (var$6 === null)
                                    var$6 = rd_IntBitSet__init_();
                                rd_IntBitSet_set(var$6, 0, 256);
                                var$12 = r_BlockSet_subtract(var$6, $bs, var$4);
                                var$11.$isFull = 0;
                                var$11.$shared = 0;
                                var$11.$bits0 = var$6;
                            }
                        }
                        var$10 = var$10 + var$12 | 0;
                    } else if (var$4) {
                        var$10 = $inverse ? var$10 + (-256) | 0 : var$10 - r_Block_count(var$11.$bits0, 0, 255) | 0;
                        var$11.$isFull = 0;
                        var$11.$bits0 = null;
                        var$11.$shared = 0;
                    }
                }
            }
            var$9 = var$9 + 1 | 0;
        }
        var$5 = var$5 + var$10 | 0;
    }
    $this.$weight = var$3 + var$5 | 0;
},
r_BlockSet_add0 = ($bs1, $bs2, $from, $to, $inv) => {
    let $s;
    $s = rd_IntBitSet_cardinality($bs1);
    if (!$inv)
        rd_IntBitSet_or($bs1, $bs2);
    else
        rd_IntBitSet_or($bs1, rd_IntBitSet_negate(rd_IntBitSet_copy($bs2)));
    return rd_IntBitSet_cardinality($bs1) - $s | 0;
},
r_BlockSet_subtract = ($bs1, $bs2, $inv) => {
    let $s;
    $s =  -rd_IntBitSet_cardinality($bs1) | 0;
    if (!$inv)
        rd_IntBitSet_andNot($bs1, $bs2);
    else
        rd_IntBitSet_andNot($bs1, rd_IntBitSet_negate(rd_IntBitSet_copy($bs2)));
    return $s + rd_IntBitSet_cardinality($bs1) | 0;
},
r_BlockSet__clinit_ = () => {
    r_BlockSet_emptyBlock0 = rd_IntBitSet__init_();
},
r_Branch = $rt_classWithoutFields(r_Term),
r_Branch__init_0 = $this => {
    r_Term__init_1($this);
    $this.$type0 = 32;
},
r_Branch__init_ = () => {
    let var_0 = new r_Branch();
    r_Branch__init_0(var_0);
    return var_0;
};
function rd_IntBitSet() {
    jl_Object.call(this);
    this.$data1 = null;
}
let rd_IntBitSet__init_0 = $this => {
    $this.$data1 = $rt_createIntArray(8);
},
rd_IntBitSet__init_ = () => {
    let var_0 = new rd_IntBitSet();
    rd_IntBitSet__init_0(var_0);
    return var_0;
},
rd_IntBitSet_set0 = ($this, $bitIndex) => {
    let var$2, var$3;
    var$2 = $this.$data1.data;
    var$3 = $bitIndex >> 5;
    var$2[var$3] = var$2[var$3] | 1 << ($bitIndex & 31);
},
rd_IntBitSet_set = ($this, $i, $toIndex) => {
    let var$3, var$4;
    while ($i <= $toIndex) {
        var$3 = $this.$data1.data;
        var$4 = $i >> 5;
        var$3[var$4] = var$3[var$4] | 1 << ($i & 31);
        $i = $i + 1 | 0;
    }
},
rd_IntBitSet_get = ($this, $bitIndex) => {
    return !(($this.$data1.data[$bitIndex >> 5] >>> ($bitIndex & 31) | 0) & 1) ? 0 : 1;
},
rd_IntBitSet_cardinality = $this => {
    let $card, $i, var$3, var$4;
    $card = 0;
    $i = 0;
    while ($i < 8) {
        var$3 = $this.$data1.data[$i];
        var$4 = ((var$3 & (-1431655766)) >>> 1 | 0) + (var$3 & 1431655765) | 0;
        var$4 = ((var$4 & (-858993460)) >>> 2 | 0) + (var$4 & 858993459) | 0;
        var$4 = ((var$4 & 1886417008) >>> 4 | 0) + (var$4 & 117901063) | 0;
        var$4 = ((var$4 & 251662080) >>> 8 | 0) + (var$4 & 983055) | 0;
        $card = $card + (((var$4 & 2031616) >>> 16 | 0) + (var$4 & 31) | 0) | 0;
        $i = $i + 1 | 0;
    }
    return $card;
},
rd_IntBitSet_or = ($this, $set) => {
    let $i, var$3;
    $i = 0;
    while ($i < 8) {
        var$3 = $this.$data1.data;
        var$3[$i] = var$3[$i] | $set.$data1.data[$i];
        $i = $i + 1 | 0;
    }
    return $this;
},
rd_IntBitSet_andNot = ($this, $set) => {
    let $i, var$3;
    $i = 0;
    while ($i < 8) {
        var$3 = $this.$data1.data;
        var$3[$i] = var$3[$i] & ($set.$data1.data[$i] ^ (-1));
        $i = $i + 1 | 0;
    }
    return $this;
},
rd_IntBitSet_negate = $this => {
    let $i, var$2;
    $i = 0;
    while ($i < 8) {
        var$2 = $this.$data1.data;
        var$2[$i] = var$2[$i] ^ (-1);
        $i = $i + 1 | 0;
    }
    return $this;
},
rd_IntBitSet_equals = ($this, $o) => {
    let $intBitSet, var$3, var$4, var$5, var$6, var$7;
    if ($this === $o)
        return 1;
    if ($o !== null && jl_Object_getClass($this) === jl_Object_getClass($o)) {
        a: {
            $intBitSet = $o;
            var$3 = $this.$data1;
            var$4 = $intBitSet.$data1;
            if (var$3 === var$4)
                var$5 = 1;
            else {
                if (var$3 !== null && var$4 !== null) {
                    var$3 = var$3.data;
                    var$4 = var$4.data;
                    var$5 = var$3.length;
                    if (var$5 == var$4.length) {
                        var$6 = 0;
                        b: {
                            while (true) {
                                if (var$6 >= var$5) {
                                    var$6 = (-1);
                                    break b;
                                }
                                var$7 = var$6 + 0 | 0;
                                if (var$3[var$7] != var$4[var$7])
                                    break;
                                var$6 = var$6 + 1 | 0;
                            }
                        }
                        var$5 = var$6 >= 0 ? 0 : 1;
                        break a;
                    }
                }
                var$5 = 0;
            }
        }
        return var$5;
    }
    return 0;
},
rd_IntBitSet_hashCode = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = $this.$data1;
    if (var$1 === null)
        var$2 = 0;
    else {
        var$2 = 1;
        var$3 = 0;
        while (true) {
            var$4 = var$1.data;
            if (var$3 >= var$4.length)
                break;
            var$2 = (31 * var$2 | 0) + var$4[var$3] | 0;
            var$3 = var$3 + 1 | 0;
        }
    }
    return var$2;
},
rd_IntBitSet_copy = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new rd_IntBitSet;
    var$2 = $this.$data1;
    var$3 = var$2.data;
    var$4 = $rt_createIntArray(8);
    var$1.$data1 = var$4;
    jl_System_fastArraycopy(var$2, 0, var$4, 0, jl_Math_min(8, var$3.length));
    return var$1;
};
function r_Block() {
    let a = this; jl_Object.call(a);
    a.$isFull = 0;
    a.$bits0 = null;
    a.$shared = 0;
}
let r_Block_EMPTY_BITS = null,
r_Block_FULL_BITS = null,
r_Block__init_1 = $this => {
    $this.$shared = 0;
},
r_Block__init_ = () => {
    let var_0 = new r_Block();
    r_Block__init_1(var_0);
    return var_0;
},
r_Block__init_2 = ($this, $bits) => {
    $this.$shared = 0;
    $this.$bits0 = $bits;
    $this.$shared = 1;
},
r_Block__init_0 = var_0 => {
    let var_1 = new r_Block();
    r_Block__init_2(var_1, var_0);
    return var_1;
},
r_Block_add = ($targets, $addends, $i, $to, $inv) => {
    let $s, $addend, var$8, $target, var$10, var$11;
    $s = 0;
    while ($i <= $to) {
        a: {
            b: {
                $addend = $addends.data[$i];
                if ($addend === null) {
                    if ($inv)
                        break b;
                    break a;
                }
                if ($addend.$isFull && $inv)
                    break a;
            }
            var$8 = $targets.data;
            $target = var$8[$i];
            if ($target === null) {
                $target = r_Block__init_();
                var$8[$i] = $target;
            } else if ($target.$isFull)
                break a;
            if ($addend === null) {
                if (!$inv)
                    var$10 = 0;
                else {
                    var$10 = 256;
                    $addend = $target.$bits0;
                    if ($addend !== null)
                        var$10 = var$10 - r_Block_count($addend, 0, 255) | 0;
                    $target.$isFull = 1;
                    $target.$bits0 = null;
                    $target.$shared = 0;
                }
            } else if ($addend.$isFull) {
                if ($inv)
                    var$10 = 0;
                else {
                    var$10 = 256;
                    $addend = $target.$bits0;
                    if ($addend !== null)
                        var$10 = var$10 - r_Block_count($addend, 0, 255) | 0;
                    $target.$isFull = 1;
                    $target.$bits0 = null;
                    $target.$shared = 0;
                }
            } else {
                var$11 = $addend.$bits0;
                if (var$11 === null) {
                    if (!$inv)
                        var$10 = 0;
                    else {
                        var$10 = 256;
                        $addend = $target.$bits0;
                        if ($addend !== null)
                            var$10 = var$10 - r_Block_count($addend, 0, 255) | 0;
                        $target.$isFull = 1;
                        $target.$bits0 = null;
                        $target.$shared = 0;
                    }
                } else {
                    $addend = $target.$bits0;
                    if ($addend !== null) {
                        if ($target.$shared)
                            $addend = r_Block_copyBits($target);
                        var$10 = r_BlockSet_add0($addend, var$11, 0, 255, $inv);
                    } else if (!$inv) {
                        $target.$bits0 = var$11;
                        $target.$shared = 1;
                        var$10 = r_Block_count(var$11, 0, 255);
                    } else {
                        $addend = rd_IntBitSet__init_();
                        $target.$bits0 = $addend;
                        $target.$shared = 0;
                        var$10 = r_BlockSet_add0($addend, var$11, 0, 255, $inv);
                    }
                }
            }
            $s = $s + var$10 | 0;
        }
        $i = $i + 1 | 0;
    }
    return $s;
},
r_Block_copyBits = $block => {
    let $bits;
    $bits = rd_IntBitSet_copy($block.$bits0);
    $block.$bits0 = $bits;
    $block.$shared = 0;
    return $bits;
},
r_Block_count = ($arr, $i, $to) => {
    let $s;
    $s = 0;
    while ($i <= $to) {
        if (rd_IntBitSet_get($arr, $i))
            $s = $s + 1 | 0;
        $i = $i + 1 | 0;
    }
    return $s;
},
r_Block__clinit_ = () => {
    let var$1;
    r_Block_EMPTY_BITS = rd_IntBitSet__init_();
    var$1 = rd_IntBitSet__init_();
    r_Block_FULL_BITS = var$1;
    rd_IntBitSet_set(var$1, 0, 255);
},
r_Casing = $rt_classWithoutFields(),
r_Casing_allToUpper = null,
r_Casing_allToLower = null,
r_Casing_$callClinit = () => {
    r_Casing_$callClinit = $rt_eraseClinit(r_Casing);
    r_Casing__clinit_();
},
r_Casing__clinit_ = () => {
    let var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(1231));
    jl_AbstractStringBuilder_append(var$1, $rt_s(1232));
    jl_AbstractStringBuilder_append(var$1, $rt_s(1233));
    jl_AbstractStringBuilder_append(var$1, $rt_s(1234));
    jl_AbstractStringBuilder_append(var$1, $rt_s(1235));
    jl_AbstractStringBuilder_append(var$1, $rt_s(1236));
    r_Casing_allToUpper = jl_String_toCharArray(jl_AbstractStringBuilder_toString(var$1));
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(1237));
    jl_AbstractStringBuilder_append(var$1, $rt_s(1238));
    jl_AbstractStringBuilder_append(var$1, $rt_s(1233));
    jl_AbstractStringBuilder_append(var$1, $rt_s(1234));
    jl_AbstractStringBuilder_append(var$1, $rt_s(1239));
    jl_AbstractStringBuilder_append(var$1, $rt_s(1240));
    r_Casing_allToLower = jl_String_toCharArray(jl_AbstractStringBuilder_toString(var$1));
};
function rd_CharCharMap() {
    let a = this; jl_Object.call(a);
    a.$size12 = 0;
    a.$keyTable3 = null;
    a.$valueTable3 = null;
    a.$hasZeroValue0 = 0;
    a.$zeroValue1 = 0;
    a.$loadFactor1 = 0.0;
    a.$threshold6 = 0;
    a.$shift0 = 0;
    a.$mask5 = 0;
    a.$defaultReturnValue = 0;
}
let rd_CharCharMap_tableSize = ($capacity, $loadFactor) => {
    let var$3, var$4, $tableSize;
    if ($capacity < 0) {
        var$3 = new jl_IllegalArgumentException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(126));
        jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$4, $capacity)));
        $rt_throw(var$3);
    }
    $tableSize = 1 << ( -jl_Integer_numberOfLeadingZeros(jl_Math_max(2, jl_Math_ceil($capacity / $loadFactor) | 0) - 1 | 0) | 0);
    if ($tableSize <= 1073741824 && $tableSize >= 0)
        return $tableSize;
    var$3 = new jl_IllegalArgumentException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(127));
    jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$4, $capacity)));
    $rt_throw(var$3);
},
rd_CharCharMap__init_0 = ($this, $keys, $values) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    $keys = $keys.data;
    var$3 = $values.data;
    var$4 = $keys.length;
    var$5 = var$3.length;
    var$6 = jl_Math_min(var$4, var$5);
    $this.$defaultReturnValue = 0;
    $this.$loadFactor1 = 0.800000011920929;
    var$7 = rd_CharCharMap_tableSize(var$6, 0.800000011920929);
    $this.$threshold6 = var$7 * 0.800000011920929 | 0;
    var$6 = var$7 - 1 | 0;
    $this.$mask5 = var$6;
    $this.$shift0 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$6));
    $this.$keyTable3 = $rt_createCharArray(var$7);
    $this.$valueTable3 = $rt_createCharArray(var$7);
    var$7 = 0;
    var$6 = 0;
    var$8 = jl_Math_min(jl_Math_min(var$4, var$5), jl_Math_min(var$4 - var$7 | 0, var$5 - var$6 | 0));
    var$4 = rd_CharCharMap_tableSize($this.$size12 + var$8 | 0, $this.$loadFactor1);
    if ($this.$keyTable3.data.length < var$4)
        rd_CharCharMap_resize($this, var$4);
    var$5 = 0;
    while (var$5 < var$8) {
        var$4 = $keys[var$7];
        var$9 = var$3[var$6];
        if (!var$4) {
            if (!$this.$hasZeroValue0)
                $this.$size12 = $this.$size12 + 1 | 0;
            $this.$hasZeroValue0 = 1;
            $this.$zeroValue1 = var$9;
        } else {
            var$10 = rd_CharCharMap_locateKey($this, var$4);
            if (var$10 >= 0)
                $this.$valueTable3.data[var$10] = var$9;
            else {
                var$10 = var$10 ^ (-1);
                $values = $this.$keyTable3.data;
                $values[var$10] = var$4;
                $this.$valueTable3.data[var$10] = var$9;
                var$4 = $this.$size12 + 1 | 0;
                $this.$size12 = var$4;
                if (var$4 >= $this.$threshold6)
                    rd_CharCharMap_resize($this, $values.length << 1);
            }
        }
        var$5 = var$5 + 1 | 0;
        var$7 = var$7 + 1 | 0;
        var$6 = var$6 + 1 | 0;
    }
},
rd_CharCharMap__init_ = (var_0, var_1) => {
    let var_2 = new rd_CharCharMap();
    rd_CharCharMap__init_0(var_2, var_0, var_1);
    return var_2;
},
rd_CharCharMap_place = ($this, $item) => {
    return $rt_imul($item, (-1640531527)) >>> $this.$shift0 | 0;
},
rd_CharCharMap_locateKey = ($this, $key) => {
    let $keyTable, $i, $other;
    $keyTable = $this.$keyTable3;
    $i = rd_CharCharMap_place($this, $key);
    while (true) {
        $other = $keyTable.data[$i];
        if (!$other)
            return $i ^ (-1);
        if ($other == $key)
            break;
        $i = ($i + 1 | 0) & $this.$mask5;
    }
    return $i;
},
rd_CharCharMap_resize = ($this, $newSize) => {
    let $oldCapacity, var$3, $oldKeyTable, $oldValueTable, $i, $key, var$8, var$9, var$10;
    a: {
        $oldCapacity = $this.$keyTable3.data.length;
        $this.$threshold6 = $newSize * $this.$loadFactor1 | 0;
        var$3 = $newSize - 1 | 0;
        $this.$mask5 = var$3;
        $this.$shift0 = jl_Long_numberOfLeadingZeros(Long_fromInt(var$3));
        $oldKeyTable = $this.$keyTable3;
        $oldValueTable = $this.$valueTable3;
        $this.$keyTable3 = $rt_createCharArray($newSize);
        $this.$valueTable3 = $rt_createCharArray($newSize);
        if ($this.$size12 > 0) {
            $i = 0;
            while (true) {
                if ($i >= $oldCapacity)
                    break a;
                $key = $oldKeyTable.data[$i];
                if ($key) {
                    var$8 = $oldValueTable.data[$i];
                    var$9 = $this.$keyTable3;
                    $newSize = rd_CharCharMap_place($this, $key);
                    while (true) {
                        var$10 = var$9.data;
                        if (!var$10[$newSize])
                            break;
                        $newSize = ($newSize + 1 | 0) & $this.$mask5;
                    }
                    var$10[$newSize] = $key;
                    $this.$valueTable3.data[$newSize] = var$8;
                }
                $i = $i + 1 | 0;
            }
        }
    }
},
ju_SequencedMap = $rt_classWithoutFields(0);
function ju_LinkedHashMap() {
    let a = this; ju_HashMap.call(a);
    a.$accessOrder = 0;
    a.$head = null;
    a.$tail = null;
}
let ju_LinkedHashMap__init_0 = ($this, $s) => {
    ju_HashMap__init_0($this, $s);
    $this.$accessOrder = 0;
    $this.$head = null;
},
ju_LinkedHashMap__init_ = var_0 => {
    let var_1 = new ju_LinkedHashMap();
    ju_LinkedHashMap__init_0(var_1, var_0);
    return var_1;
},
ju_LinkedHashMap_newElementArray = ($this, $s) => {
    return $rt_createArray(ju_LinkedHashMap$LinkedHashMapEntry, $s);
},
ju_LinkedHashMap_put = ($this, $key, $value) => {
    let var$3, $oldSize, var$5, var$6, var$7, var$8, var$9, var$10, $existing, var$12;
    var$3 = $this;
    $oldSize = var$3.$elementCount;
    var$5 = $this.$accessOrder;
    if (!$this.$elementCount) {
        $this.$head = null;
        $this.$tail = null;
    }
    var$6 = ju_Objects_hashCode($key);
    var$7 = var$6 & 2147483647;
    var$8 = var$7 % $this.$elementData.data.length | 0;
    var$9 = $key === null ? ju_HashMap_findNullKeyEntry($this) : ju_HashMap_findNonNullKeyEntry($this, $key, var$8, var$6);
    if (var$9 === null) {
        $this.$modCount0 = $this.$modCount0 + 1 | 0;
        var$10 = $this.$elementCount + 1 | 0;
        $this.$elementCount = var$10;
        if (var$10 > $this.$threshold1) {
            ju_HashMap_rehash(var$3);
            var$8 = var$7 % $this.$elementData.data.length | 0;
        }
        $existing = new ju_LinkedHashMap$LinkedHashMapEntry;
        ju_HashMap$HashEntry__init_($existing, $key, var$6);
        $existing.$chainForward = null;
        $existing.$chainBackward = null;
        var$12 = $this.$elementData.data;
        $existing.$next4 = var$12[var$8];
        var$12[var$8] = $existing;
        $key = $this.$tail;
        if ($key === null)
            $this.$head = $existing;
        else
            $key.$chainForward = $existing;
        $existing.$chainBackward = $key;
        $this.$tail = $existing;
        var$9 = $existing;
    } else if (var$5)
        ju_LinkedHashMap_linkEntry($this, var$9, 0);
    $existing = var$9.$value;
    var$9.$value = $value;
    return $existing;
},
ju_LinkedHashMap_linkEntry = ($this, $entry, $first) => {
    let $n, $p;
    if (!$first) {
        $n = $entry.$chainForward;
        if ($n === null)
            return;
        $p = $entry.$chainBackward;
        if ($p === null)
            $this.$head = $n;
        else
            $p.$chainForward = $n;
        $n.$chainBackward = $p;
        $n = $this.$tail;
        if ($n !== null)
            $n.$chainForward = $entry;
        $entry.$chainBackward = $n;
        $entry.$chainForward = null;
        $this.$tail = $entry;
    } else {
        $p = $entry.$chainBackward;
        if ($p === null)
            return;
        $n = $entry.$chainForward;
        if ($n === null)
            $this.$tail = $p;
        else
            $n.$chainBackward = $p;
        $p.$chainForward = $n;
        $n = $this.$head;
        if ($n !== null)
            $n.$chainBackward = $entry;
        $entry.$chainForward = $n;
        $entry.$chainBackward = null;
        $this.$head = $entry;
    }
};
function jn_IntBufferOverDataView() {
    let a = this; jn_IntBufferImpl.call(a);
    a.$readOnly3 = 0;
    a.$data10 = null;
    a.$littleEndian1 = 0;
}
let jn_IntBufferOverDataView_readOnly = $this => {
    return $this.$readOnly3;
},
jn_IntBufferOverDataView_getElement = ($this, $index) => {
    return $this.$data10.getInt32($index * 4 | 0, !!$this.$littleEndian1);
},
jn_IntBufferOverDataView_putElement = ($this, $index, $value) => {
    let var$3, var$4;
    var$3 = $this.$data10;
    $index = $index * 4 | 0;
    var$4 = $this.$littleEndian1;
    var$3.setInt32($index, $value, !!var$4);
},
jn_IntBufferOverDataView_capacityImpl = $this => {
    return $this.$data10.byteLength / 4 | 0;
};
function jn_FloatBufferOverDataView() {
    let a = this; jn_FloatBufferImpl.call(a);
    a.$readOnly5 = 0;
    a.$data6 = null;
    a.$littleEndian = 0;
}
let jn_FloatBufferOverDataView_readOnly = $this => {
    return $this.$readOnly5;
},
jn_FloatBufferOverDataView_getElement = ($this, $index) => {
    return $this.$data6.getFloat32($index * 4 | 0, !!$this.$littleEndian);
},
jn_FloatBufferOverDataView_putElement = ($this, $index, $value) => {
    let var$3, var$4;
    var$3 = $this.$data6;
    $index = $index * 4 | 0;
    var$4 = $this.$littleEndian;
    var$3.setFloat32($index, $value, !!var$4);
},
jn_FloatBufferOverDataView_putImpl = ($this, $index, $src, $offset, $length) => {
    let var$5, var$6, var$7, var$8, var$9;
    $index = $index * 4 | 0;
    while (true) {
        var$5 = $length + (-1) | 0;
        if ($length <= 0)
            break;
        var$6 = $src.data;
        var$7 = $this.$data6;
        var$8 = $offset + 1 | 0;
        var$9 = var$6[$offset];
        $offset = $this.$littleEndian;
        var$7.setFloat32($index, var$9, !!$offset);
        $index = $index + 4 | 0;
        $length = var$5;
        $offset = var$8;
    }
},
jn_FloatBufferOverDataView_capacityImpl = $this => {
    return $this.$data6.byteLength / 4 | 0;
},
jn_FloatBufferOverDataView_getArrayBufferView = $this => {
    return $this.$data6;
};
function jn_ShortBufferOverDataView() {
    let a = this; jn_ShortBufferImpl.call(a);
    a.$readOnly4 = 0;
    a.$data7 = null;
    a.$littleEndian3 = 0;
}
let jn_ShortBufferOverDataView_readOnly = $this => {
    return $this.$readOnly4;
},
jn_ShortBufferOverDataView_putImpl = ($this, $index, $src, $offset, $length) => {
    let var$5, var$6, var$7, var$8;
    $index = $index * 2 | 0;
    while (true) {
        var$5 = $length + (-1) | 0;
        if ($length <= 0)
            break;
        var$6 = $src.data;
        var$7 = $this.$data7;
        var$8 = $offset + 1 | 0;
        $offset = var$6[$offset];
        $length = $this.$littleEndian3;
        var$7.setInt16($index, $offset, !!$length);
        $index = $index + 2 | 0;
        $length = var$5;
        $offset = var$8;
    }
},
jn_ShortBufferOverDataView_capacityImpl = $this => {
    return $this.$data7.byteLength / 2 | 0;
},
jn_ShortBufferOverDataView_getArrayBufferView = $this => {
    return $this.$data7;
},
jl_UnsupportedOperationException = $rt_classWithoutFields(jl_RuntimeException),
jn_ReadOnlyBufferException = $rt_classWithoutFields(jl_UnsupportedOperationException),
jn_BufferUnderflowException = $rt_classWithoutFields(jl_RuntimeException),
r_Find = $rt_classWithoutFields(r_Term);
function ju_LinkedHashMap$LinkedHashMapEntry() {
    let a = this; ju_HashMap$HashEntry.call(a);
    a.$chainForward = null;
    a.$chainBackward = null;
}
function cgxgbta_AssetDownloadImpl$1() {
    let a = this; jl_Object.call(a);
    a.$val$listener = null;
    a.$this$06 = null;
}
let cgxgbta_AssetDownloadImpl$1_onFailure = ($this, $url) => {
    let var$2, var$3;
    if ($this.$this$06.$showLogs) {
        var$2 = jl_System_err();
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(1241)), $url);
        $url = jl_AbstractStringBuilder_toString(var$3);
        otcic_JsConsolePrintStream_println(var$2, $url);
    }
},
cgxgbta_AssetDownloadImpl$1_onSuccess = ($this, var$1, var$2) => {
    let var$3, var$4;
    var$2 = var$2;
    if ($this.$this$06.$showLogs) {
        var$3 = jl_System_out();
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append(jl_StringBuilder_append(var$4, $rt_s(1242)), var$1);
        var$4 = jl_AbstractStringBuilder_toString(var$4);
        otcic_JsConsolePrintStream_println(var$3, var$4);
    }
    $this.$val$listener.$onSuccess(var$1, var$2);
},
cgxgbta_AssetDownloadImpl$3 = $rt_classWithoutFields(),
cgxgbta_AssetDownloadImpl$3_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$assetloader$AssetType = null,
cgxgbta_AssetDownloadImpl$3_$callClinit = () => {
    cgxgbta_AssetDownloadImpl$3_$callClinit = $rt_eraseClinit(cgxgbta_AssetDownloadImpl$3);
    cgxgbta_AssetDownloadImpl$3__clinit_();
},
cgxgbta_AssetDownloadImpl$3__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((cgxgbta_AssetType_values()).data.length);
    var$2 = var$1.data;
    cgxgbta_AssetDownloadImpl$3_$SwitchMap$com$github$xpenatan$gdx$backends$teavm$assetloader$AssetType = var$1;
    var$2[cgxgbta_AssetType_Binary.$ordinal0] = 1;
    var$2[cgxgbta_AssetType_Directory.$ordinal0] = 2;
};
function cgxgbt_TeaFileHandle() {
    let a = this; cbgf_FileHandle.call(a);
    a.$file = null;
    a.$type1 = null;
    a.$teaFiles = null;
}
let cgxgbt_TeaFileHandle__init_0 = ($this, $teaFiles, $fileName, $type) => {
    if ($type !== cbg_Files$FileType_Internal && $type !== cbg_Files$FileType_Classpath && $type !== cbg_Files$FileType_Local) {
        $teaFiles = new cbgu_GdxRuntimeException;
        $fileName = jl_String_valueOf($type);
        $type = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($type);
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append($type, $rt_s(1243)), $fileName), $rt_s(1244));
        jl_Throwable__init_($teaFiles, jl_AbstractStringBuilder_toString($type));
        $rt_throw($teaFiles);
    }
    $fileName = jl_String_replace($fileName, $rt_s(440), $rt_s(94));
    if (jl_String_endsWith($fileName, $rt_s(94)))
        $fileName = jl_String_substring($fileName, 0, $fileName.$nativeString.length - 1 | 0);
    $this.$file = $fileName;
    $this.$type1 = $type;
    $this.$teaFiles = $teaFiles;
},
cgxgbt_TeaFileHandle__init_ = (var_0, var_1, var_2) => {
    let var_3 = new cgxgbt_TeaFileHandle();
    cgxgbt_TeaFileHandle__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
cgxgbt_TeaFileHandle_type = $this => {
    return $this.$type1;
},
cgxgbt_TeaFileHandle_read = $this => {
    let $exists, $input, var$3, var$4, var$5;
    $exists = cgxgbtf_MemoryFileStorage_exists(cgxgbt_TeaFiles_getFileDB($this.$teaFiles, $this.$type1), $this);
    $input = $this.$type1;
    var$3 = cbg_Files$FileType_Classpath;
    if ($input !== var$3 && !($input === cbg_Files$FileType_Internal && !$exists) && !($input === cbg_Files$FileType_Local && !$exists))
        return cgxgbtf_MemoryFileStorage_read(cgxgbt_TeaFiles_getFileDB($this.$teaFiles, $input), $this);
    $input = cgxgbtf_MemoryFileStorage_read(cgxgbt_TeaFiles_getFileDB($this.$teaFiles, var$3), $this);
    if ($input !== null)
        return $input;
    $input = new cbgu_GdxRuntimeException;
    var$3 = $this.$file;
    var$4 = jl_String_valueOf($this.$type1);
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$5, $rt_s(1245)), var$3), $rt_s(1246)), var$4), 41);
    jl_Throwable__init_($input, jl_AbstractStringBuilder_toString(var$5));
    $rt_throw($input);
},
cgxgbt_TeaFileHandle_readString = ($this, $charset) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, $$je;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_0(var$2, cbgf_FileHandle_estimateLength($this));
    var$3 = null;
    a: {
        b: {
            try {
                var$4 = var$3;
                var$5 = var$3;
                if ($charset !== null) {
                    var$4 = var$3;
                    var$5 = var$3;
                    var$3 = new ji_InputStreamReader;
                    var$5 = var$3;
                    var$4 = var$3;
                    ji_InputStreamReader__init_1(var$3, cgxgbt_TeaFileHandle_read($this), $charset);
                } else {
                    var$4 = var$3;
                    var$5 = var$3;
                    var$3 = new ji_InputStreamReader;
                    var$5 = var$3;
                    var$4 = var$3;
                    ji_InputStreamReader__init_0(var$3, cgxgbt_TeaFileHandle_read($this));
                }
                var$5 = var$3;
                var$4 = var$3;
                var$6 = $rt_createCharArray(256);
                while (true) {
                    var$4 = var$3;
                    var$5 = var$3;
                    var$7 = ji_Reader_read(var$3, var$6);
                    if (var$7 == (-1))
                        break;
                    var$4 = var$3;
                    var$5 = var$3;
                    jl_StringBuilder_append5(var$2, var$6, 0, var$7);
                }
                var$4 = var$3;
                var$5 = var$3;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    $charset = $$je;
                    break b;
                } else{
                    $charset = $$je;
                    break a;
                }
            }
            cbgu_StreamUtils_closeQuietly(var$3);
            return jl_AbstractStringBuilder_toString(var$2);
        }
        try {
            var$5 = var$4;
            $rt_throw(cbgu_GdxRuntimeException__init_(jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder__init_(), $rt_s(1247)), $this)), $charset));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            $charset = $$je;

        }
    }
    cbgu_StreamUtils_closeQuietly(var$5);
    $rt_throw($charset);
},
cgxgbt_TeaFileHandle_child = ($this, $name) => {
    let var$2, var$3, var$4, var$5, var$6;
    var$2 = new cgxgbt_TeaFileHandle;
    var$3 = $this.$teaFiles;
    if (jl_String_isEmpty($this.$file))
        var$4 = $rt_s(24);
    else {
        var$4 = $this.$file;
        var$5 = !jl_String_endsWith(var$4, $rt_s(94)) ? $rt_s(94) : $rt_s(24);
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_StringBuilder_append(jl_StringBuilder_append(var$6, var$4), var$5);
        var$4 = jl_AbstractStringBuilder_toString(var$6);
    }
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_StringBuilder_append(jl_StringBuilder_append(var$6, var$4), $name);
    cgxgbt_TeaFileHandle__init_0(var$2, var$3, jl_AbstractStringBuilder_toString(var$6), $this.$type1);
    return var$2;
},
cgxgbt_TeaFileHandle_parent = $this => {
    let $index, $dir;
    $index = jl_String_lastIndexOf1($this.$file, $rt_s(94));
    $dir = $rt_s(24);
    if ($index > 0)
        $dir = jl_String_substring($this.$file, 0, $index);
    return cgxgbt_TeaFileHandle__init_($this.$teaFiles, $dir, $this.$type1);
},
cgxgbt_TeaFileHandle_exists = $this => {
    let $exists;
    a: {
        $exists = cgxgbtf_MemoryFileStorage_exists(cgxgbt_TeaFiles_getFileDB($this.$teaFiles, $this.$type1), $this);
        cgxgbt_TeaFileHandle$1_$callClinit();
        switch (cgxgbt_TeaFileHandle$1_$SwitchMap$com$badlogic$gdx$Files$FileType.data[$this.$type1.$ordinal0]) {
            case 1:
                if (!$exists)
                    break a;
                return 1;
            case 2:
                break a;
            default:
        }
        return $exists;
    }
    return cgxgbtf_MemoryFileStorage_exists(cgxgbt_TeaFiles_getFileDB($this.$teaFiles, cbg_Files$FileType_Classpath), $this);
},
cgxgbt_TeaFileHandle_toString = $this => {
    return $this.$file;
},
cbg_Files$FileType = $rt_classWithoutFields(jl_Enum),
cbg_Files$FileType_Classpath = null,
cbg_Files$FileType_Internal = null,
cbg_Files$FileType_External = null,
cbg_Files$FileType_Absolute = null,
cbg_Files$FileType_Local = null,
cbg_Files$FileType_$VALUES = null,
cbg_Files$FileType_values = () => {
    return cbg_Files$FileType_$VALUES.$clone0();
},
cbg_Files$FileType__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbg_Files$FileType;
    jl_Enum__init_(var$1, $rt_s(1248), 0);
    cbg_Files$FileType_Classpath = var$1;
    var$1 = new cbg_Files$FileType;
    jl_Enum__init_(var$1, $rt_s(1249), 1);
    cbg_Files$FileType_Internal = var$1;
    var$1 = new cbg_Files$FileType;
    jl_Enum__init_(var$1, $rt_s(1250), 2);
    cbg_Files$FileType_External = var$1;
    var$1 = new cbg_Files$FileType;
    jl_Enum__init_(var$1, $rt_s(1251), 3);
    cbg_Files$FileType_Absolute = var$1;
    var$1 = new cbg_Files$FileType;
    jl_Enum__init_(var$1, $rt_s(1252), 4);
    cbg_Files$FileType_Local = var$1;
    var$2 = $rt_createArray(cbg_Files$FileType, 5);
    var$3 = var$2.data;
    var$3[0] = cbg_Files$FileType_Classpath;
    var$3[1] = cbg_Files$FileType_Internal;
    var$3[2] = cbg_Files$FileType_External;
    var$3[3] = cbg_Files$FileType_Absolute;
    var$3[4] = var$1;
    cbg_Files$FileType_$VALUES = var$2;
};
function cbggg_ParticleEmitter() {
    let a = this; jl_Object.call(a);
    a.$delayValue = null;
    a.$lifeOffsetValue = null;
    a.$durationValue = null;
    a.$lifeValue = null;
    a.$emissionValue = null;
    a.$xScaleValue = null;
    a.$yScaleValue = null;
    a.$rotationValue = null;
    a.$velocityValue = null;
    a.$angleValue = null;
    a.$windValue = null;
    a.$gravityValue = null;
    a.$transparencyValue = null;
    a.$tintValue = null;
    a.$xOffsetValue = null;
    a.$yOffsetValue = null;
    a.$spawnWidthValue = null;
    a.$spawnHeightValue = null;
    a.$spawnShapeValue = null;
    a.$accumulator = 0.0;
    a.$sprites = null;
    a.$spriteMode = null;
    a.$particles = null;
    a.$minParticleCount = 0;
    a.$maxParticleCount = 0;
    a.$x7 = 0.0;
    a.$y7 = 0.0;
    a.$name3 = null;
    a.$imagePaths = null;
    a.$activeCount = 0;
    a.$active0 = null;
    a.$firstUpdate = 0;
    a.$flipX = 0;
    a.$flipY = 0;
    a.$updateFlags = 0;
    a.$allowCompletion = 0;
    a.$emission = 0;
    a.$emissionDiff = 0;
    a.$emissionDelta = 0;
    a.$lifeOffset = 0;
    a.$lifeOffsetDiff = 0;
    a.$life0 = 0;
    a.$lifeDiff = 0;
    a.$spawnWidth = 0.0;
    a.$spawnWidthDiff = 0.0;
    a.$spawnHeight = 0.0;
    a.$spawnHeightDiff = 0.0;
    a.$duration0 = 0.0;
    a.$durationTimer = 0.0;
    a.$delay = 0.0;
    a.$delayTimer = 0.0;
    a.$attached = 0;
    a.$continuous = 0;
    a.$aligned = 0;
    a.$behind = 0;
    a.$additive = 0;
    a.$premultipliedAlpha = 0;
    a.$cleansUpBlendFunction = 0;
}
let cbggg_ParticleEmitter_setMaxParticleCount = ($this, $maxParticleCount) => {
    $this.$maxParticleCount = $maxParticleCount;
    $this.$active0 = $rt_createBooleanArray($maxParticleCount);
    $this.$activeCount = 0;
    $this.$particles = $rt_createArray(cbggg_ParticleEmitter$Particle, $maxParticleCount);
},
cbggg_ParticleEmitter_addParticles = ($this, $count) => {
    let $active, $index, $n, $i, var$6;
    $count = jl_Math_min($count, $this.$maxParticleCount - $this.$activeCount | 0);
    if (!$count)
        return;
    $active = $this.$active0.data;
    $index = 0;
    $n = $active.length;
    $i = 0;
    a: while ($i < $count) {
        var$6 = $index;
        while (true) {
            if (var$6 >= $n)
                break a;
            if (!$active[var$6])
                break;
            var$6 = var$6 + 1 | 0;
        }
        cbggg_ParticleEmitter_activateParticle($this, var$6);
        $index = var$6 + 1 | 0;
        $active[var$6] = 1;
        $i = $i + 1 | 0;
    }
    $this.$activeCount = $this.$activeCount + $count | 0;
},
cbggg_ParticleEmitter_update = ($this, $delta) => {
    let $emissionTime, $deltaMillis, var$4, var$5, $done, $activeCount, $active, $i, $emitCount, $particles, $n;
    $emissionTime = $this.$accumulator + $delta * 1000.0;
    $this.$accumulator = $emissionTime;
    if ($emissionTime < 1.0)
        return;
    $deltaMillis = $emissionTime | 0;
    var$4 = $deltaMillis;
    $this.$accumulator = $emissionTime - var$4;
    var$5 = $this.$delayTimer;
    if (var$5 < $this.$delay)
        $this.$delayTimer = var$5 + var$4;
    else {
        $done = 0;
        if ($this.$firstUpdate) {
            $this.$firstUpdate = 0;
            $activeCount = $this.$activeCount;
            if ($activeCount != $this.$maxParticleCount) {
                $active = $this.$active0.data;
                $i = 0;
                $emitCount = $active.length;
                a: {
                    while (true) {
                        if ($i >= $emitCount)
                            break a;
                        if (!$active[$i])
                            break;
                        $i = $i + 1 | 0;
                    }
                    cbggg_ParticleEmitter_activateParticle($this, $i);
                    $active[$i] = 1;
                    $this.$activeCount = $activeCount + 1 | 0;
                }
            }
        }
        $emissionTime = $this.$durationTimer;
        if ($emissionTime < $this.$duration0)
            $this.$durationTimer = $emissionTime + var$4;
        else if ($this.$continuous && !$this.$allowCompletion)
            cbggg_ParticleEmitter_restart($this);
        else
            $done = 1;
        if (!$done) {
            $this.$emissionDelta = $this.$emissionDelta + $deltaMillis | 0;
            $emissionTime = $this.$emission + $this.$emissionDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$emissionValue, $this.$durationTimer / $this.$duration0);
            if ($emissionTime > 0.0) {
                $emissionTime = 1000.0 / $emissionTime;
                var$5 = $this.$emissionDelta;
                if (var$5 >= $emissionTime) {
                    $done = jl_Math_min(var$5 / $emissionTime | 0, $this.$maxParticleCount - $this.$activeCount | 0);
                    $emitCount = $this.$emissionDelta - $done * $emissionTime | 0;
                    $this.$emissionDelta = $emitCount;
                    $this.$emissionDelta = $emitCount % $emissionTime | 0;
                    cbggg_ParticleEmitter_addParticles($this, $done);
                }
            }
            $done = $this.$activeCount;
            $emitCount = $this.$minParticleCount;
            if ($done < $emitCount)
                cbggg_ParticleEmitter_addParticles($this, $emitCount - $done | 0);
        }
    }
    $active = $this.$active0.data;
    $activeCount = $this.$activeCount;
    $particles = $this.$particles;
    $i = 0;
    $n = $active.length;
    while ($i < $n) {
        if ($active[$i] && !cbggg_ParticleEmitter_updateParticle($this, $particles.data[$i], $delta, $deltaMillis)) {
            $active[$i] = 0;
            $activeCount = $activeCount + (-1) | 0;
        }
        $i = $i + 1 | 0;
    }
    $this.$activeCount = $activeCount;
},
cbggg_ParticleEmitter_restart = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$delayValue;
    $this.$delay = !var$1.$active ? 0.0 : cbggg_ParticleEmitter$RangedNumericValue_newLowValue(var$1);
    $this.$delayTimer = 0.0;
    $this.$durationTimer = $this.$durationTimer - $this.$duration0;
    $this.$duration0 = cbggg_ParticleEmitter$RangedNumericValue_newLowValue($this.$durationValue);
    $this.$emission = cbggg_ParticleEmitter$RangedNumericValue_newLowValue($this.$emissionValue) | 0;
    var$2 = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$emissionValue) | 0;
    $this.$emissionDiff = var$2;
    if (!$this.$emissionValue.$relative)
        $this.$emissionDiff = var$2 - $this.$emission | 0;
    if (!$this.$lifeValue.$independent)
        cbggg_ParticleEmitter_generateLifeValues($this);
    if (!$this.$lifeOffsetValue.$independent)
        cbggg_ParticleEmitter_generateLifeOffsetValues($this);
    $this.$spawnWidth = cbggg_ParticleEmitter$RangedNumericValue_newLowValue($this.$spawnWidthValue);
    var$3 = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$spawnWidthValue);
    $this.$spawnWidthDiff = var$3;
    if (!$this.$spawnWidthValue.$relative)
        $this.$spawnWidthDiff = var$3 - $this.$spawnWidth;
    $this.$spawnHeight = cbggg_ParticleEmitter$RangedNumericValue_newLowValue($this.$spawnHeightValue);
    var$3 = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$spawnHeightValue);
    $this.$spawnHeightDiff = var$3;
    if (!$this.$spawnHeightValue.$relative)
        $this.$spawnHeightDiff = var$3 - $this.$spawnHeight;
    $this.$updateFlags = 0;
    var$1 = $this.$angleValue;
    if (var$1.$active && var$1.$timeline.data.length > 1)
        $this.$updateFlags = 2;
    if ($this.$velocityValue.$active)
        $this.$updateFlags = $this.$updateFlags | 8;
    if ($this.$xScaleValue.$timeline.data.length > 1)
        $this.$updateFlags = $this.$updateFlags | 1;
    var$1 = $this.$yScaleValue;
    if (var$1.$active && var$1.$timeline.data.length > 1)
        $this.$updateFlags = $this.$updateFlags | 1;
    var$1 = $this.$rotationValue;
    if (var$1.$active && var$1.$timeline.data.length > 1)
        $this.$updateFlags = $this.$updateFlags | 4;
    if ($this.$windValue.$active)
        $this.$updateFlags = $this.$updateFlags | 16;
    if ($this.$gravityValue.$active)
        $this.$updateFlags = $this.$updateFlags | 32;
    if ($this.$tintValue.$timeline0.data.length > 1)
        $this.$updateFlags = $this.$updateFlags | 64;
    if ($this.$spriteMode === cbggg_ParticleEmitter$SpriteMode_animated)
        $this.$updateFlags = $this.$updateFlags | 128;
},
cbggg_ParticleEmitter_newParticle = ($this, $sprite) => {
    let var$2;
    var$2 = new cbggg_ParticleEmitter$Particle;
    var$2.$vertices0 = $rt_createFloatArray(20);
    var$2.$color0 = cbgg_Color__init_0(1.0, 1.0, 1.0, 1.0);
    var$2.$packedColor = cbgg_Color_WHITE_FLOAT_BITS;
    var$2.$scaleX0 = 1.0;
    var$2.$scaleY0 = 1.0;
    var$2.$dirty = 1;
    cbggg_Sprite_set(var$2, $sprite);
    return var$2;
},
cbggg_ParticleEmitter_activateParticle = ($this, $index) => {
    let $sprite, $color, $particle, $updateFlags, $percent, var$7, $rotation, $x, $angle, $spriteWidth, $spriteHeight, var$13, $y, $width, $height, $radiusX, $radiusY, $scaleY, $radius2, $px, $py, $spawnAngle, $cosDeg, $sinDeg, $lineX, $offsetTime;
    a: {
        $sprite = null;
        cbggg_ParticleEmitter$1_$callClinit();
        switch (cbggg_ParticleEmitter$1_$SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpriteMode.data[jl_Enum_ordinal($this.$spriteMode)]) {
            case 1:
            case 2:
                $sprite = cbgu_Array_first($this.$sprites);
                break a;
            case 3:
                $sprite = cbgu_Array_random($this.$sprites);
                break a;
            default:
        }
    }
    $color = $this.$particles.data;
    $particle = $color[$index];
    if ($particle !== null)
        cbggg_Sprite_set($particle, $sprite);
    else {
        $particle = cbggg_ParticleEmitter_newParticle($this, $sprite);
        $color[$index] = $particle;
        $index = $this.$flipX;
        $updateFlags = $this.$flipY;
        cbggg_Sprite_flip($particle, $index, $updateFlags);
    }
    $percent = $this.$durationTimer / $this.$duration0;
    $updateFlags = $this.$updateFlags;
    if ($this.$lifeValue.$independent)
        cbggg_ParticleEmitter_generateLifeValues($this);
    if ($this.$lifeOffsetValue.$independent)
        cbggg_ParticleEmitter_generateLifeOffsetValues($this);
    $index = $this.$life0 + ($this.$lifeDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$lifeValue, $percent) | 0) | 0;
    $particle.$life1 = $index;
    $particle.$currentLife = $index;
    var$7 = $this.$velocityValue;
    if (var$7.$active) {
        $particle.$velocity = cbggg_ParticleEmitter$RangedNumericValue_newLowValue(var$7);
        $rotation = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$velocityValue);
        $particle.$velocityDiff = $rotation;
        if (!$this.$velocityValue.$relative)
            $particle.$velocityDiff = $rotation - $particle.$velocity;
    }
    $particle.$angle0 = cbggg_ParticleEmitter$RangedNumericValue_newLowValue($this.$angleValue);
    $x = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$angleValue);
    $particle.$angleDiff = $x;
    var$7 = $this.$angleValue;
    if (!var$7.$relative)
        $particle.$angleDiff = $x - $particle.$angle0;
    $angle = 0.0;
    $updateFlags = $updateFlags & 2;
    if (!$updateFlags) {
        $angle = $particle.$angle0 + $particle.$angleDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale(var$7, 0.0);
        $particle.$angle0 = $angle;
        $particle.$angleCos = cbgm_MathUtils_cosDeg($angle);
        $particle.$angleSin = cbgm_MathUtils_sinDeg($angle);
    }
    $spriteWidth = cbggg_Sprite_getWidth($sprite);
    $spriteHeight = cbggg_Sprite_getHeight($sprite);
    $particle.$xScale = cbggg_ParticleEmitter$RangedNumericValue_newLowValue($this.$xScaleValue) / $spriteWidth;
    $x = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$xScaleValue) / $spriteWidth;
    $particle.$xScaleDiff = $x;
    $sprite = $this.$xScaleValue;
    if (!$sprite.$relative)
        $particle.$xScaleDiff = $x - $particle.$xScale;
    var$7 = $this.$yScaleValue;
    if (!var$7.$active) {
        $rotation = $particle.$xScale + $particle.$xScaleDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($sprite, 0.0);
        cbggg_Sprite_setScale0($particle, $rotation);
    } else {
        $particle.$yScale = cbggg_ParticleEmitter$RangedNumericValue_newLowValue(var$7) / $spriteHeight;
        $rotation = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$yScaleValue) / $spriteHeight;
        $particle.$yScaleDiff = $rotation;
        if (!$this.$yScaleValue.$relative)
            $particle.$yScaleDiff = $rotation - $particle.$yScale;
        $rotation = $particle.$xScale + $particle.$xScaleDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$xScaleValue, 0.0);
        $x = $particle.$yScale + $particle.$yScaleDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$yScaleValue, 0.0);
        cbggg_Sprite_setScale($particle, $rotation, $x);
    }
    $sprite = $this.$rotationValue;
    if ($sprite.$active) {
        $particle.$rotation0 = cbggg_ParticleEmitter$RangedNumericValue_newLowValue($sprite);
        $x = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$rotationValue);
        $particle.$rotationDiff = $x;
        $sprite = $this.$rotationValue;
        if (!$sprite.$relative)
            $particle.$rotationDiff = $x - $particle.$rotation0;
        $rotation = $particle.$rotation0 + $particle.$rotationDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($sprite, 0.0);
        if ($this.$aligned)
            $rotation = $rotation + $angle;
        cbggg_Sprite_setRotation($particle, $rotation);
    }
    $sprite = $this.$windValue;
    if ($sprite.$active) {
        $particle.$wind = cbggg_ParticleEmitter$RangedNumericValue_newLowValue($sprite);
        $rotation = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$windValue);
        $particle.$windDiff = $rotation;
        if (!$this.$windValue.$relative)
            $particle.$windDiff = $rotation - $particle.$wind;
    }
    $sprite = $this.$gravityValue;
    if ($sprite.$active) {
        $particle.$gravity = cbggg_ParticleEmitter$RangedNumericValue_newLowValue($sprite);
        $rotation = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$gravityValue);
        $particle.$gravityDiff = $rotation;
        if (!$this.$gravityValue.$relative)
            $particle.$gravityDiff = $rotation - $particle.$gravity;
    }
    $color = $particle.$tint;
    if ($color === null) {
        $color = $rt_createFloatArray(3);
        $particle.$tint = $color;
    }
    var$13 = $color.data;
    $color = (cbggg_ParticleEmitter$GradientColorValue_getColor($this.$tintValue, 0.0)).data;
    var$13[0] = $color[0];
    var$13[1] = $color[1];
    var$13[2] = $color[2];
    $particle.$transparency = cbggg_ParticleEmitter$RangedNumericValue_newLowValue($this.$transparencyValue);
    $particle.$transparencyDiff = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$transparencyValue) - $particle.$transparency;
    $x = $this.$x7;
    $sprite = $this.$xOffsetValue;
    if ($sprite.$active)
        $x = $x + cbggg_ParticleEmitter$RangedNumericValue_newLowValue($sprite);
    $y = $this.$y7;
    $sprite = $this.$yOffsetValue;
    if ($sprite.$active)
        $y = $y + cbggg_ParticleEmitter$RangedNumericValue_newLowValue($sprite);
    b: {
        switch (cbggg_ParticleEmitter$1_$SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnShape.data[jl_Enum_ordinal($this.$spawnShapeValue.$shape)]) {
            case 1:
                $width = $this.$spawnWidth + $this.$spawnWidthDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$spawnWidthValue, $percent);
                $height = $this.$spawnHeight + $this.$spawnHeightDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$spawnHeightValue, $percent);
                $x = $x + cbgm_MathUtils_random0($width) - $width * 0.5;
                $y = $y + cbgm_MathUtils_random0($height) - $height * 0.5;
                break b;
            case 2:
                $width = $this.$spawnWidth + $this.$spawnWidthDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$spawnWidthValue, $percent);
                $height = $this.$spawnHeight + $this.$spawnHeightDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$spawnHeightValue, $percent);
                $radiusX = $width * 0.5;
                $radiusY = $height * 0.5;
                if ($radiusX === 0.0)
                    break b;
                if ($radiusY === 0.0)
                    break b;
                $scaleY = $radiusX / $radiusY;
                $sprite = $this.$spawnShapeValue;
                if (!$sprite.$edges) {
                    $radius2 = $radiusX * $radiusX;
                    while (true) {
                        $px = cbgm_MathUtils_random0($width) - $radiusX;
                        $py = cbgm_MathUtils_random0($width) - $radiusX;
                        if ($px * $px + $py * $py <= $radius2)
                            break;
                    }
                    $x = $x + $px;
                    $y = $y + $py / $scaleY;
                    break b;
                }
                c: {
                    switch (cbggg_ParticleEmitter$1_$SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnEllipseSide.data[jl_Enum_ordinal($sprite.$side)]) {
                        case 1:
                            $spawnAngle =  -cbgm_MathUtils_random0(179.0);
                            break c;
                        case 2:
                            $spawnAngle = cbgm_MathUtils_random0(179.0);
                            break c;
                        default:
                    }
                    $spawnAngle = cbgm_MathUtils_random0(360.0);
                }
                $cosDeg = cbgm_MathUtils_cosDeg($spawnAngle);
                $sinDeg = cbgm_MathUtils_sinDeg($spawnAngle);
                $x = $x + $cosDeg * $radiusX;
                $y = $y + $sinDeg * $radiusX / $scaleY;
                if (!$updateFlags) {
                    $particle.$angle0 = $spawnAngle;
                    $particle.$angleCos = $cosDeg;
                    $particle.$angleSin = $sinDeg;
                }
                break b;
            case 3:
                $width = $this.$spawnWidth + $this.$spawnWidthDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$spawnWidthValue, $percent);
                $height = $this.$spawnHeight + $this.$spawnHeightDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$spawnHeightValue, $percent);
                if ($width === 0.0) {
                    $y = $y + $height * cbgm_MathUtils_random2();
                    break b;
                }
                $lineX = $width * cbgm_MathUtils_random2();
                $x = $x + $lineX;
                $y = $y + $lineX * $height / $width;
                break b;
            default:
        }
    }
    $rotation = $x - $spriteWidth * 0.5;
    $x = $y - $spriteHeight * 0.5;
    cbggg_Sprite_setBounds($particle, $rotation, $x, $spriteWidth, $spriteHeight);
    $offsetTime = $this.$lifeOffset + $this.$lifeOffsetDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$lifeOffsetValue, $percent) | 0;
    if ($offsetTime > 0) {
        $index = $particle.$currentLife;
        if ($offsetTime >= $index)
            $offsetTime = $index - 1 | 0;
        cbggg_ParticleEmitter_updateParticle($this, $particle, $offsetTime / 1000.0, $offsetTime);
    }
},
cbggg_ParticleEmitter_updateParticle = ($this, $particle, $delta, $deltaMillis) => {
    let $life, $percent, $updateFlags, $rotation, $angle, $velocity, $velocityX, $velocityY, $color, $alphaMultiplier, $a, $frame, $sprite, var$17, $prevSpriteWidth, $prevSpriteHeight;
    $life = $particle.$currentLife - $deltaMillis | 0;
    if ($life <= 0)
        return 0;
    $particle.$currentLife = $life;
    $percent = 1.0 - $life / $particle.$life1;
    $updateFlags = $this.$updateFlags;
    if ($updateFlags & 1) {
        if (!$this.$yScaleValue.$active) {
            $rotation = $particle.$xScale + $particle.$xScaleDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$xScaleValue, $percent);
            cbggg_Sprite_setScale0($particle, $rotation);
        } else {
            $rotation = $particle.$xScale + $particle.$xScaleDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$xScaleValue, $percent);
            $angle = $particle.$yScale + $particle.$yScaleDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$yScaleValue, $percent);
            cbggg_Sprite_setScale($particle, $rotation, $angle);
        }
    }
    if ($updateFlags & 8) {
        $velocity = ($particle.$velocity + $particle.$velocityDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$velocityValue, $percent)) * $delta;
        if ($updateFlags & 2) {
            $angle = $particle.$angle0 + $particle.$angleDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$angleValue, $percent);
            $velocityX = $velocity * cbgm_MathUtils_cosDeg($angle);
            $velocityY = $velocity * cbgm_MathUtils_sinDeg($angle);
            if ($updateFlags & 4) {
                $rotation = $particle.$rotation0 + $particle.$rotationDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$rotationValue, $percent);
                if ($this.$aligned)
                    $rotation = $rotation + $angle;
                cbggg_Sprite_setRotation($particle, $rotation);
            }
        } else {
            $velocityX = $velocity * $particle.$angleCos;
            $velocityY = $velocity * $particle.$angleSin;
            if (!(!$this.$aligned && !($updateFlags & 4))) {
                $rotation = $particle.$rotation0 + $particle.$rotationDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$rotationValue, $percent);
                if ($this.$aligned)
                    $rotation = $rotation + $particle.$angle0;
                cbggg_Sprite_setRotation($particle, $rotation);
            }
        }
        if ($updateFlags & 16)
            $velocityX = $velocityX + ($particle.$wind + $particle.$windDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$windValue, $percent)) * $delta;
        if ($updateFlags & 32)
            $velocityY = $velocityY + ($particle.$gravity + $particle.$gravityDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$gravityValue, $percent)) * $delta;
        cbggg_Sprite_translate($particle, $velocityX, $velocityY);
    } else if ($updateFlags & 4) {
        $delta = $particle.$rotation0 + $particle.$rotationDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$rotationValue, $percent);
        cbggg_Sprite_setRotation($particle, $delta);
    }
    $color = !($updateFlags & 64) ? $particle.$tint : cbggg_ParticleEmitter$GradientColorValue_getColor($this.$tintValue, $percent);
    if (!$this.$premultipliedAlpha) {
        $color = $color.data;
        $delta = $color[0];
        $rotation = $color[1];
        $angle = $color[2];
        $alphaMultiplier = $particle.$transparency + $particle.$transparencyDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$transparencyValue, $percent);
        cbggg_Sprite_setColor($particle, $delta, $rotation, $angle, $alphaMultiplier);
    } else {
        $alphaMultiplier = !$this.$additive ? 1.0 : 0.0;
        $color = $color.data;
        $a = $particle.$transparency + $particle.$transparencyDiff * cbggg_ParticleEmitter$ScaledNumericValue_getScale($this.$transparencyValue, $percent);
        $delta = $color[0] * $a;
        $rotation = $color[1] * $a;
        $angle = $color[2] * $a;
        $alphaMultiplier = $a * $alphaMultiplier;
        cbggg_Sprite_setColor($particle, $delta, $rotation, $angle, $alphaMultiplier);
    }
    if ($updateFlags & 128) {
        $deltaMillis = $this.$sprites.$size0;
        $frame = jl_Math_min($percent * $deltaMillis | 0, $deltaMillis - 1 | 0);
        if ($particle.$frame != $frame) {
            $sprite = cbgu_Array_get($this.$sprites, $frame);
            var$17 = $particle;
            $prevSpriteWidth = var$17.$width0;
            $prevSpriteHeight = var$17.$height0;
            cbggg_TextureRegion_setRegion($particle, $sprite);
            cbggg_Sprite_setSize(var$17, $sprite.$width0, $sprite.$height0);
            cbggg_Sprite_setOrigin(var$17, $sprite.$originX, $sprite.$originY);
            cbggg_Sprite_translate(var$17, ($prevSpriteWidth - $sprite.$width0) * 0.5, ($prevSpriteHeight - $sprite.$height0) * 0.5);
            $particle.$frame = $frame;
        }
    }
    return 1;
},
cbggg_ParticleEmitter_generateLifeValues = $this => {
    let var$1;
    $this.$life0 = cbggg_ParticleEmitter$RangedNumericValue_newLowValue($this.$lifeValue) | 0;
    var$1 = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$lifeValue) | 0;
    $this.$lifeDiff = var$1;
    if (!$this.$lifeValue.$relative)
        $this.$lifeDiff = var$1 - $this.$life0 | 0;
},
cbggg_ParticleEmitter_generateLifeOffsetValues = $this => {
    let var$1, var$2;
    var$1 = $this.$lifeOffsetValue;
    $this.$lifeOffset = !var$1.$active ? 0 : cbggg_ParticleEmitter$RangedNumericValue_newLowValue(var$1) | 0;
    var$2 = cbggg_ParticleEmitter$ScaledNumericValue_newHighValue($this.$lifeOffsetValue) | 0;
    $this.$lifeOffsetDiff = var$2;
    if (!$this.$lifeOffsetValue.$relative)
        $this.$lifeOffsetDiff = var$2 - $this.$lifeOffset | 0;
},
cbggg_ParticleEmitter_setSprites = ($this, $sprites) => {
    let $i, $n, $particle, $sprite, $percent, var$7, var$8, var$9;
    $this.$sprites = $sprites;
    if (!$sprites.$size0)
        return;
    $i = 0;
    $n = $this.$particles.data.length;
    a: {
        while (true) {
            if ($i >= $n)
                break a;
            $particle = $this.$particles.data[$i];
            if ($particle === null)
                break;
            b: {
                $sprite = null;
                cbggg_ParticleEmitter$1_$callClinit();
                switch (cbggg_ParticleEmitter$1_$SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpriteMode.data[$this.$spriteMode.$ordinal0]) {
                    case 1:
                        $sprite = cbgu_Array_first($sprites);
                        break b;
                    case 2:
                        $percent = 1.0 - $particle.$currentLife / $particle.$life1;
                        var$7 = $sprites.$size0;
                        var$8 = jl_Math_min($percent * var$7 | 0, var$7 - 1 | 0);
                        $particle.$frame = var$8;
                        $sprite = cbgu_Array_get($sprites, var$8);
                        break b;
                    case 3:
                        $sprite = cbgu_Array_random($sprites);
                        break b;
                    default:
                }
            }
            cbggg_TextureRegion_setRegion($particle, $sprite);
            var$9 = $sprite.$originX;
            $percent = $sprite.$originY;
            cbggg_Sprite_setOrigin($particle, var$9, $percent);
            $i = $i + 1 | 0;
        }
    }
},
cbggg_ParticleEmitter_setMinParticleCount = ($this, $minParticleCount) => {
    $this.$minParticleCount = $minParticleCount;
},
cbggg_ParticleEmitter_setImagePaths = ($this, $imagePaths) => {
    $this.$imagePaths = $imagePaths;
},
cbggg_ParticleEmitter_load = ($this, $reader) => {
    let $line, $imagePaths, $ex, $$je;
    a: {
        try {
            $this.$name3 = cbggg_ParticleEmitter_readString($reader, $rt_s(747));
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$RangedNumericValue_load($this.$delayValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$RangedNumericValue_load($this.$durationValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter_setMinParticleCount($this, cbggg_ParticleEmitter_readInt($reader, $rt_s(1253)));
            cbggg_ParticleEmitter_setMaxParticleCount($this, cbggg_ParticleEmitter_readInt($reader, $rt_s(1254)));
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$ScaledNumericValue_load($this.$emissionValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$IndependentScaledNumericValue_load($this.$lifeValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$IndependentScaledNumericValue_load($this.$lifeOffsetValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$ScaledNumericValue_load($this.$xOffsetValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$ScaledNumericValue_load($this.$yOffsetValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$SpawnShapeValue_load($this.$spawnShapeValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$ScaledNumericValue_load($this.$spawnWidthValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$ScaledNumericValue_load($this.$spawnHeightValue, $reader);
            if (!jl_String_equals(jl_String_trim(ji_BufferedReader_readLine($reader)), $rt_s(1255))) {
                cbggg_ParticleEmitter$ScaledNumericValue_load($this.$xScaleValue, $reader);
                ji_BufferedReader_readLine($reader);
                cbggg_ParticleEmitter$ScaledNumericValue_load($this.$yScaleValue, $reader);
            } else {
                cbggg_ParticleEmitter$ScaledNumericValue_load($this.$xScaleValue, $reader);
                cbggg_ParticleEmitter$ParticleValue_setActive($this.$yScaleValue, 0);
            }
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$ScaledNumericValue_load($this.$velocityValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$ScaledNumericValue_load($this.$angleValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$ScaledNumericValue_load($this.$rotationValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$ScaledNumericValue_load($this.$windValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$ScaledNumericValue_load($this.$gravityValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$GradientColorValue_load($this.$tintValue, $reader);
            ji_BufferedReader_readLine($reader);
            cbggg_ParticleEmitter$ScaledNumericValue_load($this.$transparencyValue, $reader);
            ji_BufferedReader_readLine($reader);
            $this.$attached = cbggg_ParticleEmitter_readBoolean($reader, $rt_s(1256));
            $this.$continuous = cbggg_ParticleEmitter_readBoolean($reader, $rt_s(1257));
            $this.$aligned = cbggg_ParticleEmitter_readBoolean($reader, $rt_s(1258));
            $this.$additive = cbggg_ParticleEmitter_readBoolean($reader, $rt_s(1259));
            $this.$behind = cbggg_ParticleEmitter_readBoolean($reader, $rt_s(1260));
            $line = ji_BufferedReader_readLine($reader);
            if (jl_String_startsWith($line, $rt_s(1261))) {
                $this.$premultipliedAlpha = cbggg_ParticleEmitter_readBoolean0($line);
                $line = ji_BufferedReader_readLine($reader);
            }
            if (jl_String_startsWith($line, $rt_s(1262))) {
                $this.$spriteMode = cbggg_ParticleEmitter$SpriteMode_valueOf(cbggg_ParticleEmitter_readString0($line));
                ji_BufferedReader_readLine($reader);
            }
            $imagePaths = cbgu_Array__init_();
            while (true) {
                $line = ji_BufferedReader_readLine($reader);
                if ($line === null)
                    break;
                if (jl_String_isEmpty($line))
                    break;
                cbgu_Array_add($imagePaths, $line);
            }
            cbggg_ParticleEmitter_setImagePaths($this, $imagePaths);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_RuntimeException) {
                $ex = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return;
    }
    if ($this.$name3 === null)
        $rt_throw($ex);
    $reader = new jl_RuntimeException;
    $line = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($line);
    jl_AbstractStringBuilder_append($line, $rt_s(1263));
    jl_AbstractStringBuilder_append($line, $this.$name3);
    jl_Throwable__init_0($reader, jl_AbstractStringBuilder_toString($line), $ex);
    $rt_throw($reader);
},
cbggg_ParticleEmitter_readString0 = $line => {
    return jl_String_trim(jl_String_substring0($line, jl_String_indexOf0($line, $rt_s(96), 0) + 1 | 0));
},
cbggg_ParticleEmitter_readString = ($reader, $name) => {
    let $line;
    $line = ji_BufferedReader_readLine($reader);
    if ($line !== null)
        return cbggg_ParticleEmitter_readString0($line);
    $line = new ji_IOException;
    $reader = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($reader);
    jl_AbstractStringBuilder_append($reader, $rt_s(1264));
    jl_AbstractStringBuilder_append($reader, $name);
    jl_Throwable__init_($line, jl_AbstractStringBuilder_toString($reader));
    $rt_throw($line);
},
cbggg_ParticleEmitter_readBoolean0 = $line => {
    return jl_Boolean_parseBoolean(cbggg_ParticleEmitter_readString0($line));
},
cbggg_ParticleEmitter_readBoolean = ($reader, $name) => {
    return jl_Boolean_parseBoolean(cbggg_ParticleEmitter_readString($reader, $name));
},
cbggg_ParticleEmitter_readInt = ($reader, $name) => {
    return jl_Integer_parseInt(cbggg_ParticleEmitter_readString($reader, $name));
},
cbggg_ParticleEmitter_readFloat = ($reader, $name) => {
    return jl_Float_parseFloat(cbggg_ParticleEmitter_readString($reader, $name));
};
function cgtt_Effect() {
    let a = this; jl_Object.call(a);
    a.$label = null;
    a.$indexStart = 0;
    a.$indexEnd = 0;
    a.$duration = 0.0;
    a.$totalTime = 0.0;
    a.$name2 = null;
}
let cgtt_Effect__init_ = ($this, $label) => {
    $this.$indexStart = (-1);
    $this.$indexEnd = (-1);
    $this.$duration = Infinity;
    $this.$label = $label;
},
cgtt_Effect_assignTokenName = ($this, $name) => {
    $this.$name2 = $name;
    return $this;
},
cgtt_Effect_update = ($this, $delta) => {
    $this.$totalTime = $this.$totalTime + $delta;
},
cgtt_Effect_isFinished = $this => {
    let var$1;
    var$1 = $this.$duration;
    return var$1 >= 0.0 && $this.$totalTime <= var$1 ? 0 : 1;
},
cgtt_Effect_calculateFadeout = $this => {
    let $progress;
    $progress = $this.$duration;
    if ($progress >= 0.0 && $progress !== Infinity) {
        $progress = cbgm_MathUtils_clamp($this.$totalTime / $progress, 0.0, 1.0);
        if ($progress < 0.25)
            return 1.0;
        cbgm_Interpolation_$callClinit();
        return cbgm_Interpolation_apply(cbgm_Interpolation_smooth, 1.0, 0.0, ($progress - 0.25) / 0.75);
    }
    return 1.0;
},
cgtt_Effect_calculateProgress0 = ($this, $modifier, $offset) => {
    return cgtt_Effect_calculateProgress($this, $modifier, $offset, 1);
},
cgtt_Effect_calculateProgress = ($this, $modifier, $offset, $pingpong) => {
    let $progress;
    $progress = $this.$totalTime / $modifier + $offset;
    while ($progress < 0.0) {
        $progress = $progress + 2.0;
    }
    if (!$pingpong)
        $offset = $progress % 1.0;
    else {
        $offset = $progress % 2.0;
        if ($offset > 1.0)
            $offset = 1.0 - ($offset - 1.0);
    }
    return jl_Math_min0(jl_Math_max0($offset, 0.0), 1.0);
},
cgtt_Effect_paramAsBoolean = ($this, $str) => {
    cgtt_Parser_$callClinit();
    return $str === null ? 0 : cgttu_CaseInsensitiveIntMap_containsKey(cgtt_Parser_BOOLEAN_TRUE, $str);
},
cgtt_Effect_paramAsColor = ($this, $str) => {
    return cgtt_Parser_stringToColor($this.$label, $str);
},
cgttu_StringUtils = $rt_classWithoutFields(),
cgttu_StringUtils_LETTERS = null,
cgttu_StringUtils_LOWER_CASE_LETTERS = null,
cgttu_StringUtils_UPPER_CASE_LETTERS = null,
cgttu_StringUtils_WORD_CHARS = null,
cgttu_StringUtils_SPACE_CHARS = null,
cgttu_StringUtils_$callClinit = () => {
    cgttu_StringUtils_$callClinit = $rt_eraseClinit(cgttu_StringUtils);
    cgttu_StringUtils__clinit_();
},
cgttu_StringUtils_join = ($delimiter, $items) => {
    let var$3, $sb, $i;
    cgttu_StringUtils_$callClinit();
    if ($items !== null) {
        $items = $items.data;
        var$3 = $items.length;
        if (var$3) {
            $sb = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($sb);
            jl_AbstractStringBuilder_append1($sb, $items[0]);
            $i = 1;
            while ($i < var$3) {
                jl_AbstractStringBuilder_append1($sb, $delimiter);
                jl_AbstractStringBuilder_append1($sb, $items[$i]);
                $i = $i + 1 | 0;
            }
            return jl_AbstractStringBuilder_toString($sb);
        }
    }
    return $rt_s(24);
},
cgttu_StringUtils_hexCode = $c => {
    let $h;
    cgttu_StringUtils_$callClinit();
    $h = $c & 64;
    return (($c & 15) + ($h >>> 3 | 0) | 0) + ($h >>> 6 | 0) | 0;
},
cgttu_StringUtils_intFromDec = ($cs, $start, $end) => {
    let $c, $sign, $h, $lim, $i;
    cgttu_StringUtils_$callClinit();
    if ($cs !== null && $start >= 0 && $end > 0) {
        $cs = $cs;
        $end = jl_Math_min($end, $cs.$nativeString.length);
        if (($end - $start | 0) > 0) {
            $c = jl_String_charAt($cs, $start);
            if ($c == 45) {
                $sign = (-1);
                $h = 0;
                $lim = 11;
            } else if ($c == 43) {
                $sign = 1;
                $h = 0;
                $lim = 11;
            } else if ($c >= 48 && $c <= 57) {
                $sign = 1;
                $lim = 10;
                $h = $c - 48 | 0;
            } else
                return 0;
            $i = $start + 1 | 0;
            a: {
                while ($i < $end && $i < ($start + $lim | 0)) {
                    $c = jl_String_charAt($cs, $i);
                    if ($c < 48)
                        break a;
                    if ($c > 57)
                        break a;
                    $h = ($h * 10 | 0) + ($c - 48 | 0) | 0;
                    $i = $i + 1 | 0;
                }
                return $rt_imul($h, $sign);
            }
            return $rt_imul($h, $sign);
        }
    }
    return 0;
},
cgttu_StringUtils_intFromHex = ($cs, $start, $end) => {
    let $c, $sign, $h, $lim, $i;
    cgttu_StringUtils_$callClinit();
    if ($cs !== null && $start >= 0 && $end > 0) {
        $cs = $cs;
        $end = jl_Math_min($end, $cs.$nativeString.length);
        if (($end - $start | 0) > 0) {
            $c = jl_String_charAt($cs, $start);
            if ($c == 45) {
                $sign = (-1);
                $h = 0;
                $lim = 9;
            } else if ($c == 43) {
                $sign = 1;
                $h = 0;
                $lim = 9;
            } else {
                if (!($c >= 48 && $c <= 57) && !($c >= 65 && $c <= 70) && !($c >= 97 && $c <= 102))
                    return 0;
                $sign = 1;
                $lim = 8;
                $h = cgttu_StringUtils_hexCode($c);
            }
            $i = $start + 1 | 0;
            a: {
                while ($i < $end && $i < ($start + $lim | 0)) {
                    $c = jl_String_charAt($cs, $i);
                    if (!($c >= 48 && $c <= 57) && !($c >= 65 && $c <= 70)) {
                        if ($c < 97)
                            break a;
                        if ($c > 102)
                            break a;
                    }
                    $h = $h << 4 | cgttu_StringUtils_hexCode($c);
                    $i = $i + 1 | 0;
                }
                return $rt_imul($h, $sign);
            }
            return $rt_imul($h, $sign);
        }
    }
    return 0;
},
cgttu_StringUtils_longFromHex = ($cs, $start, $end) => {
    let $c, $sign, $h, $lim, $data, $i;
    cgttu_StringUtils_$callClinit();
    if ($cs !== null && $start >= 0 && $end > 0) {
        $cs = $cs;
        $end = jl_Math_min($end, $cs.$nativeString.length);
        if (($end - $start | 0) > 0) {
            $c = jl_String_charAt($cs, $start);
            if ($c == 45) {
                $sign = (-1);
                $h = 0;
                $lim = 17;
            } else if ($c == 43) {
                $sign = 1;
                $h = 0;
                $lim = 17;
            } else {
                if (!($c >= 48 && $c <= 57) && !($c >= 65 && $c <= 70) && !($c >= 97 && $c <= 102))
                    return Long_ZERO;
                $sign = 1;
                $lim = 16;
                $h = cgttu_StringUtils_hexCode($c);
            }
            $data = Long_fromInt($h);
            $i = $start + 1 | 0;
            a: {
                while ($i < $end && $i < ($start + $lim | 0)) {
                    $c = jl_String_charAt($cs, $i);
                    if (!($c >= 48 && $c <= 57) && !($c >= 65 && $c <= 70)) {
                        if ($c < 97)
                            break a;
                        if ($c > 102)
                            break a;
                    }
                    $data = Long_or(Long_shl($data, 4), Long_fromInt(cgttu_StringUtils_hexCode($c)));
                    $i = $i + 1 | 0;
                }
                return Long_mul($data, Long_fromInt($sign));
            }
            return Long_mul($data, Long_fromInt($sign));
        }
    }
    return Long_ZERO;
},
cgttu_StringUtils_floatFromDec = ($cs, $start, $end) => {
    let $decimal, $foundPoint, $h, $c, $i, var$9;
    cgttu_StringUtils_$callClinit();
    $decimal = 1.0;
    $foundPoint = 0;
    if ($cs !== null && $start >= 0 && $end > 0 && ($end - $start | 0) > 0) {
        $cs = $cs;
        $h = $cs.$nativeString.length;
        if (($h - $start | 0) > 0 && $end <= $h) {
            $c = jl_String_charAt($cs, $start);
            if ($c == 45) {
                $c = (-1);
                $h = 0;
            } else if ($c == 43) {
                $c = 1;
                $h = 0;
            } else if ($c >= 48 && $c <= 57) {
                $h = cgttu_StringUtils_hexCode($c);
                $c = 1;
            } else
                return 0.0;
            $i = $start + 1 | 0;
            a: {
                while ($i < $end) {
                    var$9 = jl_String_charAt($cs, $i);
                    if (var$9 == 46)
                        $foundPoint = 1;
                    else {
                        if (var$9 < 48)
                            break a;
                        if (var$9 > 57)
                            break a;
                        $start = cgttu_StringUtils_hexCode(var$9);
                        if ($foundPoint)
                            $decimal = $decimal * 10.0;
                        $h = ($h * 10 | 0) + $start | 0;
                    }
                    $i = $i + 1 | 0;
                }
                return $rt_imul($h, $c) / $decimal;
            }
            return $rt_imul($h, $c) / $decimal;
        }
    }
    return 0.0;
},
cgttu_StringUtils_indexAfter = ($text, $search, $from) => {
    cgttu_StringUtils_$callClinit();
    $from = jl_String_indexOf0($text, $search, $from);
    return $from < 0 ? $text.$nativeString.length : $from + $search.$nativeString.length | 0;
},
cgttu_StringUtils_safeSubstring = ($source, $beginIndex, $endIndex) => {
    cgttu_StringUtils_$callClinit();
    if ($source !== null && !jl_String_isEmpty($source)) {
        if ($beginIndex < 0)
            $beginIndex = 0;
        if (!($endIndex >= 0 && $endIndex <= $source.$nativeString.length))
            $endIndex = $source.$nativeString.length;
        if ($beginIndex < $endIndex)
            return jl_String_substring($source, $beginIndex, $endIndex);
        return $rt_s(24);
    }
    return $rt_s(24);
},
cgttu_StringUtils_decompressCategory = $category => {
    let $i, var$3, var$4, $contents, var$6, var$7, $set;
    cgttu_StringUtils_$callClinit();
    $i = 0;
    var$3 = $rt_createCharArray($category.$length6).data;
    var$4 = 0;
    while (var$4 < ($category.$n - 1 | 0)) {
        $contents = $category.$cal.data;
        var$6 = $contents[var$4];
        while (var$6 <= $contents[var$4 + 1 | 0]) {
            var$7 = $i + 1 | 0;
            var$3[$i] = var$6;
            var$6 = (var$6 + 1 | 0) & 65535;
            $i = var$7;
        }
        var$4 = var$4 + 2 | 0;
    }
    $set = new ju_BitSet;
    $i = var$3.length - 1 | 0;
    ju_BitSet__init_($set, var$3[$i]);
    while ($i >= 0) {
        ju_BitSet_set0($set, var$3[$i]);
        $i = $i + (-1) | 0;
    }
    return $set;
},
cgttu_StringUtils_isLowerCase = $c => {
    cgttu_StringUtils_$callClinit();
    return ju_BitSet_get(cgttu_StringUtils_LOWER_CASE_LETTERS, $c);
},
cgttu_StringUtils_isUpperCase = $c => {
    cgttu_StringUtils_$callClinit();
    return ju_BitSet_get(cgttu_StringUtils_UPPER_CASE_LETTERS, $c);
},
cgttu_StringUtils__clinit_ = () => {
    r_Category_$callClinit();
    cgttu_StringUtils_LETTERS = cgttu_StringUtils_decompressCategory(r_Category_L);
    cgttu_StringUtils_LOWER_CASE_LETTERS = cgttu_StringUtils_decompressCategory(r_Category_Ll);
    cgttu_StringUtils_UPPER_CASE_LETTERS = cgttu_StringUtils_decompressCategory(r_Category_Lu);
    cgttu_StringUtils_WORD_CHARS = cgttu_StringUtils_decompressCategory(r_Category_Word);
    cgttu_StringUtils_SPACE_CHARS = cgttu_StringUtils_decompressCategory(r_Category_Space);
};
function cgtt_Font$TexturelessRegion() {
    let a = this; cbggg_TextureRegion.call(a);
    a.$x9 = 0;
    a.$y9 = 0;
    a.$width6 = 0;
}
let cgtt_Font$TexturelessRegion__init_0 = $this => {
    return;
},
cgtt_Font$TexturelessRegion__init_ = () => {
    let var_0 = new cgtt_Font$TexturelessRegion();
    cgtt_Font$TexturelessRegion__init_0(var_0);
    return var_0;
},
cgtt_Font$TexturelessRegion_getRegionX = $this => {
    return $this.$x9;
},
cgtt_Font$TexturelessRegion_getRegionY = $this => {
    return $this.$y9;
},
cgtt_Font$TexturelessRegion_getRegionWidth = $this => {
    return $this.$width6;
};
function cgtt_Font$GlyphRegion() {
    let a = this; cbggg_TextureRegion.call(a);
    a.$offsetX = 0.0;
    a.$offsetY = 0.0;
    a.$xAdvance0 = 0.0;
}
let cgtt_Font$GlyphRegion__init_5 = ($this, $textureRegion) => {
    cgtt_Font$GlyphRegion__init_1($this, $textureRegion, 0.0, 0.0, $textureRegion.$getRegionWidth());
},
cgtt_Font$GlyphRegion__init_ = var_0 => {
    let var_1 = new cgtt_Font$GlyphRegion();
    cgtt_Font$GlyphRegion__init_5(var_1, var_0);
    return var_1;
},
cgtt_Font$GlyphRegion__init_1 = ($this, $textureRegion, $offsetX, $offsetY, $xAdvance) => {
    if ($textureRegion.$texture !== null)
        cbggg_TextureRegion_setRegion($this, $textureRegion);
    $this.$offsetX = $offsetX;
    $this.$offsetY = $offsetY;
    $this.$xAdvance0 = $xAdvance;
},
cgtt_Font$GlyphRegion__init_6 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new cgtt_Font$GlyphRegion();
    cgtt_Font$GlyphRegion__init_1(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
cgtt_Font$GlyphRegion__init_2 = ($this, $textureRegion, $x, $y, $width, $height) => {
    let var$6, var$7, var$8, var$9, var$10;
    if ($textureRegion.$texture !== null) {
        var$6 = jl_Math_round($x);
        var$7 = jl_Math_round($y);
        var$8 = jl_Math_round($width);
        var$9 = jl_Math_round($height);
        var$10 = $this;
        var$10.$texture = $textureRegion.$texture;
        cbggg_TextureRegion_setRegion0(var$10, $textureRegion.$getRegionX() + var$6 | 0, $textureRegion.$getRegionY() + var$7 | 0, var$8, var$9);
    }
    $this.$offsetX = 0.0;
    $this.$offsetY = 0.0;
    $this.$xAdvance0 = $width;
},
cgtt_Font$GlyphRegion__init_3 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new cgtt_Font$GlyphRegion();
    cgtt_Font$GlyphRegion__init_2(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
cgtt_Font$GlyphRegion__init_4 = ($this, $other) => {
    if ($other.$texture !== null)
        cbggg_TextureRegion_setRegion($this, $other);
    $this.$offsetX = $other.$offsetX;
    $this.$offsetY = $other.$offsetY;
    $this.$xAdvance0 = $other.$xAdvance0;
},
cgtt_Font$GlyphRegion__init_0 = var_0 => {
    let var_1 = new cgtt_Font$GlyphRegion();
    cgtt_Font$GlyphRegion__init_4(var_1, var_0);
    return var_1;
},
cgtt_Font$GlyphRegion_getMaxDimension = $this => {
    let var$1;
    var$1 = $this;
    return jl_Math_max(var$1.$regionWidth, var$1.$regionHeight);
},
cgttu_BlockUtils = $rt_classWithoutFields(),
cgttu_BlockUtils_BOX_DRAWING = null,
cgttu_BlockUtils_isBlockGlyph = $c => {
    a: {
        b: {
            if (!($c >= 9472 && $c <= 9580) && !($c >= 9588 && $c <= 9616)) {
                if ($c < 9620)
                    break b;
                if ($c > 9631)
                    break b;
            }
            $c = 1;
            break a;
        }
        $c = 0;
    }
    return $c;
},
cgttu_BlockUtils__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createArray($rt_arraycls($rt_floatcls), 160);
    var$2 = var$1.data;
    var$2[0] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 1.0, 0.10000000149011612]);
    var$2[1] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 1.0, 0.20000000298023224]);
    var$2[2] = $rt_createFloatArrayFromData([0.44999998807907104, 0.0, 0.10000000149011612, 1.0]);
    var$2[3] = $rt_createFloatArrayFromData([0.4000000059604645, 0.0, 0.20000000298023224, 1.0]);
    var$2[4] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.20000000298023224, 0.10000000149011612, 0.4000000059604645, 0.44999998807907104, 0.20000000298023224, 0.10000000149011612, 0.800000011920929, 0.44999998807907104, 0.20000000298023224, 0.10000000149011612]);
    var$2[5] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.20000000298023224, 0.20000000298023224, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.20000000298023224, 0.800000011920929, 0.4000000059604645, 0.20000000298023224, 0.20000000298023224]);
    var$2[6] = $rt_createFloatArrayFromData([0.44999998807907104, 0.0, 0.10000000149011612, 0.20000000298023224, 0.44999998807907104, 0.4000000059604645, 0.10000000149011612, 0.20000000298023224, 0.44999998807907104, 0.800000011920929, 0.10000000149011612, 0.20000000298023224]);
    var$2[7] = $rt_createFloatArrayFromData([0.4000000059604645, 0.0, 0.20000000298023224, 0.20000000298023224, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.20000000298023224, 0.4000000059604645, 0.800000011920929, 0.20000000298023224, 0.20000000298023224]);
    var$2[8] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.1428571492433548, 0.10000000149011612, 0.2857142984867096, 0.44999998807907104, 0.1428571492433548, 0.10000000149011612, 0.5714285969734192, 0.44999998807907104, 0.1428571492433548, 0.10000000149011612, 0.8571428656578064, 0.44999998807907104, 0.1428571492433548, 0.10000000149011612]);
    var$2[9] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.1428571492433548, 0.20000000298023224, 0.2857142984867096, 0.4000000059604645, 0.1428571492433548, 0.20000000298023224, 0.5714285969734192, 0.4000000059604645, 0.1428571492433548, 0.20000000298023224, 0.8571428656578064, 0.4000000059604645, 0.1428571492433548, 0.20000000298023224]);
    var$2[10] = $rt_createFloatArrayFromData([0.44999998807907104, 0.0, 0.10000000149011612, 0.1428571492433548, 0.44999998807907104, 0.2857142984867096, 0.10000000149011612, 0.1428571492433548, 0.44999998807907104, 0.5714285969734192, 0.10000000149011612, 0.1428571492433548, 0.44999998807907104, 0.8571428656578064, 0.10000000149011612, 0.1428571492433548]);
    var$2[11] = $rt_createFloatArrayFromData([0.4000000059604645, 0.0, 0.20000000298023224, 0.1428571492433548, 0.4000000059604645, 0.2857142984867096, 0.20000000298023224, 0.1428571492433548, 0.4000000059604645, 0.5714285969734192, 0.20000000298023224, 0.1428571492433548, 0.4000000059604645, 0.8571428656578064, 0.20000000298023224, 0.1428571492433548]);
    var$2[12] = $rt_createFloatArrayFromData([0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[13] = $rt_createFloatArrayFromData([0.44999998807907104, 0.4000000059604645, 0.550000011920929, 0.20000000298023224, 0.44999998807907104, 0.0, 0.10000000149011612, 0.6000000238418579]);
    var$2[14] = $rt_createFloatArrayFromData([0.4000000059604645, 0.44999998807907104, 0.6000000238418579, 0.10000000149011612, 0.4000000059604645, 0.0, 0.20000000298023224, 0.550000011920929]);
    var$2[15] = $rt_createFloatArrayFromData([0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[16] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[17] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.550000011920929, 0.20000000298023224, 0.44999998807907104, 0.0, 0.10000000149011612, 0.6000000238418579]);
    var$2[18] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.6000000238418579, 0.10000000149011612, 0.4000000059604645, 0.0, 0.20000000298023224, 0.550000011920929]);
    var$2[19] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[20] = $rt_createFloatArrayFromData([0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929]);
    var$2[21] = $rt_createFloatArrayFromData([0.44999998807907104, 0.4000000059604645, 0.550000011920929, 0.20000000298023224, 0.44999998807907104, 0.4000000059604645, 0.10000000149011612, 0.6000000238418579]);
    var$2[22] = $rt_createFloatArrayFromData([0.4000000059604645, 0.44999998807907104, 0.6000000238418579, 0.10000000149011612, 0.4000000059604645, 0.44999998807907104, 0.20000000298023224, 0.550000011920929]);
    var$2[23] = $rt_createFloatArrayFromData([0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579]);
    var$2[24] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929]);
    var$2[25] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.550000011920929, 0.20000000298023224, 0.44999998807907104, 0.4000000059604645, 0.10000000149011612, 0.6000000238418579]);
    var$2[26] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.6000000238418579, 0.10000000149011612, 0.4000000059604645, 0.44999998807907104, 0.20000000298023224, 0.550000011920929]);
    var$2[27] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579]);
    var$2[28] = $rt_createFloatArrayFromData([0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.0, 0.10000000149011612, 1.0]);
    var$2[29] = $rt_createFloatArrayFromData([0.44999998807907104, 0.4000000059604645, 0.550000011920929, 0.20000000298023224, 0.44999998807907104, 0.0, 0.10000000149011612, 1.0]);
    var$2[30] = $rt_createFloatArrayFromData([0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929, 0.4000000059604645, 0.44999998807907104, 0.20000000298023224, 0.550000011920929]);
    var$2[31] = $rt_createFloatArrayFromData([0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[32] = $rt_createFloatArrayFromData([0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.0, 0.20000000298023224, 1.0]);
    var$2[33] = $rt_createFloatArrayFromData([0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[34] = $rt_createFloatArrayFromData([0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929]);
    var$2[35] = $rt_createFloatArrayFromData([0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.0, 0.20000000298023224, 1.0]);
    var$2[36] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.0, 0.10000000149011612, 1.0]);
    var$2[37] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.550000011920929, 0.20000000298023224, 0.44999998807907104, 0.0, 0.10000000149011612, 1.0]);
    var$2[38] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929, 0.4000000059604645, 0.44999998807907104, 0.20000000298023224, 0.550000011920929]);
    var$2[39] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[40] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.0, 0.20000000298023224, 1.0]);
    var$2[41] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[42] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929]);
    var$2[43] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.550000011920929, 0.20000000298023224, 0.4000000059604645, 0.0, 0.20000000298023224, 1.0]);
    var$2[44] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 1.0, 0.10000000149011612, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[45] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[46] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[47] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 1.0, 0.20000000298023224, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[48] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 1.0, 0.10000000149011612, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[49] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[50] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[51] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 1.0, 0.20000000298023224, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[52] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 1.0, 0.10000000149011612, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929]);
    var$2[53] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929]);
    var$2[54] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929]);
    var$2[55] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 1.0, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929]);
    var$2[56] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 1.0, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579]);
    var$2[57] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579]);
    var$2[58] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579]);
    var$2[59] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 1.0, 0.20000000298023224, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579]);
    var$2[60] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 1.0, 0.10000000149011612, 0.44999998807907104, 0.0, 0.10000000149011612, 1.0]);
    var$2[61] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.0, 0.10000000149011612, 1.0]);
    var$2[62] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.0, 0.10000000149011612, 1.0]);
    var$2[63] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 1.0, 0.20000000298023224, 0.44999998807907104, 0.0, 0.10000000149011612, 1.0]);
    var$2[64] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 1.0, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[65] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 1.0, 0.10000000149011612, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[66] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 1.0, 0.10000000149011612, 0.4000000059604645, 0.0, 0.20000000298023224, 1.0]);
    var$2[67] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[68] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[69] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[70] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[71] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 1.0, 0.20000000298023224, 0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[72] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 1.0, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[73] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.0, 0.20000000298023224, 1.0]);
    var$2[74] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.4000000059604645, 0.0, 0.20000000298023224, 1.0]);
    var$2[75] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 1.0, 0.20000000298023224, 0.4000000059604645, 0.0, 0.20000000298023224, 1.0]);
    var$2[76] = $rt_createFloatArrayFromData([0.125, 0.44999998807907104, 0.25, 0.10000000149011612, 0.625, 0.44999998807907104, 0.25, 0.10000000149011612]);
    var$2[77] = $rt_createFloatArrayFromData([0.125, 0.4000000059604645, 0.25, 0.20000000298023224, 0.625, 0.4000000059604645, 0.25, 0.20000000298023224]);
    var$2[78] = $rt_createFloatArrayFromData([0.44999998807907104, 0.125, 0.10000000149011612, 0.25, 0.44999998807907104, 0.625, 0.10000000149011612, 0.25]);
    var$2[79] = $rt_createFloatArrayFromData([0.4000000059604645, 0.125, 0.20000000298023224, 0.25, 0.4000000059604645, 0.625, 0.20000000298023224, 0.25]);
    var$2[80] = $rt_createFloatArrayFromData([0.0, 0.3499999940395355, 1.0, 0.10000000894069672, 0.0, 0.550000011920929, 1.0, 0.10000000894069672]);
    var$2[81] = $rt_createFloatArrayFromData([0.3499999940395355, 0.0, 0.10000000894069672, 1.0, 0.550000011920929, 0.0, 0.10000000894069672, 1.0]);
    var$2[82] = $rt_createFloatArrayFromData([0.44999998807907104, 0.0, 0.10000000149011612, 0.6499999761581421, 0.44999998807907104, 0.3499999940395355, 0.550000011920929, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.550000011920929, 0.10000000894069672]);
    var$2[83] = $rt_createFloatArrayFromData([0.3499999940395355, 0.0, 0.10000000894069672, 0.550000011920929, 0.550000011920929, 0.0, 0.10000000894069672, 0.550000011920929, 0.3499999940395355, 0.44999998807907104, 0.6499999761581421, 0.10000000149011612]);
    var$2[84] = $rt_createFloatArrayFromData([0.3499999940395355, 0.0, 0.10000000894069672, 0.6499999761581421, 0.550000011920929, 0.0, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.3499999940395355, 0.44999998807907104, 0.10000000894069672, 0.3499999940395355, 0.550000011920929, 0.6499999761581421, 0.10000000894069672]);
    var$2[85] = $rt_createFloatArrayFromData([0.44999998807907104, 0.0, 0.10000000149011612, 0.6499999761581421, 0.0, 0.3499999940395355, 0.550000011920929, 0.10000000894069672, 0.0, 0.550000011920929, 0.550000011920929, 0.10000000894069672]);
    var$2[86] = $rt_createFloatArrayFromData([0.3499999940395355, 0.0, 0.10000000894069672, 0.550000011920929, 0.550000011920929, 0.0, 0.10000000894069672, 0.550000011920929, 0.0, 0.44999998807907104, 0.6499999761581421, 0.10000000149011612]);
    var$2[87] = $rt_createFloatArrayFromData([0.3499999940395355, 0.0, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.0, 0.10000000894069672, 0.6499999761581421, 0.0, 0.3499999940395355, 0.44999998807907104, 0.10000000894069672, 0.0, 0.550000011920929, 0.6499999761581421, 0.10000000894069672]);
    var$2[88] = $rt_createFloatArrayFromData([0.44999998807907104, 0.3499999940395355, 0.550000011920929, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.550000011920929, 0.10000000894069672, 0.44999998807907104, 0.3499999940395355, 0.10000000149011612, 0.6499999761581421]);
    var$2[89] = $rt_createFloatArrayFromData([0.3499999940395355, 0.44999998807907104, 0.10000000894069672, 0.550000011920929, 0.550000011920929, 0.44999998807907104, 0.10000000894069672, 0.550000011920929, 0.3499999940395355, 0.44999998807907104, 0.6499999761581421, 0.10000000149011612]);
    var$2[90] = $rt_createFloatArrayFromData([0.3499999940395355, 0.3499999940395355, 0.10000000894069672, 0.6499999761581421, 0.550000011920929, 0.550000011920929, 0.10000000894069672, 0.44999998807907104, 0.3499999940395355, 0.3499999940395355, 0.6499999761581421, 0.10000000894069672, 0.550000011920929, 0.550000011920929, 0.44999998807907104, 0.10000000894069672]);
    var$2[91] = $rt_createFloatArrayFromData([0.44999998807907104, 0.3499999940395355, 0.10000000149011612, 0.6499999761581421, 0.0, 0.3499999940395355, 0.550000011920929, 0.10000000894069672, 0.0, 0.550000011920929, 0.550000011920929, 0.10000000894069672]);
    var$2[92] = $rt_createFloatArrayFromData([0.3499999940395355, 0.44999998807907104, 0.10000000894069672, 0.550000011920929, 0.550000011920929, 0.44999998807907104, 0.10000000894069672, 0.550000011920929, 0.0, 0.44999998807907104, 0.6499999761581421, 0.10000000149011612]);
    var$2[93] = $rt_createFloatArrayFromData([0.3499999940395355, 0.550000011920929, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.3499999940395355, 0.10000000894069672, 0.6499999761581421, 0.0, 0.3499999940395355, 0.6499999761581421, 0.10000000894069672, 0.0, 0.550000011920929, 0.44999998807907104, 0.10000000894069672]);
    var$2[94] = $rt_createFloatArrayFromData([0.44999998807907104, 0.0, 0.10000000149011612, 1.0, 0.44999998807907104, 0.3499999940395355, 0.550000011920929, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.550000011920929, 0.10000000894069672]);
    var$2[95] = $rt_createFloatArrayFromData([0.3499999940395355, 0.0, 0.10000000894069672, 1.0, 0.550000011920929, 0.0, 0.10000000894069672, 1.0, 0.550000011920929, 0.44999998807907104, 0.44999998807907104, 0.10000000149011612]);
    var$2[96] = $rt_createFloatArrayFromData([0.3499999940395355, 0.0, 0.10000000894069672, 1.0, 0.550000011920929, 0.550000011920929, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.550000011920929, 0.44999998807907104, 0.10000000894069672, 0.550000011920929, 0.0, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.3499999940395355, 0.44999998807907104, 0.10000000894069672]);
    var$2[97] = $rt_createFloatArrayFromData([0.44999998807907104, 0.0, 0.10000000149011612, 1.0, 0.0, 0.3499999940395355, 0.550000011920929, 0.10000000894069672, 0.0, 0.550000011920929, 0.550000011920929, 0.10000000894069672]);
    var$2[98] = $rt_createFloatArrayFromData([0.3499999940395355, 0.0, 0.10000000894069672, 1.0, 0.550000011920929, 0.0, 0.10000000894069672, 1.0, 0.0, 0.44999998807907104, 0.3499999940395355, 0.10000000149011612]);
    var$2[99] = $rt_createFloatArrayFromData([0.550000011920929, 0.0, 0.10000000894069672, 1.0, 0.3499999940395355, 0.0, 0.10000000894069672, 0.44999998807907104, 0.0, 0.3499999940395355, 0.44999998807907104, 0.10000000894069672, 0.3499999940395355, 0.550000011920929, 0.10000000894069672, 0.44999998807907104, 0.0, 0.550000011920929, 0.44999998807907104, 0.10000000894069672]);
    var$2[100] = $rt_createFloatArrayFromData([0.44999998807907104, 0.0, 0.10000000149011612, 0.3499999940395355, 0.0, 0.3499999940395355, 1.0, 0.10000000894069672, 0.0, 0.550000011920929, 1.0, 0.10000000894069672]);
    var$2[101] = $rt_createFloatArrayFromData([0.3499999940395355, 0.0, 0.10000000894069672, 0.550000011920929, 0.550000011920929, 0.0, 0.10000000894069672, 0.550000011920929, 0.0, 0.44999998807907104, 1.0, 0.10000000149011612]);
    var$2[102] = $rt_createFloatArrayFromData([0.0, 0.550000011920929, 1.0, 0.10000000894069672, 0.550000011920929, 0.0, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.3499999940395355, 0.44999998807907104, 0.10000000894069672, 0.3499999940395355, 0.0, 0.10000000894069672, 0.44999998807907104, 0.0, 0.3499999940395355, 0.44999998807907104, 0.10000000894069672]);
    var$2[103] = $rt_createFloatArrayFromData([0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.44999998807907104, 0.0, 0.3499999940395355, 1.0, 0.10000000894069672, 0.0, 0.550000011920929, 1.0, 0.10000000894069672]);
    var$2[104] = $rt_createFloatArrayFromData([0.3499999940395355, 0.44999998807907104, 0.10000000894069672, 0.550000011920929, 0.550000011920929, 0.44999998807907104, 0.10000000894069672, 0.550000011920929, 0.0, 0.44999998807907104, 1.0, 0.10000000149011612]);
    var$2[105] = $rt_createFloatArrayFromData([0.0, 0.3499999940395355, 1.0, 0.10000000894069672, 0.550000011920929, 0.550000011920929, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.550000011920929, 0.44999998807907104, 0.10000000894069672, 0.3499999940395355, 0.550000011920929, 0.10000000894069672, 0.44999998807907104, 0.0, 0.550000011920929, 0.44999998807907104, 0.10000000894069672]);
    var$2[106] = $rt_createFloatArrayFromData([0.44999998807907104, 0.0, 0.10000000149011612, 1.0, 0.0, 0.3499999940395355, 1.0, 0.10000000894069672, 0.0, 0.550000011920929, 1.0, 0.10000000894069672]);
    var$2[107] = $rt_createFloatArrayFromData([0.3499999940395355, 0.0, 0.10000000894069672, 1.0, 0.550000011920929, 0.0, 0.10000000894069672, 1.0, 0.0, 0.44999998807907104, 1.0, 0.10000000149011612]);
    var$2[108] = $rt_createFloatArrayFromData([0.550000011920929, 0.550000011920929, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.550000011920929, 0.44999998807907104, 0.10000000894069672, 0.550000011920929, 0.0, 0.10000000894069672, 0.44999998807907104, 0.550000011920929, 0.3499999940395355, 0.44999998807907104, 0.10000000894069672, 0.3499999940395355, 0.0, 0.10000000894069672, 0.44999998807907104, 0.0, 0.3499999940395355, 0.44999998807907104, 0.10000000894069672, 0.3499999940395355, 0.550000011920929,
    0.10000000894069672, 0.44999998807907104, 0.0, 0.550000011920929, 0.44999998807907104, 0.10000000894069672]);
    var$2[109] = $rt_createFloatArray(0);
    var$2[110] = $rt_createFloatArray(0);
    var$2[111] = $rt_createFloatArray(0);
    var$2[112] = $rt_createFloatArray(0);
    var$2[113] = $rt_createFloatArray(0);
    var$2[114] = $rt_createFloatArray(0);
    var$2[115] = $rt_createFloatArray(0);
    var$2[116] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612]);
    var$2[117] = $rt_createFloatArrayFromData([0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929]);
    var$2[118] = $rt_createFloatArrayFromData([0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612]);
    var$2[119] = $rt_createFloatArrayFromData([0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[120] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224]);
    var$2[121] = $rt_createFloatArrayFromData([0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579]);
    var$2[122] = $rt_createFloatArrayFromData([0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224]);
    var$2[123] = $rt_createFloatArrayFromData([0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[124] = $rt_createFloatArrayFromData([0.0, 0.44999998807907104, 0.550000011920929, 0.10000000149011612, 0.4000000059604645, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224]);
    var$2[125] = $rt_createFloatArrayFromData([0.44999998807907104, 0.44999998807907104, 0.10000000149011612, 0.550000011920929, 0.4000000059604645, 0.0, 0.20000000298023224, 0.6000000238418579]);
    var$2[126] = $rt_createFloatArrayFromData([0.0, 0.4000000059604645, 0.6000000238418579, 0.20000000298023224, 0.44999998807907104, 0.44999998807907104, 0.550000011920929, 0.10000000149011612]);
    var$2[127] = $rt_createFloatArrayFromData([0.4000000059604645, 0.4000000059604645, 0.20000000298023224, 0.6000000238418579, 0.44999998807907104, 0.0, 0.10000000149011612, 0.550000011920929]);
    var$2[128] = $rt_createFloatArrayFromData([0.0, 0.5, 1.0, 0.5]);
    var$2[129] = $rt_createFloatArrayFromData([0.0, 0.0, 1.0, 0.125]);
    var$2[130] = $rt_createFloatArrayFromData([0.0, 0.0, 1.0, 0.25]);
    var$2[131] = $rt_createFloatArrayFromData([0.0, 0.0, 1.0, 0.375]);
    var$2[132] = $rt_createFloatArrayFromData([0.0, 0.0, 1.0, 0.5]);
    var$2[133] = $rt_createFloatArrayFromData([0.0, 0.0, 1.0, 0.625]);
    var$2[134] = $rt_createFloatArrayFromData([0.0, 0.0, 1.0, 0.75]);
    var$2[135] = $rt_createFloatArrayFromData([0.0, 0.0, 1.0, 0.875]);
    var$2[136] = $rt_createFloatArrayFromData([0.0, 0.0, 1.0, 1.0]);
    var$2[137] = $rt_createFloatArrayFromData([0.0, 0.0, 0.875, 1.0]);
    var$2[138] = $rt_createFloatArrayFromData([0.0, 0.0, 0.75, 1.0]);
    var$2[139] = $rt_createFloatArrayFromData([0.0, 0.0, 0.625, 1.0]);
    var$2[140] = $rt_createFloatArrayFromData([0.0, 0.0, 0.5, 1.0]);
    var$2[141] = $rt_createFloatArrayFromData([0.0, 0.0, 0.375, 1.0]);
    var$2[142] = $rt_createFloatArrayFromData([0.0, 0.0, 0.25, 1.0]);
    var$2[143] = $rt_createFloatArrayFromData([0.0, 0.0, 0.125, 1.0]);
    var$2[144] = $rt_createFloatArrayFromData([0.5, 0.0, 0.5, 1.0]);
    var$2[145] = $rt_createFloatArray(0);
    var$2[146] = $rt_createFloatArray(0);
    var$2[147] = $rt_createFloatArray(0);
    var$2[148] = $rt_createFloatArrayFromData([0.0, 0.875, 1.0, 0.125]);
    var$2[149] = $rt_createFloatArrayFromData([0.875, 0.0, 0.125, 1.0]);
    var$2[150] = $rt_createFloatArrayFromData([0.0, 0.0, 0.5, 0.5]);
    var$2[151] = $rt_createFloatArrayFromData([0.5, 0.0, 0.5, 0.5]);
    var$2[152] = $rt_createFloatArrayFromData([0.0, 0.5, 0.5, 0.5]);
    var$2[153] = $rt_createFloatArrayFromData([0.0, 0.0, 0.5, 1.0, 0.5, 0.0, 0.5, 0.5]);
    var$2[154] = $rt_createFloatArrayFromData([0.0, 0.0, 0.5, 0.5, 0.5, 0.0, 0.5, 0.5]);
    var$2[155] = $rt_createFloatArrayFromData([0.0, 0.0, 0.5, 1.0, 0.5, 0.5, 0.5, 0.5]);
    var$2[156] = $rt_createFloatArrayFromData([0.5, 0.0, 0.5, 1.0, 0.0, 0.5, 0.5, 0.5]);
    var$2[157] = $rt_createFloatArrayFromData([0.5, 0.5, 0.5, 0.5]);
    var$2[158] = $rt_createFloatArrayFromData([0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5]);
    var$2[159] = $rt_createFloatArrayFromData([0.5, 0.0, 0.5, 1.0, 0.0, 0.0, 0.5, 0.5]);
    cgttu_BlockUtils_BOX_DRAWING = var$1;
};
function ju_IdentityHashMap$HashEntry() {
    let a = this; ju_MapEntry.call(a);
    a.$origKeyHash0 = 0;
    a.$next5 = null;
}
function r_SearchEntry() {
    let a = this; jl_Object.call(a);
    a.$term = null;
    a.$index0 = 0;
    a.$cnt = 0;
    a.$regLen = 0;
    a.$isState = 0;
    a.$sub = null;
    a.$on = null;
    a.$mHead = null;
    a.$mCurrent = null;
    a.$cHead = null;
    a.$cCurrent = null;
}
let r_SearchEntry__init_0 = $this => {
    return;
},
r_SearchEntry__init_ = () => {
    let var_0 = new r_SearchEntry();
    r_SearchEntry__init_0(var_0);
    return var_0;
},
r_SearchEntry_saveMemregState = ($entry, $memreg, $mr) => {
    let $current, $head;
    $entry.$isState = 1;
    $current = $entry.$mCurrent;
    if ($current !== null) {
        $head = $current.$next7;
        if ($head === null) {
            $head = new r_SearchEntry$MState;
            $current.$next7 = $head;
            $head.$prev0 = $current;
        }
    } else {
        $head = $entry.$mHead;
        if ($head === null) {
            $head = new r_SearchEntry$MState;
            $entry.$mCurrent = $head;
            $entry.$mHead = $head;
        }
    }
    $head.$index10 = $memreg;
    $head.$in3 = $mr.$in0;
    $head.$out2 = $mr.$out1;
    $entry.$mCurrent = $head;
},
r_SearchEntry_saveCntState = ($entry, $cntreg, $value) => {
    let $current, $head;
    $entry.$isState = 1;
    $current = $entry.$cCurrent;
    if ($current !== null) {
        $head = $current.$next8;
        if ($head === null) {
            $head = new r_SearchEntry$CState;
            $current.$next8 = $head;
            $head.$prev1 = $current;
        }
    } else {
        $head = $entry.$cHead;
        if ($head === null) {
            $head = new r_SearchEntry$CState;
            $entry.$cCurrent = $head;
            $entry.$cHead = $head;
        }
    }
    $head.$index9 = $cntreg;
    $head.$value3 = $value;
    $entry.$cCurrent = $head;
},
r_SearchEntry_popState = ($entry, $memregs, $counters) => {
    let $ms, $mr, $cs;
    $ms = $entry.$mCurrent;
    while ($ms !== null) {
        $mr = $memregs.data[$ms.$index10];
        $mr.$in0 = $ms.$in3;
        $mr.$out1 = $ms.$out2;
        $ms = $ms.$prev0;
    }
    $cs = $entry.$cCurrent;
    while ($cs !== null) {
        $counters.data[$cs.$index9] = $cs.$value3;
        $cs = $cs.$prev1;
    }
    $entry.$mCurrent = null;
    $entry.$cCurrent = null;
    $entry.$isState = 0;
},
r_SearchEntry_reset = ($this, $restQueue) => {
    let $on;
    $this.$term = null;
    $this.$regLen = 0;
    $this.$cnt = 0;
    $this.$index0 = 0;
    $this.$mCurrent = null;
    $this.$cCurrent = null;
    $this.$isState = 0;
    $on = $this.$on;
    if ($on !== null) {
        if ($restQueue > 0)
            r_SearchEntry_reset($on, $restQueue - 1 | 0);
        else {
            $this.$on = null;
            $on.$sub = null;
        }
    }
};
function r_LAEntry() {
    let a = this; jl_Object.call(a);
    a.$index3 = 0;
    a.$top = null;
    a.$actual = null;
}
let jl_Error = $rt_classWithoutFields(jl_Throwable),
jl_Error__init_ = ($this, $message) => {
    jl_Throwable__init_($this, $message);
},
jl_Error__init_0 = var_0 => {
    let var_1 = new jl_Error();
    jl_Error__init_(var_1, var_0);
    return var_1;
},
r_TextBuffer = $rt_classWithoutFields(0);
function r_Replacer$StringBuilderBuffer() {
    jl_Object.call(this);
    this.$sb = null;
}
let r_Replacer$StringBuilderBuffer_append0 = ($this, $chars, $start, $len) => {
    jl_AbstractStringBuilder_append3($this.$sb, $chars, $start, $len);
},
r_Replacer$StringBuilderBuffer_append = ($this, $s) => {
    jl_AbstractStringBuilder_append($this.$sb, $s);
},
r_Replacer$StringBuilderBuffer_toString = $this => {
    return jl_AbstractStringBuilder_toString($this.$sb);
},
otjb_TimerHandler = $rt_classWithoutFields(0);
function cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0() {
    let a = this; jl_Object.call(a);
    a.$_02 = null;
    a.$_10 = null;
    a.$_20 = null;
    a.$_30 = 0;
}
let cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0_onTimer$exported$0 = var$1 => {
    var$1 = var$1;
    cgxgbta_AssetDownloadImpl_loadBinaryInternally(var$1.$_02, 1, var$1.$_10, var$1.$_20, var$1.$_30);
},
jl_AbstractStringBuilder$Constants = $rt_classWithoutFields(),
jl_AbstractStringBuilder$Constants_longLogPowersOfTen = null,
jl_AbstractStringBuilder$Constants_doubleAnalysisResult = null,
jl_AbstractStringBuilder$Constants_floatAnalysisResult = null,
jl_AbstractStringBuilder$Constants__clinit_ = () => {
    jl_AbstractStringBuilder$Constants_longLogPowersOfTen = $rt_createLongArrayFromData([Long_fromInt(1), Long_fromInt(10), Long_fromInt(100), Long_fromInt(10000), Long_fromInt(100000000), Long_create(1874919424, 2328306)]);
    jl_AbstractStringBuilder$Constants_doubleAnalysisResult = new otcit_DoubleAnalyzer$Result;
    jl_AbstractStringBuilder$Constants_floatAnalysisResult = new otcit_FloatAnalyzer$Result;
},
otcit_FloatAnalyzer = $rt_classWithoutFields(),
otcit_FloatAnalyzer_MAX_MANTISSA = 0,
otcit_FloatAnalyzer_mantissa10Table = null,
otcit_FloatAnalyzer_exp10Table = null,
otcit_FloatAnalyzer_analyze = ($d, $result) => {
    let $bits, $mantissa, $exponent, var$6, $decExponent, $posCmp, $upperPos, $mantissaShift, $decMantissa, $decMantissaHi, $decMantissaLow, $lowerPos, $lowerPos_0, $upperPos_0;
    $bits = jl_Float_floatToIntBits($d);
    $result.$sign1 = !($bits & (-2147483648)) ? 0 : 1;
    $mantissa = $bits & 8388607;
    $exponent = $bits >> 23 & 255;
    if (!$mantissa && !$exponent) {
        $result.$mantissa = 0;
        $result.$exponent = 0;
        return;
    }
    if ($exponent)
        $bits = $mantissa | 8388608;
    else {
        $bits = $mantissa << 1;
        while (Long_eq(Long_and(Long_fromInt($bits), Long_fromInt(8388608)), Long_ZERO)) {
            $bits = $bits << 1;
            $exponent = $exponent + (-1) | 0;
        }
    }
    var$6 = otcit_FloatAnalyzer_exp10Table.data;
    $mantissa = 0;
    $decExponent = var$6.length;
    if ($mantissa > $decExponent) {
        $result = new jl_IllegalArgumentException;
        jl_Exception__init_($result);
        $rt_throw($result);
    }
    $posCmp = $decExponent - 1 | 0;
    a: {
        while (true) {
            if ($mantissa > $posCmp) {
                $decExponent = ( -$mantissa | 0) - 1 | 0;
                break a;
            }
            $decExponent = ($mantissa + $posCmp | 0) / 2 | 0;
            $upperPos = var$6[$decExponent];
            if ($upperPos == $exponent)
                break;
            if ($exponent >= $upperPos)
                $mantissa = $decExponent + 1 | 0;
            else
                $posCmp = $decExponent - 1 | 0;
        }
    }
    if ($decExponent < 0)
        $decExponent =  -$decExponent | 0;
    $mantissa = $decExponent + 1 | 0;
    $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
    $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
    if ($decMantissa < otcit_FloatAnalyzer_MAX_MANTISSA) {
        while ($rt_ucmp($decMantissa, otcit_FloatAnalyzer_MAX_MANTISSA) <= 0) {
            $decExponent = $decExponent + (-1) | 0;
            $decMantissa = ($decMantissa * 10 | 0) + 9 | 0;
        }
        var$6 = otcit_FloatAnalyzer_exp10Table.data;
        $mantissa = $decExponent + 1 | 0;
        $mantissaShift = 9 + ($exponent - var$6[$mantissa] | 0) | 0;
        $decMantissa = otcit_FloatAnalyzer_mulAndShiftRight($bits, otcit_FloatAnalyzer_mantissa10Table.data[$mantissa], $mantissaShift);
    }
    $mantissa = $bits << 1;
    $bits = $mantissa + 1 | 0;
    var$6 = otcit_FloatAnalyzer_mantissa10Table.data;
    $exponent = $decExponent + 1 | 0;
    $posCmp = var$6[$exponent];
    $upperPos = $mantissaShift - 1 | 0;
    $decMantissaHi = otcit_FloatAnalyzer_mulAndShiftRight($bits, $posCmp, $upperPos);
    $decMantissaLow = otcit_FloatAnalyzer_mulAndShiftRight($mantissa - 1 | 0, otcit_FloatAnalyzer_mantissa10Table.data[$exponent], $upperPos);
    $lowerPos = 1;
    while (true) {
        $lowerPos_0 = $lowerPos * 10 | 0;
        if ($rt_ucmp($rt_udiv($decMantissa, $lowerPos_0), $rt_udiv($decMantissaLow, $lowerPos_0)) <= 0)
            break;
        $lowerPos = $lowerPos_0;
    }
    $upperPos = 1;
    while (true) {
        $upperPos_0 = $upperPos * 10 | 0;
        if ($rt_ucmp($rt_udiv($decMantissa, $upperPos_0), $rt_udiv($decMantissaHi, $upperPos_0)) >= 0)
            break;
        $upperPos = $upperPos_0;
    }
    $posCmp = $rt_ucmp($lowerPos, $upperPos);
    $mantissa = $posCmp > 0 ? $rt_imul($rt_udiv($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? $rt_imul($rt_udiv($decMantissa, $upperPos), $upperPos) + $upperPos | 0 : $rt_imul($rt_udiv(($decMantissa + ($upperPos / 2 | 0) | 0), $upperPos), $upperPos);
    if (jl_Long_compareUnsigned(Long_fromInt($mantissa), Long_fromInt(1000000000)) >= 0)
        while (true) {
            $decExponent = $decExponent + 1 | 0;
            $mantissa = $rt_udiv($mantissa, 10);
            if ($rt_ucmp($mantissa, 1000000000) < 0)
                break;
        }
    else if ($rt_ucmp($mantissa, 100000000) < 0) {
        $decExponent = $decExponent + (-1) | 0;
        $mantissa = $mantissa * 10 | 0;
    }
    $result.$mantissa = $mantissa;
    $result.$exponent = $decExponent - 50 | 0;
},
otcit_FloatAnalyzer_mulAndShiftRight = ($a, $b, $shift) => {
    return Long_lo(Long_shru(Long_mul(Long_and(Long_fromInt($a), Long_create(4294967295, 0)), Long_and(Long_fromInt($b), Long_create(4294967295, 0))), 32 - $shift | 0));
},
otcit_FloatAnalyzer__clinit_ = () => {
    otcit_FloatAnalyzer_MAX_MANTISSA = $rt_udiv((-1), 10);
    otcit_FloatAnalyzer_mantissa10Table = $rt_createIntArrayFromData([(-18543760), (-873828468), (-1558056233), (-2105438446), (-791721136), (-1492370368), (-2052889754), (-707643228), (-1425108042), (-1999079893), (-621547450), (-1356231419), (-1943978595), (-533385374), (-1285701758), (-1887554866), (-443107408), (-1213479385), (-1829776968), (-350662770), (-1139523676), (-1770612400), (-255999462), (-1063793029), (-1710027882), (-159064234), (-986244846), (-1647989336), (-59802560), (-906835507), (-1584461865),
    (-2126562952), (-825520345), (-1519409735), (-2074521247), (-742253618), (-1452796353), (-2021230542), (-656988489), (-1384584251), (-1966660860), (-569676998), (-1314735058), (-1910781505), (-480270031), (-1243209484), (-1853561046), (-388717296), (-1169967296), (-1794967296), (-294967296), (-1094967296), (-1734967296), (-198967296), (-1018167296), (-1673527296), (-100663296), (-939524096), (-1610612736), (-2147483648), (-858993460), (-1546188227), (-2095944041), (-776530088), (-1480217529), (-2043167483),
    (-692087595), (-1412663535), (-1989124287), (-605618482), (-1343488245), (-1933784055), (-517074110), (-1272652747), (-1877115657), (-426404674), (-1200117198), (-1819087218), (-333559171), (-1125840796), (-1759666096), (-238485376), (-1049781760), (-1698818867), (-141129810), (-971897307), (-1636511305), (-41437710), (-892143627), (-1572708361), (-2117160148), (-810475859), (-1507374147), (-2064892777), (-726848065), (-1440471911), (-2011370988), (-641213203), (-1371964022), (-1956564688)]);
    otcit_FloatAnalyzer_exp10Table = $rt_createIntArrayFromData([(-37), (-34), (-31), (-28), (-24), (-21), (-18), (-14), (-11), (-8), (-4), (-1), 2, 6, 9, 12, 16, 19, 22, 26, 29, 32, 36, 39, 42, 46, 49, 52, 56, 59, 62, 65, 69, 72, 75, 79, 82, 85, 89, 92, 95, 99, 102, 105, 109, 112, 115, 119, 122, 125, 129, 132, 135, 139, 142, 145, 149, 152, 155, 158, 162, 165, 168, 172, 175, 178, 182, 185, 188, 192, 195, 198, 202, 205, 208, 212, 215, 218, 222, 225, 228, 232, 235, 238, 242, 245, 248, 252, 255, 258, 261, 265,
    268, 271, 275, 278, 281, 285, 288, 291]);
};
function otcit_FloatAnalyzer$Result() {
    let a = this; jl_Object.call(a);
    a.$mantissa = 0;
    a.$exponent = 0;
    a.$sign1 = 0;
}
let cbgss_Action = $rt_classWithoutFields();
function cgtt_TokenEntry() {
    let a = this; jl_Object.call(a);
    a.$token = null;
    a.$category3 = null;
    a.$index5 = 0;
    a.$endIndex = 0;
    a.$floatValue = 0.0;
    a.$stringValue1 = null;
    a.$effect = null;
}
let cgtt_TokenEntry_compareTo = ($this, var$1) => {
    return $rt_compare(var$1.$index5, $this.$index5);
},
cgtt_TypingLabel$1 = $rt_classWithoutFields(),
cgtt_TypingLabel$1_$SwitchMap$com$github$tommyettinger$textra$TokenCategory = null,
cgtt_TypingLabel$1_$callClinit = () => {
    cgtt_TypingLabel$1_$callClinit = $rt_eraseClinit(cgtt_TypingLabel$1);
    cgtt_TypingLabel$1__clinit_();
},
cgtt_TypingLabel$1__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((cgtt_TokenCategory_values()).data.length);
    var$2 = var$1.data;
    cgtt_TypingLabel$1_$SwitchMap$com$github$tommyettinger$textra$TokenCategory = var$1;
    var$2[cgtt_TokenCategory_SPEED.$ordinal0] = 1;
    var$2[cgtt_TokenCategory_WAIT.$ordinal0] = 2;
    var$2[cgtt_TokenCategory_EVENT.$ordinal0] = 3;
    var$2[cgtt_TokenCategory_EFFECT_START.$ordinal0] = 4;
    var$2[cgtt_TokenCategory_EFFECT_END.$ordinal0] = 5;
},
cgtt_TokenCategory = $rt_classWithoutFields(jl_Enum),
cgtt_TokenCategory_WAIT = null,
cgtt_TokenCategory_SPEED = null,
cgtt_TokenCategory_COLOR = null,
cgtt_TokenCategory_VARIABLE = null,
cgtt_TokenCategory_IF = null,
cgtt_TokenCategory_EVENT = null,
cgtt_TokenCategory_RESET = null,
cgtt_TokenCategory_SKIP = null,
cgtt_TokenCategory_EFFECT_START = null,
cgtt_TokenCategory_EFFECT_END = null,
cgtt_TokenCategory_UNDO = null,
cgtt_TokenCategory_ALL = null,
cgtt_TokenCategory_$VALUES = null,
cgtt_TokenCategory_values = () => {
    return cgtt_TokenCategory_$VALUES.$clone0();
},
cgtt_TokenCategory__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cgtt_TokenCategory;
    jl_Enum__init_(var$1, $rt_s(1265), 0);
    cgtt_TokenCategory_WAIT = var$1;
    var$1 = new cgtt_TokenCategory;
    jl_Enum__init_(var$1, $rt_s(548), 1);
    cgtt_TokenCategory_SPEED = var$1;
    var$1 = new cgtt_TokenCategory;
    jl_Enum__init_(var$1, $rt_s(1266), 2);
    cgtt_TokenCategory_COLOR = var$1;
    var$1 = new cgtt_TokenCategory;
    jl_Enum__init_(var$1, $rt_s(1267), 3);
    cgtt_TokenCategory_VARIABLE = var$1;
    var$1 = new cgtt_TokenCategory;
    jl_Enum__init_(var$1, $rt_s(1268), 4);
    cgtt_TokenCategory_IF = var$1;
    var$1 = new cgtt_TokenCategory;
    jl_Enum__init_(var$1, $rt_s(1269), 5);
    cgtt_TokenCategory_EVENT = var$1;
    var$1 = new cgtt_TokenCategory;
    jl_Enum__init_(var$1, $rt_s(501), 6);
    cgtt_TokenCategory_RESET = var$1;
    var$1 = new cgtt_TokenCategory;
    jl_Enum__init_(var$1, $rt_s(1270), 7);
    cgtt_TokenCategory_SKIP = var$1;
    var$1 = new cgtt_TokenCategory;
    jl_Enum__init_(var$1, $rt_s(1271), 8);
    cgtt_TokenCategory_EFFECT_START = var$1;
    var$1 = new cgtt_TokenCategory;
    jl_Enum__init_(var$1, $rt_s(1272), 9);
    cgtt_TokenCategory_EFFECT_END = var$1;
    var$1 = new cgtt_TokenCategory;
    jl_Enum__init_(var$1, $rt_s(552), 10);
    cgtt_TokenCategory_UNDO = var$1;
    var$2 = $rt_createArray(cgtt_TokenCategory, 11);
    var$3 = var$2.data;
    var$3[0] = cgtt_TokenCategory_WAIT;
    var$3[1] = cgtt_TokenCategory_SPEED;
    var$3[2] = cgtt_TokenCategory_COLOR;
    var$3[3] = cgtt_TokenCategory_VARIABLE;
    var$3[4] = cgtt_TokenCategory_IF;
    var$3[5] = cgtt_TokenCategory_EVENT;
    var$3[6] = cgtt_TokenCategory_RESET;
    var$3[7] = cgtt_TokenCategory_SKIP;
    var$3[8] = cgtt_TokenCategory_EFFECT_START;
    var$3[9] = cgtt_TokenCategory_EFFECT_END;
    var$3[10] = var$1;
    cgtt_TokenCategory_$VALUES = var$2;
    cgtt_TokenCategory_ALL = cgtt_TokenCategory_values();
},
cbgm_MathUtils$Sin = $rt_classWithoutFields(),
cbgm_MathUtils$Sin_table = null,
cbgm_MathUtils$Sin__clinit_ = () => {
    let $i, var$2;
    cbgm_MathUtils$Sin_table = $rt_createFloatArray(16384);
    $i = 0;
    while ($i < 16384) {
        cbgm_MathUtils$Sin_table.data[$i] = jl_Math_sin(($i + 0.5) / 16384.0 * 6.2831854820251465);
        $i = $i + 1 | 0;
    }
    var$2 = cbgm_MathUtils$Sin_table.data;
    var$2[0] = 0.0;
    var$2[4096] = 1.0;
    var$2[8192] = 0.0;
    var$2[12288] = (-1.0);
},
ju_Collections = $rt_classWithoutFields(),
ju_Collections_EMPTY_SET = null,
ju_Collections_EMPTY_MAP = null,
ju_Collections_EMPTY_LIST = null,
ju_Collections_EMPTY_ITERATOR = null,
ju_Collections_EMPTY_LIST_ITERATOR = null,
ju_Collections_reverseOrder = null,
ju_Collections__clinit_ = () => {
    ju_Collections_EMPTY_SET = new ju_Collections$1;
    ju_Collections_EMPTY_MAP = new ju_Collections$2;
    ju_Collections_EMPTY_LIST = new ju_Collections$3;
    ju_Collections_EMPTY_ITERATOR = new ju_Collections$4;
    ju_Collections_EMPTY_LIST_ITERATOR = new ju_Collections$5;
    ju_Collections_reverseOrder = new ju_Collections$_clinit_$lambda$_59_0;
};
function r_SearchEntry$MState() {
    let a = this; jl_Object.call(a);
    a.$index10 = 0;
    a.$in3 = 0;
    a.$out2 = 0;
    a.$next7 = null;
    a.$prev0 = null;
}
function r_SearchEntry$CState() {
    let a = this; jl_Object.call(a);
    a.$index9 = 0;
    a.$value3 = 0;
    a.$next8 = null;
    a.$prev1 = null;
}
function cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0() {
    let a = this; jl_Object.call(a);
    a.$_013 = null;
    a.$_16 = null;
    a.$_24 = null;
    a.$_32 = null;
    a.$_40 = 0;
    a.$_5 = 0;
}
let cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, $$je;
    var$1 = var$1;
    var$2 = var$1.$_013;
    var$3 = var$1.$_16;
    var$4 = var$1.$_24;
    var$5 = var$1.$_32;
    var$6 = var$1.$_40;
    var$7 = var$1.$_5;
    if (var$3.readyState == 4) {
        var$8 = var$3.status;
        if (!var$8) {
            if (var$4 !== null)
                cgxgbta_AssetDownloadImpl$1_onFailure(var$4, var$5);
        } else if (var$8 != 200) {
            if (var$8 != 404 && var$8 != 403) {
                var$8 = var$6 + 1 | 0;
                var$1 = new cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0;
                var$1.$_00 = var$2;
                var$1.$_1 = var$7;
                var$1.$_2 = var$5;
                var$1.$_3 = var$4;
                var$1.$_4 = var$8;
                setTimeout(otji_JS_function(otji_JSWrapper_unwrap(var$1), "onTimer"), 100);
            } else if (var$4 !== null)
                cgxgbta_AssetDownloadImpl$1_onFailure(var$4, var$5);
        } else {
            var$3 = var$3.response;
            if (!(typeof var$3 == 'string' ? 1 : 0))
                var$9 = new Int8Array(var$3);
            else {
                var$1 = $rt_str(var$3);
                jnci_UTF8Charset_$callClinit();
                var$3 = jnci_UTF8Charset_INSTANCE;
                var$1 = jn_CharBuffer_wrap($rt_fastStringToCharArray(var$1.$nativeString));
                a: {
                    try {
                        var$3 = jnc_CharsetEncoder_encode0(jnc_CharsetEncoder_onUnmappableCharacter(jnc_CharsetEncoder_onMalformedInput(jnci_UTF8Charset_newEncoder(var$3), jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE), var$1);
                        break a;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jnc_CharacterCodingException) {
                            var$2 = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    var$3 = new jl_AssertionError;
                    jl_Throwable__init_0(var$3, $rt_s(435), var$2);
                    $rt_throw(var$3);
                }
                var$8 = var$3.$array3 === null ? 0 : 1;
                if (var$8 && !var$3.$position0 && var$3.$limit0 == var$3.$capacityImpl())
                    var$10 = jn_ByteBuffer_array(var$3);
                else {
                    var$10 = $rt_createByteArray(jn_Buffer_remaining(var$3));
                    jn_ByteBuffer_get(var$3, var$10, 0, var$10.data.length);
                }
                var$9 = var$10.data;
                var$3 = var$9.buffer;
            }
            if (var$4 !== null) {
                var$11 = new cgxgbta_TeaBlob;
                var$11.$data11 = var$9;
                var$11.$response = var$3;
                cgxgbta_AssetDownloadImpl$1_onSuccess(var$4, var$5, var$11);
            }
        }
        cgxgbta_AssetDownloadImpl_subtractQueue(var$2);
    }
},
cbg_InputProcessor = $rt_classWithoutFields(0),
cbg_InputAdapter = $rt_classWithoutFields(),
cbgss_Stage = $rt_classWithoutFields(cbg_InputAdapter);
function cgtt_InternalToken() {
    let a = this; jl_Enum.call(a);
    a.$name = null;
    a.$category2 = null;
}
let cgtt_InternalToken_WAIT = null,
cgtt_InternalToken_SPEED = null,
cgtt_InternalToken_SLOWER = null,
cgtt_InternalToken_SLOW = null,
cgtt_InternalToken_NORMAL = null,
cgtt_InternalToken_FAST = null,
cgtt_InternalToken_FASTER = null,
cgtt_InternalToken_NATURAL = null,
cgtt_InternalToken_COLOR = null,
cgtt_InternalToken_STYLE = null,
cgtt_InternalToken_SIZE = null,
cgtt_InternalToken_FONT = null,
cgtt_InternalToken_CLEARCOLOR = null,
cgtt_InternalToken_CLEARSIZE = null,
cgtt_InternalToken_CLEARFONT = null,
cgtt_InternalToken_ENDCOLOR = null,
cgtt_InternalToken_VAR = null,
cgtt_InternalToken_IF = null,
cgtt_InternalToken_EVENT = null,
cgtt_InternalToken_RESET = null,
cgtt_InternalToken_SKIP = null,
cgtt_InternalToken_UNDO = null,
cgtt_InternalToken_$VALUES = null,
cgtt_InternalToken_$callClinit = () => {
    cgtt_InternalToken_$callClinit = $rt_eraseClinit(cgtt_InternalToken);
    cgtt_InternalToken__clinit_();
},
cgtt_InternalToken_values = () => {
    cgtt_InternalToken_$callClinit();
    return cgtt_InternalToken_$VALUES.$clone0();
},
cgtt_InternalToken__init_0 = ($this, var$1, var$2, $name, $category) => {
    cgtt_InternalToken_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
    $this.$name = $name;
    $this.$category2 = $category;
},
cgtt_InternalToken__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new cgtt_InternalToken();
    cgtt_InternalToken__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
cgtt_InternalToken_fromName = $name => {
    let var$2, var$3, var$4, $token;
    cgtt_InternalToken_$callClinit();
    a: {
        if ($name !== null) {
            var$2 = (cgtt_InternalToken_values()).data;
            var$3 = var$2.length;
            var$4 = 0;
            while (true) {
                if (var$4 >= var$3)
                    break a;
                $token = var$2[var$4];
                if (jl_String_equalsIgnoreCase($name, $token.$name))
                    break;
                var$4 = var$4 + 1 | 0;
            }
            return $token;
        }
    }
    return null;
},
cgtt_InternalToken__clinit_ = () => {
    let var$1, var$2, var$3;
    cgtt_InternalToken_WAIT = cgtt_InternalToken__init_($rt_s(1265), 0, $rt_s(1265), cgtt_TokenCategory_WAIT);
    cgtt_InternalToken_SPEED = cgtt_InternalToken__init_($rt_s(548), 1, $rt_s(548), cgtt_TokenCategory_SPEED);
    cgtt_InternalToken_SLOWER = cgtt_InternalToken__init_($rt_s(545), 2, $rt_s(545), cgtt_TokenCategory_SPEED);
    cgtt_InternalToken_SLOW = cgtt_InternalToken__init_($rt_s(547), 3, $rt_s(547), cgtt_TokenCategory_SPEED);
    cgtt_InternalToken_NORMAL = cgtt_InternalToken__init_($rt_s(507), 4, $rt_s(507), cgtt_TokenCategory_SPEED);
    cgtt_InternalToken_FAST = cgtt_InternalToken__init_($rt_s(546), 5, $rt_s(546), cgtt_TokenCategory_SPEED);
    cgtt_InternalToken_FASTER = cgtt_InternalToken__init_($rt_s(549), 6, $rt_s(549), cgtt_TokenCategory_SPEED);
    cgtt_InternalToken_NATURAL = cgtt_InternalToken__init_($rt_s(544), 7, $rt_s(544), cgtt_TokenCategory_SPEED);
    cgtt_InternalToken_COLOR = cgtt_InternalToken__init_($rt_s(1266), 8, $rt_s(1266), cgtt_TokenCategory_COLOR);
    cgtt_InternalToken_STYLE = cgtt_InternalToken__init_($rt_s(1273), 9, $rt_s(1273), cgtt_TokenCategory_COLOR);
    cgtt_InternalToken_SIZE = cgtt_InternalToken__init_($rt_s(1274), 10, $rt_s(1274), cgtt_TokenCategory_COLOR);
    cgtt_InternalToken_FONT = cgtt_InternalToken__init_($rt_s(487), 11, $rt_s(487), cgtt_TokenCategory_COLOR);
    cgtt_InternalToken_CLEARCOLOR = cgtt_InternalToken__init_($rt_s(1275), 12, $rt_s(1275), cgtt_TokenCategory_COLOR);
    cgtt_InternalToken_CLEARSIZE = cgtt_InternalToken__init_($rt_s(1276), 13, $rt_s(1276), cgtt_TokenCategory_COLOR);
    cgtt_InternalToken_CLEARFONT = cgtt_InternalToken__init_($rt_s(1277), 14, $rt_s(1277), cgtt_TokenCategory_COLOR);
    cgtt_InternalToken_ENDCOLOR = cgtt_InternalToken__init_($rt_s(1278), 15, $rt_s(1278), cgtt_TokenCategory_COLOR);
    cgtt_InternalToken_VAR = cgtt_InternalToken__init_($rt_s(1279), 16, $rt_s(1279), cgtt_TokenCategory_VARIABLE);
    cgtt_InternalToken_IF = cgtt_InternalToken__init_($rt_s(1268), 17, $rt_s(1268), cgtt_TokenCategory_IF);
    cgtt_InternalToken_EVENT = cgtt_InternalToken__init_($rt_s(1269), 18, $rt_s(1269), cgtt_TokenCategory_EVENT);
    cgtt_InternalToken_RESET = cgtt_InternalToken__init_($rt_s(501), 19, $rt_s(501), cgtt_TokenCategory_RESET);
    cgtt_InternalToken_SKIP = cgtt_InternalToken__init_($rt_s(1270), 20, $rt_s(1270), cgtt_TokenCategory_SKIP);
    var$1 = cgtt_InternalToken__init_($rt_s(552), 21, $rt_s(552), cgtt_TokenCategory_UNDO);
    cgtt_InternalToken_UNDO = var$1;
    var$2 = $rt_createArray(cgtt_InternalToken, 22);
    var$3 = var$2.data;
    var$3[0] = cgtt_InternalToken_WAIT;
    var$3[1] = cgtt_InternalToken_SPEED;
    var$3[2] = cgtt_InternalToken_SLOWER;
    var$3[3] = cgtt_InternalToken_SLOW;
    var$3[4] = cgtt_InternalToken_NORMAL;
    var$3[5] = cgtt_InternalToken_FAST;
    var$3[6] = cgtt_InternalToken_FASTER;
    var$3[7] = cgtt_InternalToken_NATURAL;
    var$3[8] = cgtt_InternalToken_COLOR;
    var$3[9] = cgtt_InternalToken_STYLE;
    var$3[10] = cgtt_InternalToken_SIZE;
    var$3[11] = cgtt_InternalToken_FONT;
    var$3[12] = cgtt_InternalToken_CLEARCOLOR;
    var$3[13] = cgtt_InternalToken_CLEARSIZE;
    var$3[14] = cgtt_InternalToken_CLEARFONT;
    var$3[15] = cgtt_InternalToken_ENDCOLOR;
    var$3[16] = cgtt_InternalToken_VAR;
    var$3[17] = cgtt_InternalToken_IF;
    var$3[18] = cgtt_InternalToken_EVENT;
    var$3[19] = cgtt_InternalToken_RESET;
    var$3[20] = cgtt_InternalToken_SKIP;
    var$3[21] = var$1;
    cgtt_InternalToken_$VALUES = var$2;
},
cgtt_Parser$1 = $rt_classWithoutFields(),
cgtt_Parser$1_$SwitchMap$com$github$tommyettinger$textra$InternalToken = null,
cgtt_Parser$1_$SwitchMap$com$github$tommyettinger$textra$TokenCategory = null,
cgtt_Parser$1_$callClinit = () => {
    cgtt_Parser$1_$callClinit = $rt_eraseClinit(cgtt_Parser$1);
    cgtt_Parser$1__clinit_();
},
cgtt_Parser$1__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((cgtt_TokenCategory_values()).data.length);
    var$2 = var$1.data;
    cgtt_Parser$1_$SwitchMap$com$github$tommyettinger$textra$TokenCategory = var$1;
    var$2[cgtt_TokenCategory_WAIT.$ordinal0] = 1;
    var$2[cgtt_TokenCategory_EVENT.$ordinal0] = 2;
    var$2[cgtt_TokenCategory_SPEED.$ordinal0] = 3;
    var$2[cgtt_TokenCategory_EFFECT_START.$ordinal0] = 4;
    var$2[cgtt_TokenCategory_EFFECT_END.$ordinal0] = 5;
    var$2 = $rt_createIntArray((cgtt_InternalToken_values()).data.length);
    var$1 = var$2.data;
    cgtt_Parser$1_$SwitchMap$com$github$tommyettinger$textra$InternalToken = var$2;
    var$1[cgtt_InternalToken_COLOR.$ordinal0] = 1;
    var$1[cgtt_InternalToken_STYLE.$ordinal0] = 2;
    var$1[cgtt_InternalToken_SIZE.$ordinal0] = 3;
    var$1[cgtt_InternalToken_FONT.$ordinal0] = 4;
    var$1[cgtt_InternalToken_ENDCOLOR.$ordinal0] = 5;
    var$1[cgtt_InternalToken_CLEARCOLOR.$ordinal0] = 6;
    var$1[cgtt_InternalToken_CLEARSIZE.$ordinal0] = 7;
    var$1[cgtt_InternalToken_CLEARFONT.$ordinal0] = 8;
    var$1[cgtt_InternalToken_VAR.$ordinal0] = 9;
    var$1[cgtt_InternalToken_IF.$ordinal0] = 10;
    var$1[cgtt_InternalToken_RESET.$ordinal0] = 11;
    var$1[cgtt_InternalToken_UNDO.$ordinal0] = 12;
},
ju_Comparator$NaturalOrder = $rt_classWithoutFields(),
ju_Comparator$NaturalOrder_INSTANCE = null,
ju_Comparator$NaturalOrder__clinit_ = () => {
    ju_Comparator$NaturalOrder_INSTANCE = new ju_Comparator$NaturalOrder;
},
cbgg_TextureData$Factory = $rt_classWithoutFields(),
cbgg_TextureData$TextureDataType = $rt_classWithoutFields(jl_Enum),
cbgg_TextureData$TextureDataType_Pixmap = null,
cbgg_TextureData$TextureDataType_Custom = null,
cbgg_TextureData$TextureDataType_$VALUES = null,
cbgg_TextureData$TextureDataType_values = () => {
    return cbgg_TextureData$TextureDataType_$VALUES.$clone0();
},
cbgg_TextureData$TextureDataType__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbgg_TextureData$TextureDataType;
    jl_Enum__init_(var$1, $rt_s(1280), 0);
    cbgg_TextureData$TextureDataType_Pixmap = var$1;
    var$1 = new cbgg_TextureData$TextureDataType;
    jl_Enum__init_(var$1, $rt_s(1281), 1);
    cbgg_TextureData$TextureDataType_Custom = var$1;
    var$2 = $rt_createArray(cbgg_TextureData$TextureDataType, 2);
    var$3 = var$2.data;
    var$3[0] = cbgg_TextureData$TextureDataType_Pixmap;
    var$3[1] = var$1;
    cbgg_TextureData$TextureDataType_$VALUES = var$2;
},
cbggg_MipMapGenerator = $rt_classWithoutFields(),
cbggg_MipMapGenerator_useHWMipMap = 0,
cbggg_MipMapGenerator_generateMipMapCPU = ($target, $pixmap, $textureWidth, $textureHeight) => {
    let $width, $height, $level, $tmp_0, var$9, var$10, var$11, var$12, var$13;
    cbg_Gdx_gl.$glTexImage2D($target, 0, cbgg_Pixmap_getGLInternalFormat($pixmap), cbgg_Pixmap_getWidth($pixmap), cbgg_Pixmap_getHeight($pixmap), 0, cbgg_Pixmap_getGLFormat($pixmap), cbgg_Pixmap_getGLType($pixmap), cbgg_Pixmap_getPixels($pixmap));
    if (cbg_Gdx_gl20 === null && $textureWidth != $textureHeight) {
        $pixmap = new cbgu_GdxRuntimeException;
        jl_Throwable__init_($pixmap, $rt_s(1282));
        $rt_throw($pixmap);
    }
    $width = cbgg_Pixmap_getWidth($pixmap) / 2 | 0;
    $height = cbgg_Pixmap_getHeight($pixmap) / 2 | 0;
    $level = 1;
    while ($width > 0 && $height > 0) {
        $tmp_0 = cbgg_Pixmap__init_($width, $height, cbgg_Pixmap_getFormat($pixmap));
        cbgg_Pixmap_setBlending($tmp_0, cbgg_Pixmap$Blending_None);
        var$9 = cbgg_Pixmap_getWidth($pixmap);
        var$10 = cbgg_Pixmap_getHeight($pixmap);
        var$11 = $tmp_0.$nativePixmap;
        var$12 = $pixmap.$nativePixmap;
        var$13 = var$11.$nativePixmap0;
        Gdx.Gdx.prototype.g2d_draw_pixmap(var$12.$nativePixmap0.$basePtr, var$13.$basePtr, 0, 0, var$9, var$10, 0, 0, $width, $height);
        cbggg_Gdx2DPixmapNative_copyHeapToBuffer(var$13);
        if ($level > 1)
            cbgg_Pixmap_dispose($pixmap);
        cbg_Gdx_gl.$glTexImage2D($target, $level, cbgg_Pixmap_getGLInternalFormat($tmp_0), cbgg_Pixmap_getWidth($tmp_0), cbgg_Pixmap_getHeight($tmp_0), 0, cbgg_Pixmap_getGLFormat($tmp_0), cbgg_Pixmap_getGLType($tmp_0), cbgg_Pixmap_getPixels($tmp_0));
        $width = cbgg_Pixmap_getWidth($tmp_0) / 2 | 0;
        $height = cbgg_Pixmap_getHeight($tmp_0) / 2 | 0;
        $level = $level + 1 | 0;
        $pixmap = $tmp_0;
    }
},
cbggg_MipMapGenerator__clinit_ = () => {
    cbggg_MipMapGenerator_useHWMipMap = 1;
};
function cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0() {
    jl_Object.call(this);
    this.$_015 = null;
}
let cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0_handleEvent$exported$0 = (var$1, var$2) => {
    let var$3, var$4;
    var$1 = var$1.$_015;
    var$3 = var$2.loaded;
    var$4 = var$2.total;
    if (var$1 !== null) {
        var$1 = var$1.$val$listener;
        if (var$1 !== null)
            var$1.$onProgress(var$4, var$3);
    }
},
otjde_EventTarget = $rt_classWithoutFields(0),
otja_XMLHttpRequest = $rt_classWithoutFields(),
otcit_DoubleAnalyzer$Result = $rt_classWithoutFields();
function cbgu_ObjectMap$MapIterator() {
    let a = this; jl_Object.call(a);
    a.$hasNext1 = 0;
    a.$map1 = null;
    a.$nextIndex1 = 0;
    a.$currentIndex0 = 0;
    a.$valid1 = 0;
}
let cbgu_ObjectMap$Keys = $rt_classWithoutFields(cbgu_ObjectMap$MapIterator),
cgttu_Palette = $rt_classWithoutFields(),
cgttu_Palette_ALIASES = null,
cgttu_Palette_NAMED = null,
cgttu_Palette_LIST = null,
cgttu_Palette_NAMES = null,
cgttu_Palette_$callClinit = () => {
    cgttu_Palette_$callClinit = $rt_eraseClinit(cgttu_Palette);
    cgttu_Palette__clinit_();
},
cgttu_Palette__clinit_ = () => {
    let var$1;
    cgttu_Palette_ALIASES = cbgu_ObjectIntMap__init_1(20);
    cgttu_Palette_NAMED = cbgu_ObjectIntMap__init_1(84);
    cgttu_Palette_LIST = cbgu_IntArray__init_(84);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1283), 0);
    cbgu_IntArray_add(cgttu_Palette_LIST, 0);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1284), 255);
    cbgu_IntArray_add(cgttu_Palette_LIST, 255);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1285), (-2139062017));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-2139062017));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1286), (-1229539585));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1229539585));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1287), (-1));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1288), (-16776961));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-16776961));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1289), (-8453889));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-8453889));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1290), (-65281));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-65281));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1291), 16711935);
    cbgu_IntArray_add(cgttu_Palette_LIST, 16711935);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1292), 65535);
    cbgu_IntArray_add(cgttu_Palette_LIST, 65535);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1293), 1376772351);
    cbgu_IntArray_add(cgttu_Palette_LIST, 1376772351);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1294), (-1874792449));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1874792449));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1295), (-1073676289));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1073676289));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1296), (-1890108417));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1890108417));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1297), (-6233857));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-6233857));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1298), (-184486401));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-184486401));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1299), (-716027137));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-716027137));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1300), (-178638081));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-178638081));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1301), (-10329345));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-10329345));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1302), 1748506879);
    cbgu_IntArray_add(cgttu_Palette_LIST, 1748506879);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1303), (-759919361));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-759919361));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1304), (-829541889));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-829541889));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1305), (-764862977));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-764862977));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1306), (-5756673));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-5756673));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1307), (-4226561));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-4226561));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1308), (-740085505));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-740085505));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1309), (-2813697));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-2813697));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1310), (-882433));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-882433));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1311), (-922795521));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-922795521));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1312), 815792383);
    cbgu_IntArray_add(cgttu_Palette_LIST, 815792383);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1313), (-1814888193));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1814888193));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1314), (-2122317569));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-2122317569));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1315), 1316569855);
    cbgu_IntArray_add(cgttu_Palette_LIST, 1316569855);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1316), 541460735);
    cbgu_IntArray_add(cgttu_Palette_LIST, 541460735);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1317), 2113893375);
    cbgu_IntArray_add(cgttu_Palette_LIST, 2113893375);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1318), (-1411136001));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1411136001));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1319), 1069498367);
    cbgu_IntArray_add(cgttu_Palette_LIST, 1069498367);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1320), 16777215);
    cbgu_IntArray_add(cgttu_Palette_LIST, 16777215);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1321), 2147472639);
    cbgu_IntArray_add(cgttu_Palette_LIST, 2147472639);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1322), 8355839);
    cbgu_IntArray_add(cgttu_Palette_LIST, 8355839);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1323), 785828351);
    cbgu_IntArray_add(cgttu_Palette_LIST, 785828351);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1324), 281075967);
    cbgu_IntArray_add(cgttu_Palette_LIST, 281075967);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1325), 4631551);
    cbgu_IntArray_add(cgttu_Palette_LIST, 4631551);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1326), 814266623);
    cbgu_IntArray_add(cgttu_Palette_LIST, 814266623);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1327), 33023);
    cbgu_IntArray_add(cgttu_Palette_LIST, 33023);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1328), (-1181614081));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1181614081));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1329), (-1106393345));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1106393345));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1330), (-1418482689));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1418482689));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1331), (-434210561));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-434210561));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1332), (-1860945921));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1860945921));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1333), (-65281));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-65281));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1334), 65535);
    cbgu_IntArray_add(cgttu_Palette_LIST, 65535);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1335), (-2686721));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-2686721));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1336), 2139062271);
    cbgu_IntArray_add(cgttu_Palette_LIST, 2139062271);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1337), (-5963521));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-5963521));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1338), (-16711681));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-16711681));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1339), (-1306385665));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1306385665));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1340), (-13361921));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-13361921));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1341), (-1));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1342), (-2016482305));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-2016482305));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1343), 579543807);
    cbgu_IntArray_add(cgttu_Palette_LIST, 579543807);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1344), 16711935);
    cbgu_IntArray_add(cgttu_Palette_LIST, 16711935);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1345), 2147418367);
    cbgu_IntArray_add(cgttu_Palette_LIST, 2147418367);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1346), (-1339006721));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1339006721));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1347), (-16776961));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-16776961));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1348), 16777215);
    cbgu_IntArray_add(cgttu_Palette_LIST, 16777215);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1349), 255);
    cbgu_IntArray_add(cgttu_Palette_LIST, 255);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1350), (-293409025));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-293409025));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1351), (-8433409));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-8433409));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1352), 1097458175);
    cbgu_IntArray_add(cgttu_Palette_LIST, 1097458175);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1353), 852308735);
    cbgu_IntArray_add(cgttu_Palette_LIST, 852308735);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1354), 0);
    cbgu_IntArray_add(cgttu_Palette_LIST, 0);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1355), (-1077952513));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1077952513));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1356), 32767);
    cbgu_IntArray_add(cgttu_Palette_LIST, 32767);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1357), (-1958407169));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1958407169));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1358), (-92245249));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-92245249));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1359), (-1608453889));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-1608453889));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1360), 1061109759);
    cbgu_IntArray_add(cgttu_Palette_LIST, 1061109759);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1361), 1887473919);
    cbgu_IntArray_add(cgttu_Palette_LIST, 1887473919);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1362), (-759919361));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-759919361));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1363), (-9849601));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-9849601));
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1364), 1804477439);
    cbgu_IntArray_add(cgttu_Palette_LIST, 1804477439);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1365), 8355839);
    cbgu_IntArray_add(cgttu_Palette_LIST, 8355839);
    cbgu_ObjectIntMap_put(cgttu_Palette_NAMED, $rt_s(1366), (-626712321));
    cbgu_IntArray_add(cgttu_Palette_LIST, (-626712321));
    cbgu_ObjectIntMap_put(cgttu_Palette_ALIASES, $rt_s(1367), (-2139062017));
    cbgu_ObjectIntMap_put(cgttu_Palette_ALIASES, $rt_s(1368), (-2813697));
    cbgu_ObjectIntMap_put(cgttu_Palette_ALIASES, $rt_s(1369), (-1418482689));
    cbgu_ObjectIntMap_put(cgttu_Palette_ALIASES, $rt_s(1370), (-759919361));
    cbgu_ObjectIntMap_put(cgttu_Palette_ALIASES, $rt_s(1371), (-4226561));
    cbgu_ObjectIntMap_put(cgttu_Palette_ALIASES, $rt_s(1372), (-10329345));
    cbgu_ObjectIntMap_put(cgttu_Palette_ALIASES, $rt_s(1373), 281075967);
    cbgu_ObjectIntMap_put(cgttu_Palette_ALIASES, $rt_s(1374), 8355839);
    cbgu_ObjectIntMap_put(cgttu_Palette_ALIASES, $rt_s(1375), 4631551);
    cbgu_ObjectIntMap_putAll(cgttu_Palette_NAMED, cgttu_Palette_ALIASES);
    var$1 = cbgu_ObjectIntMap$Keys_toArray(cbgu_ObjectIntMap_keys(cgttu_Palette_NAMED));
    cgttu_Palette_NAMES = var$1;
    cbgu_Array_sort(var$1);
},
ju_TemplateCollections$AbstractImmutableSet = $rt_classWithoutFields(ju_AbstractSet),
ju_Collections$1 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableSet),
ju_TemplateCollections$AbstractImmutableMap = $rt_classWithoutFields(ju_AbstractMap),
ju_Collections$2 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableMap),
ju_TemplateCollections$AbstractImmutableList = $rt_classWithoutFields(ju_AbstractList),
ju_Collections$3 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableList),
ju_Collections$4 = $rt_classWithoutFields(),
ju_ListIterator = $rt_classWithoutFields(0),
ju_Collections$5 = $rt_classWithoutFields(),
ju_Collections$_clinit_$lambda$_59_0 = $rt_classWithoutFields();
function jur_Matcher$1() {
    let a = this; jl_Object.call(a);
    a.$grN = 0;
    a.$val$gr = 0;
    a.$this$015 = null;
}
let jur_Matcher$1__init_ = ($this, $this$0, var$2) => {
    $this.$this$015 = $this$0;
    $this.$val$gr = var$2;
    $this.$grN = var$2;
},
jur_Matcher$1__init_0 = (var_0, var_1) => {
    let var_2 = new jur_Matcher$1();
    jur_Matcher$1__init_(var_2, var_0, var_1);
    return var_2;
},
jur_Matcher$1_toString = $this => {
    return jur_Matcher_group($this.$this$015, $this.$grN);
};
function cbggg_FileTextureData() {
    let a = this; jl_Object.call(a);
    a.$file0 = null;
    a.$width3 = 0;
    a.$height3 = 0;
    a.$format = null;
    a.$pixmap = null;
    a.$useMipMaps1 = 0;
    a.$isPrepared0 = 0;
}
let cbggg_FileTextureData_copyToPOT = 0,
cbggg_FileTextureData_isPrepared = $this => {
    return $this.$isPrepared0;
},
cbggg_FileTextureData_prepare = $this => {
    let var$1;
    if ($this.$isPrepared0) {
        var$1 = new cbgu_GdxRuntimeException;
        jl_Throwable__init_(var$1, $rt_s(1376));
        $rt_throw(var$1);
    }
    if ($this.$pixmap === null) {
        var$1 = cbggg_FileTextureData_ensurePot($this, cbgg_Pixmap__init_0($this.$file0));
        $this.$pixmap = var$1;
        $this.$width3 = cbgg_Pixmap_getWidth(var$1);
        $this.$height3 = cbgg_Pixmap_getHeight($this.$pixmap);
        if ($this.$format === null)
            $this.$format = cbgg_Pixmap_getFormat($this.$pixmap);
    }
    $this.$isPrepared0 = 1;
},
cbggg_FileTextureData_ensurePot = ($this, $pixmap) => {
    let $pixmapWidth, $pixmapHeight, $potWidth, $potHeight, $tmp_0;
    a: {
        if (cbg_Gdx_gl20 === null && cbggg_FileTextureData_copyToPOT) {
            $pixmapWidth = cbgg_Pixmap_getWidth($pixmap);
            $pixmapHeight = cbgg_Pixmap_getHeight($pixmap);
            $potWidth = cbgm_MathUtils_nextPowerOfTwo($pixmapWidth);
            $potHeight = cbgm_MathUtils_nextPowerOfTwo($pixmapHeight);
            if ($pixmapWidth != $potWidth)
                break a;
            if ($pixmapHeight != $potHeight)
                break a;
        }
        return $pixmap;
    }
    $tmp_0 = cbgg_Pixmap__init_($potWidth, $potHeight, cbgg_Pixmap_getFormat($pixmap));
    cbgg_Pixmap_drawPixmap($tmp_0, $pixmap, 0, 0, 0, 0, $pixmapWidth, $pixmapHeight);
    cbgg_Pixmap_dispose($pixmap);
    return $tmp_0;
},
cbggg_FileTextureData_consumePixmap = $this => {
    let $pixmap, var$2;
    if ($this.$isPrepared0) {
        $this.$isPrepared0 = 0;
        $pixmap = $this.$pixmap;
        $this.$pixmap = null;
        return $pixmap;
    }
    var$2 = new cbgu_GdxRuntimeException;
    jl_Throwable__init_(var$2, $rt_s(1377));
    $rt_throw(var$2);
},
cbggg_FileTextureData_disposePixmap = $this => {
    return 1;
},
cbggg_FileTextureData_getWidth = $this => {
    return $this.$width3;
},
cbggg_FileTextureData_getHeight = $this => {
    return $this.$height3;
},
cbggg_FileTextureData_getFormat = $this => {
    return $this.$format;
},
cbggg_FileTextureData_useMipMaps = $this => {
    return $this.$useMipMaps1;
},
cbggg_FileTextureData_isManaged = $this => {
    return 1;
},
cbggg_FileTextureData_getType = $this => {
    return cbgg_TextureData$TextureDataType_Pixmap;
},
cbggg_FileTextureData_consumeCustomData = ($this, $target) => {
    let var$2;
    var$2 = new cbgu_GdxRuntimeException;
    jl_Throwable__init_(var$2, $rt_s(718));
    $rt_throw(var$2);
},
otjt_Uint8Array = $rt_classWithoutFields(otjt_TypedArray),
otjt_Uint16Array = $rt_classWithoutFields(otjt_TypedArray),
otcit_FloatSynthesizer = $rt_classWithoutFields(),
otcit_FloatSynthesizer_mantissa10Table = null,
otcit_FloatSynthesizer_exp10Table = null,
otcit_FloatSynthesizer_synthesizeFloat = ($mantissa, $exp, $negative) => {
    let $indexInTable, var$5, $binMantissa, $binExp, $binMantissaShift, $iee754;
    $indexInTable = 50 + $exp | 0;
    if ($mantissa && $indexInTable >= 0) {
        var$5 = otcit_FloatSynthesizer_mantissa10Table.data;
        if ($indexInTable >= var$5.length)
            return !$negative ? Infinity : (-Infinity);
        $binMantissa = otcit_FloatAnalyzer_mulAndShiftRight($mantissa, var$5[$indexInTable], 0);
        $binExp = otcit_FloatSynthesizer_exp10Table.data[$indexInTable] - 1 | 0;
        $binMantissaShift = (32 - jl_Integer_numberOfLeadingZeros($binMantissa) | 0) - 30 | 0;
        $mantissa = $binMantissaShift >= 0 ? $binMantissa >>> $binMantissaShift | 0 : $binMantissa << ( -$binMantissaShift | 0);
        $exp = $binExp + $binMantissaShift | 0;
        if ($exp >= 255)
            return !$negative ? Infinity : (-Infinity);
        $mantissa = $mantissa + 32 | 0;
        if ($mantissa & (-1073741824)) {
            $mantissa = $mantissa >>> 1 | 0;
            $exp = $exp + 1 | 0;
        }
        if ($exp <= 0) {
            $mantissa = $mantissa >> jl_Math_min(( -$exp | 0) + 1 | 0, 32);
            $exp = 0;
        }
        $iee754 = ($mantissa >>> 6 | 0) & 8388607 | $exp << 23;
        if ($negative)
            $iee754 = $iee754 ^ (-2147483648);
        return $rt_intBitsToFloat($iee754);
    }
    return $rt_intBitsToFloat(!$negative ? 0 : (-2147483648));
},
otcit_FloatSynthesizer__clinit_ = () => {
    otcit_FloatSynthesizer_mantissa10Table = $rt_createIntArrayFromData([(-1598972629), (-924973963), (-82475629), (-1662160004), (-1003958181), (-181205903), (-1723866425), (-1081091207), (-277622185), (-1784126602), (-1156416428), (-371778711), (-1842974431), (-1229976214), (-463728444), (-1900443013), (-1301811943), (-553523104), (-1956564676), (-1371964021), (-641213203), (-2011370988), (-1440471911), (-726848064), (-2064892776), (-1507374146), (-810475859), (-2117160148), (-1572708361), (-892143627), (-41437709),
    (-1636511304), (-971897307), (-141129809), (-1698818867), (-1049781759), (-238485375), (-1759666096), (-1125840795), (-333559170), (-1819087217), (-1200117198), (-426404673), (-1877115657), (-1272652747), (-517074110), (-1933784055), (-1343488244), (-605618481), (-1989124287), (-1412663534), (-692087594), (-2043167482), (-1480217529), (-776530087), (-2095944040), (-1546188227), (-858993459), (-2147483648), (-1610612736), (-939524096), (-100663296), (-1673527296), (-1018167296), (-198967296), (-1734967296),
    (-1094967296), (-294967296), (-1794967296), (-1169967296), (-388717296), (-1853561046), (-1243209483), (-480270030), (-1910781505), (-1314735057), (-569676998), (-1966660859), (-1384584250), (-656988489), (-2021230542), (-1452796353), (-742253617), (-2074521247), (-1519409734), (-825520344), (-2126562951), (-1584461865), (-906835507), (-59802560), (-1647989336), (-986244846), (-159064233), (-1710027882), (-1063793028), (-255999461), (-1770612399), (-1139523675), (-350662770), (-1829776967)]);
    otcit_FloatSynthesizer_exp10Table = $rt_createIntArrayFromData([(-35), (-32), (-29), (-25), (-22), (-19), (-15), (-12), (-9), (-5), (-2), 1, 5, 8, 11, 15, 18, 21, 25, 28, 31, 35, 38, 41, 45, 48, 51, 55, 58, 61, 64, 68, 71, 74, 78, 81, 84, 88, 91, 94, 98, 101, 104, 108, 111, 114, 118, 121, 124, 128, 131, 134, 138, 141, 144, 148, 151, 154, 158, 161, 164, 167, 171, 174, 177, 181, 184, 187, 191, 194, 197, 201, 204, 207, 211, 214, 217, 221, 224, 227, 231, 234, 237, 241, 244, 247, 251, 254, 257, 260, 264, 267,
    270, 274, 277, 280, 284, 287, 290, 294]);
};
function otjde_Registration() {
    let a = this; jl_Object.call(a);
    a.$target1 = null;
    a.$type7 = null;
    a.$listener0 = null;
    a.$useCapture = null;
}
function cbgu_ObjectIntMap$MapIterator() {
    let a = this; jl_Object.call(a);
    a.$hasNext0 = 0;
    a.$map = null;
    a.$nextIndex0 = 0;
    a.$currentIndex = 0;
    a.$valid0 = 0;
}
let cbgu_ObjectIntMap$MapIterator_findNextIndex = $this => {
    let $keyTable, $n, var$3;
    $keyTable = $this.$map.$keyTable.data;
    $n = $keyTable.length;
    while (true) {
        var$3 = $this.$nextIndex0 + 1 | 0;
        $this.$nextIndex0 = var$3;
        if (var$3 >= $n)
            break;
        if ($keyTable[var$3] === null)
            continue;
        else {
            $this.$hasNext0 = 1;
            return;
        }
    }
    $this.$hasNext0 = 0;
},
cbgu_ObjectIntMap$Keys = $rt_classWithoutFields(cbgu_ObjectIntMap$MapIterator),
cbgu_ObjectIntMap$Keys__init_0 = ($this, $map) => {
    $this.$valid0 = 1;
    $this.$map = $map;
    cbgu_ObjectIntMap$Keys_reset($this);
},
cbgu_ObjectIntMap$Keys__init_ = var_0 => {
    let var_1 = new cbgu_ObjectIntMap$Keys();
    cbgu_ObjectIntMap$Keys__init_0(var_1, var_0);
    return var_1;
},
cbgu_ObjectIntMap$Keys_toArray = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    var$1 = cbgu_Array__init_0(1, $this.$map.$size11);
    var$2 = $this;
    while (true) {
        var$3 = $this.$hasNext0;
        if (!var$3)
            break;
        if (!var$3) {
            var$1 = new ju_NoSuchElementException;
            jl_Exception__init_(var$1);
            $rt_throw(var$1);
        }
        if (!$this.$valid0) {
            var$4 = new cbgu_GdxRuntimeException;
            jl_Throwable__init_(var$4, $rt_s(433));
            $rt_throw(var$4);
        }
        var$5 = $this.$map.$keyTable.data;
        var$3 = $this.$nextIndex0;
        var$4 = var$5[var$3];
        $this.$currentIndex = var$3;
        cbgu_ObjectIntMap$MapIterator_findNextIndex(var$2);
        cbgu_Array_add(var$1, var$4);
    }
    return var$1;
},
cbgu_ObjectIntMap$Keys_reset = $this => {
    $this.$currentIndex = (-1);
    $this.$nextIndex0 = (-1);
    cbgu_ObjectIntMap$MapIterator_findNextIndex($this);
},
cgxgbt_TeaFileHandle$1 = $rt_classWithoutFields(),
cgxgbt_TeaFileHandle$1_$SwitchMap$com$badlogic$gdx$Files$FileType = null,
cgxgbt_TeaFileHandle$1_$callClinit = () => {
    cgxgbt_TeaFileHandle$1_$callClinit = $rt_eraseClinit(cgxgbt_TeaFileHandle$1);
    cgxgbt_TeaFileHandle$1__clinit_();
},
cgxgbt_TeaFileHandle$1__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((cbg_Files$FileType_values()).data.length);
    var$2 = var$1.data;
    cgxgbt_TeaFileHandle$1_$SwitchMap$com$badlogic$gdx$Files$FileType = var$1;
    var$2[cbg_Files$FileType_Internal.$ordinal0] = 1;
    var$2[cbg_Files$FileType_Classpath.$ordinal0] = 2;
};
function cgtt_Font$FontFamily() {
    let a = this; jl_Object.call(a);
    a.$connected = null;
    a.$fontAliases = null;
}
function cgxgbta_TeaBlob() {
    let a = this; jl_Object.call(a);
    a.$response = null;
    a.$data11 = null;
}
let ji_IOException = $rt_classWithoutFields(jl_Exception),
cbgu_StreamUtils = $rt_classWithoutFields(),
cbgu_StreamUtils_EMPTY_BYTES = null,
cbgu_StreamUtils_copyStreamToByteArray = ($input, $estimatedSize) => {
    let $baos, var$4, var$5, var$6;
    $baos = new cbgu_StreamUtils$OptimizedByteArrayOutputStream;
    ji_ByteArrayOutputStream__init_($baos, jl_Math_max(0, $estimatedSize));
    var$4 = $rt_createByteArray(4096);
    $estimatedSize = var$4.data.length;
    var$5 = $input;
    $input = $baos;
    while (true) {
        var$6 = ji_ByteArrayInputStream_read(var$5, var$4, 0, $estimatedSize);
        if (var$6 == (-1))
            break;
        ji_ByteArrayOutputStream_write($input, var$4, 0, var$6);
    }
    return cbgu_StreamUtils$OptimizedByteArrayOutputStream_toByteArray($baos);
},
cbgu_StreamUtils_closeQuietly = $c => {
    let $$je;
    a: {
        if ($c !== null)
            try {
                $c.$close();
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Throwable) {
                } else {
                    throw $$e;
                }
            }
    }
},
cbgu_StreamUtils__clinit_ = () => {
    cbgu_StreamUtils_EMPTY_BYTES = $rt_createByteArray(0);
},
jl_Readable = $rt_classWithoutFields(0);
function ji_Reader() {
    jl_Object.call(this);
    this.$lock = null;
}
let ji_Reader__init_ = $this => {
    $this.$lock = new jl_Object;
},
ji_Reader_read = ($this, $cbuf) => {
    let var$2;
    var$2 = $cbuf.data.length;
    return ji_InputStreamReader_read($this, $cbuf, 0, var$2);
};
function ji_BufferedReader() {
    let a = this; ji_Reader.call(a);
    a.$innerReader = null;
    a.$buffer6 = null;
    a.$index1 = 0;
    a.$count2 = 0;
    a.$eof = 0;
    a.$mark0 = 0;
}
let ji_BufferedReader__init_ = ($this, $innerReader, $size) => {
    ji_Reader__init_($this);
    $this.$mark0 = (-1);
    if ($size < 0) {
        $innerReader = new jl_IllegalArgumentException;
        jl_Exception__init_($innerReader);
        $rt_throw($innerReader);
    }
    $this.$innerReader = $innerReader;
    $this.$buffer6 = $rt_createCharArray(jl_Math_max(64, $size));
},
ji_BufferedReader__init_0 = (var_0, var_1) => {
    let var_2 = new ji_BufferedReader();
    ji_BufferedReader__init_(var_2, var_0, var_1);
    return var_2;
},
ji_BufferedReader_close = $this => {
    ji_BufferedReader_requireOpened($this);
    $this.$innerReader = null;
},
ji_BufferedReader_readLine = $this => {
    let $line, var$2, $ch, var$4;
    ji_BufferedReader_requireOpened($this);
    if ($this.$eof && $this.$index1 >= $this.$count2)
        return null;
    $line = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($line);
    a: {
        b: {
            while (true) {
                var$2 = $this.$index1;
                $ch = $this.$count2;
                if (var$2 >= $ch && !ji_BufferedReader_fillBuffer($this, 0, $ch - var$2 | 0)) {
                    if (!($line.$length2 ? 0 : 1))
                        break a;
                    return null;
                }
                var$4 = $this.$buffer6.data;
                $ch = $this.$index1;
                var$2 = $ch + 1 | 0;
                $this.$index1 = var$2;
                $ch = var$4[$ch];
                if ($ch == 10)
                    break;
                if ($ch == 13)
                    break b;
                jl_AbstractStringBuilder_append0($line, $ch);
            }
            break a;
        }
        $ch = $this.$count2;
        if (!(var$2 >= $ch && !ji_BufferedReader_fillBuffer($this, 0, $ch - var$2 | 0))) {
            var$4 = $this.$buffer6.data;
            var$2 = $this.$index1;
            if (var$4[var$2] == 10)
                $this.$index1 = var$2 + 1 | 0;
        }
    }
    return jl_AbstractStringBuilder_toString($line);
},
ji_BufferedReader_fillBuffer = ($this, $offset, $readLimit) => {
    let $totalRead, var$4, var$5, $charsRead;
    if ($this.$eof)
        return 0;
    $readLimit = jl_Math_min($readLimit, $this.$buffer6.data.length - $this.$index1 | 0);
    $totalRead = 0;
    a: {
        b: while (true) {
            var$4 = $this.$innerReader;
            var$5 = $this.$buffer6;
            $charsRead = var$5.data.length - $offset | 0;
            $charsRead = ji_InputStreamReader_read(var$4, var$5, $offset, $charsRead);
            if ($charsRead == (-1)) {
                $this.$eof = 1;
                break a;
            }
            c: {
                $offset = $offset + $charsRead | 0;
                $totalRead = $totalRead + $charsRead | 0;
                if ($offset < $readLimit) {
                    var$4 = $this.$innerReader;
                    if (!jn_Buffer_hasRemaining(var$4.$outBuffer) && !jn_Buffer_hasRemaining(var$4.$inBuffer) && ji_ByteArrayInputStream_available(var$4.$stream) <= 0 ? 0 : 1)
                        break c;
                }
                if ($totalRead > 0)
                    break b;
            }
        }
    }
    $this.$count2 = $offset;
    $this.$index1 = 0;
    $this.$mark0 = (-1);
    return $totalRead <= 0 ? 0 : 1;
},
ji_BufferedReader_requireOpened = $this => {
    let var$1;
    if ($this.$innerReader !== null)
        return;
    var$1 = new ji_IOException;
    jl_Exception__init_(var$1);
    $rt_throw(var$1);
};
function ji_InputStreamReader() {
    let a = this; ji_Reader.call(a);
    a.$stream = null;
    a.$decoder = null;
    a.$inData = null;
    a.$inBuffer = null;
    a.$outData = null;
    a.$outBuffer = null;
    a.$streamEof = 0;
    a.$eof0 = 0;
}
let ji_InputStreamReader__init_1 = ($this, $in, $charsetName) => {
    let var$3, $$je;
    a: {
        try {
            var$3 = jnc_Charset_forName(jl_String_toString($charsetName));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jnc_UnsupportedCharsetException) {
                break a;
            } else {
                throw $$e;
            }
        }
        ji_InputStreamReader__init_($this, $in, var$3);
        return;
    }
    $in = new ji_UnsupportedEncodingException;
    jl_Throwable__init_($in, $charsetName);
    $rt_throw($in);
},
ji_InputStreamReader__init_3 = (var_0, var_1) => {
    let var_2 = new ji_InputStreamReader();
    ji_InputStreamReader__init_1(var_2, var_0, var_1);
    return var_2;
},
ji_InputStreamReader__init_ = ($this, $in, $charset) => {
    let var$3, var$4;
    $charset = jnc_CharsetDecoder_onUnmappableCharacter(jnc_CharsetDecoder_onMalformedInput($charset.$newDecoder(), jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE);
    ji_Reader__init_($this);
    var$3 = $rt_createByteArray(8192);
    $this.$inData = var$3;
    $this.$inBuffer = jn_ByteBuffer_wrap(var$3);
    var$3 = $rt_createCharArray(1024);
    $this.$outData = var$3;
    var$4 = jn_CharBuffer_wrap(var$3);
    $this.$outBuffer = var$4;
    $this.$stream = $in;
    $this.$decoder = $charset;
    jn_Buffer_position(var$4, var$4.$limit0);
    $in = $this.$inBuffer;
    jn_Buffer_position($in, $in.$limit0);
},
ji_InputStreamReader__init_4 = (var_0, var_1) => {
    let var_2 = new ji_InputStreamReader();
    ji_InputStreamReader__init_(var_2, var_0, var_1);
    return var_2;
},
ji_InputStreamReader__init_0 = ($this, $in) => {
    jnci_UTF8Charset_$callClinit();
    ji_InputStreamReader__init_($this, $in, jnci_UTF8Charset_INSTANCE);
},
ji_InputStreamReader__init_2 = var_0 => {
    let var_1 = new ji_InputStreamReader();
    ji_InputStreamReader__init_0(var_1, var_0);
    return var_1;
},
ji_InputStreamReader_close = $this => {
    return;
},
ji_InputStreamReader_read = ($this, $cbuf, $off, $len) => {
    let $bytesRead, $sz;
    a: {
        if (jn_Buffer_hasRemaining($this.$outBuffer)) {
            if ($len)
                break a;
            return 0;
        }
        if ($this.$eof0)
            return (-1);
        if (!$len)
            return 0;
        ji_InputStreamReader_ensureBufferHasData($this, 1);
    }
    $bytesRead = 0;
    while (true) {
        $sz = jl_Math_min($len, jn_Buffer_remaining($this.$outBuffer));
        jn_CharBuffer_get($this.$outBuffer, $cbuf, $off + $bytesRead | 0, $sz);
        $len = $len - $sz | 0;
        $bytesRead = $bytesRead + $sz | 0;
        if ($len <= 0)
            break;
        if (!ji_InputStreamReader_ensureBufferHasData($this, 0))
            break;
    }
    return $bytesRead;
},
ji_InputStreamReader_ensureBufferHasData = ($this, $force) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    if (jn_Buffer_hasRemaining($this.$outBuffer))
        return 1;
    if ($this.$eof0)
        $force = 0;
    else {
        var$2 = $this.$outBuffer;
        if (jn_CharBufferImpl_isReadOnly(var$2)) {
            var$2 = new jn_ReadOnlyBufferException;
            jl_Exception__init_(var$2);
            $rt_throw(var$2);
        }
        a: {
            var$3 = jn_Buffer_remaining(var$2);
            var$4 = var$2.$position0;
            if (var$4 > 0) {
                var$5 = 0;
                var$6 = var$2;
                while (true) {
                    if (var$5 >= var$3)
                        break a;
                    var$7 = var$4 + 1 | 0;
                    var$4 = var$6.$data3[var$4] & 65535;
                    var$6.$data3[var$5] = var$4;
                    var$5 = var$5 + 1 | 0;
                    var$4 = var$7;
                }
            }
        }
        var$2.$position0 = var$3;
        var$2.$limit0 = var$2.$capacityImpl();
        var$2.$mark = (-1);
        var$7 = $force ? 0 : 1;
        $force = 1;
        var$8 = 0;
        b: {
            while (true) {
                if (jn_Buffer_hasRemaining($this.$inBuffer)) {
                    var$2 = $this.$outBuffer;
                    var$4 = var$2.$position0;
                    var$2 = jnc_CharsetDecoder_decode($this.$decoder, $this.$inBuffer, var$2, $this.$streamEof);
                    var$8 = 1;
                    var$7 = var$7 | ($this.$outBuffer.$position0 <= var$4 ? 0 : 1);
                    if (jnc_CoderResult_isOverflow(var$2))
                        break b;
                    if (!jnc_CoderResult_isUnderflow(var$2))
                        continue;
                }
                if (ji_ByteArrayInputStream_available($this.$stream) <= 0 && var$7) {
                    $force = 0;
                    break b;
                }
                if ($this.$streamEof)
                    var$3 = 0;
                else {
                    var$2 = $this.$inBuffer;
                    if (var$2.$readOnly0)
                        break;
                    var$3 = jn_Buffer_remaining(var$2);
                    if (var$2.$position0 > 0) {
                        var$6 = var$2.$data0;
                        var$6.set(new Int8Array(var$6.buffer, var$2.$data0.byteOffset + var$2.$position0 | 0, var$3), 0);
                    }
                    var$2.$position0 = var$3;
                    var$2.$limit0 = var$2.$capacityImpl();
                    var$2.$mark = (-1);
                    c: {
                        while (true) {
                            if (!jn_Buffer_hasRemaining($this.$inBuffer))
                                break c;
                            var$2 = $this.$stream;
                            var$9 = jn_ByteBuffer_array($this.$inBuffer);
                            var$6 = $this.$inBuffer;
                            var$4 = var$6.$position0;
                            var$3 = jn_Buffer_remaining(var$6);
                            var$3 = ji_ByteArrayInputStream_read(var$2, var$9, var$4, var$3);
                            if (var$3 == (-1))
                                break;
                            if (var$3 > 0) {
                                var$2 = $this.$inBuffer;
                                jn_Buffer_position(var$2, var$2.$position0 + var$3 | 0);
                                break c;
                            }
                        }
                        $this.$streamEof = 1;
                    }
                    jn_Buffer_flip($this.$inBuffer);
                    var$3 = 1;
                }
                if (!var$3)
                    break b;
            }
            var$2 = new jn_ReadOnlyBufferException;
            jl_Exception__init_(var$2);
            $rt_throw(var$2);
        }
        if (!jn_Buffer_hasRemaining($this.$inBuffer) && $this.$streamEof && !(var$8 && !jnc_CoderResult_isUnderflow(jnc_CharsetDecoder_flush($this.$decoder, $this.$outBuffer))))
            $this.$eof0 = 1;
        jn_Buffer_flip($this.$outBuffer);
    }
    return $force;
};
function ji_File() {
    jl_Object.call(this);
    this.$path1 = null;
}
let ji_File_separatorChar = 0,
ji_File_separator = null,
ji_File_pathSeparatorChar = 0,
ji_File_pathSeparator = null,
ji_File_$callClinit = () => {
    ji_File_$callClinit = $rt_eraseClinit(ji_File);
    ji_File__clinit_();
},
ji_File_fs = () => {
    let var$1, var$2, var$3;
    ji_File_$callClinit();
    if (otrf_VirtualFileSystemProvider_instance === null) {
        var$1 = new otrfm_InMemoryVirtualFileSystem;
        var$2 = new otrfm_InMemoryVirtualDirectory;
        var$2.$lastModified = jl_System_currentTimeMillis();
        var$2.$name4 = $rt_s(24);
        var$3 = new ju_LinkedHashMap;
        ju_HashMap__init_1(var$3);
        var$3.$accessOrder = 0;
        var$3.$head = null;
        var$2.$children0 = var$3;
        var$1.$root1 = var$2;
        var$1.$userDir = $rt_s(94);
        otrf_VirtualFileSystemProvider_instance = var$1;
    }
    return otrf_VirtualFileSystemProvider_instance;
},
ji_File_fixSlashes = $origPath => {
    let $length, $newLength, $foundSlash, $newPath, $i, var$7, $pathChar, var$9;
    ji_File_$callClinit();
    $length = $origPath.$nativeString.length;
    $newLength = 0;
    ji_File_fs();
    $foundSlash = 0;
    $newPath = jl_String_toCharArray($origPath);
    $i = 0;
    while ($i < $length) {
        var$7 = $newPath.data;
        $pathChar = var$7[$i];
        if ($pathChar != 47 && $pathChar != ji_File_separatorChar) {
            var$9 = $newLength + 1 | 0;
            var$7[$newLength] = $pathChar;
            $foundSlash = 0;
        } else if ($foundSlash && $i)
            var$9 = $newLength;
        else {
            var$9 = $newLength + 1 | 0;
            var$7[$newLength] = ji_File_separatorChar;
            $foundSlash = 1;
        }
        $i = $i + 1 | 0;
        $newLength = var$9;
    }
    if ($foundSlash && !($newLength <= 1 && $newPath.data[0] == 47))
        $newLength = $newLength + (-1) | 0;
    return jl_String__init_($newPath, 0, $newLength);
},
ji_File__clinit_ = () => {
    ji_File_fs();
    ji_File_separatorChar = 47;
    ji_File_separator = jl_String_valueOf1(47);
    ji_File_fs();
    ji_File_pathSeparatorChar = 58;
    ji_File_pathSeparator = jl_String_valueOf1(58);
},
cbgu_Align = $rt_classWithoutFields(),
cbgu_Align_isLeft = $align => {
    return !($align & 8) ? 0 : 1;
},
cbgu_Align_isRight = $align => {
    return !($align & 16) ? 0 : 1;
},
cbgu_Align_isTop = $align => {
    return !($align & 2) ? 0 : 1;
},
cbgu_Align_isBottom = $align => {
    return !($align & 4) ? 0 : 1;
},
cbgu_Align_isCenterVertical = $align => {
    return !($align & 2) && !($align & 4) ? 1 : 0;
},
cbgu_Align_isCenterHorizontal = $align => {
    return !($align & 8) && !($align & 16) ? 1 : 0;
},
cbgssu_Drawable = $rt_classWithoutFields(0),
cbgssu_TransformDrawable = $rt_classWithoutFields(0),
cgttu_ColorUtils = $rt_classWithoutFields(),
cgttu_ColorUtils_mixing = null,
cgttu_ColorUtils_nonTermPattern = null,
cgttu_ColorUtils_nonTermMatcher = null,
cgttu_ColorUtils_lightness = 0.0,
cgttu_ColorUtils_saturation = 0.0,
cgttu_ColorUtils_$callClinit = () => {
    cgttu_ColorUtils_$callClinit = $rt_eraseClinit(cgttu_ColorUtils);
    cgttu_ColorUtils__clinit_();
},
cgttu_ColorUtils_hsl2rgb = ($h, $s, $l, $a) => {
    let $hue, $x, $y, $z, $v, $d;
    cgttu_ColorUtils_$callClinit();
    $hue = $h - cbgm_MathUtils_floor($h);
    $x = jl_Math_min0(jl_Math_max0(jl_Math_abs($hue * 6.0 - 3.0) - 1.0, 0.0), 1.0);
    $y = $hue + 0.6666666865348816;
    $z = $hue + 0.3333333432674408;
    $h = $y - ($y | 0);
    $v = $z - ($z | 0);
    $h = jl_Math_min0(jl_Math_max0(jl_Math_abs($h * 6.0 - 3.0) - 1.0, 0.0), 1.0);
    $hue = jl_Math_min0(jl_Math_max0(jl_Math_abs($v * 6.0 - 3.0) - 1.0, 0.0), 1.0);
    $v = $l + $s * jl_Math_min0($l, 1.0 - $l);
    $d = 2.0 * (1.0 - $l / ($v + 1.000000013351432E-10));
    return cbgg_Color_rgba8888($v * cbgm_MathUtils_lerp(1.0, $x, $d), $v * cbgm_MathUtils_lerp(1.0, $h, $d), $v * cbgm_MathUtils_lerp(1.0, $hue, $d), $a);
},
cgttu_ColorUtils_lerpColors = ($s, $e, $change) => {
    let $sA, $sB, $sG, $sR;
    cgttu_ColorUtils_$callClinit();
    $sA = $s & 254;
    $sB = ($s >>> 8 | 0) & 255;
    $sG = ($s >>> 16 | 0) & 255;
    $sR = ($s >>> 24 | 0) & 255;
    return (($sR + $change * ((($e >>> 24 | 0) & 255) - $sR | 0) | 0) & 255) << 24 | (($sG + $change * ((($e >>> 16 | 0) & 255) - $sG | 0) | 0) & 255) << 16 | (($sB + $change * ((($e >>> 8 | 0) & 255) - $sB | 0) | 0) & 255) << 8 | ($sA + $change * (($e & 254) - $sA | 0) | 0) & 254;
},
cgttu_ColorUtils_lighten = ($start, $change) => {
    let $r, $g, $b;
    cgttu_ColorUtils_$callClinit();
    $r = $start >>> 24 | 0;
    $g = ($start >>> 16 | 0) & 255;
    $b = ($start >>> 8 | 0) & 255;
    return (($r + (255 - $r | 0) * $change | 0) & 255) << 24 | (($g + (255 - $g | 0) * $change | 0) & 255) << 16 | (($b + (255 - $b | 0) * $change | 0) & 255) << 8 | $start & 254;
},
cgttu_ColorUtils_darken = ($start, $change) => {
    let $r, $g, $b, $a, $ch;
    cgttu_ColorUtils_$callClinit();
    $r = $start >>> 24 | 0;
    $g = ($start >>> 16 | 0) & 255;
    $b = ($start >>> 8 | 0) & 255;
    $a = $start & 254;
    $ch = 1.0 - $change;
    return (($r * $ch | 0) & 255) << 24 | (($g * $ch | 0) & 255) << 16 | (($b * $ch | 0) & 255) << 8 | $a;
},
cgttu_ColorUtils_offsetLightness = ($color, $power) => {
    cgttu_ColorUtils_$callClinit();
    if ((((($color >>> 24 | 0) * 3 | 0) + (($color >>> 14 | 0) & 1020) | 0) + (($color >>> 8 | 0) & 255) | 0) >= 808)
        return cgttu_ColorUtils_darken($color, $power);
    return cgttu_ColorUtils_lighten($color, $power);
},
cgttu_ColorUtils_multiplyAlpha = ($color, $multiplier) => {
    let $bits;
    cgttu_ColorUtils_$callClinit();
    $bits = jl_Float_floatToIntBits($color);
    return cbgu_NumberUtils_intBitsToFloat($bits & 16777215 | jl_Math_min(jl_Math_max(($bits >>> 25 | 0) * $multiplier | 0, 0), 127) << 25);
},
cgttu_ColorUtils_process = $term => {
    let $len, var$3, var$4;
    cgttu_ColorUtils_$callClinit();
    if ($term !== null && !jl_String_isEmpty($term)) {
        a: {
            b: {
                $len = jl_String_length($term);
                switch (jl_String_charAt($term, 0)) {
                    case 48:
                    case 49:
                    case 50:
                    case 51:
                    case 52:
                    case 53:
                    case 54:
                    case 55:
                    case 56:
                    case 57:
                        var$3 = cgttu_ColorUtils_mixing;
                        $len = var$3.$size2;
                        if ($len < 2)
                            break a;
                        cbgu_IntArray_set(var$3, ($len & (-2)) - 1 | 0, cgttu_StringUtils_intFromDec($term, 0, jl_String_length($term)));
                        break a;
                    case 58:
                    case 59:
                    case 60:
                    case 61:
                    case 62:
                    case 63:
                    case 64:
                    case 65:
                    case 67:
                    case 69:
                    case 70:
                    case 71:
                    case 72:
                    case 73:
                    case 74:
                    case 75:
                    case 77:
                    case 78:
                    case 79:
                    case 81:
                    case 83:
                    case 84:
                    case 85:
                    case 86:
                    case 88:
                    case 89:
                    case 90:
                    case 91:
                    case 92:
                    case 93:
                    case 94:
                    case 95:
                    case 96:
                    case 97:
                    case 99:
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 106:
                    case 107:
                    case 109:
                    case 110:
                    case 111:
                    case 113:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                        break;
                    case 66:
                    case 98:
                        c: {
                            if ($len > 3) {
                                if (jl_String_charAt($term, 3) == 103)
                                    break c;
                                if (jl_String_charAt($term, 3) == 71)
                                    break c;
                            }
                            var$3 = cgttu_ColorUtils_mixing;
                            cgttu_Palette_$callClinit();
                            cbgu_IntArray_add0(var$3, cbgu_ObjectIntMap_get(cgttu_Palette_NAMED, $term, 256), 1);
                            break a;
                        }
                        d: {
                            e: {
                                f: {
                                    g: {
                                        switch ($len) {
                                            case 6:
                                                break e;
                                            case 7:
                                                break d;
                                            case 8:
                                                break f;
                                            case 9:
                                                break g;
                                            case 10:
                                                break;
                                            default:
                                                break d;
                                        }
                                        cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
                                        cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                                    }
                                    cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
                                    cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                                }
                                cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
                                cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                            }
                            cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
                            cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                        }
                        break a;
                    case 68:
                    case 100:
                        var$4 = $rt_compare($len, 1);
                        if (var$4 > 0 && !(jl_String_charAt($term, 1) != 97 && jl_String_charAt($term, 1) != 65)) {
                            h: {
                                i: {
                                    j: {
                                        k: {
                                            switch ($len) {
                                                case 4:
                                                    break i;
                                                case 5:
                                                    break h;
                                                case 6:
                                                    break j;
                                                case 7:
                                                    break k;
                                                case 8:
                                                    break;
                                                default:
                                                    break h;
                                            }
                                            cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                                        }
                                        cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                                    }
                                    cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                                }
                                cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                            }
                            break a;
                        }
                        if (var$4 > 0 && !(jl_String_charAt($term, 1) != 117 && jl_String_charAt($term, 1) != 85)) {
                            l: {
                                m: {
                                    n: {
                                        o: {
                                            switch ($len) {
                                                case 4:
                                                    break m;
                                                case 5:
                                                    break l;
                                                case 6:
                                                    break n;
                                                case 7:
                                                    break o;
                                                case 8:
                                                    break;
                                                default:
                                                    break l;
                                            }
                                            cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                                        }
                                        cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                                    }
                                    cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                                }
                                cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                            }
                            break a;
                        }
                        p: {
                            if ($len > 3) {
                                if (jl_String_charAt($term, 3) == 112)
                                    break p;
                                if (jl_String_charAt($term, 3) == 80)
                                    break p;
                            }
                            var$3 = cgttu_ColorUtils_mixing;
                            cgttu_Palette_$callClinit();
                            cbgu_IntArray_add0(var$3, cbgu_ObjectIntMap_get(cgttu_Palette_NAMED, $term, 256), 1);
                            break a;
                        }
                        q: {
                            r: {
                                s: {
                                    t: {
                                        switch ($len) {
                                            case 4:
                                                break r;
                                            case 5:
                                                break q;
                                            case 6:
                                                break s;
                                            case 7:
                                                break t;
                                            case 8:
                                                break;
                                            default:
                                                break q;
                                        }
                                        cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                                        cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                                    }
                                    cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                                    cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                                }
                                cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                                cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                            }
                            cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                            cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                        }
                        break a;
                    case 76:
                    case 108:
                        break b;
                    case 80:
                    case 112:
                        u: {
                            if ($len > 2) {
                                if (jl_String_charAt($term, 2) == 108)
                                    break u;
                                if (jl_String_charAt($term, 2) == 76)
                                    break u;
                            }
                            var$3 = cgttu_ColorUtils_mixing;
                            cgttu_Palette_$callClinit();
                            cbgu_IntArray_add0(var$3, cbgu_ObjectIntMap_get(cgttu_Palette_NAMED, $term, 256), 1);
                            break a;
                        }
                        v: {
                            w: {
                                x: {
                                    y: {
                                        switch ($len) {
                                            case 4:
                                                break w;
                                            case 5:
                                                break x;
                                            case 6:
                                                break y;
                                            case 7:
                                            case 8:
                                                break;
                                            default:
                                                break v;
                                        }
                                        cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
                                        cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                                    }
                                    cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
                                    cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                                }
                                cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
                                cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                            }
                            cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
                            cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                        }
                        break a;
                    case 82:
                    case 114:
                        z: {
                            if ($len > 1) {
                                if (jl_String_charAt($term, 1) == 105)
                                    break z;
                                if (jl_String_charAt($term, 1) == 73)
                                    break z;
                            }
                            var$3 = cgttu_ColorUtils_mixing;
                            cgttu_Palette_$callClinit();
                            cbgu_IntArray_add0(var$3, cbgu_ObjectIntMap_get(cgttu_Palette_NAMED, $term, 256), 1);
                            break a;
                        }
                        ba: {
                            bb: {
                                bc: {
                                    bd: {
                                        switch ($len) {
                                            case 4:
                                                break bb;
                                            case 5:
                                                break ba;
                                            case 6:
                                                break bc;
                                            case 7:
                                                break bd;
                                            case 8:
                                                break;
                                            default:
                                                break ba;
                                        }
                                        cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                                    }
                                    cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                                }
                                cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                            }
                            cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation + 0.20000000298023224;
                        }
                        break a;
                    case 87:
                    case 119:
                        be: {
                            if ($len > 3) {
                                if (jl_String_charAt($term, 3) == 107)
                                    break be;
                                if (jl_String_charAt($term, 3) == 75)
                                    break be;
                            }
                            var$3 = cgttu_ColorUtils_mixing;
                            cgttu_Palette_$callClinit();
                            cbgu_IntArray_add0(var$3, cbgu_ObjectIntMap_get(cgttu_Palette_NAMED, $term, 256), 1);
                            break a;
                        }
                        bf: {
                            bg: {
                                bh: {
                                    bi: {
                                        switch ($len) {
                                            case 4:
                                                break bg;
                                            case 5:
                                                break bf;
                                            case 6:
                                                break bh;
                                            case 7:
                                                break bi;
                                            case 8:
                                                break;
                                            default:
                                                break bf;
                                        }
                                        cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                                        cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                                    }
                                    cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                                    cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                                }
                                cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                                cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                            }
                            cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness - 0.20000000298023224;
                            cgttu_ColorUtils_saturation = cgttu_ColorUtils_saturation - 0.20000000298023224;
                        }
                        break a;
                    default:
                }
                var$3 = cgttu_ColorUtils_mixing;
                cgttu_Palette_$callClinit();
                cbgu_IntArray_add0(var$3, cbgu_ObjectIntMap_get(cgttu_Palette_NAMED, $term, 256), 1);
                break a;
            }
            bj: {
                if ($len > 2) {
                    if (jl_String_charAt($term, 2) == 103)
                        break bj;
                    if (jl_String_charAt($term, 2) == 71)
                        break bj;
                }
                var$3 = cgttu_ColorUtils_mixing;
                cgttu_Palette_$callClinit();
                cbgu_IntArray_add0(var$3, cbgu_ObjectIntMap_get(cgttu_Palette_NAMED, $term, 256), 1);
                break a;
            }
            bk: {
                bl: {
                    bm: {
                        bn: {
                            switch ($len) {
                                case 5:
                                    break bl;
                                case 6:
                                    break bk;
                                case 7:
                                    break bm;
                                case 8:
                                    break bn;
                                case 9:
                                    break;
                                default:
                                    break bk;
                            }
                            cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
                        }
                        cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
                    }
                    cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
                }
                cgttu_ColorUtils_lightness = cgttu_ColorUtils_lightness + 0.20000000298023224;
            }
        }
        return;
    }
},
cgttu_ColorUtils__clinit_ = () => {
    let var$1;
    cgttu_ColorUtils_mixing = cbgu_IntArray__init_(8);
    var$1 = r_Pattern_compile($rt_s(1378));
    cgttu_ColorUtils_nonTermPattern = var$1;
    cgttu_ColorUtils_nonTermMatcher = r_Pattern_matcher(var$1);
    cgttu_ColorUtils_lightness = 0.0;
    cgttu_ColorUtils_saturation = 0.0;
},
r_FindBack = $rt_classWithoutFields(r_Term);
function cbgu_OrderedMap$OrderedMapKeys() {
    cbgu_ObjectMap$Keys.call(this);
    this.$keys4 = null;
}
let cbgu_OrderedMap$OrderedMapKeys__init_0 = ($this, $map) => {
    $this.$valid1 = 1;
    $this.$map1 = $map;
    cbgu_OrderedMap$OrderedMapKeys_reset($this);
    $this.$keys4 = $map.$keys3;
},
cbgu_OrderedMap$OrderedMapKeys__init_ = var_0 => {
    let var_1 = new cbgu_OrderedMap$OrderedMapKeys();
    cbgu_OrderedMap$OrderedMapKeys__init_0(var_1, var_0);
    return var_1;
},
cbgu_OrderedMap$OrderedMapKeys_reset = $this => {
    $this.$currentIndex0 = (-1);
    $this.$nextIndex1 = 0;
    $this.$hasNext1 = $this.$map1.$size9 <= 0 ? 0 : 1;
},
cbgu_OrderedMap$OrderedMapKeys_toArray = ($this, $array) => {
    let var$2, var$3, var$4, var$5, var$6;
    var$2 = $this.$keys4;
    var$3 = $this.$nextIndex1;
    var$4 = var$2.$size0;
    var$5 = var$4 - var$3 | 0;
    if ((var$3 + var$5 | 0) <= var$4) {
        cbgu_Array_addAll($array, var$2.$items, var$3, var$5);
        $this.$nextIndex1 = $this.$keys4.$size0;
        $this.$hasNext1 = 0;
        return $array;
    }
    var$6 = new jl_IllegalArgumentException;
    $array = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($array);
    jl_AbstractStringBuilder_append($array, $rt_s(1379));
    $array = jl_StringBuilder_append1($array, var$3);
    jl_AbstractStringBuilder_append($array, $rt_s(1380));
    $array = jl_StringBuilder_append1($array, var$5);
    jl_AbstractStringBuilder_append($array, $rt_s(1381));
    jl_Throwable__init_(var$6, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1($array, var$2.$size0)));
    $rt_throw(var$6);
},
otcin_Buffers = $rt_classWithoutFields(),
jnci_UTF8Charset = $rt_classWithoutFields(jnc_Charset),
jnci_UTF8Charset_INSTANCE = null,
jnci_UTF8Charset_$callClinit = () => {
    jnci_UTF8Charset_$callClinit = $rt_eraseClinit(jnci_UTF8Charset);
    jnci_UTF8Charset__clinit_();
},
jnci_UTF8Charset_newDecoder = $this => {
    let var$1;
    var$1 = new jnci_UTF8Decoder;
    jnci_BufferedDecoder__init_(var$1, $this, 0.3333333432674408, 0.5);
    return var$1;
},
jnci_UTF8Charset_newEncoder = $this => {
    let var$1, var$2, var$3, var$4, var$5;
    var$1 = new jnci_UTF8Encoder;
    var$2 = $rt_createByteArray(1);
    var$3 = var$2.data;
    var$3[0] = 63;
    var$4 = jnc_CodingErrorAction_REPORT;
    var$1.$malformedAction0 = var$4;
    var$1.$unmappableAction = var$4;
    var$5 = var$3.length;
    if (var$5 && var$5 >= var$1.$maxBytesPerChar) {
        var$1.$charset = $this;
        var$1.$replacement1 = var$2.$clone0();
        var$1.$averageBytesPerChar = 2.0;
        var$1.$maxBytesPerChar = 4.0;
        var$1.$inArray0 = $rt_createCharArray(512);
        var$1.$outArray = $rt_createByteArray(512);
        return var$1;
    }
    var$4 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$4, $rt_s(1382));
    $rt_throw(var$4);
},
jnci_UTF8Charset__clinit_ = () => {
    let var$1;
    var$1 = new jnci_UTF8Charset;
    jnci_UTF8Charset_$callClinit();
    jnc_Charset__init_(var$1, $rt_s(464), $rt_createArray(jl_String, 0));
    jnci_UTF8Charset_INSTANCE = var$1;
};
function ji_ByteArrayOutputStream() {
    let a = this; ji_OutputStream.call(a);
    a.$buf = null;
    a.$count1 = 0;
}
let ji_ByteArrayOutputStream__init_ = ($this, $size) => {
    $this.$buf = $rt_createByteArray($size);
},
ji_ByteArrayOutputStream__init_0 = var_0 => {
    let var_1 = new ji_ByteArrayOutputStream();
    ji_ByteArrayOutputStream__init_(var_1, var_0);
    return var_1;
},
ji_ByteArrayOutputStream_write = ($this, $b, $off, $len) => {
    let $i, var$5, var$6, var$7, var$8;
    $i = $this.$count1 + $len | 0;
    var$5 = $this.$buf.data.length;
    if (var$5 < $i) {
        var$6 = jl_Math_max($i, (var$5 * 3 | 0) / 2 | 0);
        $this.$buf = ju_Arrays_copyOf($this.$buf, var$6);
    }
    $i = 0;
    while ($i < $len) {
        var$7 = $b.data;
        var$8 = $this.$buf.data;
        var$6 = $this.$count1;
        $this.$count1 = var$6 + 1 | 0;
        var$5 = $off + 1 | 0;
        var$8[var$6] = var$7[$off];
        $i = $i + 1 | 0;
        $off = var$5;
    }
},
ji_ByteArrayOutputStream_toByteArray = $this => {
    return ju_Arrays_copyOf($this.$buf, $this.$count1);
},
cbgu_StreamUtils$OptimizedByteArrayOutputStream = $rt_classWithoutFields(ji_ByteArrayOutputStream),
cbgu_StreamUtils$OptimizedByteArrayOutputStream_toByteArray = $this => {
    let var$1, var$2;
    jl_Object_monitorEnterSync($this);
    try {
        var$1 = $this.$count1;
        var$2 = $this.$buf;
        if (var$1 == var$2.data.length)
            return var$2;
        return ji_ByteArrayOutputStream_toByteArray($this);
    } finally {
        jl_Object_monitorExitSync($this);
    }
};
function cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0() {
    let a = this; jl_Object.call(a);
    a.$_00 = null;
    a.$_1 = 0;
    a.$_2 = null;
    a.$_3 = null;
    a.$_4 = 0;
}
let cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0_onTimer$exported$0 = var$1 => {
    var$1 = var$1;
    cgxgbta_AssetDownloadImpl_loadBinary(var$1.$_00, var$1.$_1, var$1.$_2, var$1.$_3, var$1.$_4);
};
function jnc_CodingErrorAction() {
    jl_Object.call(this);
    this.$name8 = null;
}
let jnc_CodingErrorAction_IGNORE = null,
jnc_CodingErrorAction_REPLACE = null,
jnc_CodingErrorAction_REPORT = null,
jnc_CodingErrorAction__init_0 = ($this, $name) => {
    $this.$name8 = $name;
},
jnc_CodingErrorAction__init_ = var_0 => {
    let var_1 = new jnc_CodingErrorAction();
    jnc_CodingErrorAction__init_0(var_1, var_0);
    return var_1;
},
jnc_CodingErrorAction__clinit_ = () => {
    jnc_CodingErrorAction_IGNORE = jnc_CodingErrorAction__init_($rt_s(1383));
    jnc_CodingErrorAction_REPLACE = jnc_CodingErrorAction__init_($rt_s(1384));
    jnc_CodingErrorAction_REPORT = jnc_CodingErrorAction__init_($rt_s(1385));
};
function jnc_CharsetDecoder() {
    let a = this; jl_Object.call(a);
    a.$charset0 = null;
    a.$averageCharsPerByte = 0.0;
    a.$maxCharsPerByte = 0.0;
    a.$replacement = null;
    a.$malformedAction = null;
    a.$unmappableAction0 = null;
    a.$state = 0;
}
let jnc_CharsetDecoder_onMalformedInput = ($this, $newAction) => {
    let var$2;
    if ($newAction !== null) {
        $this.$malformedAction = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$2, $rt_s(1386));
    $rt_throw(var$2);
},
jnc_CharsetDecoder_implOnMalformedInput = ($this, $newAction) => {
    return;
},
jnc_CharsetDecoder_onUnmappableCharacter = ($this, $newAction) => {
    let var$2;
    if ($newAction !== null) {
        $this.$unmappableAction0 = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$2, $rt_s(1386));
    $rt_throw(var$2);
},
jnc_CharsetDecoder_implOnUnmappableCharacter = ($this, $newAction) => {
    return;
},
jnc_CharsetDecoder_decode = ($this, $in, $out, $endOfInput) => {
    let var$4, var$5, $result, $e, $$je;
    var$4 = $this.$state;
    if (!(var$4 == 2 && !$endOfInput) && var$4 != 3) {
        $this.$state = $endOfInput ? 2 : 1;
        var$5 = $this;
        while (true) {
            try {
                $result = jnci_BufferedDecoder_decodeLoop(var$5, $in, $out);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_RuntimeException) {
                    $e = $$je;
                    $rt_throw(jnc_CoderMalfunctionError__init_($e));
                } else {
                    throw $$e;
                }
            }
            if (jnc_CoderResult_isOverflow($result))
                return $result;
            if (jnc_CoderResult_isUnderflow($result)) {
                if ($endOfInput && jn_Buffer_hasRemaining($in)) {
                    if ($this.$malformedAction === jnc_CodingErrorAction_REPORT)
                        return jnc_CoderResult_malformedForLength(jn_Buffer_remaining($in));
                    if (jn_Buffer_remaining($out) <= $this.$replacement.$nativeString.length)
                        return jnc_CoderResult_OVERFLOW;
                    jn_Buffer_position($in, $in.$position0 + jn_Buffer_remaining($in) | 0);
                    if ($this.$malformedAction === jnc_CodingErrorAction_REPLACE)
                        jn_CharBuffer_put($out, $this.$replacement);
                }
                return $result;
            }
            if (jnc_CoderResult_isMalformed($result)) {
                $e = $this.$malformedAction;
                if ($e === jnc_CodingErrorAction_REPORT)
                    return $result;
                if ($e === jnc_CodingErrorAction_REPLACE) {
                    if (jn_Buffer_remaining($out) < $this.$replacement.$nativeString.length)
                        return jnc_CoderResult_OVERFLOW;
                    jn_CharBuffer_put($out, $this.$replacement);
                }
                jn_Buffer_position($in, $in.$position0 + jnc_CoderResult_length($result) | 0);
            } else if (jnc_CoderResult_isUnmappable($result)) {
                $e = $this.$unmappableAction0;
                if ($e === jnc_CodingErrorAction_REPORT)
                    break;
                if ($e === jnc_CodingErrorAction_REPLACE) {
                    if (jn_Buffer_remaining($out) < $this.$replacement.$nativeString.length)
                        return jnc_CoderResult_OVERFLOW;
                    jn_CharBuffer_put($out, $this.$replacement);
                }
                jn_Buffer_position($in, $in.$position0 + jnc_CoderResult_length($result) | 0);
            }
        }
        return $result;
    }
    $in = new jl_IllegalStateException;
    jl_Exception__init_($in);
    $rt_throw($in);
},
jnc_CharsetDecoder_flush = ($this, $out) => {
    let var$2;
    var$2 = $this.$state;
    if (var$2 != 3 && var$2 != 2) {
        $out = new jl_IllegalStateException;
        jl_Exception__init_($out);
        $rt_throw($out);
    }
    $this.$state = 3;
    return jnc_CoderResult_UNDERFLOW;
},
jnc_CharsetDecoder_decode0 = ($this, $in) => {
    let var$2, $out, $result;
    var$2 = $this.$state;
    if (var$2 && var$2 != 3) {
        $in = new jl_IllegalStateException;
        jl_Exception__init_($in);
        $rt_throw($in);
    }
    if (!jn_Buffer_remaining($in))
        return jn_CharBuffer_allocate(0);
    if ($this.$state)
        $this.$state = 0;
    $out = jn_CharBuffer_allocate(jl_Math_max(8, jn_Buffer_remaining($in) * $this.$averageCharsPerByte | 0));
    while (true) {
        $result = jnc_CharsetDecoder_decode($this, $in, $out, 0);
        if (jnc_CoderResult_isUnderflow($result))
            break;
        if (jnc_CoderResult_isOverflow($result))
            $out = jnc_CharsetDecoder_expand($this, $out);
        if (!jnc_CoderResult_isError($result))
            continue;
        jnc_CoderResult_throwException($result);
    }
    $in = jnc_CharsetDecoder_decode($this, $in, $out, 1);
    if (jnc_CoderResult_isError($in))
        jnc_CoderResult_throwException($in);
    while (!jnc_CoderResult_isUnderflow(jnc_CharsetDecoder_flush($this, $out))) {
        $out = jnc_CharsetDecoder_expand($this, $out);
    }
    jn_Buffer_flip($out);
    return $out;
},
jnc_CharsetDecoder_expand = ($this, $buffer) => {
    let $array, $result;
    $array = jn_CharBuffer_array($buffer);
    $result = jn_CharBuffer_wrap(ju_Arrays_copyOf1($array, jl_Math_max(8, $array.data.length * 2 | 0)));
    jn_Buffer_position($result, $buffer.$position0);
    return $result;
},
jnc_CharsetDecoder_implFlush = ($this, $out) => {
    return jnc_CoderResult_UNDERFLOW;
},
jnc_CharsetDecoder_implReset = $this => {
    return;
},
jn_NativeBuffer = $rt_classWithoutFields(0);
function jnc_UnsupportedCharsetException() {
    jl_IllegalArgumentException.call(this);
    this.$charsetName0 = null;
}
let ji_UnsupportedEncodingException = $rt_classWithoutFields(ji_IOException),
jn_CharBuffer = $rt_classWithoutFields(jn_Buffer),
jn_CharBuffer_allocate = $capacity => {
    let $array, var$3, var$4;
    if ($capacity >= 0) {
        $array = $rt_createCharArray($capacity);
        return jn_CharBufferOverTypedArray__init_(0, $capacity, 0, $array.data, $array);
    }
    var$3 = new jl_IllegalArgumentException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_StringBuilder_append1(jl_StringBuilder_append(var$4, $rt_s(754)), $capacity);
    jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$3);
},
jn_CharBuffer_wrap = $array => {
    let var$2, var$3, var$4, var$5;
    var$2 = $array.data.length;
    if (var$2 >= 0) {
        var$3 = var$2 + 0 | 0;
        if (var$3 <= var$2) {
            var$4 = jn_CharBufferOverTypedArray__init_(0, var$2, 0, $array.data, $array);
            var$4.$position0 = 0;
            var$4.$limit0 = var$3;
            return var$4;
        }
    }
    var$5 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$5);
    $rt_throw(var$5);
},
jn_CharBuffer_get = ($this, $dst, $offset, $length) => {
    let var$4, var$5, var$6, var$7;
    if ($length >= 0 && $offset >= 0 && ($offset + $length | 0) <= $dst.data.length) {
        if ($length > jn_Buffer_remaining($this)) {
            var$4 = new jn_BufferUnderflowException;
            jl_Exception__init_(var$4);
            $rt_throw(var$4);
        }
        var$5 = $this.$position0;
        var$6 = $this;
        var$7 = new Uint16Array(var$6.$data3.buffer, var$6.$data3.byteOffset + (var$5 * 2 | 0) | 0, $length);
        $dst.data.set(var$7, $offset);
        $this.$position0 = $this.$position0 + $length | 0;
        return $this;
    }
    var$4 = new jl_IndexOutOfBoundsException;
    jl_Exception__init_(var$4);
    $rt_throw(var$4);
},
jn_CharBuffer_put = ($this, $src) => {
    let var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    var$2 = 0;
    var$3 = $src.$nativeString.length;
    if (jn_CharBufferImpl_isReadOnly($this)) {
        $src = new jn_ReadOnlyBufferException;
        jl_Exception__init_($src);
        $rt_throw($src);
    }
    if (var$3 >= var$2 && var$3 <= $src.$nativeString.length) {
        var$4 = var$3 - var$2 | 0;
        if (jn_Buffer_remaining($this) < var$4) {
            $src = new jn_BufferOverflowException;
            jl_Exception__init_($src);
            $rt_throw($src);
        }
        var$5 = $this.$position0;
        var$6 = $this;
        while (true) {
            var$7 = var$3 + (-1) | 0;
            if (var$3 <= 0)
                break;
            var$8 = var$6.$data3;
            var$9 = var$5 + 1 | 0;
            var$10 = var$2 + 1 | 0;
            var$8[var$5] = jl_String_charAt($src, var$2);
            var$3 = var$7;
            var$5 = var$9;
            var$2 = var$10;
        }
        $this.$position0 = $this.$position0 + var$4 | 0;
        return $this;
    }
    $src = new jl_IndexOutOfBoundsException;
    jl_Exception__init_($src);
    $rt_throw($src);
},
jn_CharBuffer_array = $this => {
    let var$1, var$2;
    var$1 = $this.$array5;
    if (var$1 !== null)
        return var$1;
    var$2 = new jl_UnsupportedOperationException;
    jl_Exception__init_(var$2);
    $rt_throw(var$2);
},
otrf_VirtualFileSystemProvider = $rt_classWithoutFields(),
otrf_VirtualFileSystemProvider_instance = null,
jnc_Charset$Charsets = $rt_classWithoutFields(),
jnc_Charset$Charsets_value = null,
jnc_Charset$Charsets_$callClinit = () => {
    jnc_Charset$Charsets_$callClinit = $rt_eraseClinit(jnc_Charset$Charsets);
    jnc_Charset$Charsets__clinit_();
},
jnc_Charset$Charsets__clinit_ = () => {
    let $charsets, var$2, var$3, $charset, var$5, var$6;
    jnc_Charset$Charsets_value = ju_HashMap__init_();
    $charsets = $rt_createArray(jnc_Charset, 6).data;
    jnc_StandardCharsets_$callClinit();
    $charsets[0] = jnc_StandardCharsets_UTF_8;
    $charsets[1] = jnc_StandardCharsets_US_ASCII;
    $charsets[2] = jnc_StandardCharsets_ISO_8859_1;
    $charsets[3] = jnc_StandardCharsets_UTF_16;
    $charsets[4] = jnc_StandardCharsets_UTF_16BE;
    $charsets[5] = jnc_StandardCharsets_UTF_16LE;
    var$2 = $charsets.length;
    var$3 = 0;
    while (var$3 < var$2) {
        $charset = $charsets[var$3];
        var$5 = jnc_Charset$Charsets_value;
        var$6 = $charset.$canonicalName;
        ju_HashMap_put(var$5, var$6, $charset);
        var$3 = var$3 + 1 | 0;
    }
},
ji_InputStream = $rt_classWithoutFields();
function jnc_IllegalCharsetNameException() {
    jl_IllegalArgumentException.call(this);
    this.$charsetName = null;
}
let jnc_IllegalCharsetNameException__init_0 = ($this, $charsetName) => {
    jl_Exception__init_($this);
    $this.$charsetName = $charsetName;
},
jnc_IllegalCharsetNameException__init_ = var_0 => {
    let var_1 = new jnc_IllegalCharsetNameException();
    jnc_IllegalCharsetNameException__init_0(var_1, var_0);
    return var_1;
},
jn_CharBufferImpl = $rt_classWithoutFields(jn_CharBuffer),
jn_CharBufferImpl_isReadOnly = $this => {
    return $this.$readOnly1;
};
function jn_CharBufferOverTypedArray() {
    let a = this; jn_CharBufferImpl.call(a);
    a.$readOnly1 = 0;
    a.$data3 = null;
    a.$array5 = null;
}
let jn_CharBufferOverTypedArray__init_0 = ($this, $position, $limit, $readOnly, $data, $array) => {
    jn_Buffer__init_($this);
    $this.$position0 = $position;
    $this.$limit0 = $limit;
    $this.$readOnly1 = $readOnly;
    $this.$data3 = $data;
    $this.$array5 = $array;
},
jn_CharBufferOverTypedArray__init_ = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jn_CharBufferOverTypedArray();
    jn_CharBufferOverTypedArray__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jn_CharBufferOverTypedArray_capacityImpl = $this => {
    return $this.$data3.length;
},
otrf_VirtualFileSystem = $rt_classWithoutFields(0);
function otrfm_InMemoryVirtualFileSystem() {
    let a = this; jl_Object.call(a);
    a.$root1 = null;
    a.$userDir = null;
}
let jnc_StandardCharsets = $rt_classWithoutFields(),
jnc_StandardCharsets_UTF_8 = null,
jnc_StandardCharsets_US_ASCII = null,
jnc_StandardCharsets_ISO_8859_1 = null,
jnc_StandardCharsets_UTF_16 = null,
jnc_StandardCharsets_UTF_16BE = null,
jnc_StandardCharsets_UTF_16LE = null,
jnc_StandardCharsets_$callClinit = () => {
    jnc_StandardCharsets_$callClinit = $rt_eraseClinit(jnc_StandardCharsets);
    jnc_StandardCharsets__clinit_();
},
jnc_StandardCharsets__clinit_ = () => {
    let var$1;
    jnci_UTF8Charset_$callClinit();
    jnc_StandardCharsets_UTF_8 = jnci_UTF8Charset_INSTANCE;
    var$1 = new jnci_AsciiCharset;
    jnc_Charset__init_(var$1, $rt_s(1387), $rt_createArray(jl_String, 0));
    jnc_StandardCharsets_US_ASCII = var$1;
    var$1 = new jnci_Iso8859Charset;
    jnc_Charset__init_(var$1, $rt_s(1388), $rt_createArray(jl_String, 0));
    jnc_StandardCharsets_ISO_8859_1 = var$1;
    jnc_StandardCharsets_UTF_16 = jnci_UTF16Charset__init_($rt_s(1389), 1, 0);
    jnc_StandardCharsets_UTF_16BE = jnci_UTF16Charset__init_($rt_s(1390), 0, 0);
    jnc_StandardCharsets_UTF_16LE = jnci_UTF16Charset__init_($rt_s(1391), 0, 1);
};
function otrfm_AbstractInMemoryVirtualFile() {
    let a = this; jl_Object.call(a);
    a.$name4 = null;
    a.$lastModified = Long_ZERO;
}
function otrfm_InMemoryVirtualDirectory() {
    otrfm_AbstractInMemoryVirtualFile.call(this);
    this.$children0 = null;
}
let jnci_AsciiCharset = $rt_classWithoutFields(jnc_Charset),
jnci_AsciiCharset_newDecoder = $this => {
    let var$1;
    var$1 = new jnci_AsciiDecoder;
    jnci_BufferedDecoder__init_(var$1, $this, 1.0, 1.0);
    return var$1;
},
jnci_Iso8859Charset = $rt_classWithoutFields(jnc_Charset),
jnci_Iso8859Charset_newDecoder = $this => {
    let var$1;
    var$1 = new jnci_Iso8859Decoder;
    jnci_BufferedDecoder__init_(var$1, $this, 1.0, 1.0);
    return var$1;
};
function jnci_UTF16Charset() {
    let a = this; jnc_Charset.call(a);
    a.$bom0 = 0;
    a.$littleEndian2 = 0;
}
let jnci_UTF16Charset__init_0 = ($this, $canonicalName, $bom, $littleEndian) => {
    jnc_Charset__init_($this, $canonicalName, $rt_createArray(jl_String, 0));
    $this.$bom0 = $bom;
    $this.$littleEndian2 = $littleEndian;
},
jnci_UTF16Charset__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jnci_UTF16Charset();
    jnci_UTF16Charset__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jnci_UTF16Charset_newDecoder = $this => {
    let var$1, var$2, var$3;
    var$1 = new jnci_UTF16Decoder;
    var$2 = $this.$bom0;
    var$3 = $this.$littleEndian2;
    jnci_BufferedDecoder__init_(var$1, $this, 0.5, 0.5);
    var$1.$bom = var$2;
    var$1.$littleEndian0 = var$3;
    return var$1;
};
function jnci_BufferedDecoder() {
    let a = this; jnc_CharsetDecoder.call(a);
    a.$inArray = null;
    a.$outArray0 = null;
}
let jnci_BufferedDecoder__init_ = ($this, $cs, $averageCharsPerByte, $maxCharsPerByte) => {
    let var$4;
    $this.$replacement = $rt_s(1392);
    var$4 = jnc_CodingErrorAction_REPORT;
    $this.$malformedAction = var$4;
    $this.$unmappableAction0 = var$4;
    if ($averageCharsPerByte <= 0.0) {
        $cs = new jl_IllegalArgumentException;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_StringBuilder_append3(jl_StringBuilder_append(var$4, $rt_s(1393)), $averageCharsPerByte);
        jl_Throwable__init_($cs, jl_AbstractStringBuilder_toString(var$4));
        $rt_throw($cs);
    }
    if ($maxCharsPerByte > 0.0) {
        $this.$charset0 = $cs;
        $this.$averageCharsPerByte = $averageCharsPerByte;
        $this.$maxCharsPerByte = $maxCharsPerByte;
        $this.$inArray = $rt_createByteArray(512);
        $this.$outArray0 = $rt_createCharArray(512);
        return;
    }
    $cs = new jl_IllegalArgumentException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_StringBuilder_append3(jl_StringBuilder_append(var$4, $rt_s(1394)), $maxCharsPerByte);
    jl_Throwable__init_($cs, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw($cs);
},
jnci_BufferedDecoder_decodeLoop = ($this, $in, $out) => {
    let $inArray, $inPos, $inSize, $outArray, $i, var$8, $result, var$10, $outSize, $controller, var$13, var$14;
    $inArray = $this.$inArray;
    $inPos = 0;
    $inSize = 0;
    $outArray = $this.$outArray0;
    a: {
        while (true) {
            if (($inPos + 32 | 0) > $inSize && jn_Buffer_hasRemaining($in)) {
                $i = $inPos;
                while ($i < $inSize) {
                    var$8 = $inArray.data;
                    var$8[$i - $inPos | 0] = var$8[$i];
                    $i = $i + 1 | 0;
                }
                var$8 = $inArray.data;
                $i = $inSize - $inPos | 0;
                $inSize = jl_Math_min(jn_Buffer_remaining($in) + $i | 0, var$8.length);
                jn_ByteBuffer_get($in, $inArray, $i, $inSize - $i | 0);
                $inPos = 0;
            }
            if (!jn_Buffer_hasRemaining($out)) {
                $result = !jn_Buffer_hasRemaining($in) && $inPos >= $inSize ? jnc_CoderResult_UNDERFLOW : jnc_CoderResult_OVERFLOW;
                break a;
            }
            var$8 = $outArray.data;
            $i = jn_Buffer_remaining($out);
            var$10 = var$8.length;
            $outSize = jl_Math_min($i, var$10);
            $controller = new jnci_BufferedDecoder$Controller;
            $controller.$in1 = $in;
            $controller.$out4 = $out;
            $result = $this.$arrayDecode($inArray, $inPos, $inSize, $outArray, 0, $outSize, $controller);
            $inPos = $controller.$inPosition;
            if ($result === null && 0 == $controller.$outPosition)
                $result = jnc_CoderResult_UNDERFLOW;
            $outSize = $controller.$outPosition;
            if (jn_CharBufferImpl_isReadOnly($out)) {
                $in = new jn_ReadOnlyBufferException;
                jl_Exception__init_($in);
                $rt_throw($in);
            }
            if (jn_Buffer_remaining($out) < $outSize) {
                $in = new jn_BufferOverflowException;
                jl_Exception__init_($in);
                $rt_throw($in);
            }
            if ($outSize < 0)
                break;
            if ((0 + $outSize | 0) > var$10)
                break;
            $i = $out.$position0;
            var$13 = $out;
            var$14 = new Uint16Array($outArray.data.buffer, 0, $outSize);
            var$13.$data3.set(var$14, $i);
            $out.$position0 = $out.$position0 + $outSize | 0;
            if ($result !== null)
                break a;
        }
        $in = new jl_IndexOutOfBoundsException;
        jl_Exception__init_($in);
        $rt_throw($in);
    }
    jn_Buffer_position($in, $in.$position0 - ($inSize - $inPos | 0) | 0);
    return $result;
},
jnci_UTF8Decoder = $rt_classWithoutFields(jnci_BufferedDecoder),
jnci_UTF8Decoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, $b2, $b, $b2_0, $b3, $c, $b4, $code;
    $result = null;
    a: {
        b: {
            c: {
                while ($inPos < $inSize) {
                    if ($outPos >= $outSize)
                        break a;
                    var$9 = $inArray.data;
                    $b2 = $inPos + 1 | 0;
                    $b = var$9[$inPos] & 255;
                    if (!($b & 128)) {
                        var$9 = $outArray.data;
                        $b2_0 = $outPos + 1 | 0;
                        var$9[$outPos] = $b & 65535;
                    } else if (($b & 224) == 192) {
                        if ($b2 >= $inSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                                break a;
                            $result = jnc_CoderResult_UNDERFLOW;
                            break a;
                        }
                        $inPos = $b2 + 1 | 0;
                        $b2 = var$9[$b2];
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b2)) {
                            $inPos = $inPos + (-2) | 0;
                            $result = jnc_CoderResult_malformedForLength(1);
                            break a;
                        }
                        var$9 = $outArray.data;
                        $b2_0 = $outPos + 1 | 0;
                        var$9[$outPos] = (($b & 31) << 6 | $b2 & 63) & 65535;
                        $b2 = $inPos;
                    } else if (($b & 240) == 224) {
                        if (($b2 + 2 | 0) > $inSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 3))
                                break a;
                            $result = jnc_CoderResult_UNDERFLOW;
                            break a;
                        }
                        $inPos = $b2 + 1 | 0;
                        $b2_0 = var$9[$b2];
                        $b2 = $inPos + 1 | 0;
                        $b3 = var$9[$inPos];
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b2_0))
                            break b;
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b3))
                            break b;
                        $c = (($b & 15) << 12 | ($b2_0 & 63) << 6 | $b3 & 63) & 65535;
                        if (jl_Character_isSurrogate($c)) {
                            $inPos = $b2 + (-3) | 0;
                            $result = jnc_CoderResult_malformedForLength(3);
                            break a;
                        }
                        var$9 = $outArray.data;
                        $b2_0 = $outPos + 1 | 0;
                        var$9[$outPos] = $c;
                    } else {
                        if (($b & 248) != 240) {
                            $inPos = $b2 + (-1) | 0;
                            $result = jnc_CoderResult_malformedForLength(1);
                            break a;
                        }
                        if (($b2 + 3 | 0) > $inSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                                break a;
                            $result = jnc_CoderResult_UNDERFLOW;
                            break a;
                        }
                        if (($outPos + 2 | 0) > $outSize) {
                            $inPos = $b2 + (-1) | 0;
                            if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                                break a;
                            $result = jnc_CoderResult_OVERFLOW;
                            break a;
                        }
                        $inPos = $b2 + 1 | 0;
                        $b2_0 = var$9[$b2];
                        $b4 = $inPos + 1 | 0;
                        $b3 = var$9[$inPos];
                        $b2 = $b4 + 1 | 0;
                        $b4 = var$9[$b4];
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b2_0))
                            break c;
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b3))
                            break c;
                        if (!jnci_UTF8Decoder_checkMidByte($this, $b4))
                            break c;
                        var$9 = $outArray.data;
                        $code = ($b & 7) << 18 | ($b2_0 & 63) << 12 | ($b3 & 63) << 6 | $b4 & 63;
                        $inPos = $outPos + 1 | 0;
                        var$9[$outPos] = jl_Character_highSurrogate($code);
                        $b2_0 = $inPos + 1 | 0;
                        var$9[$inPos] = jl_Character_lowSurrogate($code);
                    }
                    $inPos = $b2;
                    $outPos = $b2_0;
                }
                break a;
            }
            $inPos = $b2 + (-3) | 0;
            $result = jnc_CoderResult_malformedForLength(1);
            break a;
        }
        $inPos = $b2 + (-3) | 0;
        $result = jnc_CoderResult_malformedForLength(1);
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
},
jnci_UTF8Decoder_checkMidByte = ($this, $b) => {
    return ($b & 192) != 128 ? 0 : 1;
},
jn_BufferOverflowException = $rt_classWithoutFields(jl_RuntimeException);
function cgtte_EaseEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$distance13 = 0.0;
    a.$extent0 = 0.0;
    a.$elastic1 = 0;
    a.$timePassedByGlyphIndex12 = null;
}
let cgtte_EaseEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realExtent, $progress, $interpolation, $interpolatedValue, $y;
    $realExtent = $this.$extent0 * (!$this.$elastic1 ? 1.0 : 3.0) * 0.07500000298023224;
    $progress = cbgm_MathUtils_clamp(cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex12, $localIndex, 0.0, $delta) / $realExtent, 0.0, 1.0);
    if (!$this.$elastic1) {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_sine;
    } else {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_swingOut;
    }
    $interpolatedValue = cbgm_Interpolation_apply($interpolation, 1.0, 0.0, $progress);
    $y = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$distance13 * $interpolatedValue * 0.15000000596046448;
    cbgu_FloatArray_incr($this.$label.$offsets, $globalIndex << 1 | 1, $y);
};
function cgtte_HangEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$distance7 = 0.0;
    a.$extent3 = 0.0;
    a.$timePassedByGlyphIndex7 = null;
}
let cgtte_HangEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realIntensity, $progress, var$7, $interpolation, $distanceFactor;
    $realIntensity = $this.$extent3 * 1.5;
    $progress = cbgm_MathUtils_clamp(cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex7, $localIndex, 0.0, $delta) / $realIntensity, 0.0, 1.0);
    if ($progress < 0.699999988079071) {
        cbgm_Interpolation_$callClinit();
        var$7 = cbgm_Interpolation_pow3Out;
        $realIntensity = $progress / 0.699999988079071;
        $interpolation = cbgm_Interpolation_apply(var$7, 0.0, 1.0, $realIntensity);
    } else {
        cbgm_Interpolation_$callClinit();
        var$7 = cbgm_Interpolation_swing;
        $delta = ($progress - 0.699999988079071) / 0.30000001192092896;
        $interpolation = cbgm_Interpolation_apply(var$7, 1.0, 0.0, $delta);
    }
    cbgm_Interpolation_$callClinit();
    $distanceFactor = cbgm_Interpolation_apply(cbgm_Interpolation_linear, 1.0, 1.5, $progress);
    $delta = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$distance7 * $distanceFactor * $interpolation * 0.699999988079071 * cgtt_Effect_calculateFadeout($this);
    cbgu_FloatArray_incr($this.$label.$offsets, $globalIndex << 1 | 1, $delta);
};
function cgtte_JumpEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$jumpHeight = 0.0;
    a.$frequency7 = 0.0;
    a.$speed3 = 0.0;
}
let cgtte_JumpEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $progressModifier, var$6, $progress, var$8, $progressOffset, $interpolation;
    $progressModifier = 1.0 / $this.$speed3 * 1.0;
    $delta =  -($localIndex / (1.0 / $this.$frequency7 * 50.0));
    var$6 = $this;
    $progress = cgtt_Effect_calculateProgress(var$6, $progressModifier, $delta, 0);
    if ($progress < 0.20000000298023224) {
        cbgm_Interpolation_$callClinit();
        var$8 = cbgm_Interpolation_pow2Out;
        $progressOffset = $progress / 0.20000000298023224;
        $interpolation = cbgm_Interpolation_apply(var$8, 0.0, 1.0, $progressOffset);
    } else {
        cbgm_Interpolation_$callClinit();
        var$8 = cbgm_Interpolation_bounceOut;
        $progressOffset = ($progress - 0.20000000298023224) / 0.800000011920929;
        $interpolation = cbgm_Interpolation_apply(var$8, 1.0, 0.0, $progressOffset);
    }
    $delta = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$jumpHeight * $interpolation * 1.3300000429153442 * cgtt_Effect_calculateFadeout(var$6);
    cbgu_FloatArray_incr($this.$label.$offsets, $globalIndex << 1 | 1, $delta);
};
function cgtte_ShakeEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$lastOffsets0 = null;
    a.$distance0 = 0.0;
    a.$speed1 = 0.0;
}
let cgtte_ShakeEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let var$5, var$6, $lastX, var$8, $lastY, $x, $y, $normalSpeed, $fadeout;
    var$5 = $this.$lastOffsets0;
    var$6 = var$5.$size4;
    if ($localIndex >= (var$6 / 2 | 0))
        cbgu_FloatArray_setSize(var$5, var$6 + 16 | 0);
    var$5 = $this.$lastOffsets0;
    $localIndex = $localIndex * 2 | 0;
    $lastX = cbgu_FloatArray_get(var$5, $localIndex);
    var$5 = $this.$lastOffsets0;
    var$8 = $localIndex + 1 | 0;
    $lastY = cbgu_FloatArray_get(var$5, var$8);
    $x = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$distance0 * cbgm_MathUtils_random((-1.0), 1.0) * 0.11999999731779099;
    $y = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$distance0 * cbgm_MathUtils_random((-1.0), 1.0) * 0.11999999731779099;
    $normalSpeed = cbgm_MathUtils_clamp($this.$speed1 * 0.5, 0.0, 1.0);
    cbgm_Interpolation_$callClinit();
    $delta = cbgm_Interpolation_apply(cbgm_Interpolation_linear, $lastX, $x, $normalSpeed);
    $lastX = cbgm_Interpolation_apply(cbgm_Interpolation_linear, $lastY, $y, $normalSpeed);
    $fadeout = cgtt_Effect_calculateFadeout($this);
    $delta = $delta * $fadeout;
    $lastX = $lastX * $fadeout;
    $delta = cbgm_MathUtils_round($delta);
    $lastX = cbgm_MathUtils_round($lastX);
    cbgu_FloatArray_set($this.$lastOffsets0, $localIndex, $delta);
    cbgu_FloatArray_set($this.$lastOffsets0, var$8, $lastX);
    var$5 = $this.$label.$offsets;
    $localIndex = $globalIndex << 1;
    cbgu_FloatArray_incr(var$5, $localIndex, $delta);
    cbgu_FloatArray_incr($this.$label.$offsets, $localIndex | 1, $lastX);
};
function cgtte_SickEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$distance12 = 0.0;
    a.$speed5 = 0.0;
    a.$indices0 = null;
}
let cgtte_SickEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $progressModifier, var$6, $progress, var$8, var$9, var$10, var$11, var$12, var$13, var$14, $y, $interpolation;
    $progressModifier = 1.0 / $this.$speed5 * 1.0;
    $delta =  -($localIndex / 50.0);
    var$6 = $this;
    $progress = cgtt_Effect_calculateProgress(var$6, $progressModifier, $delta, 0);
    if ($progress < 0.009999999776482582 && jl_Math_random() > 0.25 && !cbgu_IntArray_contains($this.$indices0, $localIndex))
        cbgu_IntArray_add($this.$indices0, $localIndex);
    if ($progress > 0.949999988079071) {
        var$8 = $this.$indices0;
        var$9 = var$8.$items1;
        var$10 = 0;
        var$11 = var$8.$size2;
        a: {
            while (true) {
                var$12 = $rt_compare(var$10, var$11);
                if (var$12 >= 0)
                    break;
                var$13 = var$9.data;
                if (var$13[var$10] == $localIndex) {
                    if (var$12 >= 0) {
                        var$6 = new jl_IndexOutOfBoundsException;
                        var$14 = new jl_StringBuilder;
                        jl_AbstractStringBuilder__init_(var$14);
                        jl_AbstractStringBuilder_append(var$14, $rt_s(10));
                        var$14 = jl_StringBuilder_append1(var$14, var$10);
                        jl_AbstractStringBuilder_append(var$14, $rt_s(11));
                        jl_Throwable__init_(var$6, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$14, var$8.$size2)));
                        $rt_throw(var$6);
                    }
                    var$11 = var$11 - 1 | 0;
                    var$8.$size2 = var$11;
                    if (!var$8.$ordered0)
                        var$13[var$10] = var$13[var$11];
                    else
                        jl_System_fastArraycopy(var$9, var$10 + 1 | 0, var$9, var$10, var$11 - var$10 | 0);
                    break a;
                }
                var$10 = var$10 + 1 | 0;
            }
        }
    }
    if (!cbgu_IntArray_contains($this.$indices0, $localIndex) && !cbgu_IntArray_contains($this.$indices0, $localIndex - 1 | 0) && !cbgu_IntArray_contains($this.$indices0, $localIndex - 2 | 0) && !cbgu_IntArray_contains($this.$indices0, $localIndex + 2 | 0) && !cbgu_IntArray_contains($this.$indices0, $localIndex + 1 | 0))
        return;
    if ($progress < 0.5) {
        cbgm_Interpolation_$callClinit();
        var$8 = cbgm_Interpolation_pow2Out;
        $y = $progress / 0.5;
        $interpolation = cbgm_Interpolation_apply(var$8, 0.0, 1.0, $y);
    } else {
        cbgm_Interpolation_$callClinit();
        var$8 = cbgm_Interpolation_pow2In;
        $y = ($progress - 0.5) / 0.5;
        $interpolation = cbgm_Interpolation_apply(var$8, 1.0, 0.0, $y);
    }
    $y = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$distance12 * $interpolation * 0.125;
    if (cbgu_IntArray_contains($this.$indices0, $localIndex))
        $y = $y * 2.1500000953674316;
    if (!(!cbgu_IntArray_contains($this.$indices0, $localIndex - 1 | 0) && !cbgu_IntArray_contains($this.$indices0, $localIndex + 1 | 0)))
        $y = $y * 1.350000023841858;
    $delta = $y * cgtt_Effect_calculateFadeout(var$6);
    cbgu_FloatArray_incr($this.$label.$offsets, $globalIndex << 1 | 1,  -$delta);
};
function cgtte_SlideEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$distance11 = 0.0;
    a.$extent2 = 0.0;
    a.$elastic0 = 0;
    a.$timePassedByGlyphIndex4 = null;
}
let cgtte_SlideEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realExtent, $progress, $interpolation, $interpolatedValue, $x;
    $realExtent = $this.$extent2 * (!$this.$elastic0 ? 1.0 : 3.0) * 0.375;
    $progress = cbgm_MathUtils_clamp(cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex4, $localIndex, 0.0, $delta) / $realExtent, 0.0, 1.0);
    if (!$this.$elastic0) {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_sine;
    } else {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_swingOut;
    }
    $interpolatedValue = cbgm_Interpolation_apply($interpolation, 1.0, 0.0, $progress);
    $x = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$distance11 * $interpolatedValue * 2.0;
    cbgu_FloatArray_incr($this.$label.$offsets, $globalIndex << 1, $x);
};
function cgtte_WaveEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$distance9 = 0.0;
    a.$frequency = 0.0;
    a.$speed2 = 0.0;
}
let cgtte_WaveEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $progressModifier, $normalFrequency, $progressOffset, var$8, $progress;
    $progressModifier = 1.0 / $this.$speed2 * 0.5;
    $normalFrequency = 1.0 / $this.$frequency * 15.0;
    $progressOffset = $localIndex / $normalFrequency;
    var$8 = $this;
    $progress = cgtt_Effect_calculateProgress0(var$8, $progressModifier, $progressOffset);
    $progressModifier = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$distance9;
    cbgm_Interpolation_$callClinit();
    $delta = $progressModifier * cbgm_Interpolation_apply(cbgm_Interpolation_sine, (-1.0), 1.0, $progress) * 0.33000001311302185 * cgtt_Effect_calculateFadeout(var$8);
    cbgu_FloatArray_incr($this.$label.$offsets, $globalIndex << 1 | 1, $delta);
};
function cgtte_WindEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$noiseCursorX = 0.0;
    a.$noiseCursorY = 0.0;
    a.$distanceX = 0.0;
    a.$distanceY = 0.0;
    a.$spacing = 0.0;
    a.$intensity = 0.0;
}
let cgtte_WindEffect_update = ($this, $delta) => {
    let $changeAmount;
    cgtt_Effect_update($this, $delta);
    $changeAmount = 0.15000000596046448 * $this.$intensity * 0.375 * $delta * 60.0;
    $this.$noiseCursorX = $this.$noiseCursorX + $changeAmount;
    $this.$noiseCursorY = $this.$noiseCursorY + $changeAmount;
},
cgtte_WindEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $progressModifier, $normalSpacing, $progressOffset, var$8, $progress, $indexOffset, $noiseX, $noiseY, $lineHeight, $x, $y, $fadeout, var$17;
    $progressModifier = 0.375 / $this.$intensity;
    $normalSpacing = 10.0 / $this.$spacing;
    $delta = $localIndex;
    $progressOffset = $delta / $normalSpacing;
    var$8 = $this;
    $progress = cgtt_Effect_calculateProgress0(var$8, $progressModifier, $progressOffset);
    $indexOffset = $delta * 0.05000000074505806 * $this.$spacing;
    $noiseX = cgttu_NoiseUtils_octaveNoise1D($this.$noiseCursorX + $indexOffset, 123);
    $noiseY = cgttu_NoiseUtils_octaveNoise1D($this.$noiseCursorY + $indexOffset, (-4321));
    $lineHeight = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex);
    $x = $lineHeight * $noiseX * $progress * $this.$distanceX * 1.5 * 0.33000001311302185;
    $y = $lineHeight * $noiseY * $progress * $this.$distanceY * 1.0 * 0.33000001311302185;
    $fadeout = cgtt_Effect_calculateFadeout(var$8);
    $delta = $x * $fadeout;
    $progressModifier = $y * $fadeout;
    $delta = jl_Math_abs($delta) *  -jl_Math_signum($this.$distanceX);
    var$17 = $this.$label.$offsets;
    $localIndex = $globalIndex << 1;
    cbgu_FloatArray_incr(var$17, $localIndex, $delta);
    cbgu_FloatArray_incr($this.$label.$offsets, $localIndex | 1, $progressModifier);
};
function cgtte_RainbowEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$distance4 = 0.0;
    a.$frequency0 = 0.0;
    a.$saturation = 0.0;
    a.$lightness0 = 0.0;
}
let cgtte_RainbowEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $distanceMod, $frequencyMod, $progress;
    $distanceMod = 1.0 / $this.$distance4 * 0.02499997615814209;
    $frequencyMod = 1.0 / $this.$frequency0 * 2.0;
    $delta = $distanceMod * $localIndex;
    $progress = cgtt_Effect_calculateProgress($this, $frequencyMod, $delta, 0);
    cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt(cgttu_ColorUtils_hsl2rgb($progress, $this.$saturation, $this.$lightness0, 1.0)), 32)));
};
function cgtte_GradientEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$color12 = 0;
    a.$color22 = 0;
    a.$distance6 = 0.0;
    a.$frequency4 = 0.0;
}
let cgtte_GradientEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $distanceMod, $frequencyMod, $progress;
    $distanceMod = 1.0 / $this.$distance6 * 0.02499997615814209;
    $frequencyMod = 1.0 / $this.$frequency4 * 2.0;
    $delta = $distanceMod * $localIndex;
    $progress = cgtt_Effect_calculateProgress($this, $frequencyMod, $delta, 1);
    cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt(cgttu_ColorUtils_lerpColors($this.$color12, $this.$color22, $progress)), 32)));
};
function cgtte_FadeEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$color11 = 0;
    a.$color21 = 0;
    a.$alpha10 = 0.0;
    a.$alpha20 = 0.0;
    a.$fadeDuration = 0.0;
    a.$timePassedByGlyphIndex0 = null;
}
let cgtte_FadeEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $progress, var$6, var$7;
    $progress = cbgm_MathUtils_clamp(cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex0, $localIndex, 0.0, $delta) / $this.$fadeDuration, 0.0, 1.0);
    var$6 = $this.$color11;
    if (var$6 != 256) {
        var$7 = $this.$label;
        $glyph = Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt(cgttu_ColorUtils_lerpColors(Long_hi($glyph), var$6, 1.0 - $progress)), 32));
        cgtt_TypingLabel_setInWorkingLayout(var$7, $globalIndex, $glyph);
    } else {
        var$7 = $this.$label;
        $glyph = Long_or(Long_and($glyph, Long_create(4294967295, 4294967040)), Long_shl(Long_fromNumber(cbgm_MathUtils_lerp(Long_toNumber(Long_and(Long_shru($glyph, 32), Long_fromInt(255))), $this.$alpha10 * Long_toNumber(Long_and(Long_shru(cgtt_TypingLabel_getInLayout(var$7, var$7.$layout, $globalIndex), 32), Long_fromInt(255))), 1.0 - $progress)), 32));
        cgtt_TypingLabel_setInWorkingLayout(var$7, $globalIndex, $glyph);
    }
    $localIndex = $this.$color21;
    if ($localIndex != 256)
        cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt(cgttu_ColorUtils_lerpColors(Long_hi($glyph), $localIndex, $progress)), 32)));
    else {
        var$7 = $this.$label;
        cgtt_TypingLabel_setInWorkingLayout(var$7, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 4294967040)), Long_shl(Long_fromNumber(cbgm_MathUtils_lerp(Long_toNumber(Long_and(Long_shru($glyph, 32), Long_fromInt(255))), $this.$alpha20 * Long_toNumber(Long_and(Long_shru(cgtt_TypingLabel_getInLayout(var$7, var$7.$layout, $globalIndex), 32), Long_fromInt(255))), $progress)), 32)));
    }
};
function cgtte_BlinkEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$color10 = 0;
    a.$color20 = 0;
    a.$alpha1 = 0.0;
    a.$alpha2 = 0.0;
    a.$frequency1 = 0.0;
    a.$threshold = 0.0;
}
let cgtte_BlinkEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $frequencyMod;
    $frequencyMod = 1.0 / $this.$frequency1 * 1.0;
    if (cgtt_Effect_calculateProgress($this, $frequencyMod, 0.0, 1) <= $this.$threshold) {
        $localIndex = $this.$color10;
        if ($localIndex != 256)
            cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt($localIndex), 32)));
        else
            cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 4294967040)), Long_shl(Long_fromNumber($this.$alpha1 * 255.0), 32)));
    } else if ($this.$color10 != 256)
        cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt($this.$color20), 32)));
    else
        cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 4294967040)), Long_shl(Long_fromNumber($this.$alpha2 * 255.0), 32)));
};
function cgtte_JoltEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$lastOffsets = null;
    a.$shakeDistance = 0.0;
    a.$shakeSpeed = 0.0;
    a.$likelihood = 0.0;
    a.$baseColor0 = 0;
    a.$joltColor = 0;
}
let cgtte_JoltEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let var$5, var$6, $lastX, var$8, $lastY, $x, $y, $fadeout, var$13, $normalIntensity;
    var$5 = $this.$lastOffsets;
    var$6 = var$5.$size4;
    if ($localIndex >= (var$6 / 2 | 0))
        cbgu_FloatArray_setSize(var$5, var$6 + 16 | 0);
    var$5 = $this.$lastOffsets;
    var$6 = $localIndex * 2 | 0;
    $lastX = cbgu_FloatArray_get(var$5, var$6);
    var$5 = $this.$lastOffsets;
    var$8 = var$6 + 1 | 0;
    $lastY = cbgu_FloatArray_get(var$5, var$8);
    $x = 0.0;
    $y = 0.0;
    $fadeout = $this.$likelihood;
    var$13 = Long_mul(Long_xor(Long_mul(Long_add(Long_mul(Long_shru(jl_System_currentTimeMillis(), 10), Long_fromInt($globalIndex)), Long_fromInt($localIndex)), Long_create(3652509721, 1663821211)), Long_create(2135587861, 2654435769)), Long_create(2461387907, 3334219670));
    if ($fadeout <= Long_toNumber(Long_shru(Long_mul(Long_xor(var$13, Long_shru(var$13, 27)), Long_create(277803737, 2935059714)), 40)) * 5.960464477539063E-8) {
        $localIndex = $this.$baseColor0;
        if ($localIndex == 256)
            cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, $glyph);
        else
            cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt($localIndex), 32)));
    } else {
        $x = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$shakeDistance * cbgm_MathUtils_random((-1.0), 1.0) * 0.11999999731779099;
        $fadeout = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$shakeDistance * cbgm_MathUtils_random((-1.0), 1.0) * 0.11999999731779099;
        $normalIntensity = cbgm_MathUtils_clamp($this.$shakeSpeed * 0.5, 0.0, 1.0);
        cbgm_Interpolation_$callClinit();
        $delta = cbgm_Interpolation_apply(cbgm_Interpolation_linear, $lastX, $x, $normalIntensity);
        $lastX = cbgm_Interpolation_apply(cbgm_Interpolation_linear, $lastY, $fadeout, $normalIntensity);
        $fadeout = cgtt_Effect_calculateFadeout($this);
        $normalIntensity = $delta * $fadeout;
        $delta = $lastX * $fadeout;
        $x = cbgm_MathUtils_round($normalIntensity);
        $y = cbgm_MathUtils_round($delta);
        if ($fadeout > 0.0) {
            if ($this.$baseColor0 == 256)
                cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, $glyph);
            else
                cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt($this.$joltColor), 32)));
        }
    }
    cbgu_FloatArray_set($this.$lastOffsets, var$6, $x);
    cbgu_FloatArray_set($this.$lastOffsets, var$8, $y);
    var$5 = $this.$label.$offsets;
    $localIndex = $globalIndex << 1;
    cbgu_FloatArray_incr(var$5, $localIndex, $x);
    cbgu_FloatArray_incr($this.$label.$offsets, $localIndex | 1, $y);
};
function cgtte_SpiralEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$distance1 = 0.0;
    a.$speed0 = 0.0;
    a.$rotations1 = 0.0;
    a.$timePassedByGlyphIndex6 = null;
}
let cgtte_SpiralEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realSpeed, $progress, $spin, $lineHeight, $timePassed, $x, $y, var$12;
    $realSpeed = $this.$speed0 * 0.75;
    $progress = cbgm_MathUtils_clamp(cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex6, $localIndex, 0.0, $delta) / $realSpeed, 0.0, 1.0);
    $spin = 360.0 * $this.$rotations1 * $progress;
    $lineHeight = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex);
    $delta = $lineHeight * $this.$distance1 * 1.0 * cbgm_MathUtils_cosDeg($spin);
    $timePassed = 1.0 - $progress;
    $x = $delta * $timePassed;
    $y = $lineHeight * $this.$distance1 * 1.0 * cbgm_MathUtils_sinDeg($spin) * $timePassed;
    var$12 = $this.$label.$offsets;
    $localIndex = $globalIndex << 1;
    cbgu_FloatArray_incr(var$12, $localIndex, $x);
    cbgu_FloatArray_incr($this.$label.$offsets, $localIndex | 1, $y);
};
function cgtte_SpinEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$extent1 = 0.0;
    a.$rotations0 = 0.0;
    a.$elastic3 = 0;
    a.$timePassedByGlyphIndex5 = null;
}
let cgtte_SpinEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realExtent, $progress, $interpolation, $interpolatedValue;
    $realExtent = $this.$extent1 * (!$this.$elastic3 ? 1.0 : 3.0) * 1.0;
    $progress = cbgm_MathUtils_clamp(cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex5, $localIndex, 0.0, $delta) / $realExtent, 0.0, 1.0);
    if (!$this.$elastic3) {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_pow3Out;
    } else {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_bounceOut;
    }
    $interpolatedValue = $interpolation.$apply($progress) * 360.0 * $this.$rotations0;
    cbgu_FloatArray_incr($this.$label.$rotations, $globalIndex, $interpolatedValue);
};
function cgtte_CrowdEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$rotationAmount = 0.0;
    a.$speed7 = 0.0;
}
let cgtte_CrowdEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    $delta = cgttu_NoiseUtils_octaveNoise1D(Long_toNumber(Long_and(jl_System_currentTimeMillis(), Long_fromInt(16777215))) * $this.$speed7 * 0.0010000000474974513 + $globalIndex * 0.41999998688697815, $globalIndex) * $this.$rotationAmount * 1.0 * cgtt_Effect_calculateFadeout($this);
    cbgu_FloatArray_incr($this.$label.$rotations, $globalIndex, $delta);
};
function cgtte_ShrinkEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$expansion0 = 0.0;
    a.$extent = 0.0;
    a.$elastic = 0;
    a.$timePassedByGlyphIndex2 = null;
}
let cgtte_ShrinkEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realExtent, $progress, $interpolation, $interpolatedValue;
    $realExtent = $this.$extent * (!$this.$elastic ? 1.0 : 3.0) * 0.15000000596046448;
    $progress = cbgm_MathUtils_clamp(cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex2, $localIndex, 0.0, $delta) / $realExtent, 0.0, 1.0);
    if (!$this.$elastic) {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_sine;
    } else {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_swingOut;
    }
    $interpolatedValue = cbgm_Interpolation_apply($interpolation, $this.$expansion0 * 3.0, 0.0, $progress);
    $interpolation = $this.$label.$sizing;
    $localIndex = $globalIndex << 1;
    cbgu_FloatArray_incr($interpolation, $localIndex, $interpolatedValue);
    cbgu_FloatArray_incr($this.$label.$sizing, $localIndex | 1, $interpolatedValue);
};
function cgtte_EmergeEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$speed4 = 0.0;
    a.$elastic2 = 0;
    a.$timePassedByGlyphIndex = null;
}
let cgtte_EmergeEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realIntensity, $progress, $interpolation, $interpolatedValue;
    $realIntensity = $this.$speed4 * (!$this.$elastic2 ? 1.0 : 3.0) * 0.125;
    $progress = cbgm_MathUtils_clamp(cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex, $localIndex, 0.0, $delta) / $realIntensity, 0.0, 1.0);
    if (!$this.$elastic2) {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_sine;
    } else {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_swingOut;
    }
    $interpolatedValue = $interpolation.$apply($progress) - 1.0;
    $interpolation = $this.$label.$sizing;
    $localIndex = $globalIndex << 1 | 1;
    cbgu_FloatArray_incr($interpolation, $localIndex, $interpolatedValue);
    $interpolation = $this.$label;
    cbgu_FloatArray_incr($interpolation.$offsets, $localIndex, $interpolatedValue * 0.5 * cgtt_TypingLabel_getLineHeight($interpolation, $globalIndex));
};
function cgtte_HeartbeatEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$expansion = 0.0;
    a.$frequency6 = 0.0;
}
let cgtte_HeartbeatEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $progress, $c, $s, var$8, var$9, $xOff;
    $progress = $this.$totalTime * $this.$frequency6 * 360.0 * 1.0;
    $c = cbgm_MathUtils_cosDeg($progress);
    $s = cbgm_MathUtils_sinDeg($progress);
    $delta = $this.$expansion * jl_Math_max0((-0.125), jl_Math_max0($c * $c * $c, $s * $s * $s)) * 0.5 * cgtt_Effect_calculateFadeout($this);
    var$8 = $this.$label.$sizing;
    $localIndex = $globalIndex << 1;
    cbgu_FloatArray_incr(var$8, $localIndex, $delta);
    var$8 = $this.$label.$sizing;
    var$9 = $localIndex | 1;
    cbgu_FloatArray_incr(var$8, var$9, $delta);
    $xOff = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * (-0.25) * $delta;
    cbgu_FloatArray_incr($this.$label.$offsets, $localIndex, $xOff);
    cbgu_FloatArray_incr($this.$label.$offsets, var$9, $xOff);
};
function cgtte_CarouselEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$frequency2 = 0.0;
    a.$timePassedByGlyphIndex3 = null;
}
let cgtte_CarouselEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $timePassed, $s, var$7, $font;
    $timePassed = cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex3, $localIndex, 0.0, $delta) - $delta;
    if ($timePassed >= $this.$duration)
        $timePassed = 0.0;
    $s = cbgm_MathUtils_sinDeg($timePassed * 360.0 * $this.$frequency2 * 0.5);
    var$7 = $this.$label;
    $font = var$7.$font0;
    var$7 = var$7.$sizing;
    $globalIndex = $globalIndex << 1;
    cbgu_FloatArray_incr(var$7, $globalIndex, $s - 1.0);
    cbgu_FloatArray_incr($this.$label.$offsets, $globalIndex, (cbgu_IntMap_get($font.$mapping, Long_lo($glyph) & 65535, $font.$defaultValue)).$xAdvance0 * 0.125 * $s);
};
function cgtte_SquashEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$speed6 = 0.0;
    a.$elastic5 = 0;
    a.$timePassedByGlyphIndex9 = null;
}
let cgtte_SquashEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realSpeed, $progress, $lineHeight, $interpolation, $timePassed, $interpolatedValue, $xOff;
    $realSpeed = $this.$speed6 * (!$this.$elastic5 ? 1.0 : 3.0) * 0.125;
    $progress = cbgm_MathUtils_clamp(cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex9, $localIndex, 0.0, $delta) / $realSpeed, 0.0, 1.0);
    $lineHeight = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex);
    if ($progress < 0.4000000059604645) {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_sine;
        $timePassed = $progress * 2.5;
        $interpolatedValue = 1.0 - cbgm_Interpolation$9_apply($interpolation, $timePassed) * 0.5;
        $timePassed = 1.0 - $interpolatedValue;
        $xOff = $lineHeight * (-0.25) * $timePassed;
        $interpolation = $this.$label.$offsets;
        $localIndex = $globalIndex << 1;
        cbgu_FloatArray_incr($interpolation, $localIndex, $xOff);
        $interpolation = $this.$label.$offsets;
        $globalIndex = $localIndex | 1;
        $delta = $interpolatedValue - 1.0;
        cbgu_FloatArray_incr($interpolation, $globalIndex, $delta * 0.5 * $lineHeight);
        cbgu_FloatArray_incr($this.$label.$sizing, $localIndex, $timePassed);
        cbgu_FloatArray_incr($this.$label.$sizing, $globalIndex, $delta);
    } else {
        if (!$this.$elastic5) {
            cbgm_Interpolation_$callClinit();
            $interpolation = cbgm_Interpolation_sine;
        } else {
            cbgm_Interpolation_$callClinit();
            $interpolation = cbgm_Interpolation_swingOut;
        }
        $interpolatedValue = $interpolation.$apply(($progress - 0.4000000059604645) * 1.6660000085830688) * 0.5 + 0.5;
        $delta = 1.0 - $interpolatedValue;
        $xOff = $lineHeight * (-0.25) * $delta;
        $interpolation = $this.$label.$offsets;
        $localIndex = $globalIndex << 1;
        cbgu_FloatArray_incr($interpolation, $localIndex, $xOff);
        $interpolation = $this.$label.$offsets;
        $globalIndex = $localIndex | 1;
        $timePassed = $interpolatedValue - 1.0;
        cbgu_FloatArray_incr($interpolation, $globalIndex, $timePassed * 0.5 * $lineHeight);
        cbgu_FloatArray_incr($this.$label.$sizing, $localIndex, $delta);
        cbgu_FloatArray_incr($this.$label.$sizing, $globalIndex, $timePassed);
    }
};
function cgtte_ScaleEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$sizeX = 0.0;
    a.$sizeY = 0.0;
}
let cgtte_ScaleEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let var$5;
    var$5 = $this.$label.$sizing;
    $localIndex = $globalIndex << 1;
    cbgu_FloatArray_incr(var$5, $localIndex, $this.$sizeX - 1.0);
    cbgu_FloatArray_incr($this.$label.$sizing, $localIndex | 1, $this.$sizeY - 1.0);
};
function cgtte_RotateEffect() {
    cgtt_Effect.call(this);
    this.$rotation1 = 0.0;
}
let cgtte_RotateEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    cbgu_FloatArray_incr($this.$label.$rotations, $globalIndex, $this.$rotation1);
};
function cgtte_HighlightEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$baseColor = 0;
    a.$distance3 = 0.0;
    a.$frequency3 = 0.0;
    a.$saturation1 = 0.0;
    a.$lightness = 0.0;
    a.$all0 = 0;
}
let cgtte_HighlightEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let var$5, var$6, $distanceMod, $frequencyMod, $progress;
    a: {
        if (!$this.$all0) {
            var$5 = $this.$label;
            if (var$5.$overIndex == $globalIndex)
                break a;
            cgtt_TypingLabel_setInWorkingLayout(var$5, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt($this.$baseColor), 32)));
            return;
        }
        var$5 = $this.$label;
        var$6 = var$5.$overIndex;
        if (!(var$6 >= $this.$indexStart && var$6 <= $this.$indexEnd)) {
            cgtt_TypingLabel_setInWorkingLayout(var$5, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt($this.$baseColor), 32)));
            return;
        }
    }
    $distanceMod = 1.0 / $this.$distance3 * 0.02499997615814209;
    $frequencyMod = 1.0 / $this.$frequency3 * 2.0;
    $delta = $distanceMod * $localIndex;
    $progress = cgtt_Effect_calculateProgress($this, $frequencyMod, $delta, 0);
    cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt(cgttu_ColorUtils_hsl2rgb($progress, $this.$saturation1, $this.$lightness, 1.0)), 32)));
};
function cgtte_LinkEffect() {
    cgtt_Effect.call(this);
    this.$link0 = null;
}
let cgtte_LinkEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let var$5;
    var$5 = $this.$label;
    if (var$5.$lastTouchedIndex == $globalIndex) {
        var$5.$lastTouchedIndex = (-1);
        var$5 = $this.$link0;
        window.open($rt_ustr(var$5), $rt_ustr(var$5));
    }
};
function cgtte_TriggerEffect() {
    cgtt_Effect.call(this);
    this.$event0 = null;
}
let cgtte_TriggerEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let var$5;
    var$5 = $this.$label;
    if (var$5.$lastTouchedIndex == $globalIndex) {
        var$5.$lastTouchedIndex = (-1);
        cgtt_TypingLabel_triggerEvent(var$5, $this.$event0, 1);
    }
};
function cgtte_AttentionEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$spread = 0.0;
    a.$stretchY = 0.0;
}
let cgtte_AttentionEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $distance, var$6, var$7;
    $distance = jl_Math_abs0($globalIndex - $this.$label.$overIndex | 0);
    var$6 = $this.$label;
    if (var$6.$overIndex >= 0) {
        $delta = $distance;
        var$7 = $this.$spread;
        if ($delta <= var$7)
            cbgu_FloatArray_incr(var$6.$sizing, $globalIndex << 1 | 1, ($this.$stretchY - 1.0) * cbgm_MathUtils_cosDeg(90.0 * $delta / var$7));
    }
};
function cgtte_StylistEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$effects = Long_ZERO;
    a.$all = 0;
}
let cgtte_StylistEffect__init_ = ($this, $label, $params) => {
    let var$3, $set, $split;
    $params = $params.data;
    cgtt_Effect__init_($this, $label);
    $this.$effects = Long_ZERO;
    $this.$all = 0;
    $label.$trackingInput = 1;
    var$3 = $params.length;
    if (var$3 <= 0) {
        $this.$effects = Long_fromInt(1342177280);
        $this.$all = 1;
        return;
    }
    $label = $params[0];
    $set = $this;
    if (cgtt_Effect_paramAsBoolean($set, $label))
        $this.$effects = Long_or($this.$effects, Long_fromInt(1073741824));
    else if (var$3 == 1) {
        $split = jl_String_split($params[0], $rt_s(1395));
        $set = cgttu_CaseInsensitiveIntMap__init_($split, $rt_createIntArray($split.data.length));
        if (!(!cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1396)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(444)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(553))))
            $this.$effects = Long_or($this.$effects, Long_fromInt(1073741824));
        if (!(!cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1397)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1398)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(94)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1399)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1400))))
            $this.$effects = Long_or($this.$effects, Long_fromInt(536870912));
        if (!(!cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1401)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1402)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(560))))
            $this.$effects = Long_or($this.$effects, Long_fromInt(268435456));
        if (!(!cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1403)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(226)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(564)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1404))))
            $this.$effects = Long_or($this.$effects, Long_fromInt(134217728));
        if (!cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1405)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(407)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1406))) {
            if (!(!cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1407)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(543)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1408))))
                $this.$effects = Long_or($this.$effects, Long_fromInt(67108864));
            else if (!(!cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1409)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(148)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1410))))
                $this.$effects = Long_or($this.$effects, Long_fromInt(33554432));
        } else
            $this.$effects = Long_or($this.$effects, Long_fromInt(100663296));
        if (!(!cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(350)) && !cgttu_CaseInsensitiveIntMap_containsKey($set, $rt_s(1411))))
            $this.$all = 1;
        return;
    }
    if (var$3 > 1 && cgtt_Effect_paramAsBoolean($set, $params[1]))
        $this.$effects = Long_or($this.$effects, Long_fromInt(536870912));
    if (var$3 > 2 && cgtt_Effect_paramAsBoolean($set, $params[2]))
        $this.$effects = Long_or($this.$effects, Long_fromInt(268435456));
    if (var$3 > 3 && cgtt_Effect_paramAsBoolean($set, $params[3]))
        $this.$effects = Long_or($this.$effects, Long_fromInt(134217728));
    if (var$3 > 4)
        $this.$effects = Long_or($this.$effects, Long_shl(Long_and(Long_fromNumber(cgtt_Parser_stringToFloat($params[4], 0.0)), Long_fromInt(3)), 25));
    if (var$3 > 5)
        $this.$all = cgtt_Effect_paramAsBoolean($set, $params[5]);
},
cgtte_StylistEffect__init_0 = (var_0, var_1) => {
    let var_2 = new cgtte_StylistEffect();
    cgtte_StylistEffect__init_(var_2, var_0, var_1);
    return var_2;
},
cgtte_StylistEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let var$5, var$6;
    a: {
        if (!$this.$all) {
            var$5 = $this.$label;
            if (var$5.$overIndex == $globalIndex)
                break a;
            cgtt_TypingLabel_setInWorkingLayout(var$5, $globalIndex, Long_and($glyph, Long_xor($this.$effects, Long_fromInt(-1))));
            return;
        }
        var$5 = $this.$label;
        $localIndex = var$5.$overIndex;
        if (!($localIndex >= $this.$indexStart && $localIndex <= $this.$indexEnd)) {
            cgtt_TypingLabel_setInWorkingLayout(var$5, $globalIndex, Long_and($glyph, Long_xor($this.$effects, Long_fromInt(-1))));
            return;
        }
    }
    var$5 = $this.$label;
    var$6 = $this.$effects;
    cgtt_TypingLabel_setInWorkingLayout(var$5, $globalIndex, Long_or(Long_and($glyph, Long_xor(var$6, Long_fromInt(-1))), var$6));
};
function cgtte_CannonEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$initialStretch = 0.0;
    a.$extent4 = 0.0;
    a.$height5 = 0.0;
    a.$shakeDuration0 = 0.0;
    a.$shakePower = 0.0;
    a.$lastOffsets1 = null;
    a.$timePassedByGlyphIndex11 = null;
}
let cgtte_CannonEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realExtent, $arcHeight, $interpolatedValue, $shakeProgress, $interpolation, var$10, $lastX, $lastY, $x, $y, $normalIntensity, $fadeout;
    a: {
        $realExtent = $this.$extent4 * 0.8999999761581421;
        $delta = cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex11, $localIndex, 0.0, $delta) / $realExtent;
        $arcHeight = jl_Math_sqrt(cbgm_MathUtils_clamp($delta, 0.0, 1.0));
        if ($arcHeight >= 0.8999999761581421) {
            $interpolatedValue = $this.$shakeDuration0;
            if ($interpolatedValue !== 0.0) {
                $shakeProgress = cbgm_MathUtils_clamp(($delta - 1.0) / $interpolatedValue, 0.0, 1.0);
                break a;
            }
        }
        $shakeProgress = 0.0;
    }
    if ($shakeProgress === 0.0) {
        cbgm_Interpolation_$callClinit();
        $interpolatedValue = cbgm_Interpolation_apply(cbgm_Interpolation_sine, $this.$initialStretch * 3.0, 0.0, $arcHeight);
        $arcHeight = cbgm_MathUtils_sin(3.1415927410125732 * $arcHeight) * cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$height5 * 2.5;
        $interpolation = $this.$label.$sizing;
        $localIndex = $globalIndex << 1;
        cbgu_FloatArray_incr($interpolation, $localIndex, $interpolatedValue);
        $interpolation = $this.$label.$sizing;
        $localIndex = $localIndex | 1;
        cbgu_FloatArray_incr($interpolation, $localIndex, $interpolatedValue);
        cbgu_FloatArray_incr($this.$label.$offsets, $localIndex, $arcHeight);
    } else {
        $interpolation = $this.$lastOffsets1;
        var$10 = $interpolation.$size4;
        if ($localIndex >= (var$10 / 2 | 0))
            cbgu_FloatArray_setSize($interpolation, var$10 + 16 | 0);
        $interpolation = $this.$lastOffsets1;
        $localIndex = $localIndex * 2 | 0;
        $lastX = cbgu_FloatArray_get($interpolation, $localIndex);
        $interpolation = $this.$lastOffsets1;
        var$10 = $localIndex + 1 | 0;
        $lastY = cbgu_FloatArray_get($interpolation, var$10);
        $x = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$initialStretch * cbgm_MathUtils_random((-0.125), 0.125);
        $y = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$initialStretch * cbgm_MathUtils_random((-0.125), 0.125);
        $normalIntensity = cbgm_MathUtils_clamp($this.$shakePower * 1.0, 0.0, 1.0);
        cbgm_Interpolation_$callClinit();
        $delta = cbgm_Interpolation_apply(cbgm_Interpolation_linear, $lastX, $x, $normalIntensity);
        $arcHeight = cbgm_Interpolation_apply(cbgm_Interpolation_linear, $lastY, $y, $normalIntensity);
        $fadeout = 1.0 - cbgm_Interpolation$11_apply(cbgm_Interpolation_sineOut, $shakeProgress);
        $delta = $delta * $fadeout;
        $arcHeight = $arcHeight * $fadeout;
        $delta = cbgm_MathUtils_round($delta);
        $arcHeight = cbgm_MathUtils_round($arcHeight);
        cbgu_FloatArray_set($this.$lastOffsets1, $localIndex, $delta);
        cbgu_FloatArray_set($this.$lastOffsets1, var$10, $arcHeight);
        $interpolation = $this.$label.$offsets;
        $localIndex = $globalIndex << 1;
        cbgu_FloatArray_incr($interpolation, $localIndex, $delta);
        cbgu_FloatArray_incr($this.$label.$offsets, $localIndex | 1, $arcHeight);
    }
};
function cgtte_OceanEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$distance5 = 0.0;
    a.$frequency5 = 0.0;
    a.$hue = 0.0;
    a.$saturation0 = 0.0;
    a.$lightness1 = 0.0;
}
let cgtte_OceanEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $distanceMod, $frequencyMod, $progress;
    $distanceMod = 1.0 / $this.$distance5 * 0.02499997615814209;
    $frequencyMod = 1.0 / $this.$frequency5 * 2.0;
    $delta = $distanceMod * $localIndex;
    $progress = cgtt_Effect_calculateProgress($this, $frequencyMod, $delta, 0);
    cgtt_TypingLabel_setInWorkingLayout($this.$label, $globalIndex, Long_or(Long_and($glyph, Long_create(4294967295, 0)), Long_shl(Long_fromInt(cgttu_ColorUtils_hsl2rgb(cgttu_NoiseUtils_octaveNoise1D($progress * 5.0, 12345) * 0.15000000596046448 + $this.$hue, $this.$saturation0, 0.15000000596046448 - jl_Math_abs(cgttu_NoiseUtils_noise1D($progress * 3.0 + $progress * $progress, (-123456789))) * 0.30000001192092896 + $this.$lightness1, 1.0)), 32)));
};
function cgtte_SputterEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$widen = 0.0;
    a.$heighten = 0.0;
    a.$speed = 0.0;
}
let cgtte_SputterEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $hSharp, $h, $v, $vSharp, $fadeout, var$10;
    $delta = Long_toNumber(Long_and(jl_System_currentTimeMillis(), Long_fromInt(16777215))) * $this.$speed * 0.0010000000474974513;
    $hSharp = $globalIndex * 0.10000000149011612;
    $h = cgttu_NoiseUtils_octaveNoise1D($delta + $hSharp, $globalIndex);
    $v = cgttu_NoiseUtils_octaveNoise1D(Long_toNumber(Long_and(jl_System_currentTimeMillis(), Long_fromInt(16777215))) * $this.$speed * 0.0010000000474974513 + $hSharp, $globalIndex ^ (-1));
    $hSharp = $h * $h * $h * $this.$widen * 5.0 - $v * 0.25;
    $vSharp = $v * $v * $v * $this.$heighten * 5.0 - $h * 0.25;
    $fadeout = cgtt_Effect_calculateFadeout($this);
    $delta = $hSharp * $fadeout;
    $hSharp = $vSharp * $fadeout;
    var$10 = $this.$label.$sizing;
    $localIndex = $globalIndex << 1;
    cbgu_FloatArray_incr(var$10, $localIndex, $delta);
    cbgu_FloatArray_incr($this.$label.$sizing, $localIndex | 1, $hSharp);
},
cgtte_InstantEffect = $rt_classWithoutFields(cgtt_Effect),
cgtte_InstantEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let var$5;
    if ($this.$indexEnd < 0)
        $this.$label.$textSpeed = 0.0;
    else {
        var$5 = $this.$label;
        cgtt_TypingConfig_$callClinit();
        var$5.$textSpeed = cgtt_TypingConfig_DEFAULT_SPEED_PER_CHAR;
    }
};
function cgtte_SlamEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$hangTime = 0.0;
    a.$extent7 = 0.0;
    a.$height4 = 0.0;
    a.$shakeDuration = 0.0;
    a.$shakePower0 = 0.0;
    a.$lastOffsets2 = null;
    a.$timePassedByGlyphIndex10 = null;
}
let cgtte_SlamEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realExtent, $progress, $lastX, $yMove, $shakeProgress, $interpolation, var$11, var$12, $lastY, $x, $y, $normalIntensity, $fadeout;
    a: {
        $realExtent = $this.$extent7 * 1.5;
        $delta = cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex10, $localIndex,  -$this.$hangTime * 1.0 + 1.0, $delta) / $realExtent;
        $progress = cbgm_MathUtils_clamp($delta, 0.0, 1.0);
        $lastX = $progress * $progress * $progress;
        if ($lastX >= 0.8999999761581421) {
            $yMove = $this.$shakeDuration;
            if ($yMove !== 0.0) {
                $shakeProgress = cbgm_MathUtils_clamp(($delta - 1.0) / $yMove, 0.0, 1.0);
                break a;
            }
        }
        $shakeProgress = 0.0;
    }
    if ($shakeProgress === 0.0) {
        cbgm_Interpolation_$callClinit();
        $yMove = cbgm_Interpolation_apply(cbgm_Interpolation_exp10In, cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$height4 * 1.0, 0.0, $lastX * $lastX);
        cbgu_FloatArray_incr($this.$label.$offsets, $globalIndex << 1 | 1, $yMove);
    } else {
        $interpolation = $this.$lastOffsets2;
        var$11 = $interpolation.$size4;
        if ($localIndex >= (var$11 / 2 | 0))
            cbgu_FloatArray_setSize($interpolation, var$11 + 16 | 0);
        $interpolation = $this.$lastOffsets2;
        $localIndex = $localIndex * 2 | 0;
        $lastX = cbgu_FloatArray_get($interpolation, $localIndex);
        $interpolation = $this.$lastOffsets2;
        var$12 = $localIndex + 1 | 0;
        $lastY = cbgu_FloatArray_get($interpolation, var$12);
        $x = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * cbgm_MathUtils_random((-0.125), 0.125);
        $y = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * cbgm_MathUtils_random((-0.125), 0.125);
        $normalIntensity = cbgm_MathUtils_clamp($this.$shakePower0 * 1.0, 0.0, 1.0);
        cbgm_Interpolation_$callClinit();
        $delta = cbgm_Interpolation_apply(cbgm_Interpolation_linear, $lastX, $x, $normalIntensity);
        $yMove = cbgm_Interpolation_apply(cbgm_Interpolation_linear, $lastY, $y, $normalIntensity);
        $fadeout = 1.0 - cbgm_Interpolation$11_apply(cbgm_Interpolation_sineOut, $shakeProgress);
        $delta = $delta * $fadeout;
        $yMove = $yMove * $fadeout;
        $delta = cbgm_MathUtils_round($delta);
        $yMove = cbgm_MathUtils_round($yMove);
        cbgu_FloatArray_set($this.$lastOffsets2, $localIndex, $delta);
        cbgu_FloatArray_set($this.$lastOffsets2, var$12, $yMove);
        $interpolation = $this.$label.$offsets;
        $localIndex = $globalIndex << 1;
        cbgu_FloatArray_incr($interpolation, $localIndex, $delta);
        cbgu_FloatArray_incr($this.$label.$offsets, $localIndex | 1, $yMove);
    }
};
function cgtte_MeetEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$distance2 = 0.0;
    a.$extent5 = 0.0;
    a.$elastic6 = 0;
    a.$inside = 0;
    a.$timePassedByGlyphIndex1 = null;
}
let cgtte_MeetEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realExtent, $progress, $interpolation, $interpolatedValue, $random, $angle, $dist, $x, $y;
    $realExtent = $this.$extent5 * (!$this.$elastic6 ? 1.0 : 3.0) * 1.0;
    $progress = cbgm_MathUtils_clamp(cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex1, $localIndex, 0.0, $delta) / $realExtent, 0.0, 1.0);
    if (!$this.$elastic6) {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_sine;
    } else {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_swingOut;
    }
    $interpolatedValue = cbgm_Interpolation_apply($interpolation, 1.0, 0.0, $progress);
    $random = $rt_imul($rt_imul($globalIndex ^ (-561844331), 856899) ^ (-561844331), 856899);
    $angle = ($random >>> 9 | 0) * 1.1920928955078125E-7 * 6.2831854820251465;
    $dist = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$distance2 * 1.0 * (!$this.$inside ? 1.0 : jl_Math_sqrt(($rt_imul($rt_imul($random ^ (-561844331), 856899) ^ (-561844331), 856899) >>> 9 | 0) * 1.1920928955078125E-7));
    $x = cbgm_MathUtils_cos($angle) * $dist;
    $y = cbgm_MathUtils_sin($angle) * $dist;
    $interpolation = $this.$label.$offsets;
    $localIndex = $globalIndex << 1;
    cbgu_FloatArray_incr($interpolation, $localIndex, $x * $interpolatedValue);
    cbgu_FloatArray_incr($this.$label.$offsets, $localIndex | 1, $y * $interpolatedValue);
};
function cgtte_ZipperEffect() {
    let a = this; cgtt_Effect.call(a);
    a.$distance10 = 0.0;
    a.$extent6 = 0.0;
    a.$elastic4 = 0;
    a.$timePassedByGlyphIndex8 = null;
}
let cgtte_ZipperEffect_onApply = ($this, $glyph, $localIndex, $globalIndex, $delta) => {
    let $realExtent, $progress, $interpolation, $interpolatedValue, $y;
    $realExtent = $this.$extent6 * (!$this.$elastic4 ? 1.0 : 3.0) * 0.5;
    $progress = cbgm_MathUtils_clamp(cbgu_IntFloatMap_getAndIncrement($this.$timePassedByGlyphIndex8, $localIndex, 0.0, $delta) / $realExtent, 0.0, 1.0);
    if (!$this.$elastic4) {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_sine;
    } else {
        cbgm_Interpolation_$callClinit();
        $interpolation = cbgm_Interpolation_swingOut;
    }
    $interpolatedValue = cbgm_Interpolation_apply($interpolation, 1.0, 0.0, $progress);
    $y = cgtt_TypingLabel_getLineHeight($this.$label, $globalIndex) * $this.$distance10 * $interpolatedValue * 0.75 * (($globalIndex & 1) - 0.5);
    cbgu_FloatArray_incr($this.$label.$offsets, $globalIndex << 1 | 1, $y);
},
jnci_AsciiDecoder = $rt_classWithoutFields(jnci_BufferedDecoder),
jnci_AsciiDecoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, var$10, $b, var$12;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize)
                break a;
            var$9 = $inArray.data;
            var$10 = $inPos + 1 | 0;
            $b = var$9[$inPos] & 255;
            if ($b & 128) {
                $result = jnc_CoderResult_malformedForLength(1);
                $inPos = var$10 + (-1) | 0;
                break a;
            }
            var$9 = $outArray.data;
            var$12 = $outPos + 1 | 0;
            var$9[$outPos] = $b & 65535;
            $inPos = var$10;
            $outPos = var$12;
        }
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
};
function jnci_UTF16Decoder() {
    let a = this; jnci_BufferedDecoder.call(a);
    a.$bom = 0;
    a.$littleEndian0 = 0;
}
let jnci_UTF16Decoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let var$8, var$9, $b;
    if ($this.$bom) {
        if (($inPos + 2 | 0) > $inSize)
            return !jn_Buffer_hasRemaining($controller.$in1) ? jnc_CoderResult_UNDERFLOW : null;
        var$8 = $inArray.data;
        $this.$bom = 0;
        var$9 = $inPos + 1 | 0;
        $b = var$8[$inPos];
        if ($b == (-1)) {
            if (var$8[var$9] != (-2))
                $inPos = var$9 + (-1) | 0;
            else {
                $inPos = var$9 + 1 | 0;
                $this.$littleEndian0 = 1;
            }
        } else if ($b != (-2))
            $inPos = var$9 + (-1) | 0;
        else if (var$8[var$9] != (-1))
            $inPos = var$9 + (-1) | 0;
        else {
            $inPos = var$9 + 1 | 0;
            $this.$littleEndian0 = 0;
        }
    }
    return !$this.$littleEndian0 ? jnci_UTF16Decoder_decodeBE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) : jnci_UTF16Decoder_decodeLE($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller);
},
jnci_UTF16Decoder_decodeLE = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, $b2, $b1, $c, $next;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize)
                break a;
            if (($inPos + 2 | 0) > $inSize) {
                if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                    break a;
                $result = jnc_CoderResult_UNDERFLOW;
                break a;
            }
            var$9 = $inArray.data;
            $b2 = $inPos + 1 | 0;
            $b1 = var$9[$inPos] & 255;
            $inPos = $b2 + 1 | 0;
            $c = ($b1 | (var$9[$b2] & 255) << 8) & 65535;
            if (!jl_Character_isHighSurrogate($c)) {
                if (jl_Character_isLowSurrogate($c)) {
                    $inPos = $inPos + (-2) | 0;
                    $result = jnc_CoderResult_malformedForLength(2);
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2;
            } else {
                if (($inPos + 2 | 0) >= $inSize) {
                    if (!jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                        $result = jnc_CoderResult_UNDERFLOW;
                    $inPos = $inPos + (-2) | 0;
                    break a;
                }
                $b2 = $inPos + 1 | 0;
                $b1 = var$9[$inPos] & 255;
                $inPos = $b2 + 1 | 0;
                $next = ($b1 | (var$9[$b2] & 255) << 8) & 65535;
                if (!jl_Character_isLowSurrogate($next)) {
                    $inPos = $inPos + (-4) | 0;
                    $result = jnc_CoderResult_malformedForLength(4);
                    break a;
                }
                if (($outPos + 2 | 0) > $outSize) {
                    if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2 + 1 | 0;
                var$9[$b2] = $next;
            }
        }
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
},
jnci_UTF16Decoder_decodeBE = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, $b2, $b1, $c, $next;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize)
                break a;
            if (($inPos + 2 | 0) > $inSize) {
                if (jnci_BufferedDecoder$Controller_hasMoreInput($controller, 2))
                    break a;
                $result = jnc_CoderResult_UNDERFLOW;
                break a;
            }
            var$9 = $inArray.data;
            $b2 = $inPos + 1 | 0;
            $b1 = var$9[$inPos] & 255;
            $inPos = $b2 + 1 | 0;
            $c = (var$9[$b2] & 255 | $b1 << 8) & 65535;
            if (!jl_Character_isHighSurrogate($c)) {
                if (jl_Character_isLowSurrogate($c)) {
                    $inPos = $inPos + (-2) | 0;
                    $result = jnc_CoderResult_malformedForLength(2);
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2;
            } else {
                if (($inPos + 2 | 0) >= $inSize) {
                    if (!jnci_BufferedDecoder$Controller_hasMoreInput($controller, 4))
                        $result = jnc_CoderResult_UNDERFLOW;
                    $inPos = $inPos + (-2) | 0;
                    break a;
                }
                $b2 = $inPos + 1 | 0;
                $b1 = var$9[$inPos] & 255;
                $inPos = $b2 + 1 | 0;
                $next = (var$9[$b2] & 255 | $b1 << 8) & 65535;
                if (!jl_Character_isLowSurrogate($next)) {
                    $inPos = $inPos + (-4) | 0;
                    $result = jnc_CoderResult_malformedForLength(4);
                    break a;
                }
                if (($outPos + 2 | 0) > $outSize) {
                    if (jnci_BufferedDecoder$Controller_hasMoreOutput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$9 = $outArray.data;
                $b2 = $outPos + 1 | 0;
                var$9[$outPos] = $c;
                $outPos = $b2 + 1 | 0;
                var$9[$b2] = $next;
            }
        }
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
},
jnci_Iso8859Decoder = $rt_classWithoutFields(jnci_BufferedDecoder),
jnci_Iso8859Decoder_arrayDecode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, var$10, var$11, $b, var$13;
    $result = null;
    while ($inPos < $inSize && $outPos < $outSize) {
        var$9 = $inArray.data;
        var$10 = $outArray.data;
        var$11 = $inPos + 1 | 0;
        $b = var$9[$inPos] & 255;
        var$13 = $outPos + 1 | 0;
        var$10[$outPos] = $b & 65535;
        $inPos = var$11;
        $outPos = var$13;
    }
    $controller.$inPosition = $inPos;
    $controller.$outPosition = $outPos;
    return $result;
};
function cbggg_ParticleEmitter$ParticleValue() {
    let a = this; jl_Object.call(a);
    a.$active = 0;
    a.$alwaysActive = 0;
}
let cbggg_ParticleEmitter$ParticleValue_setActive = ($this, $active) => {
    $this.$active = $active;
},
cbggg_ParticleEmitter$ParticleValue_load = ($this, $reader) => {
    if ($this.$alwaysActive)
        $this.$active = 1;
    else
        $this.$active = cbggg_ParticleEmitter_readBoolean($reader, $rt_s(1412));
};
function cbggg_ParticleEmitter$RangedNumericValue() {
    let a = this; cbggg_ParticleEmitter$ParticleValue.call(a);
    a.$lowMin = 0.0;
    a.$lowMax = 0.0;
}
let cbggg_ParticleEmitter$RangedNumericValue_newLowValue = $this => {
    let var$1;
    var$1 = $this.$lowMin;
    return var$1 + ($this.$lowMax - var$1) * cbgm_MathUtils_random2();
},
cbggg_ParticleEmitter$RangedNumericValue_load = ($this, $reader) => {
    cbggg_ParticleEmitter$ParticleValue_load($this, $reader);
    if (!$this.$active)
        return;
    $this.$lowMin = cbggg_ParticleEmitter_readFloat($reader, $rt_s(1413));
    $this.$lowMax = cbggg_ParticleEmitter_readFloat($reader, $rt_s(1414));
};
function cbggg_ParticleEmitter$ScaledNumericValue() {
    let a = this; cbggg_ParticleEmitter$RangedNumericValue.call(a);
    a.$scaling = null;
    a.$timeline = null;
    a.$highMin = 0.0;
    a.$highMax = 0.0;
    a.$relative = 0;
}
let cbggg_ParticleEmitter$ScaledNumericValue__init_0 = $this => {
    let var$1;
    var$1 = $rt_createFloatArray(1);
    var$1.data[0] = 1.0;
    $this.$scaling = var$1;
    var$1 = $rt_createFloatArray(1);
    var$1.data[0] = 0.0;
    $this.$timeline = var$1;
},
cbggg_ParticleEmitter$ScaledNumericValue__init_ = () => {
    let var_0 = new cbggg_ParticleEmitter$ScaledNumericValue();
    cbggg_ParticleEmitter$ScaledNumericValue__init_0(var_0);
    return var_0;
},
cbggg_ParticleEmitter$ScaledNumericValue_newHighValue = $this => {
    let var$1;
    var$1 = $this.$highMin;
    return var$1 + ($this.$highMax - var$1) * cbgm_MathUtils_random2();
},
cbggg_ParticleEmitter$ScaledNumericValue_getScale = ($this, $percent) => {
    let $timeline, $n, $i, $scaling, $startIndex, $startValue, $startTime;
    $timeline = $this.$timeline.data;
    $n = $timeline.length;
    $i = 1;
    a: {
        while (true) {
            if ($i >= $n) {
                $i = (-1);
                break a;
            }
            if ($timeline[$i] > $percent)
                break;
            $i = $i + 1 | 0;
        }
    }
    if ($i == (-1))
        return $this.$scaling.data[$n - 1 | 0];
    $scaling = $this.$scaling.data;
    $startIndex = $i - 1 | 0;
    $startValue = $scaling[$startIndex];
    $startTime = $timeline[$startIndex];
    return $startValue + ($scaling[$i] - $startValue) * ($percent - $startTime) / ($timeline[$i] - $startTime);
},
cbggg_ParticleEmitter$ScaledNumericValue_load = ($this, $reader) => {
    let $i, var$3, var$4;
    cbggg_ParticleEmitter$RangedNumericValue_load($this, $reader);
    if (!$this.$active)
        return;
    $this.$highMin = cbggg_ParticleEmitter_readFloat($reader, $rt_s(1415));
    $this.$highMax = cbggg_ParticleEmitter_readFloat($reader, $rt_s(1416));
    $this.$relative = cbggg_ParticleEmitter_readBoolean($reader, $rt_s(1417));
    $this.$scaling = $rt_createFloatArray(cbggg_ParticleEmitter_readInt($reader, $rt_s(1418)));
    $i = 0;
    while (true) {
        var$3 = $this.$scaling.data;
        if ($i >= var$3.length)
            break;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(1419));
        var$3[$i] = cbggg_ParticleEmitter_readFloat($reader, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$4, $i)));
        $i = $i + 1 | 0;
    }
    $this.$timeline = $rt_createFloatArray(cbggg_ParticleEmitter_readInt($reader, $rt_s(1420)));
    $i = 0;
    while (true) {
        var$3 = $this.$timeline.data;
        if ($i >= var$3.length)
            break;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(1421));
        var$3[$i] = cbggg_ParticleEmitter_readFloat($reader, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$4, $i)));
        $i = $i + 1 | 0;
    }
};
function cbggg_ParticleEmitter$IndependentScaledNumericValue() {
    cbggg_ParticleEmitter$ScaledNumericValue.call(this);
    this.$independent = 0;
}
let cbggg_ParticleEmitter$IndependentScaledNumericValue_load = ($this, $reader) => {
    let $line;
    cbggg_ParticleEmitter$ScaledNumericValue_load($this, $reader);
    $line = ji_BufferedReader_readLine($reader);
    if ($line === null) {
        $reader = new ji_IOException;
        jl_Throwable__init_($reader, $rt_s(1422));
        $rt_throw($reader);
    }
    if (jl_String_contains($line, $rt_s(1423))) {
        $this.$independent = jl_Boolean_parseBoolean(cbggg_ParticleEmitter_readString0($line));
        return;
    }
    cgxgbt_TeaApplication_error(cbg_Gdx_app, $rt_s(1424), $rt_s(1425));
    $reader = new ji_IOException;
    jl_Throwable__init_($reader, $rt_s(1425));
    $rt_throw($reader);
};
function cbggg_ParticleEmitter$GradientColorValue() {
    let a = this; cbggg_ParticleEmitter$ParticleValue.call(a);
    a.$colors = null;
    a.$timeline0 = null;
}
let cbggg_ParticleEmitter$GradientColorValue_temp = null,
cbggg_ParticleEmitter$GradientColorValue_getColor = ($this, $percent) => {
    let $startIndex, $timeline, $n, $i, $i_0, $startTime, var$8, $r1, $g1, $b1, $factor, var$13;
    $startIndex = 0;
    $timeline = $this.$timeline0.data;
    $n = $timeline.length;
    $i = 1;
    a: {
        while (true) {
            if ($i >= $n) {
                $i = (-1);
                break a;
            }
            if ($timeline[$i] > $percent)
                break;
            $i_0 = $i + 1 | 0;
            $startIndex = $i;
            $i = $i_0;
        }
    }
    $startTime = $timeline[$startIndex];
    $startIndex = $startIndex * 3 | 0;
    var$8 = $this.$colors.data;
    $r1 = var$8[$startIndex];
    $g1 = var$8[$startIndex + 1 | 0];
    $b1 = var$8[$startIndex + 2 | 0];
    if ($i == (-1)) {
        $timeline = cbggg_ParticleEmitter$GradientColorValue_temp;
        var$8 = $timeline.data;
        var$8[0] = $r1;
        var$8[1] = $g1;
        var$8[2] = $b1;
        return $timeline;
    }
    $factor = ($percent - $startTime) / ($timeline[$i] - $startTime);
    $n = $i * 3 | 0;
    $timeline = cbggg_ParticleEmitter$GradientColorValue_temp;
    var$13 = $timeline.data;
    var$13[0] = $r1 + (var$8[$n] - $r1) * $factor;
    var$13[1] = $g1 + (var$8[$n + 1 | 0] - $g1) * $factor;
    var$13[2] = $b1 + (var$8[$n + 2 | 0] - $b1) * $factor;
    return $timeline;
},
cbggg_ParticleEmitter$GradientColorValue_load = ($this, $reader) => {
    let $i, var$3, var$4;
    cbggg_ParticleEmitter$ParticleValue_load($this, $reader);
    if (!$this.$active)
        return;
    $this.$colors = $rt_createFloatArray(cbggg_ParticleEmitter_readInt($reader, $rt_s(1426)));
    $i = 0;
    while (true) {
        var$3 = $this.$colors.data;
        if ($i >= var$3.length)
            break;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(1427));
        var$3[$i] = cbggg_ParticleEmitter_readFloat($reader, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$4, $i)));
        $i = $i + 1 | 0;
    }
    $this.$timeline0 = $rt_createFloatArray(cbggg_ParticleEmitter_readInt($reader, $rt_s(1420)));
    $i = 0;
    while (true) {
        var$3 = $this.$timeline0.data;
        if ($i >= var$3.length)
            break;
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(1421));
        var$3[$i] = cbggg_ParticleEmitter_readFloat($reader, jl_AbstractStringBuilder_toString(jl_StringBuilder_append1(var$4, $i)));
        $i = $i + 1 | 0;
    }
},
cbggg_ParticleEmitter$GradientColorValue__clinit_ = () => {
    cbggg_ParticleEmitter$GradientColorValue_temp = $rt_createFloatArray(4);
};
function cbggg_ParticleEmitter$SpawnShapeValue() {
    let a = this; cbggg_ParticleEmitter$ParticleValue.call(a);
    a.$shape = null;
    a.$edges = 0;
    a.$side = null;
}
let cbggg_ParticleEmitter$SpawnShapeValue_load = ($this, $reader) => {
    let var$2;
    cbggg_ParticleEmitter$ParticleValue_load($this, $reader);
    if (!$this.$active)
        return;
    var$2 = jl_Enum_valueOf($rt_cls(cbggg_ParticleEmitter$SpawnShape), cbggg_ParticleEmitter_readString($reader, $rt_s(1428)));
    $this.$shape = var$2;
    if (var$2 === cbggg_ParticleEmitter$SpawnShape_ellipse) {
        $this.$edges = cbggg_ParticleEmitter_readBoolean($reader, $rt_s(1429));
        $this.$side = jl_Enum_valueOf($rt_cls(cbggg_ParticleEmitter$SpawnEllipseSide), cbggg_ParticleEmitter_readString($reader, $rt_s(1430)));
    }
},
cbggg_ParticleEmitter$SpriteMode = $rt_classWithoutFields(jl_Enum),
cbggg_ParticleEmitter$SpriteMode_single = null,
cbggg_ParticleEmitter$SpriteMode_random = null,
cbggg_ParticleEmitter$SpriteMode_animated = null,
cbggg_ParticleEmitter$SpriteMode_$VALUES = null,
cbggg_ParticleEmitter$SpriteMode_values = () => {
    return cbggg_ParticleEmitter$SpriteMode_$VALUES.$clone0();
},
cbggg_ParticleEmitter$SpriteMode_valueOf = $name => {
    return jl_Enum_valueOf($rt_cls(cbggg_ParticleEmitter$SpriteMode), $name);
},
cbggg_ParticleEmitter$SpriteMode__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbggg_ParticleEmitter$SpriteMode;
    jl_Enum__init_(var$1, $rt_s(1431), 0);
    cbggg_ParticleEmitter$SpriteMode_single = var$1;
    var$1 = new cbggg_ParticleEmitter$SpriteMode;
    jl_Enum__init_(var$1, $rt_s(1432), 1);
    cbggg_ParticleEmitter$SpriteMode_random = var$1;
    var$1 = new cbggg_ParticleEmitter$SpriteMode;
    jl_Enum__init_(var$1, $rt_s(1433), 2);
    cbggg_ParticleEmitter$SpriteMode_animated = var$1;
    var$2 = $rt_createArray(cbggg_ParticleEmitter$SpriteMode, 3);
    var$3 = var$2.data;
    var$3[0] = cbggg_ParticleEmitter$SpriteMode_single;
    var$3[1] = cbggg_ParticleEmitter$SpriteMode_random;
    var$3[2] = var$1;
    cbggg_ParticleEmitter$SpriteMode_$VALUES = var$2;
},
cbggg_ParticleEmitter$SpawnShape = $rt_classWithoutFields(jl_Enum),
cbggg_ParticleEmitter$SpawnShape_point = null,
cbggg_ParticleEmitter$SpawnShape_line = null,
cbggg_ParticleEmitter$SpawnShape_square = null,
cbggg_ParticleEmitter$SpawnShape_ellipse = null,
cbggg_ParticleEmitter$SpawnShape_$VALUES = null,
cbggg_ParticleEmitter$SpawnShape_values = () => {
    return cbggg_ParticleEmitter$SpawnShape_$VALUES.$clone0();
},
cbggg_ParticleEmitter$SpawnShape__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbggg_ParticleEmitter$SpawnShape;
    jl_Enum__init_(var$1, $rt_s(1434), 0);
    cbggg_ParticleEmitter$SpawnShape_point = var$1;
    var$1 = new cbggg_ParticleEmitter$SpawnShape;
    jl_Enum__init_(var$1, $rt_s(1435), 1);
    cbggg_ParticleEmitter$SpawnShape_line = var$1;
    var$1 = new cbggg_ParticleEmitter$SpawnShape;
    jl_Enum__init_(var$1, $rt_s(1436), 2);
    cbggg_ParticleEmitter$SpawnShape_square = var$1;
    var$1 = new cbggg_ParticleEmitter$SpawnShape;
    jl_Enum__init_(var$1, $rt_s(1437), 3);
    cbggg_ParticleEmitter$SpawnShape_ellipse = var$1;
    var$2 = $rt_createArray(cbggg_ParticleEmitter$SpawnShape, 4);
    var$3 = var$2.data;
    var$3[0] = cbggg_ParticleEmitter$SpawnShape_point;
    var$3[1] = cbggg_ParticleEmitter$SpawnShape_line;
    var$3[2] = cbggg_ParticleEmitter$SpawnShape_square;
    var$3[3] = var$1;
    cbggg_ParticleEmitter$SpawnShape_$VALUES = var$2;
},
cbggg_ParticleEmitter$SpawnEllipseSide = $rt_classWithoutFields(jl_Enum),
cbggg_ParticleEmitter$SpawnEllipseSide_both = null,
cbggg_ParticleEmitter$SpawnEllipseSide_top = null,
cbggg_ParticleEmitter$SpawnEllipseSide_bottom = null,
cbggg_ParticleEmitter$SpawnEllipseSide_$VALUES = null,
cbggg_ParticleEmitter$SpawnEllipseSide_values = () => {
    return cbggg_ParticleEmitter$SpawnEllipseSide_$VALUES.$clone0();
},
cbggg_ParticleEmitter$SpawnEllipseSide__clinit_ = () => {
    let var$1, var$2, var$3;
    var$1 = new cbggg_ParticleEmitter$SpawnEllipseSide;
    jl_Enum__init_(var$1, $rt_s(1438), 0);
    cbggg_ParticleEmitter$SpawnEllipseSide_both = var$1;
    var$1 = new cbggg_ParticleEmitter$SpawnEllipseSide;
    jl_Enum__init_(var$1, $rt_s(1439), 1);
    cbggg_ParticleEmitter$SpawnEllipseSide_top = var$1;
    var$1 = new cbggg_ParticleEmitter$SpawnEllipseSide;
    jl_Enum__init_(var$1, $rt_s(1440), 2);
    cbggg_ParticleEmitter$SpawnEllipseSide_bottom = var$1;
    var$2 = $rt_createArray(cbggg_ParticleEmitter$SpawnEllipseSide, 3);
    var$3 = var$2.data;
    var$3[0] = cbggg_ParticleEmitter$SpawnEllipseSide_both;
    var$3[1] = cbggg_ParticleEmitter$SpawnEllipseSide_top;
    var$3[2] = var$1;
    cbggg_ParticleEmitter$SpawnEllipseSide_$VALUES = var$2;
},
cbggg_ParticleEmitter$1 = $rt_classWithoutFields(),
cbggg_ParticleEmitter$1_$SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpriteMode = null,
cbggg_ParticleEmitter$1_$SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnEllipseSide = null,
cbggg_ParticleEmitter$1_$SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnShape = null,
cbggg_ParticleEmitter$1_$callClinit = () => {
    cbggg_ParticleEmitter$1_$callClinit = $rt_eraseClinit(cbggg_ParticleEmitter$1);
    cbggg_ParticleEmitter$1__clinit_();
},
cbggg_ParticleEmitter$1__clinit_ = () => {
    let var$1, var$2;
    var$1 = $rt_createIntArray((cbggg_ParticleEmitter$SpawnShape_values()).data.length);
    var$2 = var$1.data;
    cbggg_ParticleEmitter$1_$SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnShape = var$1;
    var$2[cbggg_ParticleEmitter$SpawnShape_square.$ordinal0] = 1;
    var$2[cbggg_ParticleEmitter$SpawnShape_ellipse.$ordinal0] = 2;
    var$2[cbggg_ParticleEmitter$SpawnShape_line.$ordinal0] = 3;
    var$2 = $rt_createIntArray((cbggg_ParticleEmitter$SpawnEllipseSide_values()).data.length);
    var$1 = var$2.data;
    cbggg_ParticleEmitter$1_$SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpawnEllipseSide = var$2;
    var$1[cbggg_ParticleEmitter$SpawnEllipseSide_top.$ordinal0] = 1;
    var$1[cbggg_ParticleEmitter$SpawnEllipseSide_bottom.$ordinal0] = 2;
    var$2 = $rt_createIntArray((cbggg_ParticleEmitter$SpriteMode_values()).data.length);
    var$1 = var$2.data;
    cbggg_ParticleEmitter$1_$SwitchMap$com$badlogic$gdx$graphics$g2d$ParticleEmitter$SpriteMode = var$2;
    var$1[cbggg_ParticleEmitter$SpriteMode_single.$ordinal0] = 1;
    var$1[cbggg_ParticleEmitter$SpriteMode_animated.$ordinal0] = 2;
    var$1[cbggg_ParticleEmitter$SpriteMode_random.$ordinal0] = 3;
};
function cbggg_ParticleEmitter$Particle() {
    let a = this; cbggg_Sprite.call(a);
    a.$life1 = 0;
    a.$currentLife = 0;
    a.$xScale = 0.0;
    a.$xScaleDiff = 0.0;
    a.$yScale = 0.0;
    a.$yScaleDiff = 0.0;
    a.$rotation0 = 0.0;
    a.$rotationDiff = 0.0;
    a.$velocity = 0.0;
    a.$velocityDiff = 0.0;
    a.$angle0 = 0.0;
    a.$angleDiff = 0.0;
    a.$angleCos = 0.0;
    a.$angleSin = 0.0;
    a.$transparency = 0.0;
    a.$transparencyDiff = 0.0;
    a.$wind = 0.0;
    a.$windDiff = 0.0;
    a.$gravity = 0.0;
    a.$gravityDiff = 0.0;
    a.$tint = null;
    a.$frame = 0;
}
function jl_Byte() {
    jl_Number.call(this);
    this.$value4 = 0;
}
let jl_Byte_TYPE = null,
jl_Byte_byteCache = null,
jl_Byte__clinit_ = () => {
    let var$1, var$2, var$3, var$4, var$5;
    jl_Byte_TYPE = $rt_cls($rt_bytecls);
    var$1 = $rt_createArray(jl_Byte, 256);
    var$2 = var$1.data;
    var$3 = 0;
    var$4 = var$2.length;
    while (var$3 < var$4) {
        var$5 = new jl_Byte;
        var$5.$value4 = (var$3 - 128 | 0) << 24 >> 24;
        var$2[var$3] = var$5;
        var$3 = var$3 + 1 | 0;
    }
    jl_Byte_byteCache = var$1;
};
function ji_ByteArrayInputStream() {
    let a = this; ji_InputStream.call(a);
    a.$buf0 = null;
    a.$pos = 0;
    a.$mark1 = 0;
    a.$count3 = 0;
}
let ji_ByteArrayInputStream__init_ = ($this, $buf) => {
    let var$2;
    var$2 = $buf.data.length;
    $this.$buf0 = $buf;
    $this.$pos = 0;
    $this.$mark1 = 0;
    $this.$count3 = 0 + var$2 | 0;
},
ji_ByteArrayInputStream__init_0 = var_0 => {
    let var_1 = new ji_ByteArrayInputStream();
    ji_ByteArrayInputStream__init_(var_1, var_0);
    return var_1;
},
ji_ByteArrayInputStream_read = ($this, $b, $off, $len) => {
    let $bytesToRead, $i, var$6, var$7, var$8;
    $bytesToRead = jl_Math_min($len, $this.$count3 - $this.$pos | 0);
    $i = 0;
    while ($i < $bytesToRead) {
        var$6 = $b.data;
        $len = $off + 1 | 0;
        var$7 = $this.$buf0.data;
        var$8 = $this.$pos;
        $this.$pos = var$8 + 1 | 0;
        var$6[$off] = var$7[var$8];
        $i = $i + 1 | 0;
        $off = $len;
    }
    if ($bytesToRead <= 0)
        $bytesToRead = (-1);
    return $bytesToRead;
},
ji_ByteArrayInputStream_available = $this => {
    return $this.$count3 - $this.$pos | 0;
},
ji_ByteArrayInputStream_close = $this => {
    return;
};
function jnc_CharsetEncoder() {
    let a = this; jl_Object.call(a);
    a.$charset = null;
    a.$replacement1 = null;
    a.$averageBytesPerChar = 0.0;
    a.$maxBytesPerChar = 0.0;
    a.$malformedAction0 = null;
    a.$unmappableAction = null;
    a.$status = 0;
}
let jnc_CharsetEncoder_onMalformedInput = ($this, $newAction) => {
    let var$2;
    if ($newAction !== null) {
        $this.$malformedAction0 = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$2, $rt_s(1441));
    $rt_throw(var$2);
},
jnc_CharsetEncoder_onUnmappableCharacter = ($this, $newAction) => {
    let var$2;
    if ($newAction !== null) {
        $this.$unmappableAction = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$2, $rt_s(1441));
    $rt_throw(var$2);
},
jnc_CharsetEncoder_encode = ($this, $in, $out, $endOfInput) => {
    let var$4, $e, $result, $remaining, $action, var$9, $$je;
    a: {
        var$4 = $this.$status;
        if (var$4 != 3) {
            if ($endOfInput)
                break a;
            if (var$4 != 2)
                break a;
        }
        $in = new jl_IllegalStateException;
        jl_Exception__init_($in);
        $rt_throw($in);
    }
    $this.$status = !$endOfInput ? 1 : 2;
    $e = $this;
    while (true) {
        try {
            $result = jnci_BufferedEncoder_encodeLoop($e, $in, $out);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_RuntimeException) {
                $e = $$je;
                $rt_throw(jnc_CoderMalfunctionError__init_($e));
            } else {
                throw $$e;
            }
        }
        if (jnc_CoderResult_isUnderflow($result)) {
            if (!$endOfInput)
                return $result;
            $remaining = jn_Buffer_remaining($in);
            if ($remaining <= 0)
                return $result;
            $result = jnc_CoderResult_malformedForLength($remaining);
        } else if (jnc_CoderResult_isOverflow($result))
            break;
        $action = !jnc_CoderResult_isUnmappable($result) ? $this.$malformedAction0 : $this.$unmappableAction;
        b: {
            if ($action !== jnc_CodingErrorAction_REPLACE) {
                if ($action === jnc_CodingErrorAction_IGNORE)
                    break b;
                else
                    return $result;
            }
            $remaining = jn_Buffer_remaining($out);
            var$9 = $this.$replacement1;
            var$4 = var$9.data.length;
            if ($remaining < var$4)
                return jnc_CoderResult_OVERFLOW;
            jn_ByteBuffer_put($out, var$9, 0, var$4);
        }
        jn_Buffer_position($in, $in.$position0 + jnc_CoderResult_length($result) | 0);
    }
    return $result;
},
jnc_CharsetEncoder_encode0 = ($this, $in) => {
    let $output, $result, var$4;
    if (!jn_Buffer_remaining($in))
        return jn_ByteBuffer_allocate(0);
    $this.$status = 0;
    $output = jn_ByteBuffer_allocate(jn_Buffer_remaining($in) * $this.$averageBytesPerChar | 0);
    while (true) {
        $result = jnc_CharsetEncoder_encode($this, $in, $output, 0);
        if ($result === jnc_CoderResult_UNDERFLOW)
            break;
        if ($result === jnc_CoderResult_OVERFLOW) {
            $output = jnc_CharsetEncoder_allocateMore($this, $output);
            continue;
        }
        if (!jnc_CoderResult_isError($result))
            continue;
        jnc_CoderResult_throwException($result);
    }
    $in = jnc_CharsetEncoder_encode($this, $in, $output, 1);
    if (jnc_CoderResult_isError($in))
        jnc_CoderResult_throwException($in);
    while (true) {
        var$4 = $this.$status;
        if (var$4 != 2 && var$4 != 4) {
            $in = new jl_IllegalStateException;
            jl_Exception__init_($in);
            $rt_throw($in);
        }
        $in = jnc_CoderResult_UNDERFLOW;
        if ($in === $in)
            $this.$status = 3;
        if (jnc_CoderResult_isUnderflow($in))
            break;
        if (!jnc_CoderResult_isOverflow($in))
            continue;
        $output = jnc_CharsetEncoder_allocateMore($this, $output);
    }
    jn_Buffer_flip($output);
    return $output;
},
jnc_CharsetEncoder_allocateMore = ($this, $buffer) => {
    let $array, $result;
    $array = jn_ByteBuffer_array($buffer);
    $result = jn_ByteBuffer_wrap(ju_Arrays_copyOf($array, $array.data.length * 2 | 0));
    jn_Buffer_position($result, $buffer.$position0);
    return $result;
},
jnc_CharacterCodingException = $rt_classWithoutFields(ji_IOException),
jl_AssertionError = $rt_classWithoutFields(jl_Error);
function jl_Boolean() {
    jl_Object.call(this);
    this.$value5 = 0;
}
let jl_Boolean_TRUE = null,
jl_Boolean_FALSE = null,
jl_Boolean_TYPE = null,
jl_Boolean__init_0 = ($this, $value) => {
    $this.$value5 = $value;
},
jl_Boolean__init_ = var_0 => {
    let var_1 = new jl_Boolean();
    jl_Boolean__init_0(var_1, var_0);
    return var_1;
},
jl_Boolean_parseBoolean = $s => {
    let var$2, var$3;
    a: {
        if ($s !== null) {
            var$2 = $s.$nativeString.toLowerCase();
            if (var$2 !== $s.$nativeString)
                $s = jl_String__init_1(var$2);
            if (jl_String_equals($s, $rt_s(41))) {
                var$3 = 1;
                break a;
            }
        }
        var$3 = 0;
    }
    return var$3;
},
jl_Boolean__clinit_ = () => {
    jl_Boolean_TRUE = jl_Boolean__init_(1);
    jl_Boolean_FALSE = jl_Boolean__init_(0);
    jl_Boolean_TYPE = $rt_cls($rt_booleancls);
};
function jnc_CoderResult() {
    let a = this; jl_Object.call(a);
    a.$kind = 0;
    a.$length4 = 0;
}
let jnc_CoderResult_UNDERFLOW = null,
jnc_CoderResult_OVERFLOW = null,
jnc_CoderResult__init_0 = ($this, $kind, $length) => {
    $this.$kind = $kind;
    $this.$length4 = $length;
},
jnc_CoderResult__init_ = (var_0, var_1) => {
    let var_2 = new jnc_CoderResult();
    jnc_CoderResult__init_0(var_2, var_0, var_1);
    return var_2;
},
jnc_CoderResult_isUnderflow = $this => {
    return $this.$kind ? 0 : 1;
},
jnc_CoderResult_isOverflow = $this => {
    return $this.$kind != 1 ? 0 : 1;
},
jnc_CoderResult_isError = $this => {
    return !jnc_CoderResult_isMalformed($this) && !jnc_CoderResult_isUnmappable($this) ? 0 : 1;
},
jnc_CoderResult_isMalformed = $this => {
    return $this.$kind != 2 ? 0 : 1;
},
jnc_CoderResult_isUnmappable = $this => {
    return $this.$kind != 3 ? 0 : 1;
},
jnc_CoderResult_length = $this => {
    let var$1;
    if (jnc_CoderResult_isError($this))
        return $this.$length4;
    var$1 = new jl_UnsupportedOperationException;
    jl_Exception__init_(var$1);
    $rt_throw(var$1);
},
jnc_CoderResult_malformedForLength = $length => {
    return jnc_CoderResult__init_(2, $length);
},
jnc_CoderResult_throwException = $this => {
    let var$1, var$2;
    switch ($this.$kind) {
        case 0:
            var$1 = new jnc_BufferUnderflowException;
            jl_Exception__init_(var$1);
            $rt_throw(var$1);
        case 1:
            var$1 = new jnc_BufferOverflowException;
            jl_Exception__init_(var$1);
            $rt_throw(var$1);
        case 2:
            var$1 = new jnc_MalformedInputException;
            var$2 = $this.$length4;
            jl_Exception__init_(var$1);
            var$1.$length8 = var$2;
            $rt_throw(var$1);
        case 3:
            var$1 = new jnc_UnmappableCharacterException;
            var$2 = $this.$length4;
            jl_Exception__init_(var$1);
            var$1.$length7 = var$2;
            $rt_throw(var$1);
        default:
    }
},
jnc_CoderResult__clinit_ = () => {
    jnc_CoderResult_UNDERFLOW = jnc_CoderResult__init_(0, 0);
    jnc_CoderResult_OVERFLOW = jnc_CoderResult__init_(1, 0);
},
jnc_CoderMalfunctionError = $rt_classWithoutFields(jl_Error),
jnc_CoderMalfunctionError__init_0 = ($this, $cause) => {
    jl_Throwable_initNativeException($this);
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    jl_Throwable_fillInStackTrace($this);
    $this.$cause = $cause;
},
jnc_CoderMalfunctionError__init_ = var_0 => {
    let var_1 = new jnc_CoderMalfunctionError();
    jnc_CoderMalfunctionError__init_0(var_1, var_0);
    return var_1;
};
function cbgu_Sort() {
    jl_Object.call(this);
    this.$comparableTimSort = null;
}
let cbgu_Sort_instance = null,
jnc_BufferUnderflowException = $rt_classWithoutFields(jl_RuntimeException),
jnc_BufferOverflowException = $rt_classWithoutFields(jl_RuntimeException);
function jnc_MalformedInputException() {
    jnc_CharacterCodingException.call(this);
    this.$length8 = 0;
}
let jnc_MalformedInputException_getMessage = $this => {
    let var$1, var$2;
    var$1 = $this.$length8;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append1(jl_StringBuilder_append(var$2, $rt_s(1442)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
};
function jnc_UnmappableCharacterException() {
    jnc_CharacterCodingException.call(this);
    this.$length7 = 0;
}
let jnc_UnmappableCharacterException_getMessage = $this => {
    let var$1, var$2;
    var$1 = $this.$length7;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_StringBuilder_append1(jl_StringBuilder_append(var$2, $rt_s(1443)), var$1);
    return jl_AbstractStringBuilder_toString(var$2);
},
cgttu_NoiseUtils = $rt_classWithoutFields(),
cgttu_NoiseUtils_noise1D = ($x, $seed) => {
    let $xFloor, $rise, $h;
    $x = $x + $seed * 5.960464477539063E-8;
    $xFloor = cbgm_MathUtils_floor($x);
    $rise = 1 - (cbgm_MathUtils_floor($x + $x) & 2) | 0;
    $x = $x - $xFloor;
    $h = cbgu_NumberUtils_intBitsToFloat(Long_lo(Long_shru(Long_mul(Long_xor(Long_fromInt($seed + $xFloor | 0), Long_create(2135587861, 2654435769)), Long_create(3516067075, 3518319154)), 41)) | 1107296256) - 48.0;
    $x = $x * ($x - 1.0);
    return $rise * $x * $x * $h;
},
cgttu_NoiseUtils_octaveNoise1D = ($x, $seed) => {
    return cgttu_NoiseUtils_noise1D($x, $seed) * 0.6666666865348816 + cgttu_NoiseUtils_noise1D($x * 1.899999976158142, $seed ^ (-1)) * 0.3333333432674408;
};
function jnci_BufferedEncoder() {
    let a = this; jnc_CharsetEncoder.call(a);
    a.$inArray0 = null;
    a.$outArray = null;
}
let jnci_BufferedEncoder_encodeLoop = ($this, $in, $out) => {
    let $inArray, $inPos, $inSize, $outArray, var$7, $i, var$9, $outPos, $result, $outSize, $controller;
    $inArray = $this.$inArray0;
    $inPos = 0;
    $inSize = 0;
    $outArray = $this.$outArray;
    var$7 = $this;
    a: {
        while (true) {
            if (($inPos + 32 | 0) > $inSize && jn_Buffer_hasRemaining($in)) {
                $i = $inPos;
                while ($i < $inSize) {
                    var$9 = $inArray.data;
                    var$9[$i - $inPos | 0] = var$9[$i];
                    $i = $i + 1 | 0;
                }
                var$9 = $inArray.data;
                $outPos = $inSize - $inPos | 0;
                $inSize = jl_Math_min(jn_Buffer_remaining($in) + $outPos | 0, var$9.length);
                jn_CharBuffer_get($in, $inArray, $outPos, $inSize - $outPos | 0);
                $inPos = 0;
            }
            if (!jn_Buffer_hasRemaining($out)) {
                $result = !jn_Buffer_hasRemaining($in) && $inPos >= $inSize ? jnc_CoderResult_UNDERFLOW : jnc_CoderResult_OVERFLOW;
                break a;
            }
            var$9 = $outArray.data;
            $outSize = jl_Math_min(jn_Buffer_remaining($out), var$9.length);
            $controller = new jnci_BufferedEncoder$Controller;
            $controller.$in2 = $in;
            $controller.$out3 = $out;
            $result = jnci_UTF8Encoder_arrayEncode(var$7, $inArray, $inPos, $inSize, $outArray, 0, $outSize, $controller);
            $inPos = $controller.$inPosition0;
            $outPos = $controller.$outPosition0;
            if ($result === null) {
                if (!jn_Buffer_hasRemaining($in) && $inPos >= $inSize)
                    $result = jnc_CoderResult_UNDERFLOW;
                else if (!jn_Buffer_hasRemaining($out) && $inPos >= $inSize)
                    $result = jnc_CoderResult_OVERFLOW;
            }
            jn_ByteBuffer_put($out, $outArray, 0, $outPos);
            if ($result !== null)
                break;
        }
    }
    jn_Buffer_position($in, $in.$position0 - ($inSize - $inPos | 0) | 0);
    return $result;
},
jnci_UTF8Encoder = $rt_classWithoutFields(jnci_BufferedEncoder),
jnci_UTF8Encoder_arrayEncode = ($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) => {
    let $result, var$9, var$10, $ch, $low, var$13, $codePoint;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize) {
                var$9 = $inPos;
                break a;
            }
            var$10 = $inArray.data;
            var$9 = $inPos + 1 | 0;
            $ch = var$10[$inPos];
            if ($ch < 128) {
                var$10 = $outArray.data;
                $low = $outPos + 1 | 0;
                var$10[$outPos] = $ch << 24 >> 24;
            } else if ($ch < 2048) {
                if (($outPos + 2 | 0) > $outSize) {
                    var$9 = var$9 + (-1) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                $inPos = $outPos + 1 | 0;
                var$10[$outPos] = (192 | $ch >> 6) << 24 >> 24;
                $low = $inPos + 1 | 0;
                var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
            } else if (!jl_Character_isSurrogate($ch)) {
                if (($outPos + 3 | 0) > $outSize) {
                    var$9 = var$9 + (-1) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 3))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                var$13 = $outPos + 1 | 0;
                var$10[$outPos] = (224 | $ch >> 12) << 24 >> 24;
                $inPos = var$13 + 1 | 0;
                var$10[var$13] = (128 | $ch >> 6 & 63) << 24 >> 24;
                $low = $inPos + 1 | 0;
                var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
            } else {
                if (!jl_Character_isHighSurrogate($ch)) {
                    $result = jnc_CoderResult_malformedForLength(1);
                    break a;
                }
                if (var$9 >= $inSize) {
                    if (jn_Buffer_hasRemaining($controller.$in2))
                        break a;
                    $result = jnc_CoderResult_UNDERFLOW;
                    break a;
                }
                $inPos = var$9 + 1 | 0;
                $low = var$10[var$9];
                if (!jl_Character_isLowSurrogate($low)) {
                    var$9 = $inPos + (-2) | 0;
                    $result = jnc_CoderResult_malformedForLength(1);
                    break a;
                }
                if (($outPos + 4 | 0) > $outSize) {
                    var$9 = $inPos + (-2) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 4))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                $codePoint = jl_Character_toCodePoint($ch, $low);
                $low = $outPos + 1 | 0;
                var$10[$outPos] = (240 | $codePoint >> 18) << 24 >> 24;
                var$13 = $low + 1 | 0;
                var$10[$low] = (128 | $codePoint >> 12 & 63) << 24 >> 24;
                $outPos = var$13 + 1 | 0;
                var$10[var$13] = (128 | $codePoint >> 6 & 63) << 24 >> 24;
                $low = $outPos + 1 | 0;
                var$10[$outPos] = (128 | $codePoint & 63) << 24 >> 24;
                var$9 = $inPos;
            }
            $inPos = var$9;
            $outPos = $low;
        }
        var$9 = $inPos;
    }
    $controller.$inPosition0 = var$9;
    $controller.$outPosition0 = $outPos;
    return $result;
};
function cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0() {
    jl_Object.call(this);
    this.$_010 = null;
}
let cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0_handleEvent$exported$0 = var$1 => {
    let var$2, var$3;
    var$1 = var$1.$_010;
    var$2 = jl_System_err();
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(1444)), var$1);
    var$1 = jl_AbstractStringBuilder_toString(var$3);
    otcic_JsConsolePrintStream_println(var$2, var$1);
};
function jnci_BufferedDecoder$Controller() {
    let a = this; jl_Object.call(a);
    a.$in1 = null;
    a.$out4 = null;
    a.$inPosition = 0;
    a.$outPosition = 0;
}
let jnci_BufferedDecoder$Controller_hasMoreInput = ($this, $sz) => {
    return jn_Buffer_remaining($this.$in1) < $sz ? 0 : 1;
},
jnci_BufferedDecoder$Controller_hasMoreOutput = ($this, $sz) => {
    return jn_Buffer_remaining($this.$out4) < $sz ? 0 : 1;
};
function cgxgbta_AssetLoadImpl$6() {
    let a = this; jl_Object.call(a);
    a.$val$listener0 = null;
    a.$val$path1 = null;
    a.$val$fileHandle = null;
    a.$this$09 = null;
}
let cgxgbta_AssetLoadImpl$6_onProgress = ($this, $total, $loaded) => {
    let var$3;
    var$3 = $this.$val$listener0;
    if (var$3 !== null)
        var$3.$onProgress($total, $loaded);
},
cgxgbta_AssetLoadImpl$6_onSuccess = ($this, var$1, var$2) => {
    let var$3, var$4, var$5, var$6, var$7, var$8, var$9, $$je;
    a: {
        var$1 = var$2;
        var$2 = $this.$this$09.$assetInQueue;
        var$3 = $this.$val$path1;
        var$2 = var$2.$backingMap;
        var$4 = 0;
        var$5 = null;
        if (var$3 === null) {
            var$6 = var$2.$elementData.data[0];
            while (var$6 !== null) {
                if (var$6.$key === null)
                    break a;
                var$3 = var$6.$next4;
                var$5 = var$6;
                var$6 = var$3;
            }
        } else {
            var$7 = jl_String_hashCode(var$3);
            var$8 = var$2.$elementData.data;
            var$4 = var$7 & (var$8.length - 1 | 0);
            var$6 = var$8[var$4];
            while (var$6 !== null && !(var$6.$origKeyHash == var$7 && ju_HashMap_areEqualKeys(var$3, var$6.$key))) {
                var$9 = var$6.$next4;
                var$5 = var$6;
                var$6 = var$9;
            }
        }
    }
    if (var$6 === null)
        var$6 = null;
    else {
        if (var$5 !== null)
            var$5.$next4 = var$6.$next4;
        else
            var$2.$elementData.data[var$4] = var$6.$next4;
        var$2.$modCount0 = var$2.$modCount0 + 1 | 0;
        var$2.$elementCount = var$2.$elementCount - 1 | 0;
    }
    var$8 = cgxgbtdt_TypedArrays_toByteArray(var$1.$data11);
    var$2 = $this.$val$fileHandle;
    var$3 = cgxgbt_TeaFiles_getFileDB(var$2.$teaFiles, var$2.$type1);
    var$6 = ji_ByteArrayOutputStream__init_0(jl_Math_max(512, jl_Math_min(4096, 8192)));
    var$5 = new cgxgbtf_FileDB$1;
    var$5.$this$013 = var$3;
    var$5.$val$buffer = var$6;
    var$5.$val$file = var$2;
    var$5.$val$append = 0;
    var$5.$val$bufferSize = 4096;
    b: {
        c: {
            try {
                cgxgbtf_FileDB$1_write(var$5, var$8);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    var$1 = $$je;
                    break c;
                } else{
                    var$1 = $$je;
                    break b;
                }
            }
            cbgu_StreamUtils_closeQuietly(var$5);
            var$2 = $this.$val$listener0;
            if (var$2 !== null)
                var$2.$onSuccess($this.$val$path1, var$1);
            return;
        }
        try {
            var$2 = new cbgu_GdxRuntimeException;
            var$3 = jl_String_valueOf($this.$val$fileHandle);
            var$6 = jl_String_valueOf(cgxgbt_TeaFileHandle_type($this.$val$fileHandle));
            var$9 = jl_StringBuilder__init_();
            jl_StringBuilder_append2(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$9, $rt_s(1445)), var$3), $rt_s(1246)), var$6), 41);
            cbgu_GdxRuntimeException__init_0(var$2, jl_StringBuilder_toString(var$9), var$1);
            $rt_throw(var$2);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            var$1 = $$je;

        }
    }
    cbgu_StreamUtils_closeQuietly(var$5);
    $rt_throw(var$1);
},
ses_Drawing = $rt_classWithoutFields();
function jnci_BufferedEncoder$Controller() {
    let a = this; jl_Object.call(a);
    a.$in2 = null;
    a.$out3 = null;
    a.$inPosition0 = 0;
    a.$outPosition0 = 0;
}
let jnci_BufferedEncoder$Controller_hasMoreOutput = ($this, $sz) => {
    return jn_Buffer_remaining($this.$out3) < $sz ? 0 : 1;
};
function cbgu_ComparableTimSort() {
    let a = this; jl_Object.call(a);
    a.$a0 = null;
    a.$minGallop = 0;
    a.$tmp = null;
    a.$tmpCount = 0;
    a.$stackSize = 0;
    a.$runBase = null;
    a.$runLen = null;
}
let cbgu_ComparableTimSort_binarySort = ($a, $lo, $hi, $start) => {
    let var$5, $pivot, $right, var$8, $mid, $n;
    if ($start == $lo)
        $start = $start + 1 | 0;
    while ($start < $hi) {
        var$5 = $a.data;
        $pivot = var$5[$start];
        $right = $start;
        var$8 = $lo;
        while (var$8 < $right) {
            $mid = (var$8 + $right | 0) >>> 1 | 0;
            if ($pivot.$compareTo(var$5[$mid]) < 0)
                $right = $mid;
            else
                var$8 = $mid + 1 | 0;
        }
        a: {
            b: {
                $n = $start - var$8 | 0;
                switch ($n) {
                    case 1:
                        break b;
                    case 2:
                        var$5[var$8 + 2 | 0] = var$5[var$8 + 1 | 0];
                        break b;
                    default:
                }
                jl_System_fastArraycopy($a, var$8, $a, var$8 + 1 | 0, $n);
                break a;
            }
            var$5[var$8 + 1 | 0] = var$5[var$8];
        }
        var$5[var$8] = $pivot;
        $start = $start + 1 | 0;
    }
},
cbgu_ComparableTimSort_countRunAndMakeAscending = ($a, $lo, $hi) => {
    let $runHi, var$5, var$6, var$7, var$8;
    $runHi = $lo + 1 | 0;
    if ($runHi == $hi)
        return 1;
    a: {
        $a = $a.data;
        var$5 = $runHi + 1 | 0;
        if ($a[$runHi].$compareTo($a[$lo]) >= 0)
            while (var$5 < $hi) {
                if ($a[var$5].$compareTo($a[var$5 - 1 | 0]) < 0)
                    break a;
                var$5 = var$5 + 1 | 0;
            }
        else {
            while (var$5 < $hi && $a[var$5].$compareTo($a[var$5 - 1 | 0]) < 0) {
                var$5 = var$5 + 1 | 0;
            }
            $runHi = var$5 + (-1) | 0;
            var$6 = $lo;
            while (var$6 < $runHi) {
                var$7 = $a[var$6];
                $hi = var$6 + 1 | 0;
                $a[var$6] = $a[$runHi];
                var$8 = $runHi + (-1) | 0;
                $a[$runHi] = var$7;
                var$6 = $hi;
                $runHi = var$8;
            }
        }
    }
    return var$5 - $lo | 0;
},
cbgu_ComparableTimSort_mergeAt = ($this, $i) => {
    let var$2, $base1, var$4, $len1, $k, $base2, $len2, var$9;
    var$2 = $this.$runBase.data;
    $base1 = var$2[$i];
    var$4 = $this.$runLen.data;
    $len1 = var$4[$i];
    $k = $i + 1 | 0;
    $base2 = var$2[$k];
    $len2 = var$4[$k];
    var$4[$i] = $len1 + $len2 | 0;
    var$9 = $this.$stackSize;
    if ($i == (var$9 - 3 | 0)) {
        $i = $i + 2 | 0;
        var$2[$k] = var$2[$i];
        var$4[$k] = var$4[$i];
    }
    $this.$stackSize = var$9 - 1 | 0;
    var$2 = $this.$a0;
    $k = cbgu_ComparableTimSort_gallopRight(var$2.data[$base2], var$2, $base1, $len1, 0);
    $base1 = $base1 + $k | 0;
    $k = $len1 - $k | 0;
    if (!$k)
        return;
    var$2 = $this.$a0;
    $i = cbgu_ComparableTimSort_gallopLeft(var$2.data[($base1 + $k | 0) - 1 | 0], var$2, $base2, $len2, $len2 - 1 | 0);
    if (!$i)
        return;
    if ($k > $i)
        cbgu_ComparableTimSort_mergeHi($this, $base1, $k, $base2, $i);
    else
        cbgu_ComparableTimSort_mergeLo($this, $base1, $k, $base2, $i);
},
cbgu_ComparableTimSort_gallopLeft = ($key, $a, $base, $len, $hint) => {
    let $lastOfs, $ofs, $m, $maxOfs;
    $a = $a.data;
    $lastOfs = 0;
    $ofs = 1;
    $m = $base + $hint | 0;
    if ($key.$compareTo($a[$m]) > 0) {
        $maxOfs = $len - $hint | 0;
        while (true) {
            $len = $rt_compare($ofs, $maxOfs);
            if ($len >= 0)
                break;
            if ($key.$compareTo($a[$m + $ofs | 0]) <= 0)
                break;
            $len = ($ofs << 1) + 1 | 0;
            if ($len > 0) {
                $lastOfs = $ofs;
                $ofs = $len;
                continue;
            }
            $len = $maxOfs;
            $lastOfs = $ofs;
            $ofs = $len;
        }
        if ($len <= 0)
            $maxOfs = $ofs;
        $len = $lastOfs + $hint | 0;
        $hint = $maxOfs + $hint | 0;
    } else {
        $maxOfs = $hint + 1 | 0;
        while (true) {
            $len = $rt_compare($ofs, $maxOfs);
            if ($len >= 0)
                break;
            if ($key.$compareTo($a[$m - $ofs | 0]) > 0)
                break;
            $len = ($ofs << 1) + 1 | 0;
            if ($len > 0) {
                $lastOfs = $ofs;
                $ofs = $len;
                continue;
            }
            $len = $maxOfs;
            $lastOfs = $ofs;
            $ofs = $len;
        }
        if ($len <= 0)
            $maxOfs = $ofs;
        $len = $hint - $maxOfs | 0;
        $hint = $hint - $lastOfs | 0;
    }
    $ofs = $len + 1 | 0;
    while ($ofs < $hint) {
        $m = $ofs + (($hint - $ofs | 0) >>> 1 | 0) | 0;
        if ($key.$compareTo($a[$base + $m | 0]) > 0) {
            $ofs = $m + 1 | 0;
            $m = $hint;
        }
        $hint = $m;
    }
    return $hint;
},
cbgu_ComparableTimSort_gallopRight = ($key, $a, $base, $len, $hint) => {
    let $ofs, $lastOfs, $m, $maxOfs, var$10;
    $a = $a.data;
    $ofs = 1;
    $lastOfs = 0;
    $m = $base + $hint | 0;
    if ($key.$compareTo($a[$m]) >= 0) {
        $maxOfs = $len - $hint | 0;
        while (true) {
            var$10 = $rt_compare($ofs, $maxOfs);
            if (var$10 >= 0)
                break;
            if ($key.$compareTo($a[$m + $ofs | 0]) < 0)
                break;
            $len = ($ofs << 1) + 1 | 0;
            if ($len > 0) {
                $lastOfs = $ofs;
                $ofs = $len;
                continue;
            }
            $len = $maxOfs;
            $lastOfs = $ofs;
            $ofs = $len;
        }
        if (var$10 <= 0)
            $maxOfs = $ofs;
        $len = $lastOfs + $hint | 0;
        $hint = $maxOfs + $hint | 0;
    } else {
        $maxOfs = $hint + 1 | 0;
        while (true) {
            $len = $rt_compare($ofs, $maxOfs);
            if ($len >= 0)
                break;
            if ($key.$compareTo($a[$m - $ofs | 0]) >= 0)
                break;
            $len = ($ofs << 1) + 1 | 0;
            if ($len > 0) {
                $lastOfs = $ofs;
                $ofs = $len;
                continue;
            }
            $len = $maxOfs;
            $lastOfs = $ofs;
            $ofs = $len;
        }
        if ($len <= 0)
            $maxOfs = $ofs;
        $len = $hint - $maxOfs | 0;
        $hint = $hint - $lastOfs | 0;
    }
    $len = $len + 1 | 0;
    while ($len < $hint) {
        $m = $len + (($hint - $len | 0) >>> 1 | 0) | 0;
        if ($key.$compareTo($a[$base + $m | 0]) < 0)
            $hint = $m;
        else
            $len = $m + 1 | 0;
    }
    return $hint;
},
cbgu_ComparableTimSort_mergeLo = ($this, $base1, $len1, $base2, $len2) => {
    let $a, var$6, $tmp_0, $cursor1, var$9, var$10, var$11, $minGallop, $count1, $count2, var$15, var$16, var$17;
    $a = $this.$a0;
    var$6 = $a.data;
    $tmp_0 = cbgu_ComparableTimSort_ensureCapacity($this, $len1);
    jl_System_fastArraycopy($a, $base1, $tmp_0, 0, $len1);
    $cursor1 = 0;
    var$9 = $base1 + 1 | 0;
    var$10 = $base2 + 1 | 0;
    var$6[$base1] = var$6[$base2];
    var$11 = $len2 + (-1) | 0;
    if (!var$11) {
        jl_System_fastArraycopy($tmp_0, $cursor1, $a, var$9, $len1);
        return;
    }
    if ($len1 == 1) {
        $tmp_0 = $tmp_0.data;
        jl_System_fastArraycopy($a, var$10, $a, var$9, var$11);
        var$6[var$9 + var$11 | 0] = $tmp_0[$cursor1];
        return;
    }
    $minGallop = $this.$minGallop;
    a: {
        b: while (true) {
            $count1 = 0;
            $count2 = 0;
            $base1 = var$9;
            $base2 = var$10;
            var$15 = $cursor1;
            while (true) {
                var$16 = $tmp_0.data;
                if (var$6[$base2].$compareTo(var$16[var$15]) < 0) {
                    var$9 = $base1 + 1 | 0;
                    var$10 = $base2 + 1 | 0;
                    var$6[$base1] = var$6[$base2];
                    $count2 = $count2 + 1 | 0;
                    $count1 = 0;
                    var$11 = var$11 + (-1) | 0;
                    if (!var$11)
                        break a;
                    $base2 = var$10;
                    $cursor1 = var$15;
                } else {
                    var$9 = $base1 + 1 | 0;
                    $cursor1 = var$15 + 1 | 0;
                    var$6[$base1] = var$16[var$15];
                    $count1 = $count1 + 1 | 0;
                    $count2 = 0;
                    $len1 = $len1 + (-1) | 0;
                    if ($len1 == 1) {
                        var$15 = $cursor1;
                        var$10 = $base2;
                        break a;
                    }
                }
                if (($count1 | $count2) >= $minGallop)
                    break;
                $base1 = var$9;
                var$15 = $cursor1;
            }
            var$10 = $base2;
            while (true) {
                $base1 = cbgu_ComparableTimSort_gallopRight(var$6[var$10], $tmp_0, $cursor1, $len1, 0);
                if (!$base1) {
                    $base2 = var$9;
                    var$15 = $cursor1;
                } else {
                    jl_System_fastArraycopy($tmp_0, $cursor1, $a, var$9, $base1);
                    var$9 = var$9 + $base1 | 0;
                    var$15 = $cursor1 + $base1 | 0;
                    $len1 = $len1 - $base1 | 0;
                    if ($len1 <= 1)
                        break a;
                    $base2 = var$9;
                }
                var$9 = $base2 + 1 | 0;
                $cursor1 = var$10 + 1 | 0;
                var$6[$base2] = var$6[var$10];
                var$11 = var$11 + (-1) | 0;
                if (!var$11) {
                    var$10 = $cursor1;
                    break a;
                }
                $base2 = cbgu_ComparableTimSort_gallopLeft(var$16[var$15], $a, $cursor1, var$11, 0);
                if (!$base2) {
                    $len2 = var$9;
                    var$10 = $cursor1;
                } else {
                    jl_System_fastArraycopy($a, $cursor1, $a, var$9, $base2);
                    var$9 = var$9 + $base2 | 0;
                    var$10 = $cursor1 + $base2 | 0;
                    var$11 = var$11 - $base2 | 0;
                    if (!var$11)
                        break b;
                    $len2 = var$9;
                }
                var$9 = $len2 + 1 | 0;
                $cursor1 = var$15 + 1 | 0;
                var$6[$len2] = var$16[var$15];
                $len1 = $len1 + (-1) | 0;
                if ($len1 == 1) {
                    var$15 = $cursor1;
                    break a;
                }
                $minGallop = $minGallop + (-1) | 0;
                if (!(($base1 < 7 ? 0 : 1) | ($base2 < 7 ? 0 : 1)))
                    break;
            }
            if ($minGallop < 0)
                $minGallop = 0;
            $minGallop = $minGallop + 2 | 0;
        }
    }
    if ($minGallop < 1)
        $minGallop = 1;
    $this.$minGallop = $minGallop;
    if ($len1 == 1) {
        jl_System_fastArraycopy($a, var$10, $a, var$9, var$11);
        var$6[var$9 + var$11 | 0] = var$16[var$15];
    } else {
        if (!$len1) {
            var$17 = new jl_IllegalArgumentException;
            jl_Throwable__init_(var$17, $rt_s(1446));
            $rt_throw(var$17);
        }
        jl_System_fastArraycopy($tmp_0, var$15, $a, var$9, $len1);
    }
},
cbgu_ComparableTimSort_mergeHi = ($this, $base1, $len1, $base2, $len2) => {
    let $a, var$6, $tmp_0, $cursor1, $cursor2, $dest, var$11, var$12, var$13, $minGallop, $count1, $count2, var$17;
    $a = $this.$a0;
    var$6 = $a.data;
    $tmp_0 = cbgu_ComparableTimSort_ensureCapacity($this, $len2);
    jl_System_fastArraycopy($a, $base2, $tmp_0, 0, $len2);
    $cursor1 = ($base1 + $len1 | 0) - 1 | 0;
    $cursor2 = $len2 - 1 | 0;
    $dest = ($base2 + $len2 | 0) - 1 | 0;
    var$11 = $dest + (-1) | 0;
    var$12 = $cursor1 + (-1) | 0;
    var$6[$dest] = var$6[$cursor1];
    $dest = $len1 + (-1) | 0;
    if (!$dest) {
        jl_System_fastArraycopy($tmp_0, 0, $a, var$11 - $cursor2 | 0, $len2);
        return;
    }
    if ($len2 == 1) {
        var$13 = $tmp_0.data;
        $base1 = var$11 - $dest | 0;
        jl_System_fastArraycopy($a, (var$12 - $dest | 0) + 1 | 0, $a, $base1 + 1 | 0, $dest);
        var$6[$base1] = var$13[$cursor2];
        return;
    }
    $minGallop = $this.$minGallop;
    a: {
        b: while (true) {
            $count1 = 0;
            $count2 = 0;
            $cursor1 = var$11;
            while (true) {
                var$13 = $tmp_0.data;
                if (var$13[$cursor2].$compareTo(var$6[var$12]) < 0) {
                    var$11 = $cursor1 + (-1) | 0;
                    $base2 = var$12 + (-1) | 0;
                    var$6[$cursor1] = var$6[var$12];
                    $count1 = $count1 + 1 | 0;
                    $count2 = 0;
                    $dest = $dest + (-1) | 0;
                    if (!$dest)
                        break a;
                    var$12 = $base2;
                    $len1 = $cursor2;
                } else {
                    var$11 = $cursor1 + (-1) | 0;
                    $len1 = $cursor2 + (-1) | 0;
                    var$6[$cursor1] = var$13[$cursor2];
                    $count2 = $count2 + 1 | 0;
                    $count1 = 0;
                    $len2 = $len2 + (-1) | 0;
                    if ($len2 == 1) {
                        $base2 = var$12;
                        $cursor2 = $len1;
                        break a;
                    }
                }
                if (($count1 | $count2) >= $minGallop)
                    break;
                $cursor1 = var$11;
                $cursor2 = $len1;
            }
            $cursor2 = $len1;
            while (true) {
                $len1 = $dest - cbgu_ComparableTimSort_gallopRight(var$13[$cursor2], $a, $base1, $dest, $dest - 1 | 0) | 0;
                if (!$len1) {
                    $count1 = var$11;
                    $base2 = var$12;
                } else {
                    var$11 = var$11 - $len1 | 0;
                    $base2 = var$12 - $len1 | 0;
                    $dest = $dest - $len1 | 0;
                    jl_System_fastArraycopy($a, $base2 + 1 | 0, $a, var$11 + 1 | 0, $len1);
                    if (!$dest)
                        break a;
                    $count1 = var$11;
                }
                var$11 = $count1 + (-1) | 0;
                var$12 = $cursor2 + (-1) | 0;
                var$6[$count1] = var$13[$cursor2];
                $len2 = $len2 + (-1) | 0;
                if ($len2 == 1) {
                    $cursor2 = var$12;
                    break a;
                }
                $count1 = $len2 - cbgu_ComparableTimSort_gallopLeft(var$6[$base2], $tmp_0, 0, $len2, $len2 - 1 | 0) | 0;
                if (!$count1) {
                    $cursor1 = var$11;
                    $cursor2 = var$12;
                } else {
                    var$11 = var$11 - $count1 | 0;
                    $cursor2 = var$12 - $count1 | 0;
                    $len2 = $len2 - $count1 | 0;
                    jl_System_fastArraycopy($tmp_0, $cursor2 + 1 | 0, $a, var$11 + 1 | 0, $count1);
                    if ($len2 <= 1)
                        break b;
                    $cursor1 = var$11;
                }
                var$11 = $cursor1 + (-1) | 0;
                var$12 = $base2 + (-1) | 0;
                var$6[$cursor1] = var$6[$base2];
                $dest = $dest + (-1) | 0;
                if (!$dest) {
                    $base2 = var$12;
                    break a;
                }
                $minGallop = $minGallop + (-1) | 0;
                if (!(($len1 < 7 ? 0 : 1) | ($count1 < 7 ? 0 : 1)))
                    break;
            }
            if ($minGallop < 0)
                $minGallop = 0;
            $minGallop = $minGallop + 2 | 0;
        }
    }
    if ($minGallop < 1)
        $minGallop = 1;
    $this.$minGallop = $minGallop;
    if ($len2 == 1) {
        $base1 = var$11 - $dest | 0;
        jl_System_fastArraycopy($a, ($base2 - $dest | 0) + 1 | 0, $a, $base1 + 1 | 0, $dest);
        var$6[$base1] = var$13[$cursor2];
    } else {
        if (!$len2) {
            var$17 = new jl_IllegalArgumentException;
            jl_Throwable__init_(var$17, $rt_s(1446));
            $rt_throw(var$17);
        }
        jl_System_fastArraycopy($tmp_0, 0, $a, var$11 - ($len2 - 1 | 0) | 0, $len2);
    }
},
cbgu_ComparableTimSort_ensureCapacity = ($this, $minCapacity) => {
    let var$2;
    $this.$tmpCount = jl_Math_max($this.$tmpCount, $minCapacity);
    if ($this.$tmp.data.length < $minCapacity) {
        var$2 = $minCapacity | $minCapacity >> 1;
        var$2 = var$2 | var$2 >> 2;
        var$2 = var$2 | var$2 >> 4;
        var$2 = var$2 | var$2 >> 8;
        var$2 = (var$2 | var$2 >> 16) + 1 | 0;
        if (var$2 >= 0)
            $minCapacity = jl_Math_min(var$2, $this.$a0.data.length >>> 1 | 0);
        $this.$tmp = $rt_createArray(jl_Object, $minCapacity);
    }
    return $this.$tmp;
},
jl_ArrayIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException),
jl_ArrayIndexOutOfBoundsException__init_ = ($this, $index) => {
    jl_Throwable__init_($this, jl_Integer_toString($index));
},
jl_ArrayIndexOutOfBoundsException__init_0 = var_0 => {
    let var_1 = new jl_ArrayIndexOutOfBoundsException();
    jl_ArrayIndexOutOfBoundsException__init_(var_1, var_0);
    return var_1;
};
function cgxgbtf_FileDB$1() {
    let a = this; ji_OutputStream.call(a);
    a.$val$buffer = null;
    a.$val$file = null;
    a.$val$append = 0;
    a.$val$bufferSize = 0;
    a.$this$013 = null;
}
let cgxgbtf_FileDB$1_write = ($this, $b) => {
    let var$2, var$3, var$4;
    var$2 = $b.data;
    var$3 = $this.$val$buffer;
    var$4 = var$2.length;
    ji_ByteArrayOutputStream_write(var$3, $b, 0, var$4);
},
cgxgbtf_FileDB$1_close = $this => {
    let $data, var$2, var$3, var$4, var$5, var$6;
    $data = ji_ByteArrayOutputStream_toByteArray($this.$val$buffer);
    var$2 = $data.data;
    var$3 = $this.$this$013;
    var$4 = $this.$val$file;
    var$5 = $this.$val$append;
    var$6 = jl_Math_max(var$2.length, $this.$val$bufferSize);
    cgxgbtf_MemoryFileStorage_writeInternal(var$3, var$4, $data, var$5, var$6);
};
$rt_packages([-1, "regexodus", -1, "com", 1, "github", 2, "tommyettinger", 3, "textra", 4, "effects", 2, "xpenatan", 6, "gdx", 7, "backends", 8, "teavm", 9, "filesystem", 10, "types", 1, "badlogic", 12, "gdx", 13, "utils", 14, "reflect", 13, "graphics", 16, "glutils", 16, "g2d", 1, "vovangames", 19, "denisclicker", -1, "java", 21, "util", 22, "regex", 21, "nio", 24, "charset", 21, "io", 21, "lang", 27, "reflect", -1, "org", 29, "teavm", 30, "classlib", 31, "impl", 32, "unicode"
]);
$rt_metadata([jl_Object, "Object", 27, 0, [], 0, 3, 0, 0, ["$hashCode", $rt_wrapFunction0(jl_Object_hashCode), "$equals", $rt_wrapFunction1(jl_Object_equals), "$toString", $rt_wrapFunction0(jl_Object_toString)],
cbgu_Pool$Poolable, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbggg_GlyphLayout, 0, jl_Object, [cbgu_Pool$Poolable], 0, 3, 0, cbggg_GlyphLayout_$callClinit, 0,
cbggg_TextureRegion, "TextureRegion", 18, jl_Object, [], 0, 3, 0, 0, ["$setRegion0", $rt_wrapFunction4(cbggg_TextureRegion_setRegion1), "$getRegionX", $rt_wrapFunction0(cbggg_TextureRegion_getRegionX), "$getRegionY", $rt_wrapFunction0(cbggg_TextureRegion_getRegionY), "$getRegionWidth", $rt_wrapFunction0(cbggg_TextureRegion_getRegionWidth)],
cbggg_Sprite, "Sprite", 18, cbggg_TextureRegion, [], 0, 3, 0, 0, ["$setRegion0", $rt_wrapFunction4(cbggg_Sprite_setRegion)],
cbgu_Disposable, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbggg_BitmapFont, 0, jl_Object, [cbgu_Disposable], 0, 3, 0, 0, 0,
cbggg_NinePatch, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgg_Color, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgg_GLTexture, 0, jl_Object, [cbgu_Disposable], 1, 3, 0, 0, 0,
cbgg_Texture, "Texture", 16, cbgg_GLTexture, [], 0, 3, 0, cbgg_Texture_$callClinit, ["$toString", $rt_wrapFunction0(cbgg_Texture_toString)],
jl_Iterable, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgu_Array, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, ["$removeIndex", $rt_wrapFunction1(cbgu_Array_removeIndex)],
cbgu_Json, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_ObjectMap, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
cbgu_OrderedMap, 0, cbgu_ObjectMap, [], 0, 3, 0, 0, 0,
cbgu_Queue, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
cbgu_Predicate, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgg_VertexAttribute, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbg_Net, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgm_MapObject, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgggp_ResourceData$Configurable, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgggp_ParticleEffect, 0, jl_Object, [cbgu_Disposable, cbgggp_ResourceData$Configurable], 0, 3, 0, 0, 0,
cbgu_Json$Serializable, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgggp_ParticleController, 0, jl_Object, [cbgu_Json$Serializable, cbgggp_ResourceData$Configurable], 0, 3, 0, 0, 0,
cbgggp_ResourceData, 0, jl_Object, [cbgu_Json$Serializable], 0, 3, 0, 0, 0,
cbgggp_ParallelArray, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgm_Interpolation, 0, jl_Object, [], 1, 3, 0, cbgm_Interpolation_$callClinit, 0,
jlr_AnnotatedElement, 0, jl_Object, [], 3, 3, 0, 0, 0,
jlr_Type, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_Class, 0, jl_Object, [jlr_AnnotatedElement, jlr_Type], 4, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Class_toString)],
otji_JS, 0, jl_Object, [], 4, 3, 0, 0, 0,
otp_Platform, 0, jl_Object, [], 4, 3, 0, 0, 0,
jl_Throwable, 0, jl_Object, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jl_Throwable_getMessage)],
jl_Exception, 0, jl_Throwable, [], 0, 3, 0, 0, 0,
jl_RuntimeException, "RuntimeException", 27, jl_Exception, [], 0, 3, 0, 0, 0,
jl_ClassCastException, "ClassCastException", 27, jl_RuntimeException, [], 0, 3, 0, 0, 0,
ji_Serializable, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_Comparable, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_CharSequence, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_String, "String", 27, jl_Object, [ji_Serializable, jl_Comparable, jl_CharSequence], 0, 3, 0, 0, ["$charAt", $rt_wrapFunction1(jl_String_charAt), "$length", $rt_wrapFunction0(jl_String_length), "$toString", $rt_wrapFunction0(jl_String_toString), "$equals", $rt_wrapFunction1(jl_String_equals), "$hashCode", $rt_wrapFunction0(jl_String_hashCode), "$compareTo", $rt_wrapFunction1(jl_String_compareTo)],
jl_Number, 0, jl_Object, [ji_Serializable], 1, 3, 0, 0, 0,
jl_Integer, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0, 0,
jl_AbstractStringBuilder, 0, jl_Object, [ji_Serializable, jl_CharSequence], 0, 0, 0, 0, ["$ensureCapacity", $rt_wrapFunction1(jl_AbstractStringBuilder_ensureCapacity), "$toString", $rt_wrapFunction0(jl_AbstractStringBuilder_toString)],
jl_Appendable, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_StringBuilder, "StringBuilder", 27, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$insert3", $rt_wrapFunction4(jl_StringBuilder_insert), "$append6", $rt_wrapFunction3(jl_StringBuilder_append7), "$insert2", $rt_wrapFunction4(jl_StringBuilder_insert1), "$append5", $rt_wrapFunction3(jl_StringBuilder_append6), "$charAt", $rt_wrapFunction1(jl_StringBuilder_charAt), "$length", $rt_wrapFunction0(jl_StringBuilder_length), "$toString", $rt_wrapFunction0(jl_StringBuilder_toString), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuilder_ensureCapacity),
"$insert1", $rt_wrapFunction2(jl_StringBuilder_insert0), "$insert", $rt_wrapFunction2(jl_StringBuilder_insert2)],
otcir_FieldInfo, 0, jl_Object, [], 0, 3, 0, 0, 0,
otcir_MethodInfo, 0, jl_Object, [], 0, 3, 0, 0, 0,
otcir_ClassList, 0, jl_Object, [], 0, 3, 0, 0, 0,
cvdt_TeaVMLauncher, 0, jl_Object, [], 0, 3, 0, cvdt_TeaVMLauncher_$callClinit, 0]);
$rt_metadata([otci_IntegerUtil, 0, jl_Object, [], 4, 3, 0, 0, 0,
cgxgbt_TeaApplicationConfiguration, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbg_Application, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_Runnable, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaApplication, 0, jl_Object, [cbg_Application, jl_Runnable], 0, 3, 0, 0, 0,
cbg_ApplicationListener, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbg_ApplicationAdapter, 0, jl_Object, [cbg_ApplicationListener], 1, 3, 0, 0, 0,
cvd_Clicker, 0, cbg_ApplicationAdapter, [], 0, 3, 0, 0, 0,
cbggg_GlyphLayout$GlyphRun, "GlyphLayout$GlyphRun", 18, jl_Object, [cbgu_Pool$Poolable], 0, 3, 0, 0, 0,
cbgu_Pools, 0, jl_Object, [], 0, 3, 0, cbgu_Pools_$callClinit, 0,
cbgu_IntArray, 0, jl_Object, [], 0, 3, 0, 0, 0,
ju_Map, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_AbstractMap, 0, jl_Object, [ju_Map], 1, 3, 0, 0, 0,
jl_Cloneable, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_HashMap, 0, ju_AbstractMap, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, ["$newElementArray", $rt_wrapFunction1(ju_HashMap_newElementArray)],
cbgm_Interpolation$1, 0, cbgm_Interpolation, [], 0, 0, 0, 0, ["$apply", $rt_wrapFunction1(cbgm_Interpolation$1_apply)],
cbgm_Interpolation$2, 0, cbgm_Interpolation, [], 0, 0, 0, 0, ["$apply", $rt_wrapFunction1(cbgm_Interpolation$2_apply)],
cbgm_Interpolation$3, 0, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$4, 0, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$Pow, 0, cbgm_Interpolation, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$PowIn, 0, cbgm_Interpolation$Pow, [], 0, 3, 0, 0, ["$apply", $rt_wrapFunction1(cbgm_Interpolation$PowIn_apply)],
cbgm_Interpolation$PowOut, 0, cbgm_Interpolation$Pow, [], 0, 3, 0, 0, ["$apply", $rt_wrapFunction1(cbgm_Interpolation$PowOut_apply)],
cbgm_Interpolation$5, 0, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$6, 0, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$7, 0, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$8, 0, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$9, 0, cbgm_Interpolation, [], 0, 0, 0, 0, ["$apply", $rt_wrapFunction1(cbgm_Interpolation$9_apply)],
cbgm_Interpolation$10, 0, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$11, 0, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$Exp, 0, cbgm_Interpolation, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$ExpIn, 0, cbgm_Interpolation$Exp, [], 0, 3, 0, 0, ["$apply", $rt_wrapFunction1(cbgm_Interpolation$ExpIn_apply)],
cbgm_Interpolation$ExpOut, 0, cbgm_Interpolation$Exp, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$12, 0, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$13, 0, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$14, 0, cbgm_Interpolation, [], 0, 0, 0, 0, 0,
cbgm_Interpolation$Elastic, 0, cbgm_Interpolation, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$ElasticIn, 0, cbgm_Interpolation$Elastic, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$ElasticOut, 0, cbgm_Interpolation$Elastic, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$Swing, 0, cbgm_Interpolation, [], 0, 3, 0, 0, ["$apply", $rt_wrapFunction1(cbgm_Interpolation$Swing_apply)],
cbgm_Interpolation$SwingIn, 0, cbgm_Interpolation, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$SwingOut, 0, cbgm_Interpolation, [], 0, 3, 0, 0, ["$apply", $rt_wrapFunction1(cbgm_Interpolation$SwingOut_apply)],
cbgm_Interpolation$BounceOut, 0, cbgm_Interpolation, [], 0, 3, 0, 0, ["$apply", $rt_wrapFunction1(cbgm_Interpolation$BounceOut_apply)],
cbgm_Interpolation$Bounce, 0, cbgm_Interpolation$BounceOut, [], 0, 3, 0, 0, 0,
cbgm_Interpolation$BounceIn, 0, cbgm_Interpolation$BounceOut, [], 0, 3, 0, 0, 0,
ju_Comparator, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_String$_clinit_$lambda$_115_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, 0,
jl_Character, 0, jl_Object, [jl_Comparable], 0, 3, 0, 0, 0,
cgxgbtu_TeaBaseUrlProvider, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbtu_TeaDefaultBaseUrlProvider, 0, jl_Object, [cgxgbtu_TeaBaseUrlProvider], 0, 3, 0, 0, 0,
jl_Enum, 0, jl_Object, [jl_Comparable, ji_Serializable], 1, 3, 0, 0, ["$toString", $rt_wrapFunction0(jl_Enum_toString)]]);
$rt_metadata([cgxgbt_TeaApplication$AppState, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cgxgbtd_WindowWrapper, 0, jl_Object, [], 3, 3, 0, 0, 0,
otj_JSObject, 0, jl_Object, [], 3, 3, 0, 0, 0,
otjb_AnimationFrameCallback, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbtdi_TeaWindow, 0, jl_Object, [cgxgbtd_WindowWrapper, otjb_AnimationFrameCallback], 0, 3, 0, cgxgbtdi_TeaWindow_$callClinit, 0,
jl_Math, 0, jl_Object, [], 4, 3, 0, 0, 0,
jl_IllegalArgumentException, "IllegalArgumentException", 27, jl_RuntimeException, [], 0, 3, 0, 0, 0,
ju_Objects, 0, jl_Object, [], 4, 3, 0, 0, 0,
otji_JSWrapper, 0, jl_Object, [], 4, 3, 0, 0, 0,
cgxgbta_TeaWebAgent, 0, jl_Object, [], 0, 3, 0, 0, 0,
jl_System, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbg_Graphics, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaGraphics, 0, jl_Object, [cbg_Graphics], 0, 3, 0, 0, 0,
cgxgbta_AssetDownloader, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbta_AssetDownloadImpl, 0, jl_Object, [cgxgbta_AssetDownloader], 0, 3, 0, 0, 0,
cgxgbta_AssetInstance, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgxgbta_AssetLoader, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl, 0, jl_Object, [cgxgbta_AssetLoader], 0, 3, 0, 0, 0,
cgxjc_JMultiplatform, 0, jl_Object, [], 4, 3, 0, 0, 0,
cgxjc_JPlatformMap, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbg_Input, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbg_AbstractInput, 0, jl_Object, [cbg_Input], 1, 3, 0, 0, 0,
cgxgbtd_EventListenerWrapper, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbt_TeaInput, 0, cbg_AbstractInput, [cgxgbtd_EventListenerWrapper], 0, 3, 0, 0, 0,
cbg_Files, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaFiles, 0, jl_Object, [cbg_Files], 0, 3, 0, 0, 0,
cgxgbt_TeaNet, 0, jl_Object, [cbg_Net], 0, 3, 0, 0, 0,
cbg_ApplicationLogger, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaApplicationLogger, 0, jl_Object, [cbg_ApplicationLogger], 0, 3, 0, 0, 0,
cbgu_Clipboard, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaClipboard, 0, jl_Object, [cbgu_Clipboard], 0, 3, 0, 0, 0,
cbg_Gdx, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbg_Audio, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaAudio, 0, jl_Object, [cbg_Audio], 3, 3, 0, 0, 0,
cgxgbt_DefaultTeaAudio, 0, jl_Object, [cgxgbt_TeaAudio], 0, 3, 0, 0, 0,
otjde_EventListener, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbt_TeaApplication$1, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, 0,
cgxgbt_TeaApplication$2, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 0, 0, 0, 0,
cgxgbt_TeaApplication$3, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, 0,
cbgu_Pool, 0, jl_Object, [], 1, 3, 0, 0, 0,
cbgu_ReflectionPool, 0, cbgu_Pool, [], 0, 3, 0, 0, 0,
jl_IndexOutOfBoundsException, "IndexOutOfBoundsException", 27, jl_RuntimeException, [], 0, 3, 0, 0, 0,
cbgu_ObjectSet, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
jl_Long, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0, 0,
cgxgbtg_WebGLContextAttributesWrapper, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
cbgg_GL20, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbt_TeaGL20, "TeaGL20", 9, jl_Object, [cbgg_GL20], 0, 3, 0, 0, ["$glAttachShader", $rt_wrapFunction2(cgxgbt_TeaGL20_glAttachShader), "$glBindBuffer", $rt_wrapFunction2(cgxgbt_TeaGL20_glBindBuffer), "$glBindTexture", $rt_wrapFunction2(cgxgbt_TeaGL20_glBindTexture), "$glBlendFuncSeparate", $rt_wrapFunction4(cgxgbt_TeaGL20_glBlendFuncSeparate), "$glBufferData", $rt_wrapFunction4(cgxgbt_TeaGL20_glBufferData), "$glBufferSubData", $rt_wrapFunction4(cgxgbt_TeaGL20_glBufferSubData), "$glClear", $rt_wrapFunction1(cgxgbt_TeaGL20_glClear),
"$glClearColor", $rt_wrapFunction4(cgxgbt_TeaGL20_glClearColor), "$glCompileShader", $rt_wrapFunction1(cgxgbt_TeaGL20_glCompileShader), "$glCreateProgram", $rt_wrapFunction0(cgxgbt_TeaGL20_glCreateProgram), "$glCreateShader", $rt_wrapFunction1(cgxgbt_TeaGL20_glCreateShader), "$glDepthMask", $rt_wrapFunction1(cgxgbt_TeaGL20_glDepthMask), "$glDisable", $rt_wrapFunction1(cgxgbt_TeaGL20_glDisable), "$glDisableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL20_glDisableVertexAttribArray), "$glDrawArrays", $rt_wrapFunction3(cgxgbt_TeaGL20_glDrawArrays),
"$glDrawElements", $rt_wrapFunction4(cgxgbt_TeaGL20_glDrawElements), "$glDrawElements0", $rt_wrapFunction4(cgxgbt_TeaGL20_glDrawElements0), "$glEnable", $rt_wrapFunction1(cgxgbt_TeaGL20_glEnable), "$glEnableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL20_glEnableVertexAttribArray), "$glGenerateMipmap", $rt_wrapFunction1(cgxgbt_TeaGL20_glGenerateMipmap), "$glGetActiveAttrib", $rt_wrapFunction4(cgxgbt_TeaGL20_glGetActiveAttrib), "$glGetActiveUniform", $rt_wrapFunction4(cgxgbt_TeaGL20_glGetActiveUniform),
"$glGetAttribLocation", $rt_wrapFunction2(cgxgbt_TeaGL20_glGetAttribLocation), "$glGetFloatv", $rt_wrapFunction2(cgxgbt_TeaGL20_glGetFloatv), "$glGetProgramInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL20_glGetProgramInfoLog), "$glGetProgramiv", $rt_wrapFunction3(cgxgbt_TeaGL20_glGetProgramiv), "$glGetShaderInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL20_glGetShaderInfoLog), "$glGetShaderiv", $rt_wrapFunction3(cgxgbt_TeaGL20_glGetShaderiv), "$glGetString", $rt_wrapFunction1(cgxgbt_TeaGL20_glGetString), "$glGetUniformLocation",
$rt_wrapFunction2(cgxgbt_TeaGL20_glGetUniformLocation), "$glLinkProgram", $rt_wrapFunction1(cgxgbt_TeaGL20_glLinkProgram), "$glPixelStorei", $rt_wrapFunction2(cgxgbt_TeaGL20_glPixelStorei), "$glShaderSource", $rt_wrapFunction2(cgxgbt_TeaGL20_glShaderSource), "$glTexImage2D", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9) { cgxgbt_TeaGL20_glTexImage2D(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9); }, "$glTexSubImage2D", function(var_1, var_2, var_3, var_4, var_5,
var_6, var_7, var_8, var_9) { cgxgbt_TeaGL20_glTexSubImage2D(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9); }, "$glTexParameterf", $rt_wrapFunction3(cgxgbt_TeaGL20_glTexParameterf), "$glTexParameteri", $rt_wrapFunction3(cgxgbt_TeaGL20_glTexParameteri), "$glUniform1f", $rt_wrapFunction2(cgxgbt_TeaGL20_glUniform1f), "$glUniform1i", $rt_wrapFunction2(cgxgbt_TeaGL20_glUniform1i), "$glUseProgram", $rt_wrapFunction1(cgxgbt_TeaGL20_glUseProgram), "$glVertexAttribPointer", function(var_1, var_2,
var_3, var_4, var_5, var_6) { cgxgbt_TeaGL20_glVertexAttribPointer(this, var_1, var_2, var_3, var_4, var_5, var_6); }, "$glViewport", $rt_wrapFunction4(cgxgbt_TeaGL20_glViewport)],
cbgg_GL30, 0, jl_Object, [cbgg_GL20], 3, 3, 0, 0, 0,
cgxgbt_TeaGL30, "TeaGL30", 9, cgxgbt_TeaGL20, [cbgg_GL30], 0, 3, 0, 0, ["$glBindVertexArray", $rt_wrapFunction1(cgxgbt_TeaGL30_glBindVertexArray), "$glDrawArraysInstanced", $rt_wrapFunction4(cgxgbt_TeaGL30_glDrawArraysInstanced), "$glDrawElementsInstanced", function(var_1, var_2, var_3, var_4, var_5) { cgxgbt_TeaGL30_glDrawElementsInstanced(this, var_1, var_2, var_3, var_4, var_5); }, "$glGenVertexArrays", $rt_wrapFunction2(cgxgbt_TeaGL30_glGenVertexArrays), "$glGetFloatv", $rt_wrapFunction2(cgxgbt_TeaGL30_glGetFloatv)],
cgxgbt_TeaGL30Debug, "TeaGL30Debug", 9, cgxgbt_TeaGL30, [], 0, 3, 0, 0, ["$glBindVertexArray", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glBindVertexArray), "$glDrawArraysInstanced", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glDrawArraysInstanced), "$glDrawElementsInstanced", function(var_1, var_2, var_3, var_4, var_5) { cgxgbt_TeaGL30Debug_glDrawElementsInstanced(this, var_1, var_2, var_3, var_4, var_5); }, "$glGenVertexArrays", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glGenVertexArrays), "$glBindTexture", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glBindTexture),
"$glClear", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glClear), "$glClearColor", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glClearColor), "$glDepthMask", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glDepthMask), "$glDisable", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glDisable), "$glDrawArrays", $rt_wrapFunction3(cgxgbt_TeaGL30Debug_glDrawArrays), "$glDrawElements", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glDrawElements0), "$glEnable", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glEnable), "$glGetString", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glGetString),
"$glPixelStorei", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glPixelStorei), "$glTexImage2D", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9) { cgxgbt_TeaGL30Debug_glTexImage2D(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9); }, "$glTexParameterf", $rt_wrapFunction3(cgxgbt_TeaGL30Debug_glTexParameterf), "$glTexSubImage2D", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9) { cgxgbt_TeaGL30Debug_glTexSubImage2D(this, var_1, var_2, var_3, var_4, var_5,
var_6, var_7, var_8, var_9); }, "$glViewport", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glViewport), "$glAttachShader", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glAttachShader), "$glBindBuffer", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glBindBuffer), "$glBlendFuncSeparate", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glBlendFuncSeparate), "$glBufferData", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glBufferData), "$glBufferSubData", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glBufferSubData), "$glCompileShader", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glCompileShader),
"$glCreateProgram", $rt_wrapFunction0(cgxgbt_TeaGL30Debug_glCreateProgram), "$glCreateShader", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glCreateShader), "$glDisableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glDisableVertexAttribArray), "$glDrawElements0", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glDrawElements), "$glEnableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glEnableVertexAttribArray), "$glGenerateMipmap", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glGenerateMipmap), "$glGetActiveAttrib",
$rt_wrapFunction4(cgxgbt_TeaGL30Debug_glGetActiveAttrib), "$glGetActiveUniform", $rt_wrapFunction4(cgxgbt_TeaGL30Debug_glGetActiveUniform), "$glGetAttribLocation", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glGetAttribLocation), "$glGetFloatv", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glGetFloatv), "$glGetProgramiv", $rt_wrapFunction3(cgxgbt_TeaGL30Debug_glGetProgramiv), "$glGetProgramInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glGetProgramInfoLog), "$glGetShaderiv", $rt_wrapFunction3(cgxgbt_TeaGL30Debug_glGetShaderiv),
"$glGetShaderInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glGetShaderInfoLog), "$glGetUniformLocation", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glGetUniformLocation), "$glLinkProgram", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glLinkProgram), "$glShaderSource", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glShaderSource), "$glTexParameteri", $rt_wrapFunction3(cgxgbt_TeaGL30Debug_glTexParameteri), "$glUniform1f", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glUniform1f), "$glUniform1i", $rt_wrapFunction2(cgxgbt_TeaGL30Debug_glUniform1i),
"$glUseProgram", $rt_wrapFunction1(cgxgbt_TeaGL30Debug_glUseProgram), "$glVertexAttribPointer", function(var_1, var_2, var_3, var_4, var_5, var_6) { cgxgbt_TeaGL30Debug_glVertexAttribPointer(this, var_1, var_2, var_3, var_4, var_5, var_6); }]]);
$rt_metadata([cbggg_GLVersion, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbg_Application$ApplicationType, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cgxgbt_TeaGraphics$FullscreenChanged, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbt_TeaGraphics$1, 0, jl_Object, [cgxgbt_TeaGraphics$FullscreenChanged], 0, 0, 0, 0, 0,
cgxgbt_TeaGL20Debug, "TeaGL20Debug", 9, cgxgbt_TeaGL20, [], 0, 3, 0, 0, ["$glBindTexture", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glBindTexture), "$glClear", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glClear), "$glClearColor", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glClearColor), "$glDepthMask", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glDepthMask), "$glDisable", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glDisable), "$glDrawArrays", $rt_wrapFunction3(cgxgbt_TeaGL20Debug_glDrawArrays), "$glDrawElements", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glDrawElements0),
"$glEnable", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glEnable), "$glGetString", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glGetString), "$glPixelStorei", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glPixelStorei), "$glTexImage2D", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9) { cgxgbt_TeaGL20Debug_glTexImage2D(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9); }, "$glTexParameterf", $rt_wrapFunction3(cgxgbt_TeaGL20Debug_glTexParameterf), "$glTexSubImage2D", function(var_1, var_2,
var_3, var_4, var_5, var_6, var_7, var_8, var_9) { cgxgbt_TeaGL20Debug_glTexSubImage2D(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9); }, "$glViewport", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glViewport), "$glAttachShader", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glAttachShader), "$glBindBuffer", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glBindBuffer), "$glBlendFuncSeparate", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glBlendFuncSeparate), "$glBufferData", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glBufferData),
"$glBufferSubData", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glBufferSubData), "$glCompileShader", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glCompileShader), "$glCreateProgram", $rt_wrapFunction0(cgxgbt_TeaGL20Debug_glCreateProgram), "$glCreateShader", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glCreateShader), "$glDisableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glDisableVertexAttribArray), "$glDrawElements0", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glDrawElements), "$glEnableVertexAttribArray", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glEnableVertexAttribArray),
"$glGenerateMipmap", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glGenerateMipmap), "$glGetActiveAttrib", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glGetActiveAttrib), "$glGetActiveUniform", $rt_wrapFunction4(cgxgbt_TeaGL20Debug_glGetActiveUniform), "$glGetAttribLocation", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glGetAttribLocation), "$glGetFloatv", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glGetFloatv), "$glGetProgramiv", $rt_wrapFunction3(cgxgbt_TeaGL20Debug_glGetProgramiv), "$glGetProgramInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glGetProgramInfoLog),
"$glGetShaderiv", $rt_wrapFunction3(cgxgbt_TeaGL20Debug_glGetShaderiv), "$glGetShaderInfoLog", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glGetShaderInfoLog), "$glGetUniformLocation", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glGetUniformLocation), "$glLinkProgram", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glLinkProgram), "$glShaderSource", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glShaderSource), "$glTexParameteri", $rt_wrapFunction3(cgxgbt_TeaGL20Debug_glTexParameteri), "$glUniform1f", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glUniform1f),
"$glUniform1i", $rt_wrapFunction2(cgxgbt_TeaGL20Debug_glUniform1i), "$glUseProgram", $rt_wrapFunction1(cgxgbt_TeaGL20Debug_glUseProgram), "$glVertexAttribPointer", function(var_1, var_2, var_3, var_4, var_5, var_6) { cgxgbt_TeaGL20Debug_glVertexAttribPointer(this, var_1, var_2, var_3, var_4, var_5, var_6); }],
ju_Collection, 0, jl_Object, [jl_Iterable], 3, 3, 0, 0, 0,
ju_AbstractCollection, 0, jl_Object, [ju_Collection], 1, 3, 0, 0, 0,
ju_Set, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
ju_AbstractSet, 0, ju_AbstractCollection, [ju_Set], 1, 3, 0, 0, 0,
ju_HashSet, 0, ju_AbstractSet, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
cbgu_IntMap, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
cbgu_IntSet, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgxgbtf_FileDB, 0, jl_Object, [], 1, 3, 0, 0, 0,
cgxgbtf_MemoryFileStorage, 0, cgxgbtf_FileDB, [], 0, 3, 0, 0, ["$putFile", $rt_wrapFunction2(cgxgbtf_MemoryFileStorage_putFile), "$removeFile", $rt_wrapFunction1(cgxgbtf_MemoryFileStorage_removeFile)],
cgxgbtft_InternalStorage, "InternalStorage", 11, cgxgbtf_MemoryFileStorage, [], 0, 3, [0,0,0], 0, 0,
cgxgbtft_ClasspathStorage, "ClasspathStorage", 11, cgxgbtf_MemoryFileStorage, [], 0, 3, [0,0,0], 0, 0,
cgxgbtft_LocalDBStorage, "LocalDBStorage", 11, cgxgbtf_MemoryFileStorage, [], 0, 3, [0,0,0], 0, ["$putFile", $rt_wrapFunction2(cgxgbtft_LocalDBStorage_putFile), "$removeFile", $rt_wrapFunction1(cgxgbtft_LocalDBStorage_removeFile)],
cgxgbt_TeaPermissions$TeaPermissionResult, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbt_TeaClipboard$ClipboardWriteHandler, 0, jl_Object, [cgxgbt_TeaPermissions$TeaPermissionResult], 0, 0, 0, 0, 0,
cgxgbt_TeaClipboard$_init_$lambda$_0_0, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 3, 0, 0, 0,
cgxgbt_TeaClipboard$_init_$lambda$_0_1, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 3, 0, 0, 0,
cgxgbt_TeaClipboard$_init_$lambda$_0_2, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 3, 0, 0, 0,
cgxgbta_AssetLoaderListener, 0, jl_Object, [], 3, 3, 0, 0, ["$onProgress", $rt_wrapFunction2(cgxgbta_AssetLoaderListener_onProgress)],
cgxgbt_TeaApplication$4, 0, jl_Object, [cgxgbta_AssetLoaderListener], 0, 0, 0, 0, ["$onProgress", $rt_wrapFunction2(cgxgbta_AssetLoaderListener_onProgress)],
cgxgbt_TeaApplication$5, 0, jl_Object, [cgxgbta_AssetLoaderListener], 0, 0, 0, 0, ["$onProgress", $rt_wrapFunction2(cgxgbta_AssetLoaderListener_onProgress)],
cbg_LifecycleListener, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgxgbtwh_HowlerAudioManager, 0, jl_Object, [cbg_LifecycleListener], 0, 3, 0, 0, 0,
cbgm_MathUtils, 0, jl_Object, [], 4, 3, 0, 0, 0,
ju_Dictionary, 0, jl_Object, [], 1, 3, 0, 0, 0,
ju_Hashtable, 0, ju_Dictionary, [ju_Map, jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
ju_Properties, 0, ju_Hashtable, [], 0, 3, 0, 0, 0,
cgxgbt_TeaGL20$CustomIntMap, 0, jl_Object, [otj_JSObject], 0, 0, 0, 0, 0,
cbggg_GLVersion$Type, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$1, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 0, 0, 0, 0,
cgxgbta_AssetLoadImpl$2, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 0, 0, 0, 0,
cgxgbta_AssetLoadImpl$3, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 0, 0, 0, 0,
cbgur_ClassReflection, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbgur_Constructor, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbgur_ReflectionException, "ReflectionException", 15, jl_Exception, [], 0, 3, 0, 0, 0,
jur_Pattern, 0, jl_Object, [ji_Serializable], 4, 3, 0, 0, 0,
jur_MatchResult, 0, jl_Object, [], 3, 3, 0, 0, 0,
jur_Matcher, 0, jl_Object, [jur_MatchResult], 4, 3, 0, 0, 0,
otji_IDBFactory, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0, 0, jl_Object, [otjde_EventListener], 0, 3, 0, 0, 0,
otji_EventHandler, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
jl_SecurityException, 0, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jl_ReflectiveOperationException, 0, jl_Exception, [], 0, 3, 0, 0, 0,
jl_NoSuchMethodException, "NoSuchMethodException", 27, jl_ReflectiveOperationException, [], 0, 3, 0, 0, 0]);
$rt_metadata([jur_RandomGenerator, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_Random, 0, jl_Object, [jur_RandomGenerator, ji_Serializable], 0, 3, 0, 0, 0,
cbgm_RandomXS128, 0, ju_Random, [], 0, 3, 0, 0, 0,
ju_Enumeration, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_Hashtable$1, 0, jl_Object, [ju_Enumeration], 0, 0, 0, 0, 0,
ju_Iterator, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_Hashtable$2, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
jur_MatchResultImpl, 0, jl_Object, [jur_MatchResult], 0, 0, 0, 0, 0,
jl_NumberFormatException, "NumberFormatException", 27, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
jl_IllegalStateException, "IllegalStateException", 27, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jlr_Modifier, 0, jl_Object, [], 0, 3, 0, 0, 0,
ju_Arrays, 0, jl_Object, [], 0, 3, 0, 0, 0,
jlr_AccessibleObject, 0, jl_Object, [jlr_AnnotatedElement], 0, 3, 0, 0, 0,
jl_NullPointerException, "NullPointerException", 27, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jur_AbstractSet, 0, jl_Object, [], 1, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_AbstractSet_find), "$findBack", $rt_wrapFunction4(jur_AbstractSet_findBack), "$getType1", $rt_wrapFunction0(jur_AbstractSet_getType), "$toString", $rt_wrapFunction0(jur_AbstractSet_toString), "$setNext", $rt_wrapFunction1(jur_AbstractSet_setNext), "$first", $rt_wrapFunction1(jur_AbstractSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_AbstractSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_AbstractSet_processSecondPass)],
jlr_Member, 0, jl_Object, [], 3, 3, 0, 0, 0,
jlr_Constructor, "Constructor", 28, jlr_AccessibleObject, [jlr_Member], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(jlr_Constructor_toString)],
otcir_MethodCaller, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_Map$Entry, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_MapEntry, 0, jl_Object, [ju_Map$Entry, jl_Cloneable], 0, 0, 0, 0, 0,
ju_Hashtable$Entry, 0, ju_MapEntry, [], 0, 0, 0, 0, 0,
jur_FSet, "FSet", 23, jur_AbstractSet, [], 0, 0, 0, jur_FSet_$callClinit, ["$matches", $rt_wrapFunction3(jur_FSet_matches), "$getName", $rt_wrapFunction0(jur_FSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_FSet_hasConsumed)],
jur_Lexer, 0, jl_Object, [], 0, 0, 0, 0, 0,
jur_PatternSyntaxException, "PatternSyntaxException", 23, jl_IllegalArgumentException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jur_PatternSyntaxException_getMessage)],
jlr_Array, 0, jl_Object, [], 4, 3, 0, 0, 0,
jl_CloneNotSupportedException, "CloneNotSupportedException", 27, jl_Exception, [], 0, 3, 0, 0, 0,
otcir_MethodCaller$forJs$lambda$_1_0, 0, jl_Object, [otcir_MethodCaller], 0, 3, 0, 0, 0,
ju_SequencedCollection, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
ju_List, 0, jl_Object, [ju_SequencedCollection], 3, 3, 0, 0, 0,
ju_AbstractList, 0, ju_AbstractCollection, [ju_List], 1, 3, 0, 0, 0,
ju_RandomAccess, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_ArrayList, 0, ju_AbstractList, [jl_Cloneable, ji_Serializable, ju_RandomAccess], 0, 3, 0, 0, 0,
jur_NonCapFSet, "NonCapFSet", 23, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NonCapFSet_matches), "$getName", $rt_wrapFunction0(jur_NonCapFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_NonCapFSet_hasConsumed)],
jur_AheadFSet, "AheadFSet", 23, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AheadFSet_matches), "$getName", $rt_wrapFunction0(jur_AheadFSet_getName)],
jur_BehindFSet, "BehindFSet", 23, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_BehindFSet_matches), "$getName", $rt_wrapFunction0(jur_BehindFSet_getName)],
jur_AtomicFSet, "AtomicFSet", 23, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AtomicFSet_matches), "$getName", $rt_wrapFunction0(jur_AtomicFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_AtomicFSet_hasConsumed)],
jur_FinalSet, "FinalSet", 23, jur_FSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_FinalSet_matches), "$getName", $rt_wrapFunction0(jur_FinalSet_getName)],
jur_LeafSet, 0, jur_AbstractSet, [], 1, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_LeafSet_matches), "$charCount", $rt_wrapFunction0(jur_LeafSet_charCount), "$hasConsumed", $rt_wrapFunction1(jur_LeafSet_hasConsumed)],
jur_EmptySet, "EmptySet", 23, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_EmptySet_accepts), "$find0", $rt_wrapFunction3(jur_EmptySet_find), "$findBack", $rt_wrapFunction4(jur_EmptySet_findBack), "$getName", $rt_wrapFunction0(jur_EmptySet_getName), "$hasConsumed", $rt_wrapFunction1(jur_EmptySet_hasConsumed)],
jur_JointSet, "JointSet", 23, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_JointSet_matches), "$setNext", $rt_wrapFunction1(jur_JointSet_setNext), "$getName", $rt_wrapFunction0(jur_JointSet_getName), "$first", $rt_wrapFunction1(jur_JointSet_first), "$hasConsumed", $rt_wrapFunction1(jur_JointSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_JointSet_processSecondPass)],
jur_NonCapJointSet, "NonCapJointSet", 23, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NonCapJointSet_matches), "$getName", $rt_wrapFunction0(jur_NonCapJointSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_NonCapJointSet_hasConsumed)],
jur_AtomicJointSet, "AtomicJointSet", 23, jur_NonCapJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AtomicJointSet_matches), "$setNext", $rt_wrapFunction1(jur_AtomicJointSet_setNext), "$getName", $rt_wrapFunction0(jur_AtomicJointSet_getName)],
jur_PositiveLookAhead, "PositiveLookAhead", 23, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PositiveLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookAhead_hasConsumed), "$getName", $rt_wrapFunction0(jur_PositiveLookAhead_getName)],
jur_NegativeLookAhead, "NegativeLookAhead", 23, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NegativeLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookAhead_hasConsumed), "$getName", $rt_wrapFunction0(jur_NegativeLookAhead_getName)],
jur_PositiveLookBehind, "PositiveLookBehind", 23, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PositiveLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookBehind_hasConsumed), "$getName", $rt_wrapFunction0(jur_PositiveLookBehind_getName)],
jur_NegativeLookBehind, "NegativeLookBehind", 23, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_NegativeLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookBehind_hasConsumed), "$getName", $rt_wrapFunction0(jur_NegativeLookBehind_getName)],
jur_SingleSet, "SingleSet", 23, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SingleSet_matches), "$find0", $rt_wrapFunction3(jur_SingleSet_find), "$findBack", $rt_wrapFunction4(jur_SingleSet_findBack), "$first", $rt_wrapFunction1(jur_SingleSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_SingleSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_SingleSet_processSecondPass)],
jl_NegativeArraySizeException, "NegativeArraySizeException", 27, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jl_ArrayStoreException, "ArrayStoreException", 27, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jur_SpecialToken, 0, jl_Object, [], 1, 0, 0, 0, 0]);
$rt_metadata([jur_AbstractCharClass, 0, jur_SpecialToken, [], 1, 0, 0, 0, ["$getBits", $rt_wrapFunction0(jur_AbstractCharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_AbstractCharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_AbstractCharClass_getInstance), "$hasUCI", $rt_wrapFunction0(jur_AbstractCharClass_hasUCI)],
ju_MissingResourceException, "MissingResourceException", 22, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jur_CharClass, "CharClass", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass_contains), "$getBits", $rt_wrapFunction0(jur_CharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_CharClass_getLowHighSurrogates), "$getInstance0", $rt_wrapFunction0(jur_CharClass_getInstance), "$toString", $rt_wrapFunction0(jur_CharClass_toString), "$hasUCI", $rt_wrapFunction0(jur_CharClass_hasUCI)],
jur_QuantifierSet, 0, jur_AbstractSet, [], 1, 0, 0, 0, ["$first", $rt_wrapFunction1(jur_QuantifierSet_first), "$hasConsumed", $rt_wrapFunction1(jur_QuantifierSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_QuantifierSet_processSecondPass)],
jur_LeafQuantifierSet, "LeafQuantifierSet", 23, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_LeafQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_LeafQuantifierSet_getName)],
jur_CompositeQuantifierSet, "CompositeQuantifierSet", 23, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_CompositeQuantifierSet_getName)],
jur_GroupQuantifierSet, "GroupQuantifierSet", 23, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_GroupQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_GroupQuantifierSet_getName)],
jur_AltQuantifierSet, "AltQuantifierSet", 23, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AltQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltQuantifierSet_setNext)],
jur_UnifiedQuantifierSet, "UnifiedQuantifierSet", 23, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UnifiedQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_UnifiedQuantifierSet_find)],
jur_AbstractCharClass$PredefinedCharacterClasses, 0, jl_Object, [], 4, 0, 0, 0, 0,
jur_AbstractCharClass$LazyCharClass, 0, jl_Object, [], 1, 0, 0, 0, 0,
jur_Quantifier, "Quantifier", 23, jur_SpecialToken, [jl_Cloneable], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(jur_Quantifier_toString)],
jur_FSet$PossessiveFSet, "FSet$PossessiveFSet", 23, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_FSet$PossessiveFSet_matches), "$getName", $rt_wrapFunction0(jur_FSet$PossessiveFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_FSet$PossessiveFSet_hasConsumed)],
ju_BitSet, 0, jl_Object, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
jur_LowHighSurrogateRangeSet, 0, jur_JointSet, [], 0, 0, 0, 0, ["$getName", $rt_wrapFunction0(jur_LowHighSurrogateRangeSet_getName)],
jur_CompositeRangeSet, "CompositeRangeSet", 23, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeRangeSet_matches), "$setNext", $rt_wrapFunction1(jur_CompositeRangeSet_setNext), "$getName", $rt_wrapFunction0(jur_CompositeRangeSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_CompositeRangeSet_hasConsumed), "$first", $rt_wrapFunction1(jur_CompositeRangeSet_first)],
jur_SupplRangeSet, "SupplRangeSet", 23, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SupplRangeSet_matches), "$getName", $rt_wrapFunction0(jur_SupplRangeSet_getName), "$contains0", $rt_wrapFunction1(jur_SupplRangeSet_contains), "$first", $rt_wrapFunction1(jur_SupplRangeSet_first), "$setNext", $rt_wrapFunction1(jur_SupplRangeSet_setNext), "$hasConsumed", $rt_wrapFunction1(jur_SupplRangeSet_hasConsumed)],
jur_UCISupplRangeSet, "UCISupplRangeSet", 23, jur_SupplRangeSet, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_UCISupplRangeSet_contains), "$getName", $rt_wrapFunction0(jur_UCISupplRangeSet_getName)],
jur_UCIRangeSet, "UCIRangeSet", 23, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCIRangeSet_accepts), "$getName", $rt_wrapFunction0(jur_UCIRangeSet_getName)],
jur_RangeSet, "RangeSet", 23, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_RangeSet_accepts), "$getName", $rt_wrapFunction0(jur_RangeSet_getName), "$first", $rt_wrapFunction1(jur_RangeSet_first)],
jur_HangulDecomposedCharSet, "HangulDecomposedCharSet", 23, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HangulDecomposedCharSet_setNext), "$getName", $rt_wrapFunction0(jur_HangulDecomposedCharSet_getName), "$matches", $rt_wrapFunction3(jur_HangulDecomposedCharSet_matches), "$first", $rt_wrapFunction1(jur_HangulDecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HangulDecomposedCharSet_hasConsumed)],
jur_CharSet, "CharSet", 23, jur_LeafSet, [], 0, 0, 0, 0, ["$charCount", $rt_wrapFunction0(jur_CharSet_charCount), "$accepts", $rt_wrapFunction2(jur_CharSet_accepts), "$find0", $rt_wrapFunction3(jur_CharSet_find), "$findBack", $rt_wrapFunction4(jur_CharSet_findBack), "$getName", $rt_wrapFunction0(jur_CharSet_getName), "$first", $rt_wrapFunction1(jur_CharSet_first)],
jur_UCICharSet, "UCICharSet", 23, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCICharSet_accepts), "$getName", $rt_wrapFunction0(jur_UCICharSet_getName)],
jur_CICharSet, "CICharSet", 23, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CICharSet_accepts), "$getName", $rt_wrapFunction0(jur_CICharSet_getName)],
jur_DecomposedCharSet, "DecomposedCharSet", 23, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_DecomposedCharSet_setNext), "$matches", $rt_wrapFunction3(jur_DecomposedCharSet_matches), "$getName", $rt_wrapFunction0(jur_DecomposedCharSet_getName), "$first", $rt_wrapFunction1(jur_DecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_DecomposedCharSet_hasConsumed)],
jur_UCIDecomposedCharSet, "UCIDecomposedCharSet", 23, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
jur_CIDecomposedCharSet, "CIDecomposedCharSet", 23, jur_DecomposedCharSet, [], 0, 0, 0, 0, 0,
jur_PossessiveGroupQuantifierSet, "PossessiveGroupQuantifierSet", 23, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveGroupQuantifierSet_matches)],
jur_PosPlusGroupQuantifierSet, "PosPlusGroupQuantifierSet", 23, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosPlusGroupQuantifierSet_matches)],
jur_AltGroupQuantifierSet, "AltGroupQuantifierSet", 23, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_AltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltGroupQuantifierSet_setNext)],
jur_PosAltGroupQuantifierSet, "PosAltGroupQuantifierSet", 23, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosAltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_PosAltGroupQuantifierSet_setNext)],
jur_CompositeGroupQuantifierSet, "CompositeGroupQuantifierSet", 23, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CompositeGroupQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_CompositeGroupQuantifierSet_getName)],
jur_PosCompositeGroupQuantifierSet, "PosCompositeGroupQuantifierSet", 23, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PosCompositeGroupQuantifierSet_matches)],
jur_ReluctantGroupQuantifierSet, "ReluctantGroupQuantifierSet", 23, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantGroupQuantifierSet_matches)],
jur_RelAltGroupQuantifierSet, "RelAltGroupQuantifierSet", 23, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_RelAltGroupQuantifierSet_matches)],
jur_RelCompositeGroupQuantifierSet, "RelCompositeGroupQuantifierSet", 23, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_RelCompositeGroupQuantifierSet_matches)],
jur_DotAllQuantifierSet, "DotAllQuantifierSet", 23, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotAllQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotAllQuantifierSet_find), "$getName", $rt_wrapFunction0(jur_DotAllQuantifierSet_getName)],
jur_DotQuantifierSet, "DotQuantifierSet", 23, jur_QuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotQuantifierSet_matches), "$find0", $rt_wrapFunction3(jur_DotQuantifierSet_find), "$getName", $rt_wrapFunction0(jur_DotQuantifierSet_getName)],
jur_AbstractLineTerminator, 0, jl_Object, [], 1, 0, 0, 0, 0,
jur_PossessiveQuantifierSet, "PossessiveQuantifierSet", 23, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveQuantifierSet_matches)],
jur_PossessiveAltQuantifierSet, "PossessiveAltQuantifierSet", 23, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveAltQuantifierSet_matches)],
jur_PossessiveCompositeQuantifierSet, "PossessiveCompositeQuantifierSet", 23, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PossessiveCompositeQuantifierSet_matches)],
jur_ReluctantQuantifierSet, "ReluctantQuantifierSet", 23, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantQuantifierSet_matches)],
jur_ReluctantAltQuantifierSet, "ReluctantAltQuantifierSet", 23, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantAltQuantifierSet_matches)],
jur_ReluctantCompositeQuantifierSet, "ReluctantCompositeQuantifierSet", 23, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_ReluctantCompositeQuantifierSet_matches)],
jur_SOLSet, "SOLSet", 23, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_SOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_SOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_SOLSet_getName)],
jur_WordBoundary, "WordBoundary", 23, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_WordBoundary_matches), "$hasConsumed", $rt_wrapFunction1(jur_WordBoundary_hasConsumed), "$getName", $rt_wrapFunction0(jur_WordBoundary_getName)],
jur_PreviousMatch, "PreviousMatch", 23, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_PreviousMatch_matches), "$hasConsumed", $rt_wrapFunction1(jur_PreviousMatch_hasConsumed), "$getName", $rt_wrapFunction0(jur_PreviousMatch_getName)],
jur_EOLSet, "EOLSet", 23, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_EOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_EOLSet_getName)],
jur_EOISet, "EOISet", 23, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_EOISet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOISet_hasConsumed), "$getName", $rt_wrapFunction0(jur_EOISet_getName)]]);
$rt_metadata([jur_MultiLineSOLSet, "MultiLineSOLSet", 23, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_MultiLineSOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineSOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_MultiLineSOLSet_getName)],
jur_DotAllSet, "DotAllSet", 23, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotAllSet_matches), "$getName", $rt_wrapFunction0(jur_DotAllSet_getName), "$setNext", $rt_wrapFunction1(jur_DotAllSet_setNext), "$getType1", $rt_wrapFunction0(jur_DotAllSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotAllSet_hasConsumed)],
jur_DotSet, "DotSet", 23, jur_JointSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_DotSet_matches), "$getName", $rt_wrapFunction0(jur_DotSet_getName), "$setNext", $rt_wrapFunction1(jur_DotSet_setNext), "$getType1", $rt_wrapFunction0(jur_DotSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotSet_hasConsumed)],
jur_UEOLSet, "UEOLSet", 23, jur_AbstractSet, [], 4, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_UEOLSet_getName)],
jur_UMultiLineEOLSet, "UMultiLineEOLSet", 23, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UMultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UMultiLineEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_UMultiLineEOLSet_getName)],
jur_MultiLineEOLSet, "MultiLineEOLSet", 23, jur_AbstractSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_MultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_MultiLineEOLSet_getName)],
jur_CIBackReferenceSet, "CIBackReferenceSet", 23, jur_JointSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_CIBackReferenceSet_matches), "$setNext", $rt_wrapFunction1(jur_CIBackReferenceSet_setNext), "$getName", $rt_wrapFunction0(jur_CIBackReferenceSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_CIBackReferenceSet_hasConsumed)],
jur_BackReferenceSet, "BackReferenceSet", 23, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_BackReferenceSet_matches), "$find0", $rt_wrapFunction3(jur_BackReferenceSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferenceSet_findBack), "$first", $rt_wrapFunction1(jur_BackReferenceSet_first), "$getName", $rt_wrapFunction0(jur_BackReferenceSet_getName)],
jur_UCIBackReferenceSet, "UCIBackReferenceSet", 23, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$matches", $rt_wrapFunction3(jur_UCIBackReferenceSet_matches), "$getName", $rt_wrapFunction0(jur_UCIBackReferenceSet_getName)],
jl_StringBuffer, 0, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$insert3", $rt_wrapFunction4(jl_StringBuffer_insert0), "$append6", $rt_wrapFunction3(jl_StringBuffer_append), "$insert2", $rt_wrapFunction4(jl_StringBuffer_insert1), "$append5", $rt_wrapFunction3(jl_StringBuffer_append0), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuffer_ensureCapacity), "$insert1", $rt_wrapFunction2(jl_StringBuffer_insert2), "$insert", $rt_wrapFunction2(jl_StringBuffer_insert)],
jur_SequenceSet, "SequenceSet", 23, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SequenceSet_accepts), "$find0", $rt_wrapFunction3(jur_SequenceSet_find), "$findBack", $rt_wrapFunction4(jur_SequenceSet_findBack), "$getName", $rt_wrapFunction0(jur_SequenceSet_getName), "$first", $rt_wrapFunction1(jur_SequenceSet_first)],
jur_UCISequenceSet, "UCISequenceSet", 23, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISequenceSet_accepts), "$getName", $rt_wrapFunction0(jur_UCISequenceSet_getName)],
jur_CISequenceSet, "CISequenceSet", 23, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_CISequenceSet_accepts), "$getName", $rt_wrapFunction0(jur_CISequenceSet_getName)],
jur_UCISupplCharSet, "UCISupplCharSet", 23, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_UCISupplCharSet_accepts), "$getName", $rt_wrapFunction0(jur_UCISupplCharSet_getName)],
jur_LowSurrogateCharSet, "LowSurrogateCharSet", 23, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_LowSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_LowSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_LowSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_LowSurrogateCharSet_findBack), "$getName", $rt_wrapFunction0(jur_LowSurrogateCharSet_getName), "$first", $rt_wrapFunction1(jur_LowSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_LowSurrogateCharSet_hasConsumed)],
jur_HighSurrogateCharSet, "HighSurrogateCharSet", 23, jur_JointSet, [], 0, 0, 0, 0, ["$setNext", $rt_wrapFunction1(jur_HighSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_HighSurrogateCharSet_matches), "$find0", $rt_wrapFunction3(jur_HighSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_HighSurrogateCharSet_findBack), "$getName", $rt_wrapFunction0(jur_HighSurrogateCharSet_getName), "$first", $rt_wrapFunction1(jur_HighSurrogateCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HighSurrogateCharSet_hasConsumed)],
jur_SupplCharSet, "SupplCharSet", 23, jur_LeafSet, [], 0, 0, 0, 0, ["$accepts", $rt_wrapFunction2(jur_SupplCharSet_accepts), "$find0", $rt_wrapFunction3(jur_SupplCharSet_find), "$findBack", $rt_wrapFunction4(jur_SupplCharSet_findBack), "$getName", $rt_wrapFunction0(jur_SupplCharSet_getName), "$first", $rt_wrapFunction1(jur_SupplCharSet_first)],
jur_AbstractLineTerminator$1, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$1_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$1_isAfterLineTerminator)],
jur_AbstractLineTerminator$2, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$2_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$2_isAfterLineTerminator)],
jur_SequenceSet$IntHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
jur_AbstractCharClass$LazySpace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpace_computeValue)],
jur_AbstractCharClass$LazyDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyDigit_computeValue)],
jur_AbstractCharClass$LazyLower, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyLower_computeValue)],
jur_AbstractCharClass$LazyUpper, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyUpper_computeValue)],
jur_AbstractCharClass$LazyASCII, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyASCII_computeValue)],
jur_AbstractCharClass$LazyAlpha, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlpha_computeValue)],
jur_AbstractCharClass$LazyAlnum, 0, jur_AbstractCharClass$LazyAlpha, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlnum_computeValue)],
jur_AbstractCharClass$LazyPunct, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPunct_computeValue)],
jur_AbstractCharClass$LazyGraph, 0, jur_AbstractCharClass$LazyAlnum, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyGraph_computeValue)],
jur_AbstractCharClass$LazyPrint, 0, jur_AbstractCharClass$LazyGraph, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPrint_computeValue)],
jur_AbstractCharClass$LazyBlank, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyBlank_computeValue)],
jur_AbstractCharClass$LazyCntrl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCntrl_computeValue)],
jur_AbstractCharClass$LazyXDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyXDigit_computeValue)],
jur_AbstractCharClass$LazyJavaLowerCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLowerCase_computeValue)],
jur_AbstractCharClass$LazyJavaUpperCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUpperCase_computeValue)],
jur_AbstractCharClass$LazyJavaWhitespace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaWhitespace_computeValue)],
jur_AbstractCharClass$LazyJavaMirrored, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaMirrored_computeValue)],
jur_AbstractCharClass$LazyJavaDefined, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDefined_computeValue)],
jur_AbstractCharClass$LazyJavaDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDigit_computeValue)],
jur_AbstractCharClass$LazyJavaIdentifierIgnorable, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue)],
jur_AbstractCharClass$LazyJavaISOControl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaISOControl_computeValue)],
jur_AbstractCharClass$LazyJavaJavaIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue)],
jur_AbstractCharClass$LazyJavaJavaIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue)],
jur_AbstractCharClass$LazyJavaLetter, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetter_computeValue)],
jur_AbstractCharClass$LazyJavaLetterOrDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue)],
jur_AbstractCharClass$LazyJavaSpaceChar, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaSpaceChar_computeValue)],
jur_AbstractCharClass$LazyJavaTitleCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaTitleCase_computeValue)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue)],
jur_AbstractCharClass$LazyWord, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyWord_computeValue)]]);
$rt_metadata([jur_AbstractCharClass$LazyNonWord, 0, jur_AbstractCharClass$LazyWord, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonWord_computeValue)],
jur_AbstractCharClass$LazyNonSpace, 0, jur_AbstractCharClass$LazySpace, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonSpace_computeValue)],
jur_AbstractCharClass$LazyNonDigit, 0, jur_AbstractCharClass$LazyDigit, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonDigit_computeValue)],
jur_AbstractCharClass$LazyRange, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyRange_computeValue)],
jur_AbstractCharClass$LazySpecialsBlock, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpecialsBlock_computeValue)],
jur_AbstractCharClass$LazyCategory, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategory_computeValue)],
jur_AbstractCharClass$LazyCategoryScope, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategoryScope_computeValue)],
jur_IntHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
otpp_ResourceAccessor, 0, jl_Object, [], 4, 0, 0, 0, 0,
otciu_UnicodeHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
otciu_CharMapping, 0, jl_Object, [], 0, 3, 0, 0, 0,
otciu_UnicodeHelper$Range, "UnicodeHelper$Range", 33, jl_Object, [], 0, 3, 0, 0, 0,
otci_CharFlow, 0, jl_Object, [], 0, 3, 0, 0, 0,
otci_Base46, 0, jl_Object, [], 4, 3, 0, 0, 0,
otcir_Flags, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbgu_NumberUtils, 0, jl_Object, [], 4, 3, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit, 0, jl_Enum, [], 9, 3, 0, cgxgbtd_StyleWrapper$Unit_$callClinit, 0,
ju_HashMap$HashEntry, 0, ju_MapEntry, [], 0, 0, 0, 0, 0,
jl_StringIndexOutOfBoundsException, "StringIndexOutOfBoundsException", 27, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, 0,
jur_AbstractCharClass$1, "AbstractCharClass$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$1_contains)],
jur_AbstractCharClass$2, "AbstractCharClass$2", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$2_contains)],
jur_CharClass$18, "CharClass$18", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$18_contains), "$toString", $rt_wrapFunction0(jur_CharClass$18_toString)],
jur_CharClass$1, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$1_contains)],
jur_CharClass$3, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$3_contains)],
jur_CharClass$2, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$2_contains)],
jur_CharClass$5, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$5_contains)],
jur_CharClass$4, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$4_contains)],
jur_CharClass$7, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$7_contains)],
jur_CharClass$6, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$6_contains)],
jur_CharClass$9, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$9_contains)],
jur_CharClass$8, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$8_contains)],
jur_CharClass$11, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$11_contains)],
jur_CharClass$10, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$10_contains)],
jur_CharClass$13, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$13_contains)],
jur_CharClass$12, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$12_contains)],
jur_CharClass$15, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$15_contains)],
jur_CharClass$14, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$14_contains)],
jur_CharClass$17, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$17_contains)],
jur_CharClass$16, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_CharClass$16_contains)],
jl_Thread, 0, jl_Object, [jl_Runnable], 0, 3, 0, 0, 0,
jl_Object$Monitor, 0, jl_Object, [], 0, 0, 0, 0, 0,
jl_IllegalMonitorStateException, "IllegalMonitorStateException", 27, jl_RuntimeException, [], 0, 3, 0, 0, 0,
otjf_JSMapping, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0, 0, jl_Object, [otjf_JSMapping], 0, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1, 0, jl_Object, [otjf_JSMapping], 0, 3, 0, 0, 0,
otjf_JSSupplier, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2, 0, jl_Object, [otjf_JSSupplier], 0, 3, 0, 0, 0,
jl_Float, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0, 0,
cgxgbtu_KeyCodes, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_TimeUtils, 0, jl_Object, [], 4, 3, 0, 0, 0]);
$rt_metadata([otp_PlatformQueue, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
otp_PlatformRunnable, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_Object$monitorExit$lambda$_8_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, 0,
cgxgbt_TeaWindowListener, 0, jl_Object, [], 3, 3, 0, 0, 0,
otjc_JSPromise$Executor, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$getFile$lambda$_2_0, 0, jl_Object, [otjc_JSPromise$Executor], 0, 3, 0, 0, 0,
otji_IDBObjectStoreParameters, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
jl_AutoCloseable, 0, jl_Object, [], 3, 3, 0, 0, 0,
ji_Closeable, 0, jl_Object, [jl_AutoCloseable], 3, 3, 0, 0, 0,
ji_Flushable, 0, jl_Object, [], 3, 3, 0, 0, 0,
ji_OutputStream, 0, jl_Object, [ji_Closeable, ji_Flushable], 1, 3, 0, 0, 0,
ji_FilterOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0, 0,
ji_PrintStream, 0, ji_FilterOutputStream, [jl_Appendable], 0, 3, 0, 0, 0,
otcic_JsConsolePrintStream, 0, ji_PrintStream, [], 1, 3, 0, 0, 0,
otcic_JSStderrPrintStream, 0, otcic_JsConsolePrintStream, [], 0, 3, 0, 0, ["$print", $rt_wrapFunction1(otcic_JSStderrPrintStream_print)],
cgxgbtd_StyleWrapper$Unit$1, 0, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$2, 0, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$3, 0, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$4, 0, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$5, 0, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$6, 0, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$7, 0, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$8, 0, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
cgxgbtd_StyleWrapper$Unit$9, 0, cgxgbtd_StyleWrapper$Unit, [], 12, 0, 0, 0, 0,
jl_Thread$UncaughtExceptionHandler, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_DefaultUncaughtExceptionHandler, 0, jl_Object, [jl_Thread$UncaughtExceptionHandler], 0, 3, 0, 0, 0,
jnc_Charset, 0, jl_Object, [jl_Comparable], 1, 3, 0, 0, 0,
oti_AsyncCallback, 0, jl_Object, [], 3, 3, 0, 0, 0,
otpp_AsyncCallbackWrapper, 0, jl_Object, [oti_AsyncCallback], 0, 0, 0, 0, ["$complete", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_complete), "$error0", $rt_wrapFunction1(otpp_AsyncCallbackWrapper_error)],
jl_Object$monitorEnterWait$lambda$_6_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0, 0,
otjc_JSObjects, 0, jl_Object, [], 4, 3, 0, 0, 0,
otji_JSWrapper$Helper, 0, jl_Object, [], 0, 0, 0, otji_JSWrapper$Helper_$callClinit, 0,
otjc_JSUndefined, 0, jl_Object, [otj_JSObject], 0, 3, 0, 0, 0,
otjc_JSWeakRef, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
otjc_JSFinalizationRegistryConsumer, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
otji_JSWrapper$Helper$_clinit_$lambda$_3_0, 0, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, 0,
otji_JSWrapper$Helper$_clinit_$lambda$_3_1, 0, jl_Object, [otjc_JSFinalizationRegistryConsumer], 0, 3, 0, 0, 0,
jur_BackReferencedSingleSet, "BackReferencedSingleSet", 23, jur_SingleSet, [], 0, 0, 0, 0, ["$find0", $rt_wrapFunction3(jur_BackReferencedSingleSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferencedSingleSet_findBack), "$processBackRefReplacement", $rt_wrapFunction0(jur_BackReferencedSingleSet_processBackRefReplacement)],
cgxgbt_TeaApplication$6, 0, jl_Object, [], 32, 0, 0, cgxgbt_TeaApplication$6_$callClinit, 0,
jur_AbstractCharClass$LazyJavaLowerCase$1, "AbstractCharClass$LazyJavaLowerCase$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLowerCase$1_contains)],
jur_AbstractCharClass$LazyJavaUpperCase$1, "AbstractCharClass$LazyJavaUpperCase$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUpperCase$1_contains)],
jur_AbstractCharClass$LazyJavaWhitespace$1, "AbstractCharClass$LazyJavaWhitespace$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaWhitespace$1_contains)],
jur_AbstractCharClass$LazyJavaMirrored$1, "AbstractCharClass$LazyJavaMirrored$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaMirrored$1_contains)],
jur_AbstractCharClass$LazyJavaDefined$1, "AbstractCharClass$LazyJavaDefined$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDefined$1_contains)],
jur_AbstractCharClass$LazyJavaDigit$1, "AbstractCharClass$LazyJavaDigit$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDigit$1_contains)],
jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1, "AbstractCharClass$LazyJavaIdentifierIgnorable$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains)],
jur_AbstractCharClass$LazyJavaISOControl$1, "AbstractCharClass$LazyJavaISOControl$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaISOControl$1_contains)]]);
$rt_metadata([jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1, "AbstractCharClass$LazyJavaJavaIdentifierPart$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains)],
jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1, "AbstractCharClass$LazyJavaJavaIdentifierStart$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains)],
jur_AbstractCharClass$LazyJavaLetter$1, "AbstractCharClass$LazyJavaLetter$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetter$1_contains)],
jur_AbstractCharClass$LazyJavaLetterOrDigit$1, "AbstractCharClass$LazyJavaLetterOrDigit$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains)],
jur_AbstractCharClass$LazyJavaSpaceChar$1, "AbstractCharClass$LazyJavaSpaceChar$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaSpaceChar$1_contains)],
jur_AbstractCharClass$LazyJavaTitleCase$1, "AbstractCharClass$LazyJavaTitleCase$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaTitleCase$1_contains)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierPart$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierStart$1", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains)],
jur_UnicodeCategory, "UnicodeCategory", 23, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_UnicodeCategory_contains)],
jur_UnicodeCategoryScope, "UnicodeCategoryScope", 23, jur_UnicodeCategory, [], 0, 0, 0, 0, ["$contains0", $rt_wrapFunction1(jur_UnicodeCategoryScope_contains)],
ju_AbstractList$1, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
cgxgbta_AssetDownloadImpl$2, 0, jl_Object, [otjde_EventListener], 0, 0, 0, 0, 0,
cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0, 0, jl_Object, [otjde_EventListener], 0, 3, 0, 0, 0,
cbgu_Collections, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_Array$ArrayIterator, 0, jl_Object, [ju_Iterator, jl_Iterable], 0, 3, 0, 0, 0,
cbgu_Array$ArrayIterable, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
otcic_JSStdoutPrintStream, 0, otcic_JsConsolePrintStream, [], 0, 3, 0, 0, ["$print", $rt_wrapFunction1(otcic_JSStdoutPrintStream_print)],
cgxgbtd_EventTargetWrapper, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbtd_FileReaderWrapper, 0, jl_Object, [cgxgbtd_EventTargetWrapper, otj_JSObject], 1, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$4, 0, jl_Object, [cgxgbtd_EventListenerWrapper], 0, 0, 0, 0, 0,
cgxgbtdt_TypedArrays, 0, jl_Object, [], 0, 3, 0, 0, 0,
jur_IntArrHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
cgxgbtf_FileData, 0, jl_Object, [], 0, 3, 0, 0, 0,
otjt_ArrayBufferView, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
otjt_TypedArray, 0, otjt_ArrayBufferView, [], 1, 3, 0, 0, 0,
otjt_Int8Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
cbgu_GdxRuntimeException, "GdxRuntimeException", 14, jl_RuntimeException, [], 0, 3, 0, 0, 0,
ju_NoSuchElementException, "NoSuchElementException", 22, jl_RuntimeException, [], 0, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$5, 0, jl_Object, [cgxgbta_AssetLoaderListener], 0, 0, 0, 0, ["$onProgress", $rt_wrapFunction2(cgxgbta_AssetLoaderListener_onProgress), "$onSuccess", $rt_wrapFunction2(cgxgbta_AssetLoadImpl$5_onSuccess)],
cgxgbta_AssetType, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cbggg_Batch, 0, jl_Object, [cbgu_Disposable], 3, 3, 0, 0, 0,
cbggg_SpriteBatch, 0, jl_Object, [cbggg_Batch], 0, 3, 0, cbggg_SpriteBatch_$callClinit, 0,
cbggg_ParticleEffect, 0, jl_Object, [cbgu_Disposable], 0, 3, 0, 0, 0,
cvd_Trail, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgtt_Font, 0, jl_Object, [cbgu_Disposable], 0, 3, 0, cgtt_Font_$callClinit, 0,
cbgss_Actor, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgssu_Layout, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgssu_Widget, 0, cbgss_Actor, [cbgssu_Layout], 0, 3, 0, 0, 0,
cgtt_TextraLabel, 0, cbgssu_Widget, [], 0, 3, 0, 0, 0,
cgtt_TypingLabel, 0, cgtt_TextraLabel, [], 0, 3, 0, 0, 0,
cbgu_ScreenUtils, 0, jl_Object, [], 4, 3, 0, 0, 0,
cgxgbtfi_IndexedDBFileData, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$putFile$lambda$_2_0, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
ju_ConcurrentModificationException, "ConcurrentModificationException", 22, jl_RuntimeException, [], 0, 3, 0, 0, 0,
cvd_Trail$SegmentPool, 0, cbgu_Pool, [], 0, 3, 0, 0, 0,
cbggg_PixmapNativeInterface, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgg_Pixmap, 0, jl_Object, [cbgu_Disposable, cbggg_PixmapNativeInterface], 0, 3, 0, 0, 0,
cbgg_Pixmap$Format, 0, jl_Enum, [], 12, 3, 0, 0, 0,
ses_AbstractShapeDrawer, 0, jl_Object, [], 1, 3, 0, ses_AbstractShapeDrawer_$callClinit, 0,
ses_ShapeDrawer, 0, ses_AbstractShapeDrawer, [], 0, 3, 0, 0, 0]);
$rt_metadata([cbgu_DelayedRemovalArray, 0, cbgu_Array, [], 0, 3, 0, 0, ["$removeIndex", $rt_wrapFunction1(cbgu_DelayedRemovalArray_removeIndex)],
cvd_Trail$Segment, "Trail$Segment", 20, jl_Object, [cbgu_Pool$Poolable], 0, 3, 0, 0, 0,
cgtt_Font$DistanceFieldType, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cgtt_Parser, 0, jl_Object, [], 0, 3, 0, cgtt_Parser_$callClinit, 0,
cgtt_TypingConfig, 0, jl_Object, [], 0, 3, 0, cgtt_TypingConfig_$callClinit, 0,
cgtt_Layout, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_FloatArray, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgm_Vector, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgm_Vector2, 0, jl_Object, [ji_Serializable, cbgm_Vector], 0, 3, 0, 0, 0,
cbgm_Matrix4, 0, jl_Object, [ji_Serializable], 0, 3, 0, cbgm_Matrix4_$callClinit, 0,
cbgg_Mesh$VertexDataType, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cbgg_Mesh, "Mesh", 16, jl_Object, [cbgu_Disposable], 0, 3, 0, cbgg_Mesh_$callClinit, 0,
cbgg_Pixmap$Blending, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cbgg_Pixmap$Filter, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cbggg_Gdx2DPixmap, 0, jl_Object, [cbgu_Disposable, cbggg_PixmapNativeInterface], 0, 3, 0, 0, 0,
cbgg_TextureData, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbggg_PixmapTextureData, "PixmapTextureData", 17, jl_Object, [cbgg_TextureData], 0, 3, 0, 0, ["$disposePixmap", $rt_wrapFunction0(cbggg_PixmapTextureData_disposePixmap), "$consumePixmap", $rt_wrapFunction0(cbggg_PixmapTextureData_consumePixmap), "$getWidth", $rt_wrapFunction0(cbggg_PixmapTextureData_getWidth), "$getHeight", $rt_wrapFunction0(cbggg_PixmapTextureData_getHeight), "$getFormat", $rt_wrapFunction0(cbggg_PixmapTextureData_getFormat), "$useMipMaps", $rt_wrapFunction0(cbggg_PixmapTextureData_useMipMaps),
"$isManaged", $rt_wrapFunction0(cbggg_PixmapTextureData_isManaged), "$getType", $rt_wrapFunction0(cbggg_PixmapTextureData_getType), "$consumeCustomData", $rt_wrapFunction1(cbggg_PixmapTextureData_consumeCustomData), "$isPrepared", $rt_wrapFunction0(cbggg_PixmapTextureData_isPrepared), "$prepare", $rt_wrapFunction0(cbggg_PixmapTextureData_prepare)],
ses_SideEstimator, 0, jl_Object, [], 3, 3, 0, 0, 0,
ses_DefaultSideEstimator, 0, jl_Object, [ses_SideEstimator], 0, 3, 0, 0, 0,
ju_IdentityHashMap, 0, ju_AbstractMap, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, 0,
r_Replacer, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0, 0,
r_REFlags, 0, jl_Object, [], 3, 3, 0, 0, 0,
r_Pattern, 0, jl_Object, [ji_Serializable, r_REFlags], 0, 3, 0, 0, 0,
cgtt_Styles$LabelStyle, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgtt_Line, "Line", 4, jl_Object, [], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(cgtt_Line_toString)],
cbgg_VertexAttributes, 0, jl_Object, [jl_Iterable, jl_Comparable], 4, 3, 0, 0, 0,
cbggg_ShaderProgram, "ShaderProgram", 17, jl_Object, [cbgu_Disposable], 0, 3, 0, cbggg_ShaderProgram_$callClinit, 0,
cbggg_Gdx2DPixmapNative, 0, jl_Object, [cbgu_Disposable], 0, 3, 0, 0, 0,
cbggg_PolygonBatch, 0, jl_Object, [cbggg_Batch], 3, 3, 0, 0, 0,
ses_BatchManager, 0, jl_Object, [], 0, 0, 0, ses_BatchManager_$callClinit, ["$pushQuad", $rt_wrapFunction0(ses_BatchManager_pushQuad), "$pushTriangle", $rt_wrapFunction0(ses_BatchManager_pushTriangle), "$pushToBatch", $rt_wrapFunction0(ses_BatchManager_pushToBatch)],
ses_DrawerTemplate, 0, jl_Object, [], 1, 0, 0, 0, 0,
ses_FilledPolygonDrawer, 0, ses_DrawerTemplate, [], 1, 0, 0, 0, 0,
ses_FilledPolygonDrawer$BatchFilledPolygonDrawer, 0, ses_FilledPolygonDrawer, [], 0, 0, 0, 0, 0,
ses_PolygonBatchManager, 0, ses_BatchManager, [], 0, 0, 0, 0, ["$pushQuad", $rt_wrapFunction0(ses_PolygonBatchManager_pushQuad), "$pushTriangle", $rt_wrapFunction0(ses_PolygonBatchManager_pushTriangle), "$pushToBatch", $rt_wrapFunction0(ses_PolygonBatchManager_pushToBatch)],
ses_FilledPolygonDrawer$PolygonBatchFilledPolygonDrawer, 0, ses_FilledPolygonDrawer, [], 0, 0, 0, 0, 0,
ses_LineDrawer, 0, ses_DrawerTemplate, [], 0, 0, 0, 0, 0,
ses_PathDrawer, 0, ses_DrawerTemplate, [], 0, 0, 0, 0, 0,
ses_PolygonDrawer, 0, ses_DrawerTemplate, [], 0, 0, 0, 0, 0,
cbgur_ArrayReflection, 0, jl_Object, [], 4, 3, 0, 0, 0,
cgtt_ColorLookup, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgu_LongArray, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_ObjectLongMap, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
cbgu_CharArray, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgttu_CaseInsensitiveIntMap, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
cbgu_IntFloatMap, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
cgtt_Effect$EffectBuilder, 0, jl_Object, [], 3, 3, 0, 0, 0,
cgtt_TypingConfig$_clinit_$lambda$_5_0, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_0_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_1, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_1_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_2, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_2_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_3, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_3_produce)]]);
$rt_metadata([cgtt_TypingConfig$_clinit_$lambda$_5_4, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_4_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_5, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_5_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_6, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_6_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_7, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_7_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_8, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_8_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_9, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_9_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_10, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_10_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_11, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_11_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_12, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_12_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_13, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_13_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_14, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_14_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_15, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_15_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_16, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_16_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_17, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_17_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_18, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_18_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_19, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_19_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_20, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_20_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_21, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_21_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_22, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_22_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_23, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_23_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_24, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_24_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_25, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_25_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_26, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_26_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_27, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_27_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_28, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_28_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_29, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_29_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_30, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_30_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_31, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_31_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_32, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_32_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_33, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_33_produce)],
cgtt_TypingConfig$_clinit_$lambda$_5_34, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, ["$produce", $rt_wrapFunction2(cgtt_TypingConfig$_clinit_$lambda$_5_34_produce)],
cbg_Graphics$BufferFormat, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgm_Quaternion, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0, 0,
cbgm_Vector3, 0, jl_Object, [ji_Serializable, cbgm_Vector], 0, 3, 0, cbgm_Vector3_$callClinit, 0,
cbgg_Mesh$1, 0, jl_Object, [], 32, 0, 0, cbgg_Mesh$1_$callClinit, 0,
cbggg_VertexData, 0, jl_Object, [cbgu_Disposable], 3, 3, 0, 0, 0,
cbggg_VertexBufferObject, 0, jl_Object, [cbggg_VertexData], 0, 3, 0, 0, ["$setVertices", $rt_wrapFunction3(cbggg_VertexBufferObject_setVertices), "$bind0", $rt_wrapFunction2(cbggg_VertexBufferObject_bind), "$unbind0", $rt_wrapFunction2(cbggg_VertexBufferObject_unbind)],
cbggg_IndexData, 0, jl_Object, [cbgu_Disposable], 3, 3, 0, 0, 0,
cbggg_IndexBufferObject, 0, jl_Object, [cbggg_IndexData], 0, 3, 0, 0, ["$getNumIndices", $rt_wrapFunction0(cbggg_IndexBufferObject_getNumIndices), "$getNumMaxIndices", $rt_wrapFunction0(cbggg_IndexBufferObject_getNumMaxIndices), "$setIndices0", $rt_wrapFunction3(cbggg_IndexBufferObject_setIndices), "$getBuffer", $rt_wrapFunction1(cbggg_IndexBufferObject_getBuffer), "$bind", $rt_wrapFunction0(cbggg_IndexBufferObject_bind), "$unbind", $rt_wrapFunction0(cbggg_IndexBufferObject_unbind)],
cbggg_VertexBufferObjectSubData, 0, jl_Object, [cbggg_VertexData], 0, 3, 0, 0, ["$setVertices", $rt_wrapFunction3(cbggg_VertexBufferObjectSubData_setVertices), "$bind0", $rt_wrapFunction2(cbggg_VertexBufferObjectSubData_bind), "$unbind0", $rt_wrapFunction2(cbggg_VertexBufferObjectSubData_unbind)],
cbggg_IndexBufferObjectSubData, 0, jl_Object, [cbggg_IndexData], 0, 3, 0, 0, ["$getNumIndices", $rt_wrapFunction0(cbggg_IndexBufferObjectSubData_getNumIndices), "$getNumMaxIndices", $rt_wrapFunction0(cbggg_IndexBufferObjectSubData_getNumMaxIndices), "$setIndices0", $rt_wrapFunction3(cbggg_IndexBufferObjectSubData_setIndices), "$getBuffer", $rt_wrapFunction1(cbggg_IndexBufferObjectSubData_getBuffer), "$bind", $rt_wrapFunction0(cbggg_IndexBufferObjectSubData_bind), "$unbind", $rt_wrapFunction0(cbggg_IndexBufferObjectSubData_unbind)],
cbggg_VertexBufferObjectWithVAO, 0, jl_Object, [cbggg_VertexData], 0, 3, 0, cbggg_VertexBufferObjectWithVAO_$callClinit, ["$setVertices", $rt_wrapFunction3(cbggg_VertexBufferObjectWithVAO_setVertices), "$bind0", $rt_wrapFunction2(cbggg_VertexBufferObjectWithVAO_bind), "$unbind0", $rt_wrapFunction2(cbggg_VertexBufferObjectWithVAO_unbind)],
cbggg_VertexArray, 0, cbggg_VertexBufferObject, [], 0, 3, 0, 0, 0,
cbggg_IndexArray, 0, cbggg_IndexBufferObject, [], 0, 3, 0, 0, 0,
cbgu_ObjectIntMap, 0, jl_Object, [jl_Iterable], 0, 3, 0, 0, 0,
cbgu_BufferUtils, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbgf_FileHandle, 0, jl_Object, [], 0, 3, 0, 0, 0,
r_Substitution, 0, jl_Object, [], 3, 3, 0, 0, 0,
r_Replacer$DummySubstitution, 0, jl_Object, [r_Substitution], 0, 0, 0, 0, ["$appendSubstitution", $rt_wrapFunction2(r_Replacer$DummySubstitution_appendSubstitution)],
r_PerlSubstitution, 0, jl_Object, [r_Substitution, ji_Serializable], 0, 3, 0, r_PerlSubstitution_$callClinit, ["$appendSubstitution", $rt_wrapFunction2(r_PerlSubstitution_appendSubstitution)]]);
$rt_metadata([cbgss_Touchable, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cgtt_TypingConfig$registerEffect$lambda$_2_0, 0, jl_Object, [cgtt_Effect$EffectBuilder], 0, 3, 0, 0, 0,
jn_Buffer, 0, jl_Object, [], 1, 3, 0, 0, 0,
jn_FloatBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, ["$limit", $rt_wrapFunction1(jn_FloatBuffer_limit), "$position", $rt_wrapFunction1(jn_FloatBuffer_position)],
jn_ShortBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, 0,
cgxgbt_TeaTool, 0, jl_Object, [], 0, 3, 0, 0, 0,
jn_IntBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, 0,
jn_ByteBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0, ["$toString", $rt_wrapFunction0(jn_ByteBuffer_toString), "$hashCode", $rt_wrapFunction0(jn_ByteBuffer_hashCode), "$equals", $rt_wrapFunction1(jn_ByteBuffer_equals), "$limit", $rt_wrapFunction1(jn_ByteBuffer_limit), "$position", $rt_wrapFunction1(jn_ByteBuffer_position), "$compareTo", $rt_wrapFunction1(jn_ByteBuffer_compareTo)],
jn_ByteOrder, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbgg_Texture$TextureFilter, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cbgg_Texture$TextureWrap, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cgtt_ColorLookup$_clinit_$lambda$_2_0, 0, jl_Object, [cgtt_ColorLookup], 0, 3, 0, 0, 0,
cgtt_ColorLookup$_clinit_$lambda$_2_1, 0, jl_Object, [cgtt_ColorLookup], 0, 3, 0, 0, 0,
r_Term, "Term", 0, jl_Object, [r_REFlags, ji_Serializable], 0, 3, 0, 0, ["$append15", $rt_wrapFunction1(r_Term_append), "$replaceCurrent", $rt_wrapFunction1(r_Term_replaceCurrent), "$close", $rt_wrapFunction0(r_Term_close), "$startNewBranch", $rt_wrapFunction0(r_Term_startNewBranch), "$toString", $rt_wrapFunction0(r_Term_toString), "$equals", $rt_wrapFunction1(r_Term_equals), "$hashCode", $rt_wrapFunction0(r_Term_hashCode)],
rb_MatchResult, 0, jl_Object, [], 3, 3, 0, 0, 0,
r_MatchResult, 0, jl_Object, [rb_MatchResult], 3, 3, 0, 0, 0,
r_Matcher, 0, jl_Object, [r_MatchResult, ji_Serializable], 0, 3, 0, r_Matcher_$callClinit, 0,
jn_ArrayBufferViewProvider, 0, jl_Object, [], 3, 3, 0, 0, 0,
jn_ByteBufferJsImpl, "ByteBufferJsImpl", 24, jn_ByteBuffer, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$capacityImpl", $rt_wrapFunction0(jn_ByteBufferJsImpl_capacityImpl), "$getArrayBufferView0", $rt_wrapFunction0(jn_ByteBufferJsImpl_getArrayBufferView)],
cbgm_EarClippingTriangulator, 0, jl_Object, [], 0, 3, 0, 0, 0,
r_PerlSubstitution$Element, 0, jl_Object, [], 1, 0, 0, 0, 0,
r_PerlSubstitution$PlainElement, 0, r_PerlSubstitution$Element, [], 0, 0, 0, 0, ["$append13", $rt_wrapFunction2(r_PerlSubstitution$PlainElement_append)],
r_PerlSubstitution$IntRefHandler, 0, r_PerlSubstitution$Element, [], 0, 0, 0, 0, ["$append13", $rt_wrapFunction2(r_PerlSubstitution$IntRefHandler_append)],
r_PerlSubstitution$StringRefHandler, 0, r_PerlSubstitution$Element, [], 0, 0, 0, 0, ["$append13", $rt_wrapFunction2(r_PerlSubstitution$StringRefHandler_append)],
r_PatternSyntaxException, "PatternSyntaxException", 0, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
jn_IntBufferImpl, 0, jn_IntBuffer, [], 1, 0, 0, 0, 0,
jn_IntBufferOverTypedArray, 0, jn_IntBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_IntBufferOverTypedArray_readOnly), "$getElement", $rt_wrapFunction1(jn_IntBufferOverTypedArray_getElement), "$putElement", $rt_wrapFunction2(jn_IntBufferOverTypedArray_putElement), "$capacityImpl", $rt_wrapFunction0(jn_IntBufferOverTypedArray_capacityImpl)],
otjt_Int32Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
jn_FloatBufferImpl, 0, jn_FloatBuffer, [], 1, 0, 0, 0, 0,
jn_FloatBufferOverTypedArray, "FloatBufferOverTypedArray", 24, jn_FloatBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_FloatBufferOverTypedArray_readOnly), "$getElement0", $rt_wrapFunction1(jn_FloatBufferOverTypedArray_getElement), "$putElement0", $rt_wrapFunction2(jn_FloatBufferOverTypedArray_putElement), "$capacityImpl", $rt_wrapFunction0(jn_FloatBufferOverTypedArray_capacityImpl), "$putImpl", $rt_wrapFunction4(jn_FloatBufferOverTypedArray_putImpl), "$getArrayBufferView0",
$rt_wrapFunction0(jn_FloatBufferOverTypedArray_getArrayBufferView)],
otjt_Float32Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
jn_JSBufferHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
cbgu_ShortArray, 0, jl_Object, [], 0, 3, 0, 0, 0,
r_Pretokenizer, 0, jl_Object, [ji_Serializable], 0, 0, 0, 0, 0,
r_Group, "Group", 0, r_Term, [ji_Serializable], 0, 0, 0, 0, 0,
r_Optimizer, 0, jl_Object, [], 0, 0, 0, 0, 0,
r_TermIterator, "TermIterator", 0, r_Term, [ji_Serializable], 0, 0, 0, 0, 0,
r_MemReg, 0, jl_Object, [ji_Serializable], 0, 0, 0, 0, 0,
r_Lookahead, "Lookahead", 0, r_Term, [ji_Serializable], 0, 0, 0, 0, ["$equals", $rt_wrapFunction1(r_Lookahead_equals), "$hashCode", $rt_wrapFunction0(r_Lookahead_hashCode)],
r_Lookbehind, "Lookbehind", 0, r_Term, [ji_Serializable], 0, 0, 0, 0, ["$append15", $rt_wrapFunction1(r_Lookbehind_append), "$replaceCurrent", $rt_wrapFunction1(r_Lookbehind_replaceCurrent), "$startNewBranch", $rt_wrapFunction0(r_Lookbehind_startNewBranch), "$close", $rt_wrapFunction0(r_Lookbehind_close), "$equals", $rt_wrapFunction1(r_Lookbehind_equals), "$hashCode", $rt_wrapFunction0(r_Lookbehind_hashCode)],
r_IndependentGroup, "IndependentGroup", 0, r_Term, [ji_Serializable], 0, 0, 0, 0, 0,
r_UnicodeConstants, 0, jl_Object, [], 3, 3, 0, 0, 0,
r_CharacterClass, 0, r_Term, [r_UnicodeConstants], 0, 0, 0, r_CharacterClass_$callClinit, 0,
r_ConditionalExpr, "ConditionalExpr", 0, r_Group, [ji_Serializable], 0, 0, 0, 0, ["$startNewBranch", $rt_wrapFunction0(r_ConditionalExpr_startNewBranch), "$equals", $rt_wrapFunction1(r_ConditionalExpr_equals), "$hashCode", $rt_wrapFunction0(r_ConditionalExpr_hashCode)],
jn_ShortBufferImpl, 0, jn_ShortBuffer, [], 1, 0, 0, 0, 0,
jn_ShortBufferOverTypedArray, "ShortBufferOverTypedArray", 24, jn_ShortBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_ShortBufferOverTypedArray_readOnly), "$capacityImpl", $rt_wrapFunction0(jn_ShortBufferOverTypedArray_capacityImpl), "$putImpl0", $rt_wrapFunction4(jn_ShortBufferOverTypedArray_putImpl), "$getArrayBufferView0", $rt_wrapFunction0(jn_ShortBufferOverTypedArray_getArrayBufferView)],
otjt_Int16Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
r_Category, 0, jl_Object, [], 0, 3, 0, r_Category_$callClinit, 0,
r_BackReference, "BackReference", 0, r_Term, [ji_Serializable], 0, 0, 0, 0, 0,
r_BlockSet, 0, jl_Object, [r_UnicodeConstants], 0, 0, 0, 0, 0]);
$rt_metadata([r_Branch, "Branch", 0, r_Term, [ji_Serializable], 0, 0, 0, 0, 0,
rd_IntBitSet, 0, jl_Object, [], 0, 3, 0, 0, ["$equals", $rt_wrapFunction1(rd_IntBitSet_equals), "$hashCode", $rt_wrapFunction0(rd_IntBitSet_hashCode)],
r_Block, 0, jl_Object, [r_UnicodeConstants], 0, 0, 0, 0, 0,
r_Casing, 0, jl_Object, [], 4, 0, 0, r_Casing_$callClinit, 0,
rd_CharCharMap, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0, 0,
ju_SequencedMap, 0, jl_Object, [ju_Map], 3, 3, 0, 0, 0,
ju_LinkedHashMap, 0, ju_HashMap, [ju_SequencedMap], 0, 3, 0, 0, ["$newElementArray", $rt_wrapFunction1(ju_LinkedHashMap_newElementArray)],
jn_IntBufferOverDataView, 0, jn_IntBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_IntBufferOverDataView_readOnly), "$getElement", $rt_wrapFunction1(jn_IntBufferOverDataView_getElement), "$putElement", $rt_wrapFunction2(jn_IntBufferOverDataView_putElement), "$capacityImpl", $rt_wrapFunction0(jn_IntBufferOverDataView_capacityImpl)],
jn_FloatBufferOverDataView, "FloatBufferOverDataView", 24, jn_FloatBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_FloatBufferOverDataView_readOnly), "$getElement0", $rt_wrapFunction1(jn_FloatBufferOverDataView_getElement), "$putElement0", $rt_wrapFunction2(jn_FloatBufferOverDataView_putElement), "$putImpl", $rt_wrapFunction4(jn_FloatBufferOverDataView_putImpl), "$capacityImpl", $rt_wrapFunction0(jn_FloatBufferOverDataView_capacityImpl), "$getArrayBufferView0", $rt_wrapFunction0(jn_FloatBufferOverDataView_getArrayBufferView)],
jn_ShortBufferOverDataView, "ShortBufferOverDataView", 24, jn_ShortBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$readOnly", $rt_wrapFunction0(jn_ShortBufferOverDataView_readOnly), "$putImpl0", $rt_wrapFunction4(jn_ShortBufferOverDataView_putImpl), "$capacityImpl", $rt_wrapFunction0(jn_ShortBufferOverDataView_capacityImpl), "$getArrayBufferView0", $rt_wrapFunction0(jn_ShortBufferOverDataView_getArrayBufferView)],
jl_UnsupportedOperationException, "UnsupportedOperationException", 27, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jn_ReadOnlyBufferException, "ReadOnlyBufferException", 24, jl_UnsupportedOperationException, [], 0, 3, 0, 0, 0,
jn_BufferUnderflowException, "BufferUnderflowException", 24, jl_RuntimeException, [], 0, 3, 0, 0, 0,
r_Find, "Find", 0, r_Term, [], 0, 0, 0, 0, 0,
ju_LinkedHashMap$LinkedHashMapEntry, 0, ju_HashMap$HashEntry, [], 4, 0, 0, 0, 0,
cgxgbta_AssetDownloadImpl$1, 0, jl_Object, [cgxgbta_AssetLoaderListener], 0, 0, 0, 0, 0,
cgxgbta_AssetDownloadImpl$3, 0, jl_Object, [], 32, 0, 0, cgxgbta_AssetDownloadImpl$3_$callClinit, 0,
cgxgbt_TeaFileHandle, "TeaFileHandle", 9, cbgf_FileHandle, [], 0, 3, 0, 0, ["$toString", $rt_wrapFunction0(cgxgbt_TeaFileHandle_toString)],
cbg_Files$FileType, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cbggg_ParticleEmitter, "ParticleEmitter", 18, jl_Object, [], 0, 3, 0, 0, 0,
cgtt_Effect, 0, jl_Object, [], 1, 3, 0, 0, ["$update", $rt_wrapFunction1(cgtt_Effect_update)],
cgttu_StringUtils, 0, jl_Object, [], 4, 3, 0, cgttu_StringUtils_$callClinit, 0,
cgtt_Font$TexturelessRegion, "Font$TexturelessRegion", 4, cbggg_TextureRegion, [], 0, 3, 0, 0, ["$getRegionX", $rt_wrapFunction0(cgtt_Font$TexturelessRegion_getRegionX), "$getRegionY", $rt_wrapFunction0(cgtt_Font$TexturelessRegion_getRegionY), "$getRegionWidth", $rt_wrapFunction0(cgtt_Font$TexturelessRegion_getRegionWidth)],
cgtt_Font$GlyphRegion, 0, cbggg_TextureRegion, [], 0, 3, 0, 0, 0,
cgttu_BlockUtils, 0, jl_Object, [], 0, 3, 0, 0, 0,
ju_IdentityHashMap$HashEntry, 0, ju_MapEntry, [], 0, 0, 0, 0, 0,
r_SearchEntry, 0, jl_Object, [ji_Serializable], 0, 0, 0, 0, 0,
r_LAEntry, 0, jl_Object, [ji_Serializable], 0, 0, 0, 0, 0,
jl_Error, "Error", 27, jl_Throwable, [], 0, 3, 0, 0, 0,
r_TextBuffer, 0, jl_Object, [], 3, 3, 0, 0, 0,
r_Replacer$StringBuilderBuffer, 0, jl_Object, [r_TextBuffer, ji_Serializable], 0, 3, 0, 0, 0,
otjb_TimerHandler, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0, 0, jl_Object, [otjb_TimerHandler], 0, 3, 0, 0, 0,
jl_AbstractStringBuilder$Constants, 0, jl_Object, [], 0, 0, 0, 0, 0,
otcit_FloatAnalyzer, 0, jl_Object, [], 4, 3, 0, 0, 0,
otcit_FloatAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgss_Action, 0, jl_Object, [cbgu_Pool$Poolable], 1, 3, 0, 0, 0,
cgtt_TokenEntry, "TokenEntry", 4, jl_Object, [jl_Comparable], 0, 0, 0, 0, ["$compareTo", $rt_wrapFunction1(cgtt_TokenEntry_compareTo)],
cgtt_TypingLabel$1, 0, jl_Object, [], 32, 0, 0, cgtt_TypingLabel$1_$callClinit, 0,
cgtt_TokenCategory, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cbgm_MathUtils$Sin, 0, jl_Object, [], 0, 0, 0, 0, 0,
ju_Collections, 0, jl_Object, [], 0, 3, 0, 0, 0,
r_SearchEntry$MState, 0, jl_Object, [], 0, 0, 0, 0, 0,
r_SearchEntry$CState, 0, jl_Object, [], 0, 0, 0, 0, 0,
cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0, 0, jl_Object, [otjde_EventListener], 0, 3, 0, 0, 0,
cbg_InputProcessor, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbg_InputAdapter, 0, jl_Object, [cbg_InputProcessor], 0, 3, 0, 0, 0,
cbgss_Stage, 0, cbg_InputAdapter, [cbgu_Disposable], 0, 3, 0, 0, 0,
cgtt_InternalToken, 0, jl_Enum, [], 12, 0, 0, cgtt_InternalToken_$callClinit, 0,
cgtt_Parser$1, 0, jl_Object, [], 32, 0, 0, cgtt_Parser$1_$callClinit, 0]);
$rt_metadata([ju_Comparator$NaturalOrder, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, 0,
cbgg_TextureData$Factory, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgg_TextureData$TextureDataType, 0, jl_Enum, [], 12, 3, 0, 0, 0,
cbggg_MipMapGenerator, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0, 0, jl_Object, [otjde_EventListener], 0, 3, 0, 0, 0,
otjde_EventTarget, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0, 0,
otja_XMLHttpRequest, 0, jl_Object, [otj_JSObject, otjde_EventTarget], 0, 3, 0, 0, 0,
otcit_DoubleAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_ObjectMap$MapIterator, 0, jl_Object, [jl_Iterable, ju_Iterator], 1, 0, 0, 0, 0,
cbgu_ObjectMap$Keys, 0, cbgu_ObjectMap$MapIterator, [], 0, 3, 0, 0, 0,
cgttu_Palette, 0, jl_Object, [], 4, 3, 0, cgttu_Palette_$callClinit, 0,
ju_TemplateCollections$AbstractImmutableSet, 0, ju_AbstractSet, [], 1, 0, 0, 0, 0,
ju_Collections$1, 0, ju_TemplateCollections$AbstractImmutableSet, [], 0, 0, 0, 0, 0,
ju_TemplateCollections$AbstractImmutableMap, 0, ju_AbstractMap, [], 1, 0, 0, 0, 0,
ju_Collections$2, 0, ju_TemplateCollections$AbstractImmutableMap, [], 0, 0, 0, 0, 0,
ju_TemplateCollections$AbstractImmutableList, 0, ju_AbstractList, [ju_RandomAccess], 1, 0, 0, 0, 0,
ju_Collections$3, 0, ju_TemplateCollections$AbstractImmutableList, [], 0, 0, 0, 0, 0,
ju_Collections$4, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, 0,
ju_ListIterator, 0, jl_Object, [ju_Iterator], 3, 3, 0, 0, 0,
ju_Collections$5, 0, jl_Object, [ju_ListIterator], 0, 0, 0, 0, 0,
ju_Collections$_clinit_$lambda$_59_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, 0,
jur_Matcher$1, "Matcher$1", 23, jl_Object, [], 0, 0, 0, 0, ["$toString", $rt_wrapFunction0(jur_Matcher$1_toString)],
cbggg_FileTextureData, "FileTextureData", 17, jl_Object, [cbgg_TextureData], 0, 3, 0, 0, ["$isPrepared", $rt_wrapFunction0(cbggg_FileTextureData_isPrepared), "$prepare", $rt_wrapFunction0(cbggg_FileTextureData_prepare), "$consumePixmap", $rt_wrapFunction0(cbggg_FileTextureData_consumePixmap), "$disposePixmap", $rt_wrapFunction0(cbggg_FileTextureData_disposePixmap), "$getWidth", $rt_wrapFunction0(cbggg_FileTextureData_getWidth), "$getHeight", $rt_wrapFunction0(cbggg_FileTextureData_getHeight), "$getFormat", $rt_wrapFunction0(cbggg_FileTextureData_getFormat),
"$useMipMaps", $rt_wrapFunction0(cbggg_FileTextureData_useMipMaps), "$isManaged", $rt_wrapFunction0(cbggg_FileTextureData_isManaged), "$getType", $rt_wrapFunction0(cbggg_FileTextureData_getType), "$consumeCustomData", $rt_wrapFunction1(cbggg_FileTextureData_consumeCustomData)],
otjt_Uint8Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
otjt_Uint16Array, 0, otjt_TypedArray, [], 0, 3, 0, 0, 0,
otcit_FloatSynthesizer, 0, jl_Object, [], 4, 3, 0, 0, 0,
otjde_Registration, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_ObjectIntMap$MapIterator, 0, jl_Object, [], 0, 0, 0, 0, 0,
cbgu_ObjectIntMap$Keys, 0, cbgu_ObjectIntMap$MapIterator, [jl_Iterable, ju_Iterator], 0, 3, 0, 0, 0,
cgxgbt_TeaFileHandle$1, 0, jl_Object, [], 32, 0, 0, cgxgbt_TeaFileHandle$1_$callClinit, 0,
cgtt_Font$FontFamily, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgxgbta_TeaBlob, 0, jl_Object, [], 4, 3, 0, 0, 0,
ji_IOException, "IOException", 26, jl_Exception, [], 0, 3, 0, 0, 0,
cbgu_StreamUtils, 0, jl_Object, [], 4, 3, 0, 0, 0,
jl_Readable, 0, jl_Object, [], 3, 3, 0, 0, 0,
ji_Reader, 0, jl_Object, [ji_Closeable, jl_Readable], 1, 3, 0, 0, 0,
ji_BufferedReader, 0, ji_Reader, [], 0, 3, 0, 0, ["$close", $rt_wrapFunction0(ji_BufferedReader_close)],
ji_InputStreamReader, 0, ji_Reader, [], 0, 3, 0, 0, ["$close", $rt_wrapFunction0(ji_InputStreamReader_close)],
ji_File, 0, jl_Object, [ji_Serializable, jl_Comparable], 0, 3, 0, ji_File_$callClinit, 0,
cbgu_Align, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgssu_Drawable, 0, jl_Object, [], 3, 3, 0, 0, 0,
cbgssu_TransformDrawable, 0, jl_Object, [cbgssu_Drawable], 3, 3, 0, 0, 0,
cgttu_ColorUtils, 0, jl_Object, [], 0, 3, 0, cgttu_ColorUtils_$callClinit, 0,
r_FindBack, "FindBack", 0, r_Term, [], 0, 0, 0, 0, 0,
cbgu_OrderedMap$OrderedMapKeys, 0, cbgu_ObjectMap$Keys, [], 0, 3, 0, 0, 0,
otcin_Buffers, 0, jl_Object, [], 4, 3, 0, 0, 0,
jnci_UTF8Charset, 0, jnc_Charset, [], 0, 3, 0, jnci_UTF8Charset_$callClinit, ["$newDecoder", $rt_wrapFunction0(jnci_UTF8Charset_newDecoder)],
ji_ByteArrayOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0, 0,
cbgu_StreamUtils$OptimizedByteArrayOutputStream, 0, ji_ByteArrayOutputStream, [], 0, 3, 0, 0, 0,
cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0, 0, jl_Object, [otjb_TimerHandler], 0, 3, 0, 0, 0]);
$rt_metadata([jnc_CodingErrorAction, 0, jl_Object, [], 0, 3, 0, 0, 0,
jnc_CharsetDecoder, 0, jl_Object, [], 1, 3, 0, 0, 0,
jn_NativeBuffer, 0, jl_Object, [], 3, 3, 0, 0, 0,
jnc_UnsupportedCharsetException, "UnsupportedCharsetException", 25, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
ji_UnsupportedEncodingException, "UnsupportedEncodingException", 26, ji_IOException, [], 0, 3, 0, 0, 0,
jn_CharBuffer, 0, jn_Buffer, [jl_Comparable, jl_Appendable, jl_CharSequence, jl_Readable], 1, 3, 0, 0, 0,
otrf_VirtualFileSystemProvider, 0, jl_Object, [], 4, 3, 0, 0, 0,
jnc_Charset$Charsets, 0, jl_Object, [], 0, 0, 0, jnc_Charset$Charsets_$callClinit, 0,
ji_InputStream, 0, jl_Object, [ji_Closeable], 1, 3, 0, 0, 0,
jnc_IllegalCharsetNameException, "IllegalCharsetNameException", 25, jl_IllegalArgumentException, [], 0, 3, 0, 0, 0,
jn_CharBufferImpl, 0, jn_CharBuffer, [], 1, 0, 0, 0, 0,
jn_CharBufferOverTypedArray, 0, jn_CharBufferImpl, [jn_ArrayBufferViewProvider], 0, 0, 0, 0, ["$capacityImpl", $rt_wrapFunction0(jn_CharBufferOverTypedArray_capacityImpl)],
otrf_VirtualFileSystem, 0, jl_Object, [], 3, 3, 0, 0, 0,
otrfm_InMemoryVirtualFileSystem, 0, jl_Object, [otrf_VirtualFileSystem], 0, 3, 0, 0, 0,
jnc_StandardCharsets, 0, jl_Object, [], 4, 3, 0, jnc_StandardCharsets_$callClinit, 0,
otrfm_AbstractInMemoryVirtualFile, 0, jl_Object, [], 1, 3, 0, 0, 0,
otrfm_InMemoryVirtualDirectory, 0, otrfm_AbstractInMemoryVirtualFile, [], 0, 3, 0, 0, 0,
jnci_AsciiCharset, 0, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_AsciiCharset_newDecoder)],
jnci_Iso8859Charset, 0, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_Iso8859Charset_newDecoder)],
jnci_UTF16Charset, 0, jnc_Charset, [], 0, 3, 0, 0, ["$newDecoder", $rt_wrapFunction0(jnci_UTF16Charset_newDecoder)],
jnci_BufferedDecoder, 0, jnc_CharsetDecoder, [], 1, 3, 0, 0, 0,
jnci_UTF8Decoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_UTF8Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
jn_BufferOverflowException, "BufferOverflowException", 24, jl_RuntimeException, [], 0, 3, 0, 0, 0,
cgtte_EaseEffect, "EaseEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_EaseEffect_onApply)],
cgtte_HangEffect, "HangEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_HangEffect_onApply)],
cgtte_JumpEffect, "JumpEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_JumpEffect_onApply)],
cgtte_ShakeEffect, "ShakeEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_ShakeEffect_onApply)],
cgtte_SickEffect, "SickEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_SickEffect_onApply)],
cgtte_SlideEffect, "SlideEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_SlideEffect_onApply)],
cgtte_WaveEffect, "WaveEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_WaveEffect_onApply)],
cgtte_WindEffect, "WindEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$update", $rt_wrapFunction1(cgtte_WindEffect_update), "$onApply", $rt_wrapFunction4(cgtte_WindEffect_onApply)],
cgtte_RainbowEffect, "RainbowEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_RainbowEffect_onApply)],
cgtte_GradientEffect, "GradientEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_GradientEffect_onApply)],
cgtte_FadeEffect, "FadeEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_FadeEffect_onApply)],
cgtte_BlinkEffect, "BlinkEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_BlinkEffect_onApply)],
cgtte_JoltEffect, "JoltEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_JoltEffect_onApply)],
cgtte_SpiralEffect, "SpiralEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_SpiralEffect_onApply)],
cgtte_SpinEffect, "SpinEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_SpinEffect_onApply)],
cgtte_CrowdEffect, "CrowdEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_CrowdEffect_onApply)],
cgtte_ShrinkEffect, "ShrinkEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_ShrinkEffect_onApply)],
cgtte_EmergeEffect, "EmergeEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_EmergeEffect_onApply)],
cgtte_HeartbeatEffect, "HeartbeatEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_HeartbeatEffect_onApply)],
cgtte_CarouselEffect, "CarouselEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_CarouselEffect_onApply)],
cgtte_SquashEffect, "SquashEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_SquashEffect_onApply)],
cgtte_ScaleEffect, "ScaleEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_ScaleEffect_onApply)],
cgtte_RotateEffect, "RotateEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_RotateEffect_onApply)],
cgtte_HighlightEffect, "HighlightEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_HighlightEffect_onApply)],
cgtte_LinkEffect, "LinkEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_LinkEffect_onApply)],
cgtte_TriggerEffect, "TriggerEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_TriggerEffect_onApply)],
cgtte_AttentionEffect, "AttentionEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_AttentionEffect_onApply)]]);
$rt_metadata([cgtte_StylistEffect, "StylistEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_StylistEffect_onApply)],
cgtte_CannonEffect, "CannonEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_CannonEffect_onApply)],
cgtte_OceanEffect, "OceanEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_OceanEffect_onApply)],
cgtte_SputterEffect, "SputterEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_SputterEffect_onApply)],
cgtte_InstantEffect, "InstantEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_InstantEffect_onApply)],
cgtte_SlamEffect, "SlamEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_SlamEffect_onApply)],
cgtte_MeetEffect, "MeetEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_MeetEffect_onApply)],
cgtte_ZipperEffect, "ZipperEffect", 5, cgtt_Effect, [], 0, 3, 0, 0, ["$onApply", $rt_wrapFunction4(cgtte_ZipperEffect_onApply)],
jnci_AsciiDecoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_AsciiDecoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
jnci_UTF16Decoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_UTF16Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
jnci_Iso8859Decoder, 0, jnci_BufferedDecoder, [], 0, 3, 0, 0, ["$arrayDecode", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { return jnci_Iso8859Decoder_arrayDecode(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }],
cbggg_ParticleEmitter$ParticleValue, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbggg_ParticleEmitter$RangedNumericValue, 0, cbggg_ParticleEmitter$ParticleValue, [], 0, 3, 0, 0, 0,
cbggg_ParticleEmitter$ScaledNumericValue, 0, cbggg_ParticleEmitter$RangedNumericValue, [], 0, 3, 0, 0, 0,
cbggg_ParticleEmitter$IndependentScaledNumericValue, 0, cbggg_ParticleEmitter$ScaledNumericValue, [], 0, 3, 0, 0, 0,
cbggg_ParticleEmitter$GradientColorValue, 0, cbggg_ParticleEmitter$ParticleValue, [], 0, 3, 0, 0, 0,
cbggg_ParticleEmitter$SpawnShapeValue, 0, cbggg_ParticleEmitter$ParticleValue, [], 0, 3, 0, 0, 0,
cbggg_ParticleEmitter$SpriteMode, "ParticleEmitter$SpriteMode", 18, jl_Enum, [], 12, 3, 0, 0, 0,
cbggg_ParticleEmitter$SpawnShape, "ParticleEmitter$SpawnShape", 18, jl_Enum, [], 12, 3, 0, 0, 0,
cbggg_ParticleEmitter$SpawnEllipseSide, "ParticleEmitter$SpawnEllipseSide", 18, jl_Enum, [], 12, 3, 0, 0, 0,
cbggg_ParticleEmitter$1, 0, jl_Object, [], 32, 0, 0, cbggg_ParticleEmitter$1_$callClinit, 0,
cbggg_ParticleEmitter$Particle, 0, cbggg_Sprite, [], 0, 3, 0, 0, 0,
jl_Byte, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0, 0,
ji_ByteArrayInputStream, 0, ji_InputStream, [], 0, 3, 0, 0, ["$close", $rt_wrapFunction0(ji_ByteArrayInputStream_close)],
jnc_CharsetEncoder, 0, jl_Object, [], 1, 3, 0, 0, 0,
jnc_CharacterCodingException, 0, ji_IOException, [], 0, 3, 0, 0, 0,
jl_AssertionError, "AssertionError", 27, jl_Error, [], 0, 3, 0, 0, 0,
jl_Boolean, 0, jl_Object, [ji_Serializable, jl_Comparable], 0, 3, 0, 0, 0,
jnc_CoderResult, 0, jl_Object, [], 0, 3, 0, 0, 0,
jnc_CoderMalfunctionError, "CoderMalfunctionError", 25, jl_Error, [], 0, 3, 0, 0, 0,
cbgu_Sort, 0, jl_Object, [], 0, 3, 0, 0, 0,
jnc_BufferUnderflowException, "BufferUnderflowException", 25, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jnc_BufferOverflowException, "BufferOverflowException", 25, jl_RuntimeException, [], 0, 3, 0, 0, 0,
jnc_MalformedInputException, "MalformedInputException", 25, jnc_CharacterCodingException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jnc_MalformedInputException_getMessage)],
jnc_UnmappableCharacterException, "UnmappableCharacterException", 25, jnc_CharacterCodingException, [], 0, 3, 0, 0, ["$getMessage", $rt_wrapFunction0(jnc_UnmappableCharacterException_getMessage)],
cgttu_NoiseUtils, 0, jl_Object, [], 0, 3, 0, 0, 0,
jnci_BufferedEncoder, 0, jnc_CharsetEncoder, [], 1, 3, 0, 0, 0,
jnci_UTF8Encoder, 0, jnci_BufferedEncoder, [], 0, 3, 0, 0, 0,
cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0, 0, jl_Object, [otji_EventHandler], 0, 3, 0, 0, 0,
jnci_BufferedDecoder$Controller, 0, jl_Object, [], 0, 3, 0, 0, 0,
cgxgbta_AssetLoadImpl$6, 0, jl_Object, [cgxgbta_AssetLoaderListener], 0, 0, 0, 0, ["$onProgress", $rt_wrapFunction2(cgxgbta_AssetLoadImpl$6_onProgress), "$onSuccess", $rt_wrapFunction2(cgxgbta_AssetLoadImpl$6_onSuccess)],
ses_Drawing, 0, jl_Object, [], 0, 3, 0, 0, 0,
jnci_BufferedEncoder$Controller, 0, jl_Object, [], 0, 3, 0, 0, 0,
cbgu_ComparableTimSort, 0, jl_Object, [], 0, 0, 0, 0, 0,
jl_ArrayIndexOutOfBoundsException, "ArrayIndexOutOfBoundsException", 27, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, 0,
cgxgbtf_FileDB$1, 0, ji_OutputStream, [], 0, 0, 0, 0, ["$close", $rt_wrapFunction0(cgxgbtf_FileDB$1_close)]]);
let $rt_booleanArrayCls = $rt_arraycls($rt_booleancls),
$rt_charArrayCls = $rt_arraycls($rt_charcls),
$rt_byteArrayCls = $rt_arraycls($rt_bytecls),
$rt_shortArrayCls = $rt_arraycls($rt_shortcls),
$rt_intArrayCls = $rt_arraycls($rt_intcls),
$rt_longArrayCls = $rt_arraycls($rt_longcls),
$rt_floatArrayCls = $rt_arraycls($rt_floatcls);
$rt_stringPool(["Can\'t enter monitor from another thread synchronously", "Class cannot be created (missing no-arg constructor): ", "texture cannot be null.", "sprite cannot be null.", "GL_EXT_texture_filter_anisotropic", "New data must have the same managed status as the old data", "GL_ARB_framebuffer_object", "GL_EXT_framebuffer_object", "com.badlogic.gdx.backends.lwjgl3.Lwjgl3GLES20", "can\'t draw to a managed texture", "index can\'t be >= size: ", " >= ", "index can\'t be > size: ", " > ", "Array is empty.",
"fromIndex(", ") > toIndex(", ")", "newSize must be >= 0: ", "n must be positive", "loadFactor must be > 0 and < 1: ", "key cannot be null.", "interface ", "class ", "", "[]", "<init>", ": ", "\n", "\tat ", "null", "Caused by: ", "0", "String is null", "String is empty", "String contains invalid digits: ", "String contains digits out of radix ", "The value is too big for integer type", "The value is too big for int type: ", "Illegal radix: ", "false", "true", "app", "db/assets", "high-performance", "canvas",
"java.runtime.name", "userAgent", "os.name", "Windows", "OS X", "no OS", "Linux", ".html", "index.html", "index-wasm.html", "index-debug.html", "pagehide", "resize", "assets.txt", "particles/click.p", "particles/", "Error loading effect: ", "bitcell_memesbruh03.fnt", "Заработай денег Денису чтобы сервер запустился", "CLICKS", "[CYAN]{VAR=CLICKS}{RESET}[GREEN] /[] {RAINBOW}1000   ", "gdx.wasm.js", "howler.js", "WEB_SCRIPT_PATH", "WEB_ASSET_PATH", "begin must be called before end.", "Invalid between begin/end.",
"А ты хорош, мужик", "bounces cannot be < 2 or > 5: ", "Class does not represent enum", "Enum ", " does not have the ", " constant", "INIT", "PRELOAD_ASSETS", "DOWNLOAD_ASSETS", "APP_CREATE", "APP_LOOP", "object", "function", "string", "number", "undefined", "Either src or dest is null", "java.version", "1.8", "TeaVM", "file.separator", "/", "path.separator", ":", "line.separator", "java.io.tmpdir", "/tmp", "java.vm.version", "user.home", "GLVersion", "OpenGL ES (\\d(\\.\\d){0,2})", "WebGL (\\d(\\.\\d){0,2})",
"(\\d(\\.\\d){0,2})", "px", "Loading asset: ", "Unsupported asset type ", "assets/", "scripts/", "Loading script: ", "mousedown", "mouseup", "mousemove", "wheel", "touchstart", "touchmove", "touchcancel", "touchend", "keydown", "keypress", "keyup", "CSS1Compat", "hidden", "visible", "capacity must be >= 0: ", "The required capacity is too large: ", "glGetFloat not supported by WebGL backend", "GL error: ", ", ", "Invalid version string: ", "\\.", "Error parsing number: ", ", assuming: ", "libGDX GL", "Android",
"Desktop", "HeadlessDesktop", "Applet", "WebGL", "iOS", " REMOVE FOLDER: ", " REMOVE FILE: ", " Path: ", " Error: ", " CONTAINS FOLDER: ", " CONTAINS FILE: ", ".", "./", " GET FOLDER: ", " GET FILE: ", " Size: ", " PUT FILE: ", " Bytes: ", "Cannot put an empty folder name", " PUT FOLDER: ", "IndexedDB is not supported in this browser", "PUT FOLDER DB: ", "PUT FILE DB: ", "REMOVE FILE DB: ", "OpenGL", "GLES", "NONE", "Patter is null", "IndexedDB Error opening database: ", "public", "protected", "private", "abstract",
"static", "final", "transient", "volatile", "synchronized", "native", "strictfp", "interface", "fSet", "Is", "In", "NonCapFSet", "AheadFSet", "BehindFSet", "AtomicFSet", "FinalSet", "<Empty set>", "JointSet", "NonCapJointSet", "PosLookaheadJointSet", "NegLookaheadJointSet", "PosBehindJointSet", "NegBehindJointSet", "<Quant>", "<GroupQuant>", "Lower", "Upper", "ASCII", "Alpha", "Digit", "Alnum", "Punct", "Graph", "Print", "Blank", "Cntrl", "XDigit", "javaLowerCase", "javaUpperCase", "javaWhitespace", "javaMirrored",
"javaDefined", "javaDigit", "javaIdentifierIgnorable", "javaISOControl", "javaJavaIdentifierPart", "javaJavaIdentifierStart", "javaLetter", "javaLetterOrDigit", "javaSpaceChar", "javaTitleCase", "javaUnicodeIdentifierPart", "javaUnicodeIdentifierStart", "Space", "w", "W", "s", "S", "d", "D", "BasicLatin", "Latin-1Supplement", "LatinExtended-A", "LatinExtended-B", "IPAExtensions", "SpacingModifierLetters", "CombiningDiacriticalMarks", "Greek", "Cyrillic", "CyrillicSupplement", "Armenian", "Hebrew", "Arabic",
"Syriac", "ArabicSupplement", "Thaana", "Devanagari", "Bengali", "Gurmukhi", "Gujarati", "Oriya", "Tamil", "Telugu", "Kannada", "Malayalam", "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar", "Georgian", "HangulJamo", "Ethiopic", "EthiopicSupplement", "Cherokee", "UnifiedCanadianAboriginalSyllabics", "Ogham", "Runic", "Tagalog", "Hanunoo", "Buhid", "Tagbanwa", "Khmer", "Mongolian", "Limbu", "TaiLe", "NewTaiLue", "KhmerSymbols", "Buginese", "PhoneticExtensions", "PhoneticExtensionsSupplement", "CombiningDiacriticalMarksSupplement",
"LatinExtendedAdditional", "GreekExtended", "GeneralPunctuation", "SuperscriptsandSubscripts", "CurrencySymbols", "CombiningMarksforSymbols", "LetterlikeSymbols", "NumberForms", "Arrows", "MathematicalOperators", "MiscellaneousTechnical", "ControlPictures", "OpticalCharacterRecognition", "EnclosedAlphanumerics", "BoxDrawing", "BlockElements", "GeometricShapes", "MiscellaneousSymbols", "Dingbats", "MiscellaneousMathematicalSymbols-A", "SupplementalArrows-A", "BraillePatterns", "SupplementalArrows-B", "MiscellaneousMathematicalSymbols-B",
"SupplementalMathematicalOperators", "MiscellaneousSymbolsandArrows", "Glagolitic", "Coptic", "GeorgianSupplement", "Tifinagh", "EthiopicExtended", "SupplementalPunctuation", "CJKRadicalsSupplement", "KangxiRadicals", "IdeographicDescriptionCharacters", "CJKSymbolsandPunctuation", "Hiragana", "Katakana", "Bopomofo", "HangulCompatibilityJamo", "Kanbun", "BopomofoExtended", "CJKStrokes", "KatakanaPhoneticExtensions", "EnclosedCJKLettersandMonths", "CJKCompatibility", "CJKUnifiedIdeographsExtensionA", "YijingHexagramSymbols",
"CJKUnifiedIdeographs", "YiSyllables", "YiRadicals", "ModifierToneLetters", "SylotiNagri", "HangulSyllables", "HighSurrogates", "HighPrivateUseSurrogates", "LowSurrogates", "PrivateUseArea", "CJKCompatibilityIdeographs", "AlphabeticPresentationForms", "ArabicPresentationForms-A", "VariationSelectors", "VerticalForms", "CombiningHalfMarks", "CJKCompatibilityForms", "SmallFormVariants", "ArabicPresentationForms-B", "HalfwidthandFullwidthForms", "all", "Specials", "Cn", "IsL", "Lu", "Ll", "Lt", "Lm", "Lo", "IsM",
"Mn", "Me", "Mc", "N", "Nd", "Nl", "No", "IsZ", "Zs", "Zl", "Zp", "IsC", "Cc", "Cf", "Co", "Cs", "IsP", "Pd", "Ps", "Pe", "Pc", "Po", "IsS", "Sm", "Sc", "Sk", "So", "Pi", "Pf", "posFSet", " ", "^ ", "range:", "CompositeRangeSet:  <nonsurrogate> ", " <surrogate> ", "UCI range:", "decomposed Hangul syllable:", "UCI ", "CI ", "decomposed char:", "<DotAllQuant>", "<DotQuant>", "<SOL>", "WordBoundary", "PreviousMatch", "<EOL>", "EOI", "^", "DotAll", "<Unix MultiLine $>", "<MultiLine $>", "CI back reference: ", "back reference: ",
"UCI back reference: ", "sequence: ", "UCI sequence: ", "CI sequence: ", "PX", "PCT", "EM", "EX", "PT", "PC", "IN", "CM", "MM", "main", "success", "failure", "IndexedDB Error cursor", "charsetName is null", "Script download success: ", "Script download failed: ", "#iterator() cannot be used nested.", "No support for buffer ", "Should never been thrown", "Invalid assets description file. ", "1", "c", "l", "\\", "Type ", " is not supported", "Binary", "b", "Directory", "Can\'t have more than 8191 sprites per batch: ",
"a_position", "a_color", "a_texCoord0", "attributes must be >= 1", "attribute vec4 a_position;\nattribute vec4 a_color;\nattribute vec2 a_texCoord0;\nuniform mat4 u_projTrans;\nvarying vec4 v_color;\nvarying vec2 v_texCoords;\n\nvoid main()\n{\n   v_color = a_color;\n   v_color.a = v_color.a * (255.0/254.0);\n   v_texCoords = a_texCoord0;\n   gl_Position =  u_projTrans * a_position;\n}\n", "#ifdef GL_ES\n#define LOWP lowp\nprecision mediump float;\n#else\n#define LOWP \n#endif\nvarying LOWP vec4 v_color;\nvarying vec2 v_texCoords;\nuniform sampler2D u_texture;\nvoid main()\n{\n  gl_FragColor = v_color * texture2D(u_texture, v_texCoords);\n}",
"Error compiling shader: ", "SpriteBatch.end must be called before begin.", "SpriteBatch.begin must be called before end.", "SpriteBatch.begin must be called before draw.", "Mesh attempting to access memory outside of the index buffer (count: ", ", offset: ", ", max: ", "u_projTrans", "u_texture", "Unnamed Font", "Missing font file: ", "UTF-8", "padding=", ",", "lineHeight=", "base=", "pages=", "\npage id=", "file=\"", "Missing texture file: ", "\nchars count=", "\nchar id=", " x=", " y=", " width=", " height=",
" xoffset=", " yoffset=", " xadvance=", " page=", "\nkernings count=", "\nkerning first=", " second=", " amount=", "FONT", "Font is missing a space character! Aborting!", "Cannot create a font withoit a space character.", "attribute vec4 a_position;\nattribute vec4 a_color;\nattribute vec2 a_texCoord0;\nuniform mat4 u_projTrans;\nvarying vec4 v_color;\nvarying vec2 v_texCoords;\n\nvoid main() {\n\tv_color = a_color;\n\tv_color.a = v_color.a * (255.0/254.0);\n\tv_texCoords = a_texCoord0;\n\tgl_Position =  u_projTrans * a_position;\n}\n",
"#ifdef GL_ES\nprecision mediump float;\n#endif\n#if __VERSION__ >= 130\n#define TEXTURE texture\n#else\n#define TEXTURE texture2D\n#endif\nuniform sampler2D u_texture;\nvarying vec4 v_color;\nvarying vec2 v_texCoords;\nuniform float u_smoothing;\nfloat median(float r, float g, float b) {\n    return max(min(r, g), min(max(r, g), b));\n}\nvoid main() {\n  if (u_smoothing > 0.0) {\n    vec4 msdf = TEXTURE(u_texture, v_texCoords);\n    float distance = u_smoothing * (median(msdf.r, msdf.g, msdf.b) - 0.5);\n    float glyphAlpha ="
+ " clamp(distance + 0.5, 0.0, 1.0);\n    gl_FragColor = vec4(v_color.rgb, glyphAlpha * v_color.a);\n  } else {\n    gl_FragColor = v_color * texture2D(u_texture, v_texCoords);\n  }\n}", "MSDF shader failed to compile: ", "textratypist", "#ifdef GL_ES\n\tprecision mediump float;\n\tprecision mediump int;\n#endif\n\nuniform sampler2D u_texture;\nuniform float u_smoothing;\nvarying vec4 v_color;\nvarying vec2 v_texCoords;\n\nvoid main() {\n\tif (u_smoothing > 0.0) {\n\t\tfloat smoothing = 0.25 / u_smoothing;\n\t\tvec4 color = texture2D(u_texture, v_texCoords);\n\t\tfloat alpha = smoothstep(0.5 - smoothing, 0.5 + smoothing, color.a);\n\t\tgl_FragColor = vec4(v_color.rgb * color.rgb, alpha * v_color.a);\n  } else {\n\t    gl_FragColor = v_color * texture2D(u_texture, v_texC"
+ "oords);\n  }\n}\n", "#ifdef GL_ES\n\tprecision mediump float;\n\tprecision mediump int;\n#endif\n\nuniform sampler2D u_texture;\nuniform float u_smoothing; /* Unused except to enable or disable the shader. */\nvarying vec4 v_color;\nvarying vec2 v_texCoords;\n\nvoid main() {\n\tif (u_smoothing > 0.0) {\n\t\tvec4 color = texture2D(u_texture, v_texCoords);\n     //float smoothing = fwidth(color.a);\n     float smoothing = 0.7 * length(vec2(dFdx(color.a), dFdy(color.a)));\n\t\tfloat alpha = smoothstep(0.5 - smoothing, 0.5 + smoothing, color.a);\n\t\tgl_Fr"
+ "agColor = vec4(v_color.rgb * color.rgb, alpha * v_color.a);\n  } else {\n\t    gl_FragColor = v_color * texture2D(u_texture, v_texCoords);\n  }\n}\n", "SDF shader failed to compile: ", "#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform sampler2D u_texture;\nuniform float u_smoothing;\nvarying vec4 v_color;\nvarying vec2 v_texCoords;\nconst float closeness = 0.015625; // Between 0 and 0.5, 0 = thick outline, 0.5 = no outline\nvoid main() {\n  if (u_smoothing > 0.0) {\n    vec4 image = texture2D(u_texture, v_texCoords);\n    float smoothing = 0.5 / u_smoothing;\n    float outlineFactor = smoothstep(0.5 - smoothing, 0.5 + smoothing, image.a);\n    vec3 color = image.rgb * v_color.rgb * outlineFactor"
+ ";\n    float alpha = smoothstep(closeness, closeness + smoothing, image.a);\n    gl_FragColor = vec4(color, v_color.a * alpha);\n  } else {\n    gl_FragColor = v_color * texture2D(u_texture, v_texCoords);\n  }\n}", "#ifdef GL_ES\nprecision mediump float;\n#endif\nuniform sampler2D u_texture;\nuniform float u_smoothing;\nvarying vec4 v_color;\nvarying vec2 v_texCoords;\nconst float closeness = 0.015625; // Between 0 and 0.5, 0 = thick outline, 0.5 = no outline\nvoid main() {\n  if (u_smoothing > 0.0) {\n    vec4 image = texture2D(u_texture, v_texCoords);\n    float smoothing = 0.7 * length(vec2(dFdx(image.a), dFdy(image.a)));\n    float outlineFactor = smoothstep(0.5 - smoothing, 0.5 + smoothing, image.a);\n    vec3 color = image.rg"
+ "b * v_color.rgb * outlineFactor;\n    float alpha = smoothstep(closeness, closeness + smoothing, image.a);\n    gl_FragColor = vec4(color, v_color.a * alpha);\n  } else {\n    gl_FragColor = v_color * texture2D(u_texture, v_texCoords);\n  }\n}", "SDF_OUTLINE shader failed to compile: ", "u_smoothing", "RESET", "([⺀-〿㇀-\u31ef㈀-鿿豈-\ufaff︰-﹏])", "$1​", "{NORMAL}", "\\{(", ")(?:\\=([^\\{\\}]+))?\\}", "NORMAL", "[ ]", "[", "{", "Actor: ", "*SELECTED", "IndexedDB Error putting file: ", "File is null, it does not exist: ",
"Error reading file: ", "Unknown Format: ", "Pixmap already disposed!", "unknown format: ", "Unknown Gdx2DPixmap Format: ", "Intensity", "LuminanceAlpha", "RGB565", "RGBA4444", "RGB888", "RGBA8888", "STANDARD", "-standard", "SDF", "-sdf", " (SDF)", "MSDF", "-msdf", " (MSDF)", "SDF_OUTLINE", " (SDF Outline)", "[-", "[#", "]", "[@", "[%]", "[@]", ";", "=", "NATURAL", "SLOWER", "FAST", "SLOW", "SPEED", "FASTER", "[^\\d.\\-+]", "#", "UNDO", "*", "B", "BOLD", "STRONG", "I", "OBLIQUE", "ITALIC", "_", "U", "UNDER",
"UNDERLINE", "~", "STRIKE", "STRIKETHROUGH", "SUB", "SUBSCRIPT", "MID", "MIDSCRIPT", "SUPER", "SUPERSCRIPT", "!", "UP", "UPPER", "LOW", "LOWER", "EACH", "TITLE", "@", "NOFONT", "ENDFONT", "JOSTLE", "WOBBLE", "SCATTER", "BLACK OUTLINE", "BLACKEN", "WHITE OUTLINE", "WHITEN", "SHINY", "SHINE", "GLOSSY", "SHADOW", "DROPSHADOW", "DROP SHADOW", "ERROR", "REDLINE", "RED LINE", "WARN", "YELLOWLINE", "YELLOW LINE", "NOTE", "INFO", "BLUELINE", "BLUE LINE", "SMALLCAPS", "SMALL CAPS", "%", "NOSCALE", "ENDSCALE", "NOMODE",
"ENDMODE", "[%", "(", "[%^]", "[%?note]", "[%?warn]", "[%?error]", "[%?shadow]", "[%?shiny]", "[%?white outline]", "[%?black outline]", "[%?]", "[;]", "[,]", "[!]", "[^]", "[=]", "[.]", "[~]", "[_]", "[/]", "[*]", "((?<!\\[)\\[[^\\[\\]]*(\\]))", "((?<!\\[)\\[ (?:\\]))", "{RESET}", "((?<!\\[)\\[(?:\\]))", "{UNDO}", "(?<!\\[)\\[(?:(?:#({=m}[A-Fa-f0-9]{3,8}))|(?:\\|?({=m}[\\pL\\pN][^\\[\\]]*)))(\\])", "{COLOR=${\\m}}", "(?<!\\[)\\[([^\\[\\]\\+][^\\[\\]]*)(\\])", "{STYLE=$1}", "[A-Fa-f0-9]{3,8}", "((?<!\\[)\\[-({=t}[^\\[\\]]*)(?:\\]))",
"{${\\t}}", "yes", "t", "y", "on", "END", "EASE", "HANG", "JUMP", "SHAKE", "SICK", "SLIDE", "WAVE", "WIND", "RAINBOW", "GRADIENT", "FADE", "BLINK", "JOLT", "SPIRAL", "SPIN", "CROWD", "SHRINK", "EMERGE", "HEARTBEAT", "CAROUSEL", "SQUASH", "SCALE", "ROTATE", "HIGHLIGHT", "LINK", "TRIGGER", "ATTENTION", "STYLIST", "CANNON", "OCEAN", "SPUTTER", "INSTANT", "SLAM", "MEET", "ZIPPER", "FIRE", "{OCEAN=0.7;1.25;0.11;1.0;0.65}", "ENDFIRE", "{ENDOCEAN}", "SPUTTERINGFIRE", "{OCEAN=0.7;1.25;0.11;1.0;0.65}{SPUTTER=0.2;0.25;4;inf}",
"ENDSPUTTERINGFIRE", "{ENDOCEAN}{ENDSPUTTER}", "BLIZZARD", "{GRADIENT=88ccff;eef8ff;-0.5;5}{WIND=2;4;0.25;0.1}", "ENDBLIZZARD", "{ENDGRADIENT}{ENDWIND}", "SHIVERINGBLIZZARD", "{GRADIENT=88ccff;eef8ff;-0.5;5}{WIND=2;4;0.25;0.1}{JOLT=1;0.6;inf;0.1;;}", "ENDSHIVERINGBLIZZARD", "{ENDGRADIENT}{ENDWIND}{ENDJOLT}", "ELECTRIFY", "{JOLT=1;1.2;inf;0.3;dull lavender;light butter}", "ENDELECTRIFY", "{ENDJOLT}", "ZOMBIE", "{SICK=0.4}{CROWD}{EMERGE=0.1}[dark olive sage]", "ENDZOMBIE", "{ENDSICK}{ENDCROWD}{ENDEMERGE}{CLEARCOLOR}",
"VertexArray", "VertexBufferObject", "VertexBufferObjectSubData", "VertexBufferObjectWithVAO", "None", "SourceOver", "NearestNeighbour", "BiLinear", "This TextureData implementation does not upload data itself", "prepare() must not be called on a PixmapTextureData instance as it is already prepared.", "offset=", ", end=", ", length=", "wrong target type: ", "unexpected iterator\'s backtracker:", "unknown flag: ", "(\"", "\" w=", " h=", "vertex shader must not be null", "fragment shader must not be null", "Fragment shader:\n",
"Vertex shader\n", "An attempted fetch uniform from uncompiled shader \n", "No uniform with name \'", "\' in shader", "Can only free direct buffer", "The texture region is null. Please set a texture region first (e.g. in the constructor or by calling setTextureRegion(TextureRegion region))", "https://libgdx.com", "start", "No buffer allocated!", "IndexBufferObject cannot be used after it has been disposed.", "data must be a ByteBuffer or FloatBuffer", "group #", " is not assigned", "\\$(?:(?:\\{({=mode}\\p{Po}+)?({=name}\\w+)\\})|({=name}\\d+|\\&)|\\\\({esc}.))",
"mode", "name", "esc", "enabled", "disabled", "childrenOnly", "New position ", " is outside of range [0;", "Capacity is negative: ", " is not set", " at ", "[ByteBuffer position=", ", limit=", ", capacity=", ", mark ", "BIG_ENDIAN", "LITTLE_ENDIAN", "Nearest", "Linear", "MipMap", "MipMapNearestNearest", "MipMapLinearNearest", "MipMapNearestLinear", "MipMapLinearLinear", "MirroredRepeat", "ClampToEdge", "Repeat", "vars.length should be 4, not ", "unbalanced parenthesis", "unknown group name in conditional expr.: ",
"malformed conditional expression: ", " \'", "\'", "group redeclaration ", "; use ({=name}...) for group reassignments", "group name starts with digit but is not a number", "group redeclaration: ", "; use ({=id}...) for multiple group assignments", "unknown token type: ", "malformed condition", "\'$\' is not a last term in the group: <", ">", "missing term before *", "missing term before +", "missing term before ?", "missing term before {}", "\'group_id\' expected", "group_id expected", "backreference to unknown group: ",
"\' expected", "not a branch type: ", "Escape without a character", "\\x{<out of range or incomplete>}", "limits.length=", ", should be ", "malformed quantifier", "illegal construction: {.. , , ..}", "BITSET", "BITSET2", "ANY_CHAR", "ANY_CHAR_NE", "REG", "REG_I", "FIND", "FINDREG", "SUCCESS", "BOUNDARY", "DIRECTION", "UBOUNDARY", "UDIRECTION", "GROUP_IN", "GROUP_OUT", "VOID", "START", "END_EOL", "LINE_START", "LINE_END", "LAST_MATCH_END", "CNT_SET_0", "CNT_INC", "CNT_GT_EQ", "READ_CNT_LT", "CRSTORE_CRINC", "CR_SET_0",
"CR_LT", "CR_GT_EQ", "BRANCH", "BRANCH_STORE_CNT", "BRANCH_STORE_CNT_AUX1", "PLOOKAHEAD_IN", "PLOOKAHEAD_OUT", "NLOOKAHEAD_IN", "NLOOKAHEAD_OUT", "PLOOKBEHIND_IN", "PLOOKBEHIND_OUT", "NLOOKBEHIND_IN", "NLOOKBEHIND_OUT", "INDEPENDENT_IN", "INDEPENDENT_OUT", "REPEAT_0_INF", "REPEAT_MIN_INF", "REPEAT_MIN_MAX", "REPEAT_REG_MIN_INF", "REPEAT_REG_MIN_MAX", "BACKTRACK_0", "BACKTRACK_MIN", "BACKTRACK_FIND_MIN", "BACKTRACK_FINDREG_MIN", "BACKTRACK_REG_MIN", "MEMREG_CONDITION", "LOOKAHEAD_CONDITION_IN", "LOOKAHEAD_CONDITION_OUT",
"LOOKBEHIND_CONDITION_IN", "LOOKBEHIND_CONDITION_OUT", "CHAR", "UNKNOWN_TERM", " , ", " , weight=", " , weight2=", "dotall, ", "dot-eols, ", "$", "non-", "abs.start", "abs.end", "abs.end-eol", "line start", "line end", "(aux1)", "(!", ", =>", "<=", " , dist=", "<!", "rpt{", "}", "back(0)", "back(", "back", "_$", ",0,inf}", "(reg", "?)", "cond", "(<!", ",inf}", "rpt{$", ">>>{", "}, <<", ",eat", "(cnt)", "=>", "(cond", "cnt++", "cnt>=", "->cnt<", "M(", ")->,Cr(", ")++", "Cr(", ")=0", ")<", ")>=", "unknown type: ",
"cnt=0", "] , ", "->", "illegal group id: ", "; must either nonnegative int, or MatchResult.PREFIX, or MatchResult.SUFFIX", "unknown term type: ", "this kind of term can\'t be quantified:", "can\'t seek this kind of term:", "wrong findReg() target:", "can\'t find this kind of term:", "wrong findBackReg() target type :", "Index ", "This buffer is not allocated in linear memory and does not wrap native JS buffer", "number at the start of a named group", "\'>\' expected at ", " in ", "malformed named group", "wrong char after \"(?\": ",
"\'}\' expected at ", "malformed character class", "can\'t iterate this type: ", "variable length element within a lookbehind assertion", "non-equal branch lengths within a lookbehind assertion", "-", "!\"#$%&\'()*+,-./:;<=>?@[\\]^_`{|}~", " \t", " \t\n\r\u000c\u000b", "C", "L", "M", "Z", "Zh", "Zv", "P", "J", "Js", "Jp", "G", "Gh", "Gv", "Other", "PrivateUse", "Unassigned", "Control", "Format", "Surrogate", "Letter", "UppercaseLetter", "LowercaseLetter", "TitlecaseLetter", "ModifierLetter", "OtherLetter", "CasedLetter",
"Mark", "NonspacingMark", "EnclosingMark", "SpacingMark", "Number", "DecimalNumber", "LetterNumber", "OtherNumber", "Separator", "SpaceSeparator", "LineSeparator", "ParagraphSeparator", "Punctuation", "DashPunctuation", "OpenPunctuation", "InitialPunctuation", "ClosePunctuation", "FinalPunctuation", "ConnectorPunctuation", "OtherPunctuation", "Symbol", "MathSymbol", "CurrencySymbol", "ModifierSymbol", "OtherSymbol", "Identifier", "Horizontal", "Vertical", "IdentifierStart", "IdentifierPart", "UNASSIGNED", "ASSIGNED",
"ALL", "end code < start code in block ", "wrong end code (", ") in block ", "wrong start code (", "unbalanced class group", "unknown class: {", "Escaped \\Q\\E literals cannot be inside character classes", "illegal range: [...", "-\\P...]", "incomplete escape sequence \\xHH", "-\\d...]", "-\\w...]", "-\\s...]", "-\\", "...]", "-\\p...]", "unknown named class: {", "incomplete escape sequence \\uXXXX", "illegal range: ", "unbalanced brackets in a class def", "wrong class name: ", "Is or In named class doesn\'t start with \'{\'",
"named class doesn\'t start with \'{\'", "\\n", "\\f", "\\r", "\\t", "\\x", "hexadecimal digit expected: ", "BASICLATIN", "LATIN1SUPPLEMENT", "LATINEXTENDEDA", "LATINEXTENDEDB", "IPAEXTENSIONS", "SPACINGMODIFIERLETTERS", "COMBININGDIACRITICALMARKS", "GREEK", "CYRILLIC", "CYRILLICSUPPLEMENT", "ARMENIAN", "HEBREW", "ARABIC", "SYRIAC", "ARABICSUPPLEMENT", "THAANA", "NKO", "SAMARITAN", "MANDAIC", "SYRIACSUPPLEMENT", "ARABICEXTENDEDA", "DEVANAGARI", "BENGALI", "GURMUKHI", "GUJARATI", "ORIYA", "TAMIL", "TELUGU", "KANNADA",
"MALAYALAM", "SINHALA", "THAI", "LAO", "TIBETAN", "MYANMAR", "GEORGIAN", "HANGULJAMO", "ETHIOPIC", "ETHIOPICSUPPLEMENT", "CHEROKEE", "UNIFIEDCANADIANABORIGINALSYLLABICS", "OGHAM", "RUNIC", "TAGALOG", "HANUNOO", "BUHID", "TAGBANWA", "KHMER", "MONGOLIAN", "UNIFIEDCANADIANABORIGINALSYLLABICSEXTENDED", "LIMBU", "TAILE", "NEWTAILUE", "KHMERSYMBOLS", "BUGINESE", "TAITHAM", "COMBININGDIACRITICALMARKSEXTENDED", "BALINESE", "SUNDANESE", "BATAK", "LEPCHA", "OLCHIKI", "CYRILLICEXTENDEDC", "SUNDANESESUPPLEMENT", "VEDICEXTENSIONS",
"PHONETICEXTENSIONS", "PHONETICEXTENSIONSSUPPLEMENT", "COMBININGDIACRITICALMARKSSUPPLEMENT", "LATINEXTENDEDADDITIONAL", "GREEKEXTENDED", "GENERALPUNCTUATION", "SUPERSCRIPTSANDSUBSCRIPTS", "CURRENCYSYMBOLS", "COMBININGDIACRITICALMARKSFORSYMBOLS", "LETTERLIKESYMBOLS", "NUMBERFORMS", "ARROWS", "MATHEMATICALOPERATORS", "MISCELLANEOUSTECHNICAL", "CONTROLPICTURES", "OPTICALCHARACTERRECOGNITION", "ENCLOSEDALPHANUMERICS", "BOXDRAWING", "BLOCKELEMENTS", "GEOMETRICSHAPES", "MISCELLANEOUSSYMBOLS", "DINGBATS", "MISCELLANEOUSMATHEMATICALSYMBOLSA",
"SUPPLEMENTALARROWSA", "BRAILLEPATTERNS", "SUPPLEMENTALARROWSB", "MISCELLANEOUSMATHEMATICALSYMBOLSB", "SUPPLEMENTALMATHEMATICALOPERATORS", "MISCELLANEOUSSYMBOLSANDARROWS", "GLAGOLITIC", "LATINEXTENDEDC", "COPTIC", "GEORGIANSUPPLEMENT", "TIFINAGH", "ETHIOPICEXTENDED", "CYRILLICEXTENDEDA", "SUPPLEMENTALPUNCTUATION", "CJKRADICALSSUPPLEMENT", "KANGXIRADICALS", "IDEOGRAPHICDESCRIPTIONCHARACTERS", "CJKSYMBOLSANDPUNCTUATION", "HIRAGANA", "KATAKANA", "BOPOMOFO", "HANGULCOMPATIBILITYJAMO", "KANBUN", "BOPOMOFOEXTENDED",
"CJKSTROKES", "KATAKANAPHONETICEXTENSIONS", "ENCLOSEDCJKLETTERSANDMONTHS", "CJKCOMPATIBILITY", "CJKUNIFIEDIDEOGRAPHSEXTENSIONA", "YIJINGHEXAGRAMSYMBOLS", "CJKUNIFIEDIDEOGRAPHS", "YISYLLABLES", "YIRADICALS", "LISU", "VAI", "CYRILLICEXTENDEDB", "BAMUM", "MODIFIERTONELETTERS", "LATINEXTENDEDD", "SYLOTINAGRI", "COMMONINDICNUMBERFORMS", "PHAGSPA", "SAURASHTRA", "DEVANAGARIEXTENDED", "KAYAHLI", "REJANG", "HANGULJAMOEXTENDEDA", "JAVANESE", "MYANMAREXTENDEDB", "CHAM", "MYANMAREXTENDEDA", "TAIVIET", "MEETEIMAYEKEXTENSIONS",
"ETHIOPICEXTENDEDA", "LATINEXTENDEDE", "CHEROKEESUPPLEMENT", "MEETEIMAYEK", "HANGULSYLLABLES", "HANGULJAMOEXTENDEDB", "HIGHSURROGATES", "HIGHPRIVATEUSESURROGATES", "LOWSURROGATES", "PRIVATEUSEAREA", "CJKCOMPATIBILITYIDEOGRAPHS", "ALPHABETICPRESENTATIONFORMS", "ARABICPRESENTATIONFORMSA", "VARIATIONSELECTORS", "VERTICALFORMS", "COMBININGHALFMARKS", "CJKCOMPATIBILITYFORMS", "SMALLFORMVARIANTS", "ARABICPRESENTATIONFORMSB", "HALFWIDTHANDFULLWIDTHFORMS", "SPECIALS", "attempt to set a 3\'d choice in a conditional expr.",
" 7g4- !(#& \" ; z H![!$ ?(D#(1/ r J!@!h.@!>!1 E!\" ,$4(c n *!#!/ & \"\"%!+!#!%(\"## \'!U!$ (##!/ & # # #!\" \'##!$\"\"\'% \"\'S*$ + $ / & # \'!) $ $!\"-%!.\'& $ *!#!/ & # \'!+!#!$\'$## \'!:*# (\"$ %\"# \" #\"#\"$\".#\'\"$ %!\"%\".T$- $ 6 C!+ $ %\'# $!\"!%!)\'/ $ 6 ) \'!+ $ %\'#%# %!) $)- $ K $ (#C!2 $ :\"3 + \"!&\"\"#( \" *%)!$)_#FG# \" \' 3 \" 6!\' \" & )!%7b =#V = 1 -Gs \"$\"!y %!& \" %!W %!8 %!& \" %!1 ^ %!a!<\"2%A!(!~\"B\'/&3&;)- $ #)P!)%)%0 ,%B\'9$O*4 .#.#\"\"I!\'+X#2%,\"N!` F!,%)%0!4Zd o(M\"1\"N$9!,(9$|!(!H!(!* \" \" \" 4!\\ 1 0!( 5!$ + ,$2$>0#!D -\"8-8-m#};,5!"
+ "< w$Y \"$\"!L\'#.3&& & & & & & & & R<2 B)u3f A!Q$9 P A&J \"?&v:p(t!# \" *5@\")%L(O(.%j+7\"e ,#8 ?&0!)!Q/E*(!(!(&& & M#R!)%)6#>x!i=&)\'$2 \' \" # # k0{!]\'\"7I%K 5 %#\' l#q\"(!(!(!$\"& &,#! ", "\"! ", "|!(#& \" : w G!\\!$ >(C#(+s ?!P,L!I!1 D!\" /$6 #$r *!#!. & \"\"%!+!#!%(\"## \'!U!$ (##!. & # # #!\" \'##!$\"\"\'% \"\'S*$ + $ . & # \'!) $ $!\"-%!,\'& $ *!#!. & # \'!+!#!$\'$## \'!9*# (\"$ %\"# \" #\"#\"$\",#\'\"$ %!\"%\",T$- $ 5 B!+ $ %\'# $!\"!%!)\'. $ 5 ) \'!+ $ %\'#%# %!) $)- $ J $ (#B!0 $ 9\"2 + \"!&\"\"#( \" *%)!$)`#EF# \" \' 2 \" 5!\' \" & )!%;c =#V = 1 -Fo \"$\"!v %!& \" %!W %!7 %!& \" %!1 _ %!b!<\"0%@!(!{\"A\'.&2&:)- $ #)O!)%)%0%A\'8$N*6 ,#,#\"\"H!\'+X#0%/\"M!a E!/%)%3!6Zd l(?\"1\"M$8!/(8$y!(!G!(!* \" \" \" 6!] 1 3!( 4!$ + P ,!C -\"7-7-k#z:/4}!< u$Y \"$\"!K\'#,2&"
+ "& & & & & & & & R<0 A)q2f @!Q$8 O @&[ \">&t9m(p!# \" *4L\")%K(N(,%h+;\"e /#7 >&3!)!Q.D*(!(!(&& & ?#R!)%)5#I#~!g=&)\'$0 \' \" # # i3x!^\'\";H%J 4 %#\' j!\" n\"(!(!(!$\"& &*\'! ", " !#\"", "* .%\' + # -$) 0 /!(!#!\"&1 ,\"!", "! ", "H0\'0O!*!&!%, 6 z&*+#(! !o# $\"\" !\'!   ! 9 e q/r 8\"!\'?bJ&\"@2M$ j !4$($* \"!)! <6I.!0=-$&!%1&!-!#!;;(-%: &5NGA#!9!(/4+&\'\"$\"1 % !#\"#!)!7$  +$*!/&&$\"1 % $ $ $=\" !Z )(   1 % $ ##!9!4$;!.\'\"$\"1 % $ ##!C$  4!5! &#  \"#$ ! $#$# #*:!A\'   , +#!B \"!\"$C!&\'   , / ##!=$ $4$5(   ?\"!)!% / 0&%)#: ( !\"%G_ $3%G$ ! # : ! / $-!\"# !,\"L!a\' >K#n21!)&&\"#!#$( &.3!58 !%!\"2 w \"\"% ! \"\"? \"\"= \"\"% ! \"\"7 ` \"\"T\\+)W\"&#}\"4 0%c\'\'()75+)+.  4QM!&!UI(#\"L !%V*6P<\"#.D&0F,-Rf!i@5\'F<7$*DB>2 *>\"-%2\" 2\" & $#!%sHv\"&\"8\"&\"\' ! ! ! 6\"R % !#  %#\"\"&&.%  %Y!7!).X!"
+ "&!\"/ !##\'! ! ! \" -\"\"%#&!A$~t\'\"#$38 !%!\"F(!),-% % % % % % % %d!{$D#%$&W\'  g \"%2 h5CE+|HU^\"u#+*$1@)6\"VP(\"X\"T\"$ ! \',+   \" ,6Q+ES&#! $.B*,JK(@<!)# /*# ?;  \'1,#!#E !#$\"#\"! !0 \"-( 3&\"&\"&-% % 2 3\'m63,&Oy\"k]%3#%! / . # ! $ $ l[x9S\"AN*Y# p



+ "! ! ! ! ! ! ! ! 3 ! ! ! ! ! ! ! ! ! ! ! ! ! F ! ! ! ! ! !!! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !&! ! \" ! ! ! ! % ! \" !!! ! ! ! ! ! ! ! ! ! ( ( ! ! ! ! ! ! ! % ! \" $ ! ! ! ! ! 6 $ K,())BP(+$L-G", "( \" \" & )!#!#!$ % \' ", "S)#,.\"& $ D % P K G!M!# 3 \' \" F H U C Q W ? R O#I8( 45T ( )-X!L J * 6\"% <!:$Z V#N A 2!B&9 1 >$\"!* 0 E @ /!=+\' Y 7!;", "S!2!r!%\"q!zI%\"<9 (U$ g !0$) \"!,! 85d.!0:-/C7\'1&6 %3;PE#!>!\'(,4%+\"$\"/ & !#\"#!,!4$  *$)!(%%$\"/ & $ $ $:\" !T ,\'   / & $ ##!>!2$7!.+\"$\"/ & $ ##!9$  2!3! %#  \"#$ ! $#$# #)6!E+   - *#!? \"!\"$9!%+   - ( ##!:$ $2$3\'   ;\"!,!& ( 0%&,#6 \' !\"&]Y $=%P$ ! # 6 ! ( $1!\"#7\"K!^+ AJ#lB/!,%%\"#!#$\' %.=!Ht \"\"& ! \"\"; \"\": \"\"& ! \"\"4 \\ \"\"`V*Hy\"2 0&b++\',43*,*.  2NL!G@ O\'#\"K !&R)5M8\"#.C%0F-1Op<3+F84$)C?AB )8H\" % $#!{\"}F0-1& & & & & & & &x![!%c(! e%!&B f39D*w~_ |GW(s%*)$a!MRS!h!#&   \" -5N*DQ%#! $.?)-IJ\'<<#\"\')# ;7  +/* %#!#D !#$\"#\"! !0$"
+ "#1\'!*%\"%\"%1& &o@5=-%Zv\"iG! ( . # ! $ $ k@u>Q\"EL)m# nj( X\"5#%\"%\"%\" A", "3(&(?!61 2 J \"$K 7I\"\"\'#  !&!   ! 0 D H,5 )-:S) !%!\"*\" NE\"$Q-%*\" 3;A. 94M\"$\")\"$\"& ! ! ! 2\"= % !#  %#\"\"$$.%  %L!$!\", !##&! ! ! \" $$!\"\"%#$!>\'RF\"4&\"#\'/) !%!U<08GB 1#\" @\"\' ! &(\'#!O*%++CT%/#P(&(5", "scm$k@ ! \" \" !Y\'37/!a$#&#\" #K!+:]\'S(\'!H# (   %@ F(O8 =Q  / $)\"0 .! $#\"# \'!)\";!# .! %&\"# %!+\"%!- .! ,    G\"8&  .! $#\"# ( )\"+!F%%  #\'!M%E! $   #(\"-\"0 .! $   #(\"-\"6!*#E\" $   #\'!)\"0 X!&& ! ,1\"T!#$*,_!#(-$Z\"<! ! !&\"C1 \"$\' >\'!`19#&   #$%#4) !)#p t#I 0\"+\"V+\'!A  !d\">!e)&)i%R2 <#!30C%B6?(* +-.*31g  7&!,!# hUq=u f!^+o&b\"w# 2J\"[\"l!%!&!9%&!\\\"D/;/4!?,:-P#B*L!W**!2\"A D!  #\"$\" !N%$\"j, \"v!r5/5n",
"o^i%g>! !\"!\"! ?(3A/ [&#$#\"!#E +1X(.)( B#!)!!!%>!P)=9!+5 ! $\'$ %&7\"2 . $#* 0\": #\"6 $\"$\"#!% +\"% ,\"6 $%!\"$ 0\"9$! . # !#* )\",\"+ Q - M % 5 !!&!!#)\",\"2 . # \' &\"0\"D\"6\"$#* 0\"2 ? )!! W #&-\'Z #),&U\"C ! ! 5-!%!\"&(!<( \\#!$!\"#\"1\"$!/#8 #\"\' @ l!p!2\"+\"+\"S\"!&* #(( I!! _\"< `!$\"( \'!e\"# . !&! ! #\'\'*# 3-!4L#3 !%! & H)-\";##\"!!O !\"% !!.\'#\"c!!,!&$ \' %\"dRm,$ %7q!a Y+k#]\"s $*;\"V\"h % $ 1\"& b\":/8 F\'1(J!3 ###\"G T$#\"#\"- * K N !!#\"&\"! =\"* f # $ r n4/4j", "$\"&!%#  \' ", "O!>!#\"*#\" 1 &\"% # \'!:!&\"A!&\"*!\" = &!\"!% # \'!D \" (\"\"\"\'!8\",#, &!\"(# \" - 7!. &\")\"\"\"\'!9 B\"%%4 L @!2 $!%!# 6 \'\"#)/ #$#!\'\"N!0!G!3%\" M##\"$ \"$J &!\"!-!\" *$I!+!)!\"(\" ,!0!$ #!?!#\"\"!( +%* 2!/!P R #!C 1.H <!+ $ #\"F # 5!;!\"!E!# )!K \" \" \"!Q",
"= H1\'#%$^ 0 ( V & !!D & & %!F3G  \'B C\'*5E A & .,Q . X,[$P \" - R I2L \" M / 0 \" \\#)!\" (>%)Y?@6W8]#Z#7*4$T%J 9\"$+: <+` N S!K ; ( - / U _ O", ") 4 & \' 2 ! ! ! ! ! ! ! ! ! * ! $ / $ 5 # 0 + , \" - % & \" 7 3 # \' ( % 1 6 .", "* (\'!!)\"&#% ,$+", "9($ %#F\"<\"6#7$;$,*=!A-B!> E )\"&!:+3 @45.?/D C%8!0&#\'1!2\'H\"G", "% \' * (#$!\" & ) ", "\" % ( &!# $ \' ", "3!!%!#$\"&\"/!! 0 ! B ) & $\"& & v \' r%D\"I ! # # 5\"-\"!\"+ !!7#U E(h!J+2 j\"$ ] Y Z o ( m 8 $\"d+! 4#6 7&%\"V%e s;` t 5\"O!6\"b!!!4<l\"g\"\\)!%c\"$)?!9#K&L\"N:* x.\'>!*!$1\"=\"u#@\"y(P\"2\'p-M#3\"w#!\"W ^F!1#$q!%\'#$, ( S 8 {\"k!T $ X%n#Q\"C!! H\"G R*,\"9#[\",\"i z\"f\'.A!(! % !\"_!!%!#$\"&\"/!! 0 ! !)a",
") 0 * 3 / 1\"2 # \'!\" & . % + 4!( $ , -", "/ % $ < ! : ; \" . 0 & 7 ! + 9 ! ! ! ! ! ! 2 , ! ! ! ! 5 ! ! ! ! ! ! ! ! ! ! 1 ! - 8 ! ! ! ) ( ! ! ! 6 ! ! ! ! \" ! ! ! # = 4 * ! ! ! ! ! ! ! \" \' ! ! 3 % $ \" # ", "( * !\"! \' ) # % ! & $ ", "- % $ ; ! 9 : / \' 6 ! * 8 ! ! ! ! ! ! 1 + ! ! ! ! 4 ! ! ! ! ! ! ! ! ! ! 0 ! , 7 ! ! ! . ! ! ! 5 ! ! ! ! # ! ! ! \"&< 3 ) ! ! ! ! ! ! ! # ( ! ! 2 % $ \" \" ", "\' ) ! & ( \" $ # % ! ", "% \'!# (!$\"& ", ":!!!# ! !\"&\"$\"1 G ) 6\"\' i ( g%> 2 # # @\"0\"!\", !!3#M ?.^!2,9 `\"& T P Q e . c J &\"Z,! 4 3$%\"N%[ h\'j -!H\"X!!!<%!#b\"]\"S)!%Y\"&)8!-#D$E\"F*+ k\"(*(\'###!$5! !(l#!\"4 U\"%!# #\'!\"! #\"&$!(##! !+#!f!C \\ n\"a!L & O%d#I\"=!! B\"A K+/\"-#R\"/\"_ m)# 7 0\"##$!!#\'!* !\"V!!!# ! !\"&\"$\"1 ; #\"W",
": \' 2!/ ! 4 ! :0!\"# !## 0 . / u#,,%%! !)V -\"U ^ j!W!# #\"a ( 6\"h 5\"= o\"\'\"g X [\'\\ b G ? `!) !!#$@ ! ! ]\'!$!\"%#?\"z*y p m >9l*+5{ !!1!&!&!&\"O & F!&!6/N\"!#!\"( !!%$! ! ! $ 1\"$0%#! K\"$r$4#i3+QP3x;I#8(t3L$.#q#.!<e$n\"HA!R,cB-$ &\", 7\"\'\"S\"f\"$*9D+ 281C* ).(E)k|M~Jv7+\"<\">#(#w!d -\"} =)s-Y ;#T !!# _ \' 2!/ ! 4 ! Z%!%&\"!", "; *!( ! < # 9 \' J I!L ) ,!)!D ,%& ?%.$# \" \" / \'$\" ! \'F8$@ +6:#H 0 >&A G%\"712-B5(#+\"-=4\"#M K !!E *!( ! C &\"3", "( +#1 * \"!\"!% . / 0 3 2\'5 4 ) , -!$!&", "1 ! 0 + * ) 5(%%$$! !\'3 &\"8 : !!-!#!#!#\"9\"<.,\"2\"7 &\";\'6 ! 4 /",
"W # $ ! q a\"9\"Z ( <\"_ k g S$! T [ C h!+ !!#$= ! ! U%!$!\")#Y\"o&n m V6e&\'.r\"!#!\"( !\"%$! ! ! $ /\"* !\"! I\"\'-##!\"!\"!)!,#\"! !,b%$;#)#N!4?B%L3\'OM3X!.!G&R!^EDK`j82\"%7#5!Q]$f\"8>!P0\\@*$ 1\"0 2\"%\"d\"$&6A\' :,/4& +5(7+csJuHp#(\"! l!t*9 F!i - $\"1\"!", "6\')4$\" 46\")& \"#&   3 8 $+,#)\" \"1S &!! \"(\"   \" 2 j x #!y ;!\"(<\'[ \" & & \"\'C$!8*%O$o (!\' 1!\"5K!n,B$\"!\"!F2>$*%7 $\'P v!\' 1 (!&!0 % \"#!!)!&!!\'\"$& #!+!$!\" \"!  $$&!0 % & & &!\" #$&! #\")! \"),-  )   0 % & #!\'    !\"=!!\'*%   (!&!0 % & #!)!&! ) $& #!\' %+& $#  !#& \" &#&# #+$##  !!\"(\",-/-   3 ,!)   !)&  !\"!!!\'\'% ! (   3 \' #!)   !)&(& !!\'  .-   G   #%,!1 $   5#7 ) \"!%#\"$$ \" ((\'!&/J%/ \'<& \" # 7 \" 3!# \" % \'!!@\"U&(2 \" \" \"$\' :$2 5 :*\"KO(h!; \"%\"!9 } !!% \" !!< !!W !!% \" !!/ ` !!M! *2#,5Q!$#!= 4%P#*)0*0-2.-   &.k#\"$&!\'(\'1  *(R)9"
+ "%N+8 +$++E!#-Z$4(*A>$b D!*(\'/\"\'. ,Gg#\'1).t.I\'\'#6!*%9! 5  A%!$!;!$!( \" \" \" 8!H % \"#  %#!!$$-%  %S&!$%*(-H-$\"#+1\"$\"!\' \"##(\" \" \" ! *!!%#$\" Jai0Vz()*\"!; \"%\"!I)\"=7*% % % % % % % % ?6\" C/ #!#$Q!&!  l !%9 m#!+?],@\'?( /@\'</|LeF!{#>0\\$\' sA)!p!M!& \" (3B$\"#$+^.N+\'(7#\" 6!:.D#d,*(8 _*.!\'(3#f4 !,!#+$!$!$*% % 9 .(u &!\'(.3$6!qE%.#%+ - # \" & & rX~2c!BY+$,5,L# wT\')4(4-R#$!$!$! :", "\")&-\'\"+\')/$\" /$A!!$\")% \"#%   3 : $.,#)\" \"2u %!! \"(\"   \" 0 j y #!z ;!\"(<(\" W \" % % \"\'=$!/\"$*&M$o (!\' 2!\"5J!n,E$\"!80>$*&6 $\'N w!\' 2 (!%!1 & \"#!!)!%!!\'\"$% #!0 % \"!  $$%!1 & % % %!\" #$%! #\")! \"),+  )   1 & % #!\'    !\"9!!\' \")&   (!%!1 & % #!)!%! ) $% #!\' &.% $#  !#% \" %#%# #.$##  !!\"(\",+(\"(+   3 ,!)   !)%  !\"!!!\'\'& ! (   3 \' #!)   !)%(% !!\'  -+   G   #&,!2 $   5#6 ) \"!&#\"$$ \" ((\'!%4I$, \'<% \" # 6 \" 3!# \" & \'!!B\"R%(0 \" \" \"$\' C$0 5 C*\"JM(h!; \"&\"!7 ~ !!& \" !!< !!A !!& \" !!4 ^ !!K! *0#,5O!$#!9 /&N#*)1*1+0-+   %-k#\""
+ "# !\'(\'2  *(P)7&L.: .$..F!#+V$/(*D>$` ?!*(\'4\"\'- ,Gg#\'2)-t-H\'\'#8!*&7! 5  D&!$!;!$!( \" \" \" :!\\ & \"#  &#!!$$+&  &d%Q\"?%!$&*(+#A9+$\"#.2\"$\"!\' \"##(\" \" \" ! *!!&#$\" I_i1S{()*\"!; \"&\"!H)\"96*& & & & & & & & @8\" =4 #!#$O!%!  l !&7 m#!.@Z,B\'@( 4B\'<4}ceX!|#>1Y$\' sD)!p!K!% \" (3E$\"#$!\")[-L.\'(6#\" 8!C-?#b,*(: ]*-!\'(3#f/ !,!#.$!$!$*& & 7 -(v %!\'(-3$8!qF&-#&. + # \" % % rT0a!EU+#,5,#%/ =\"(# x)\"+\')/$\" /+P#$!$!$! #%#%/", "D!5,%! ,6\"%!/!%!&+ 8 z%/.#\'! !o# $\"\" !(!   ! < d q0r >\"!(6(!I=%\",!34D$ i !1$\'$/ \"!*! 58K)!,;-$%!#:%!-!#!@@\'-&: %2EHR#!<!\'01.%(\"$\"3 & !#\"#!*!9$  .\"\'$0%%$\"3 & $ $ $;\" !L *\'   3 & $ ##!<!1$1!\'!)(\"$\"3 & $ ##!B$  1!2! %#  \"#$ ! $#$# #/:!E!)(   + .#!A \"!\"$B!%(   + 0 ##!;$ $1$2\'   6\"!*!& 0 ,%&*#: \' !\"&HZ $)(H$ ! # : ! 0 $-!\"# !+\"N!^( CM#n43!*%%\"#!#$\' %)7!2> !&!\"4 w \"\"& ! \"\"6 \"\"; \"\"& ! \"\"9 ] \"\"JW.*U\"%#}\"1 ,&a#-\'*92.*.)  1PD!#$TK\'#\"N !&`/8\\5\"#)O%,?+-Qe!hF2(?59$/OAC4 /C\"-&4\" 4\" % $#!&sIv\"%\">\"%\"( ! ! ! 8\"Q & !#  &#\"\"%"
+ "%)&  &_$L!5!9!*)#;J!%!\"0 !##(! ! ! \" -\"\"&#%!26~t(\"#$7> !&!\"?\'!*+-& & & & & & & &c!{ =\'\'#\"#%U(  f \"&4 g2BG.|ITY\"u#./$3F*8\"b6\'\"j\"J\"$ ! (+.   \" ++!\'P.GS%#! $)A/+=M\'F5!*# 0/# 6@  (3+#!#G !#$\"#\"! !, \"-\' 7%\"%\"%-& & 4 7(m87+%[y\"kX&7#&! 0 ) # ! $ $ lVx<S\"RE)?$, =!(# p\'!5,%! ,)K#%\"%\"%\" #$#$,", "! # & ) \'\"$ % ( ", "#\"$ %!", "$\"& * \' - +%(!# ) , ", "Lc", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\t\n\u000b\u000c\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`ABCDEFGHIJKLMNOPQRSTUVWXYZ{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´Μ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ÷ØÙÚÛÜÝÞŸĀĀĂĂĄĄĆĆĈĈĊĊČČĎĎĐĐĒĒĔĔĖĖĘĘĚĚĜĜĞĞĠĠĢĢĤĤĦĦĨĨĪĪĬĬĮĮİIĲĲĴĴĶĶĸĹĹĻĻĽĽĿĿŁŁŃŃŅŅŇŇŉŊŊŌŌŎŎŐŐŒŒŔŔŖŖŘŘŚŚŜŜŞŞŠŠŢŢŤŤŦŦŨŨŪŪŬŬŮŮŰŰŲŲŴŴŶŶŸŹŹŻŻŽŽSɃƁƂƂƄƄƆƇƇƉƊƋƋƍƎƏƐƑƑƓƔǶƖƗƘƘȽ\ua7dcƜƝȠƟƠƠƢƢƤƤƦƧƧƩƪƫƬƬƮƯƯƱƲƳƳƵƵƷƸƸƺƻƼƼƾǷǀǁǂǃǄǄǄǇǇǇǊǊǊǍǍǏǏǑǑǓǓǕǕǗǗǙǙǛǛƎǞǞǠǠǢǢǤǤǦǦǨǨǪǪǬǬǮǮǰǱǱǱǴǴǶǷǸǸǺǺǼǼǾǾ"
+ "ȀȀȂȂȄȄȆȆȈȈȊȊȌȌȎȎȐȐȒȒȔȔȖȖȘȘȚȚȜȜȞȞȠȡȢȢȤȤȦȦȨȨȪȪȬȬȮȮȰȰȲȲȴȵȶȷȸȹȺȻȻȽȾⱾⱿɁɁɃɄɅɆɆɈɈɊɊɌɌɎɎⱯⱭⱰƁƆɕƉƊɘƏɚƐꞫɝɞɟƓꞬɢƔ\ua7cbꞍꞪɧƗƖꞮⱢꞭɭɮƜɰⱮƝɳɴƟɶɷɸɹɺɻɼⱤɾɿƦʁꟅƩʄʅʆꞱƮɄƱƲɅʍʎʏʐʑƷʓʔʕʖʗʘʙʚʛʜꞲꞰʟʠʡʢʣʤʥʦʧʨʩʪʫʬʭʮʯʰʱʲʳʴʵʶʷʸʹʺʻʼʽʾʿˀˁ˂˃˄˅ˆˇˈˉˊˋˌˍˎˏːˑ˒˓˔˕˖˗˘˙˚˛˜˝˞˟ˠˡˢˣˤ˥˦˧˨˩˪˫ˬ˭ˮ˯˰˱˲˳˴˵˶˷˸˹˺˻˼˽˾˿̴̵̶̷̸̡̢̧̨̛̖̗̘̙̜̝̞̟̠̣̤̥̦̩̪̫̬̭̮̯̰̱̲̳̹̺̻̼̀́̂̃̄̅̆̇̈̉̊̋̌̍̎̏̐̑̒̓̔̽̾̿̀́͂̓̈́̕̚Ι͇͈͉͍͎͆͊͋͌͏͓͔͕͖͙͚͐͑͒͗͛ͣͤͥͦͧͨͩͪͫͬͭͮͯ͘͜͟͢͝͞͠͡ͰͰͲͲʹ͵ͶͶ\u0378\u0379ͺϽϾϿ;Ϳ\u0380\u0381\u0382\u0383΄΅Ά·ΈΉΊ\u038bΌ\u038dΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ\u03a2ΣΤΥΦΧΨΩΪΫΆΈΉΊΰΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΣΤΥΦΧΨΩΪΫΌΎΏϏΒΘϒϓϔΦΠϏϘϘϚϚϜϜϞϞϠϠϢϢϤϤϦϦϨϨϪϪϬϬϮϮΚΡϹͿϴΕ϶ϷϷϹϺϺϼϽϾϿ"
+ "ЀЁЂЃЄЅІЇЈЉЊЋЌЍЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯЀЁЂЃЄЅІЇЈЉЊЋЌЍЎЏѠѠѢѢѤѤѦѦѨѨѪѪѬѬѮѮѰѰѲѲѴѴѶѶѸѸѺѺѼѼѾѾҀҀ҂҃҄҅҆҇҈҉ҊҊҌҌҎҎҐҐҒҒҔҔҖҖҘҘҚҚҜҜҞҞҠҠҢҢҤҤҦҦҨҨҪҪҬҬҮҮҰҰҲҲҴҴҶҶҸҸҺҺҼҼҾҾӀӁӁӃӃӅӅӇӇӉӉӋӋӍӍӀӐӐӒӒӔӔӖӖӘӘӚӚӜӜӞӞӠӠӢӢӤӤӦӦӨӨӪӪӬӬӮӮӰӰӲӲӴӴӶӶӸӸӺӺӼӼӾӾԀԀԂԂԄԄԆԆԈԈԊԊԌԌԎԎԐԐԒԒԔԔԖԖԘԘԚԚԜԜԞԞԠԠԢԢԤԤԦԦԨԨԪԪԬԬԮԮ\u0530ԱԲԳԴԵԶԷԸԹԺԻԼԽԾԿՀՁՂՃՄՅՆՇՈՉՊՋՌՍՎՏՐՑՒՓՔՕՖ\u0557\u0558ՙ՚՛՜՝՞՟ՠԱԲԳԴԵԶԷԸԹԺԻԼԽԾԿՀՁՂՃՄՅՆՇՈՉՊՋՌՍՎՏՐՑՒՓՔՕՖևֈ։֊\u058b\u058c֍֎֏\u0590ְֱֲֳִֵֶַָֹֺֻּֽ֑֖֛֢֣֤֥֦֧֪֚֭֮֒֓֔֕֗֘֙֜֝֞֟֠֡֨֩֫֬֯־ֿ׀ׁׂ׃ׅׄ׆ׇ\u05c8\u05c9\u05ca\u05cb\u05cc\u05cd\u05ce\u05cfאבגדהוזחטיךכלםמןנסעףפץצקרשת\u05eb\u05ec\u05ed\u05eeׯװױײ׳״\u05f5\u05f6\u05f7\u05f8\u05f9\u05fa\u05fb\u05fc\u05fd\u05fe\u05ff"
+ "؀؁؂؃؄؅؆؇؈؉؊؋،؍؎؏ؘؙؚؐؑؒؓؔؕؖؗ؛؜؝؞؟ؠءآأؤإئابةتثجحخدذرزسشصضطظعغػؼؽؾؿـفقكلمنهوىيًٌٍَُِّْٕٖٜٟٓٔٗ٘ٙٚٛٝٞ٠١٢٣٤٥٦٧٨٩٪٫٬٭ٮٯٰٱٲٳٴٵٶٷٸٹٺٻټٽپٿڀځڂڃڄڅچڇڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙښڛڜڝڞڟڠڡڢڣڤڥڦڧڨکڪګڬڭڮگڰڱڲڳڴڵڶڷڸڹںڻڼڽھڿۀہۂۃۄۅۆۇۈۉۊۋیۍێۏېۑےۓ۔ەۖۗۘۙۚۛۜ۝۞ۣ۟۠ۡۢۤۥۦۧۨ۩۪ۭ۫۬ۮۯ۰۱۲۳۴۵۶۷۸۹ۺۻۼ۽۾ۿ܀܁܂܃܄܅܆܇܈܉܊܋܌܍\u070e܏ܐܑܒܓܔܕܖܗܘܙܚܛܜܝܞܟܠܡܢܣܤܥܦܧܨܩܪܫܬܭܮܯܱܴܷܸܹܻܼܾ݂݄݆݈ܰܲܳܵܶܺܽܿ݀݁݃݅݇݉݊\u074b\u074cݍݎݏݐݑݒݓݔݕݖݗݘݙݚݛݜݝݞݟݠݡݢݣݤݥݦݧݨݩݪݫݬݭݮݯݰݱݲݳݴݵݶݷݸݹݺݻݼݽݾݿހށނރބޅކއވމފދތލގޏސޑޒޓޔޕޖޗޘޙޚޛޜޝޞޟޠޡޢޣޤޥަާިީުޫެޭޮޯްޱ\u07b2\u07b3\u07b4\u07b5\u07b6\u07b7\u07b8\u07b9\u07ba\u07bb\u07bc\u07bd\u07be\u07bf߀߁߂߃߄߅߆߇߈߉ߊߋߌߍߎߏߐߑߒߓߔߕߖߗߘߙߚߛߜߝߞߟߠߡߢߣߤߥߦߧߨߩߪ߲߫߬߭߮߯߰߱߳ߴߵ߶߷߸߹ߺ\u07fb\u07fc߽߾߿"
+ "ࠀࠁࠂࠃࠄࠅࠆࠇࠈࠉࠊࠋࠌࠍࠎࠏࠐࠑࠒࠓࠔࠕࠖࠗ࠘࠙ࠚࠛࠜࠝࠞࠟࠠࠡࠢࠣࠤࠥࠦࠧࠨࠩࠪࠫࠬ࠭\u082e\u082f࠰࠱࠲࠳࠴࠵࠶࠷࠸࠹࠺࠻࠼࠽࠾\u083fࡀࡁࡂࡃࡄࡅࡆࡇࡈࡉࡊࡋࡌࡍࡎࡏࡐࡑࡒࡓࡔࡕࡖࡗࡘ࡙࡚࡛\u085c\u085d࡞\u085fࡠࡡࡢࡣࡤࡥࡦࡧࡨࡩࡪ\u086b\u086c\u086d\u086e\u086fࡰࡱࡲࡳࡴࡵࡶࡷࡸࡹࡺࡻࡼࡽࡾࡿࢀࢁࢂࢃࢄࢅࢆࢇ࢈ࢉࢊࢋࢌࢍࢎ\u088f࢐࢑\u0892\u0893\u0894\u0895\u0896\u0897࢙࢚࢛࢘࢜࢝࢞࢟ࢠࢡࢢࢣࢤࢥࢦࢧࢨࢩࢪࢫࢬࢭࢮࢯࢰࢱࢲࢳࢴࢵࢶࢷࢸࢹࢺࢻࢼࢽࢾࢿࣀࣁࣂࣃࣄࣅࣆࣇࣈࣉ࣏࣐࣑࣒࣓࣊࣋࣌࣍࣎ࣔࣕࣖࣗࣘࣙࣚࣛࣜࣝࣞࣟ࣠࣡࣢ࣰࣱࣲࣣࣦࣩ࣭࣮࣯ࣶࣹࣺࣤࣥࣧࣨ࣪࣫࣬ࣳࣴࣵࣷࣸࣻࣼࣽࣾࣿऀँंःऄअआइईउऊऋऌऍऎएऐऑऒओऔकखगघङचछजझञटठडढणतथदधनऩपफबभमयरऱलळऴवशषसहऺऻ़ऽािीुूृॄॅॆेैॉॊोौ्ॎॏॐ॒॑॓॔ॕॖॗक़ख़ग़ज़ड़ढ़फ़य़ॠॡॢॣ।॥०१२३४५६७८९॰ॱॲॳॴॵॶॷॸॹॺॻॼॽॾॿঀঁংঃ\u0984অআইঈউঊঋঌ\u098d\u098eএঐ\u0991\u0992ওঔকখগঘঙচছজঝঞটঠডঢণতথদধন\u09a9পফবভমযর\u09b1ল\u09b3\u09b4\u09b5শষসহ\u09ba\u09bb়ঽািীুূৃৄ\u09c5\u09c6েৈ\u09c9\u09caোৌ্ৎ\u09cf\u09d0\u09d1\u09d2\u09d3\u09d4\u09d5\u09d6ৗ\u09d8\u09d9\u09da\u09dbড়ঢ়\u09deয়ৠৡৢৣ\u09e4\u09e5০১২৩৪৫৬৭৮৯ৰৱ৲৳৴৵৶৷৸৹৺৻ৼ৽৾\u09ff"
+ "\u0a00ਁਂਃ\u0a04ਅਆਇਈਉਊ\u0a0b\u0a0c\u0a0d\u0a0eਏਐ\u0a11\u0a12ਓਔਕਖਗਘਙਚਛਜਝਞਟਠਡਢਣਤਥਦਧਨ\u0a29ਪਫਬਭਮਯਰ\u0a31ਲਲ਼\u0a34ਵਸ਼\u0a37ਸਹ\u0a3a\u0a3b਼\u0a3dਾਿੀੁੂ\u0a43\u0a44\u0a45\u0a46ੇੈ\u0a49\u0a4aੋੌ੍\u0a4e\u0a4f\u0a50ੑ\u0a52\u0a53\u0a54\u0a55\u0a56\u0a57\u0a58ਖ਼ਗ਼ਜ਼ੜ\u0a5dਫ਼\u0a5f\u0a60\u0a61\u0a62\u0a63\u0a64\u0a65੦੧੨੩੪੫੬੭੮੯ੰੱੲੳੴੵ੶\u0a77\u0a78\u0a79\u0a7a\u0a7b\u0a7c\u0a7d\u0a7e\u0a7f\u0a80ઁંઃ\u0a84અઆઇઈઉઊઋઌઍ\u0a8eએઐઑ\u0a92ઓઔકખગઘઙચછજઝઞટઠડઢણતથદધન\u0aa9પફબભમયર\u0ab1લળ\u0ab4વશષસહ\u0aba\u0abb઼ઽાિીુૂૃૄૅ\u0ac6ેૈૉ\u0acaોૌ્\u0ace\u0acfૐ\u0ad1\u0ad2\u0ad3\u0ad4\u0ad5\u0ad6\u0ad7\u0ad8\u0ad9\u0ada\u0adb\u0adc\u0add\u0ade\u0adfૠૡૢૣ\u0ae4\u0ae5૦૧૨૩૪૫૬૭૮૯૰૱\u0af2\u0af3\u0af4\u0af5\u0af6\u0af7\u0af8ૹૺૻૼ૽૾૿\u0b00ଁଂଃ\u0b04ଅଆଇଈଉଊଋଌ\u0b0d\u0b0eଏଐ\u0b11\u0b12ଓଔକଖଗଘଙଚଛଜଝଞଟଠଡଢଣତଥଦଧନ\u0b29ପଫବଭମଯର\u0b31ଲଳ\u0b34ଵଶଷସହ\u0b3a\u0b3b଼ଽାିୀୁୂୃୄ\u0b45\u0b46େୈ\u0b49\u0b4aୋୌ୍\u0b4e\u0b4f\u0b50\u0b51\u0b52\u0b53\u0b54୕ୖୗ\u0b58\u0b59\u0b5a\u0b5bଡ଼ଢ଼\u0b5eୟୠୡୢୣ\u0b64\u0b65୦୧୨୩୪୫୬୭୮୯୰ୱ୲୳୴୵୶୷\u0b78\u0b79\u0b7a\u0b7b\u0b7c\u0b7d\u0b7e\u0b7f\u0b80\u0b81ஂஃ\u0b84அஆஇஈஉஊ\u0b8b\u0b8c\u0b8dஎஏஐ\u0b91ஒஓஔக\u0b96\u0b97\u0b98ஙச\u0b9bஜ\u0b9dஞட\u0ba0\u0ba1\u0ba2ணத\u0ba5\u0ba6\u0ba7நனப\u0bab\u0bac\u0badமயரறலளழவஶஷஸஹ\u0bba\u0bbb\u0bbc\u0bbdாிீுூ\u0bc3\u0bc4\u0bc5ெேை\u0bc9ொோௌ்\u0bce\u0bcfௐ\u0bd1\u0bd2\u0bd3\u0bd4\u0bd5\u0bd6ௗ\u0bd8\u0bd9\u0bda\u0bdb\u0bdc\u0bdd\u0bde\u0bdf\u0be0\u0be1\u0be2\u0be3\u0be4\u0be5௦௧௨௩௪௫௬௭௮௯௰௱௲௳௴௵௶௷௸௹௺\u0bfb\u0bfc\u0bfd\u0bfe\u0bff"
+ "ఀఁంఃఄఅఆఇఈఉఊఋఌ\u0c0dఎఏఐ\u0c11ఒఓఔకఖగఘఙచఛజఝఞటఠడఢణతథదధన\u0c29పఫబభమయరఱలళఴవశషసహ\u0c3a\u0c3b఼ఽాిీుూృౄ\u0c45ెేై\u0c49ొోౌ్\u0c4e\u0c4f\u0c50\u0c51\u0c52\u0c53\u0c54ౕౖ\u0c57ౘౙౚ\u0c5b\u0c5cౝ\u0c5e\u0c5fౠౡౢౣ\u0c64\u0c65౦౧౨౩౪౫౬౭౮౯\u0c70\u0c71\u0c72\u0c73\u0c74\u0c75\u0c76౷౸౹౺౻౼౽౾౿ಀಁಂಃ಄ಅಆಇಈಉಊಋಌ\u0c8dಎಏಐ\u0c91ಒಓಔಕಖಗಘಙಚಛಜಝಞಟಠಡಢಣತಥದಧನ\u0ca9ಪಫಬಭಮಯರಱಲಳ\u0cb4ವಶಷಸಹ\u0cba\u0cbb಼ಽಾಿೀುೂೃೄ\u0cc5ೆೇೈ\u0cc9ೊೋೌ್\u0cce\u0ccf\u0cd0\u0cd1\u0cd2\u0cd3\u0cd4ೕೖ\u0cd7\u0cd8\u0cd9\u0cda\u0cdb\u0cdcೝೞ\u0cdfೠೡೢೣ\u0ce4\u0ce5೦೧೨೩೪೫೬೭೮೯\u0cf0ೱೲೳ\u0cf4\u0cf5\u0cf6\u0cf7\u0cf8\u0cf9\u0cfa\u0cfb\u0cfc\u0cfd\u0cfe\u0cffഀഁംഃഄഅആഇഈഉഊഋഌ\u0d0dഎഏഐ\u0d11ഒഓഔകഖഗഘങചഛജഝഞടഠഡഢണതഥദധനഩപഫബഭമയരറലളഴവശഷസഹഺ഻഼ഽാിീുൂൃൄ\u0d45െേൈ\u0d49ൊോൌ്ൎ൏\u0d50\u0d51\u0d52\u0d53ൔൕൖൗ൘൙൚൛൜൝൞ൟൠൡൢൣ\u0d64\u0d65൦൧൨൩൪൫൬൭൮൯൰൱൲൳൴൵൶൷൸൹ൺൻർൽൾൿ\u0d80ඁංඃ\u0d84අආඇඈඉඊඋඌඍඎඏඐඑඒඓඔඕඖ\u0d97\u0d98\u0d99කඛගඝඞඟචඡජඣඤඥඦටඨඩඪණඬතථදධන\u0db2ඳපඵබභමඹයර\u0dbcල\u0dbe\u0dbfවශෂසහළෆ\u0dc7\u0dc8\u0dc9්\u0dcb\u0dcc\u0dcd\u0dceාැෑිීු\u0dd5ූ\u0dd7ෘෙේෛොෝෞෟ\u0de0\u0de1\u0de2\u0de3\u0de4\u0de5෦෧෨෩෪෫෬෭෮෯\u0df0\u0df1ෲෳ෴\u0df5\u0df6\u0df7\u0df8\u0df9\u0dfa\u0dfb\u0dfc\u0dfd\u0dfe\u0dff"
+ "\u0e00กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\u0e3b\u0e3c\u0e3d\u0e3e฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛\u0e5c\u0e5d\u0e5e\u0e5f\u0e60\u0e61\u0e62\u0e63\u0e64\u0e65\u0e66\u0e67\u0e68\u0e69\u0e6a\u0e6b\u0e6c\u0e6d\u0e6e\u0e6f\u0e70\u0e71\u0e72\u0e73\u0e74\u0e75\u0e76\u0e77\u0e78\u0e79\u0e7a\u0e7b\u0e7c\u0e7d\u0e7e\u0e7f\u0e80ກຂ\u0e83ຄ\u0e85ຆງຈຉຊ\u0e8bຌຍຎຏຐຑຒຓດຕຖທຘນບປຜຝພຟຠມຢຣ\u0ea4ລ\u0ea6ວຨຩສຫຬອຮຯະັາຳິີຶື຺ຸູົຼຽ\u0ebe\u0ebfເແໂໃໄ\u0ec5ໆ\u0ec7່້໊໋໌ໍ໎\u0ecf໐໑໒໓໔໕໖໗໘໙\u0eda\u0edbໜໝໞໟ\u0ee0\u0ee1\u0ee2\u0ee3\u0ee4\u0ee5\u0ee6\u0ee7\u0ee8\u0ee9\u0eea\u0eeb\u0eec\u0eed\u0eee\u0eef\u0ef0\u0ef1\u0ef2\u0ef3\u0ef4\u0ef5\u0ef6\u0ef7\u0ef8\u0ef9\u0efa\u0efb\u0efc\u0efd\u0efe\u0effༀ༁༂༃༄༅༆༇༈༉༊་༌།༎༏༐༑༒༓༔༕༖༗༘༙༚༛༜༝༞༟༠༡༢༣༤༥༦༧༨༩༪༫༬༭༮༯༰༱༲༳༴༵༶༷༸༹༺༻༼༽༾༿ཀཁགགྷངཅཆཇ\u0f48ཉཊཋཌཌྷཎཏཐདདྷནཔཕབབྷམཙཚཛཛྷཝཞཟའཡརལཤཥསཧཨཀྵཪཫཬ\u0f6d\u0f6e\u0f6f\u0f70ཱཱཱིིུུྲྀཷླྀཹེཻོཽཾཿ྄ཱྀྀྂྃ྅྆྇ྈྉྊྋྌྍྎྏྐྑྒྒྷྔྕྖྗ\u0f98ྙྚྛྜྜྷྞྟྠྡྡྷྣྤྥྦྦྷྨྩྪྫྫྷྭྮྯྰྱྲླྴྵྶྷྸྐྵྺྻྼ\u0fbd྾྿࿀࿁࿂࿃࿄࿅࿆࿇࿈࿉࿊࿋࿌\u0fcd࿎࿏࿐࿑࿒࿓࿔࿕࿖࿗࿘࿙࿚\u0fdb\u0fdc\u0fdd\u0fde\u0fdf\u0fe0\u0fe1\u0fe2\u0fe3\u0fe4\u0fe5\u0fe6\u0fe7\u0fe8\u0fe9\u0fea\u0feb\u0fec\u0fed\u0fee\u0fef\u0ff0\u0ff1\u0ff2\u0ff3\u0ff4\u0ff5\u0ff6\u0ff7\u0ff8\u0ff9\u0ffa\u0ffb\u0ffc\u0ffd\u0ffe\u0fff"
+ "ကခဂဃငစဆဇဈဉညဋဌဍဎဏတထဒဓနပဖဗဘမယရလဝသဟဠအဢဣဤဥဦဧဨဩဪါာိီုူေဲဳဴဵံ့း္်ျြွှဿ၀၁၂၃၄၅၆၇၈၉၊။၌၍၎၏ၐၑၒၓၔၕၖၗၘၙၚၛၜၝၞၟၠၡၢၣၤၥၦၧၨၩၪၫၬၭၮၯၰၱၲၳၴၵၶၷၸၹၺၻၼၽၾၿႀႁႂႃႄႅႆႇႈႉႊႋႌႍႎႏ႐႑႒႓႔႕႖႗႘႙ႚႛႜႝ႞႟ႠႡႢႣႤႥႦႧႨႩႪႫႬႭႮႯႰႱႲႳႴႵႶႷႸႹႺႻႼႽႾႿჀჁჂჃჄჅ\u10c6Ⴧ\u10c8\u10c9\u10ca\u10cb\u10ccჍ\u10ce\u10cfᲐᲑᲒᲓᲔᲕᲖᲗᲘᲙᲚᲛᲜᲝᲞᲟᲠᲡᲢᲣᲤᲥᲦᲧᲨᲩᲪᲫᲬᲭᲮᲯᲰᲱᲲᲳᲴᲵᲶᲷᲸᲹᲺ჻ჼᲽᲾᲿᄀᄁᄂᄃᄄᄅᄆᄇᄈᄉᄊᄋᄌᄍᄎᄏᄐᄑᄒᄓᄔᄕᄖᄗᄘᄙᄚᄛᄜᄝᄞᄟᄠᄡᄢᄣᄤᄥᄦᄧᄨᄩᄪᄫᄬᄭᄮᄯᄰᄱᄲᄳᄴᄵᄶᄷᄸᄹᄺᄻᄼᄽᄾᄿᅀᅁᅂᅃᅄᅅᅆᅇᅈᅉᅊᅋᅌᅍᅎᅏᅐᅑᅒᅓᅔᅕᅖᅗᅘᅙᅚᅛᅜᅝᅞᅟᅠᅡᅢᅣᅤᅥᅦᅧᅨᅩᅪᅫᅬᅭᅮᅯᅰᅱᅲᅳᅴᅵᅶᅷᅸᅹᅺᅻᅼᅽᅾᅿᆀᆁᆂᆃᆄᆅᆆᆇᆈᆉᆊᆋᆌᆍᆎᆏᆐᆑᆒᆓᆔᆕᆖᆗᆘᆙᆚᆛᆜᆝᆞᆟᆠᆡᆢᆣᆤᆥᆦᆧᆨᆩᆪᆫᆬᆭᆮᆯᆰᆱᆲᆳᆴᆵᆶᆷᆸᆹᆺᆻᆼᆽᆾᆿᇀᇁᇂᇃᇄᇅᇆᇇᇈᇉᇊᇋᇌᇍᇎᇏᇐᇑᇒᇓᇔᇕᇖᇗᇘᇙᇚᇛᇜᇝᇞᇟᇠᇡᇢᇣᇤᇥᇦᇧᇨᇩᇪᇫᇬᇭᇮᇯᇰᇱᇲᇳᇴᇵᇶᇷᇸᇹᇺᇻᇼᇽᇾᇿ"
+ "ሀሁሂሃሄህሆሇለሉሊላሌልሎሏሐሑሒሓሔሕሖሗመሙሚማሜምሞሟሠሡሢሣሤሥሦሧረሩሪራሬርሮሯሰሱሲሳሴስሶሷሸሹሺሻሼሽሾሿቀቁቂቃቄቅቆቇቈ\u1249ቊቋቌቍ\u124e\u124fቐቑቒቓቔቕቖ\u1257ቘ\u1259ቚቛቜቝ\u125e\u125fበቡቢባቤብቦቧቨቩቪቫቬቭቮቯተቱቲታቴትቶቷቸቹቺቻቼችቾቿኀኁኂኃኄኅኆኇኈ\u1289ኊኋኌኍ\u128e\u128fነኑኒናኔንኖኗኘኙኚኛኜኝኞኟአኡኢኣኤእኦኧከኩኪካኬክኮኯኰ\u12b1ኲኳኴኵ\u12b6\u12b7ኸኹኺኻኼኽኾ\u12bfዀ\u12c1ዂዃዄዅ\u12c6\u12c7ወዉዊዋዌውዎዏዐዑዒዓዔዕዖ\u12d7ዘዙዚዛዜዝዞዟዠዡዢዣዤዥዦዧየዩዪያዬይዮዯደዱዲዳዴድዶዷዸዹዺዻዼዽዾዿጀጁጂጃጄጅጆጇገጉጊጋጌግጎጏጐ\u1311ጒጓጔጕ\u1316\u1317ጘጙጚጛጜጝጞጟጠጡጢጣጤጥጦጧጨጩጪጫጬጭጮጯጰጱጲጳጴጵጶጷጸጹጺጻጼጽጾጿፀፁፂፃፄፅፆፇፈፉፊፋፌፍፎፏፐፑፒፓፔፕፖፗፘፙፚ\u135b\u135c፝፞፟፠፡።፣፤፥፦፧፨፩፪፫፬፭፮፯፰፱፲፳፴፵፶፷፸፹፺፻፼\u137d\u137e\u137fᎀᎁᎂᎃᎄᎅᎆᎇᎈᎉᎊᎋᎌᎍᎎᎏ᎐᎑᎒᎓᎔᎕᎖᎗᎘᎙\u139a\u139b\u139c\u139d\u139e\u139fᎠᎡᎢᎣᎤᎥᎦᎧᎨᎩᎪᎫᎬᎭᎮᎯᎰᎱᎲᎳᎴᎵᎶᎷᎸᎹᎺᎻᎼᎽᎾᎿᏀᏁᏂᏃᏄᏅᏆᏇᏈᏉᏊᏋᏌᏍᏎᏏᏐᏑᏒᏓᏔᏕᏖᏗᏘᏙᏚᏛᏜᏝᏞᏟᏠᏡᏢᏣᏤᏥᏦᏧᏨᏩᏪᏫᏬᏭᏮᏯᏰᏱᏲᏳᏴᏵ\u13f6\u13f7ᏰᏱᏲᏳᏴᏵ\u13fe\u13ff"
+ "᐀ᐁᐂᐃᐄᐅᐆᐇᐈᐉᐊᐋᐌᐍᐎᐏᐐᐑᐒᐓᐔᐕᐖᐗᐘᐙᐚᐛᐜᐝᐞᐟᐠᐡᐢᐣᐤᐥᐦᐧᐨᐩᐪᐫᐬᐭᐮᐯᐰᐱᐲᐳᐴᐵᐶᐷᐸᐹᐺᐻᐼᐽᐾᐿᑀᑁᑂᑃᑄᑅᑆᑇᑈᑉᑊᑋᑌᑍᑎᑏᑐᑑᑒᑓᑔᑕᑖᑗᑘᑙᑚᑛᑜᑝᑞᑟᑠᑡᑢᑣᑤᑥᑦᑧᑨᑩᑪᑫᑬᑭᑮᑯᑰᑱᑲᑳᑴᑵᑶᑷᑸᑹᑺᑻᑼᑽᑾᑿᒀᒁᒂᒃᒄᒅᒆᒇᒈᒉᒊᒋᒌᒍᒎᒏᒐᒑᒒᒓᒔᒕᒖᒗᒘᒙᒚᒛᒜᒝᒞᒟᒠᒡᒢᒣᒤᒥᒦᒧᒨᒩᒪᒫᒬᒭᒮᒯᒰᒱᒲᒳᒴᒵᒶᒷᒸᒹᒺᒻᒼᒽᒾᒿᓀᓁᓂᓃᓄᓅᓆᓇᓈᓉᓊᓋᓌᓍᓎᓏᓐᓑᓒᓓᓔᓕᓖᓗᓘᓙᓚᓛᓜᓝᓞᓟᓠᓡᓢᓣᓤᓥᓦᓧᓨᓩᓪᓫᓬᓭᓮᓯᓰᓱᓲᓳᓴᓵᓶᓷᓸᓹᓺᓻᓼᓽᓾᓿᔀᔁᔂᔃᔄᔅᔆᔇᔈᔉᔊᔋᔌᔍᔎᔏᔐᔑᔒᔓᔔᔕᔖᔗᔘᔙᔚᔛᔜᔝᔞᔟᔠᔡᔢᔣᔤᔥᔦᔧᔨᔩᔪᔫᔬᔭᔮᔯᔰᔱᔲᔳᔴᔵᔶᔷᔸᔹᔺᔻᔼᔽᔾᔿᕀᕁᕂᕃᕄᕅᕆᕇᕈᕉᕊᕋᕌᕍᕎᕏᕐᕑᕒᕓᕔᕕᕖᕗᕘᕙᕚᕛᕜᕝᕞᕟᕠᕡᕢᕣᕤᕥᕦᕧᕨᕩᕪᕫᕬᕭᕮᕯᕰᕱᕲᕳᕴᕵᕶᕷᕸᕹᕺᕻᕼᕽᕾᕿᖀᖁᖂᖃᖄᖅᖆᖇᖈᖉᖊᖋᖌᖍᖎᖏᖐᖑᖒᖓᖔᖕᖖᖗᖘᖙᖚᖛᖜᖝᖞᖟᖠᖡᖢᖣᖤᖥᖦᖧᖨᖩᖪᖫᖬᖭᖮᖯᖰᖱᖲᖳᖴᖵᖶᖷᖸᖹᖺᖻᖼᖽᖾᖿᗀᗁᗂᗃᗄᗅᗆᗇᗈᗉᗊᗋᗌᗍᗎᗏᗐᗑᗒᗓᗔᗕᗖᗗᗘᗙᗚᗛᗜᗝᗞᗟᗠᗡᗢᗣᗤᗥᗦᗧᗨᗩᗪᗫᗬᗭᗮᗯᗰᗱᗲᗳᗴᗵᗶᗷᗸᗹᗺᗻᗼᗽᗾᗿ"
+ "ᘀᘁᘂᘃᘄᘅᘆᘇᘈᘉᘊᘋᘌᘍᘎᘏᘐᘑᘒᘓᘔᘕᘖᘗᘘᘙᘚᘛᘜᘝᘞᘟᘠᘡᘢᘣᘤᘥᘦᘧᘨᘩᘪᘫᘬᘭᘮᘯᘰᘱᘲᘳᘴᘵᘶᘷᘸᘹᘺᘻᘼᘽᘾᘿᙀᙁᙂᙃᙄᙅᙆᙇᙈᙉᙊᙋᙌᙍᙎᙏᙐᙑᙒᙓᙔᙕᙖᙗᙘᙙᙚᙛᙜᙝᙞᙟᙠᙡᙢᙣᙤᙥᙦᙧᙨᙩᙪᙫᙬ᙭᙮ᙯᙰᙱᙲᙳᙴᙵᙶᙷᙸᙹᙺᙻᙼᙽᙾᙿ ᚁᚂᚃᚄᚅᚆᚇᚈᚉᚊᚋᚌᚍᚎᚏᚐᚑᚒᚓᚔᚕᚖᚗᚘᚙᚚ᚛᚜\u169d\u169e\u169fᚠᚡᚢᚣᚤᚥᚦᚧᚨᚩᚪᚫᚬᚭᚮᚯᚰᚱᚲᚳᚴᚵᚶᚷᚸᚹᚺᚻᚼᚽᚾᚿᛀᛁᛂᛃᛄᛅᛆᛇᛈᛉᛊᛋᛌᛍᛎᛏᛐᛑᛒᛓᛔᛕᛖᛗᛘᛙᛚᛛᛜᛝᛞᛟᛠᛡᛢᛣᛤᛥᛦᛧᛨᛩᛪ᛫᛬᛭ᛮᛯᛰᛱᛲᛳᛴᛵᛶᛷᛸ\u16f9\u16fa\u16fb\u16fc\u16fd\u16fe\u16ffᜀᜁᜂᜃᜄᜅᜆᜇᜈᜉᜊᜋᜌᜍᜎᜏᜐᜑᜒᜓ᜔᜕\u1716\u1717\u1718\u1719\u171a\u171b\u171c\u171d\u171eᜟᜠᜡᜢᜣᜤᜥᜦᜧᜨᜩᜪᜫᜬᜭᜮᜯᜰᜱᜲᜳ᜴᜵᜶\u1737\u1738\u1739\u173a\u173b\u173c\u173d\u173e\u173fᝀᝁᝂᝃᝄᝅᝆᝇᝈᝉᝊᝋᝌᝍᝎᝏᝐᝑᝒᝓ\u1754\u1755\u1756\u1757\u1758\u1759\u175a\u175b\u175c\u175d\u175e\u175fᝠᝡᝢᝣᝤᝥᝦᝧᝨᝩᝪᝫᝬ\u176dᝮᝯᝰ\u1771ᝲᝳ\u1774\u1775\u1776\u1777\u1778\u1779\u177a\u177b\u177c\u177d\u177e\u177fកខគឃងចឆជឈញដឋឌឍណតថទធនបផពភមយរលវឝឞសហឡអឣឤឥឦឧឨឩឪឫឬឭឮឯឰឱឲឳ឴឵ាិីឹឺុូួើឿៀេែៃោៅំះៈ៉៊់៌៍៎៏័៑្៓។៕៖ៗ៘៙៚៛ៜ៝\u17de\u17df០១២៣៤៥៦៧៨៩\u17ea\u17eb\u17ec\u17ed\u17ee\u17ef៰៱៲៳៴៵៶៷៸៹\u17fa\u17fb\u17fc\u17fd\u17fe\u17ff"
+ "᠀᠁᠂᠃᠄᠅᠆᠇᠈᠉᠊᠋᠌᠍᠎᠏᠐᠑᠒᠓᠔᠕᠖᠗᠘᠙\u181a\u181b\u181c\u181d\u181e\u181fᠠᠡᠢᠣᠤᠥᠦᠧᠨᠩᠪᠫᠬᠭᠮᠯᠰᠱᠲᠳᠴᠵᠶᠷᠸᠹᠺᠻᠼᠽᠾᠿᡀᡁᡂᡃᡄᡅᡆᡇᡈᡉᡊᡋᡌᡍᡎᡏᡐᡑᡒᡓᡔᡕᡖᡗᡘᡙᡚᡛᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯᡰᡱᡲᡳᡴᡵᡶᡷᡸ\u1879\u187a\u187b\u187c\u187d\u187e\u187fᢀᢁᢂᢃᢄᢅᢆᢇᢈᢉᢊᢋᢌᢍᢎᢏᢐᢑᢒᢓᢔᢕᢖᢗᢘᢙᢚᢛᢜᢝᢞᢟᢠᢡᢢᢣᢤᢥᢦᢧᢨᢩᢪ\u18ab\u18ac\u18ad\u18ae\u18afᢰᢱᢲᢳᢴᢵᢶᢷᢸᢹᢺᢻᢼᢽᢾᢿᣀᣁᣂᣃᣄᣅᣆᣇᣈᣉᣊᣋᣌᣍᣎᣏᣐᣑᣒᣓᣔᣕᣖᣗᣘᣙᣚᣛᣜᣝᣞᣟᣠᣡᣢᣣᣤᣥᣦᣧᣨᣩᣪᣫᣬᣭᣮᣯᣰᣱᣲᣳᣴᣵ\u18f6\u18f7\u18f8\u18f9\u18fa\u18fb\u18fc\u18fd\u18fe\u18ffᤀᤁᤂᤃᤄᤅᤆᤇᤈᤉᤊᤋᤌᤍᤎᤏᤐᤑᤒᤓᤔᤕᤖᤗᤘᤙᤚᤛᤜᤝᤞ\u191fᤠᤡᤢᤣᤤᤥᤦᤧᤨᤩᤪᤫ\u192c\u192d\u192e\u192fᤰᤱᤲᤳᤴᤵᤶᤷᤸ᤻᤹᤺\u193c\u193d\u193e\u193f᥀\u1941\u1942\u1943᥄᥅᥆᥇᥈᥉᥊᥋᥌᥍᥎᥏ᥐᥑᥒᥓᥔᥕᥖᥗᥘᥙᥚᥛᥜᥝᥞᥟᥠᥡᥢᥣᥤᥥᥦᥧᥨᥩᥪᥫᥬᥭ\u196e\u196fᥰᥱᥲᥳᥴ\u1975\u1976\u1977\u1978\u1979\u197a\u197b\u197c\u197d\u197e\u197fᦀᦁᦂᦃᦄᦅᦆᦇᦈᦉᦊᦋᦌᦍᦎᦏᦐᦑᦒᦓᦔᦕᦖᦗᦘᦙᦚᦛᦜᦝᦞᦟᦠᦡᦢᦣᦤᦥᦦᦧᦨᦩᦪᦫ\u19ac\u19ad\u19ae\u19afᦰᦱᦲᦳᦴᦵᦶᦷᦸᦹᦺᦻᦼᦽᦾᦿᧀᧁᧂᧃᧄᧅᧆᧇᧈᧉ\u19ca\u19cb\u19cc\u19cd\u19ce\u19cf᧐᧑᧒᧓᧔᧕᧖᧗᧘᧙᧚\u19db\u19dc\u19dd᧞᧟᧠᧡᧢᧣᧤᧥᧦᧧᧨᧩᧪᧫᧬᧭᧮᧯᧰᧱᧲᧳᧴᧵᧶᧷᧸᧹᧺᧻᧼᧽᧾᧿"
+ "ᨀᨁᨂᨃᨄᨅᨆᨇᨈᨉᨊᨋᨌᨍᨎᨏᨐᨑᨒᨓᨔᨕᨖᨘᨗᨙᨚᨛ\u1a1c\u1a1d᨞᨟ᨠᨡᨢᨣᨤᨥᨦᨧᨨᨩᨪᨫᨬᨭᨮᨯᨰᨱᨲᨳᨴᨵᨶᨷᨸᨹᨺᨻᨼᨽᨾᨿᩀᩁᩂᩃᩄᩅᩆᩇᩈᩉᩊᩋᩌᩍᩎᩏᩐᩑᩒᩓᩔᩕᩖᩗᩘᩙᩚᩛᩜᩝᩞ\u1a5f᩠ᩡᩢᩣᩤᩥᩦᩧᩨᩩᩪᩫᩬᩭᩮᩯᩰᩱᩲᩳᩴ᩵᩶᩷᩸᩹᩺᩻᩼\u1a7d\u1a7e᩿᪀᪁᪂᪃᪄᪅᪆᪇᪈᪉\u1a8a\u1a8b\u1a8c\u1a8d\u1a8e\u1a8f᪐᪑᪒᪓᪔᪕᪖᪗᪘᪙\u1a9a\u1a9b\u1a9c\u1a9d\u1a9e\u1a9f᪠᪡᪢᪣᪤᪥᪦ᪧ᪨᪩᪪᪫᪬᪭\u1aae\u1aaf᪵᪶᪷᪸᪹᪺᪽᪰᪱᪲᪳᪴᪻᪼᪾ᪿᫀ᫃᫄᫊᫁᫂᫅᫆᫇᫈᫉᫋ᫌᫍᫎ\u1acf\u1ad0\u1ad1\u1ad2\u1ad3\u1ad4\u1ad5\u1ad6\u1ad7\u1ad8\u1ad9\u1ada\u1adb\u1adc\u1add\u1ade\u1adf\u1ae0\u1ae1\u1ae2\u1ae3\u1ae4\u1ae5\u1ae6\u1ae7\u1ae8\u1ae9\u1aea\u1aeb\u1aec\u1aed\u1aee\u1aef\u1af0\u1af1\u1af2\u1af3\u1af4\u1af5\u1af6\u1af7\u1af8\u1af9\u1afa\u1afb\u1afc\u1afd\u1afe\u1affᬀᬁᬂᬃᬄᬅᬆᬇᬈᬉᬊᬋᬌᬍᬎᬏᬐᬑᬒᬓᬔᬕᬖᬗᬘᬙᬚᬛᬜᬝᬞᬟᬠᬡᬢᬣᬤᬥᬦᬧᬨᬩᬪᬫᬬᬭᬮᬯᬰᬱᬲᬳ᬴ᬵᬶᬷᬸᬹᬺᬻᬼᬽᬾᬿᭀᭁᭂᭃ᭄ᭅᭆᭇᭈᭉᭊᭋᭌ\u1b4d\u1b4e\u1b4f᭐᭑᭒᭓᭔᭕᭖᭗᭘᭙᭚᭛᭜᭝᭞᭟᭠᭡᭢᭣᭤᭥᭦᭧᭨᭩᭪᭬᭫᭭᭮᭯᭰᭱᭲᭳᭴᭵᭶᭷᭸᭹᭺᭻᭼᭽᭾\u1b7fᮀᮁᮂᮃᮄᮅᮆᮇᮈᮉᮊᮋᮌᮍᮎᮏᮐᮑᮒᮓᮔᮕᮖᮗᮘᮙᮚᮛᮜᮝᮞᮟᮠᮡᮢᮣᮤᮥᮦᮧᮨᮩ᮪᮫ᮬᮭᮮᮯ᮰᮱᮲᮳᮴᮵᮶᮷᮸᮹ᮺᮻᮼᮽᮾᮿᯀᯁᯂᯃᯄᯅᯆᯇᯈᯉᯊᯋᯌᯍᯎᯏᯐᯑᯒᯓᯔᯕᯖᯗᯘᯙᯚᯛᯜᯝᯞᯟᯠᯡᯢᯣᯤᯥ᯦ᯧᯨᯩᯪᯫᯬᯭᯮᯯᯰᯱ᯲᯳\u1bf4\u1bf5\u1bf6\u1bf7\u1bf8\u1bf9\u1bfa\u1bfb᯼᯽᯾᯿"
+ "ᰀᰁᰂᰃᰄᰅᰆᰇᰈᰉᰊᰋᰌᰍᰎᰏᰐᰑᰒᰓᰔᰕᰖᰗᰘᰙᰚᰛᰜᰝᰞᰟᰠᰡᰢᰣᰤᰥᰦᰧᰨᰩᰪᰫᰬᰭᰮᰯᰰᰱᰲᰳᰴᰵᰶ᰷\u1c38\u1c39\u1c3a᰻᰼᰽᰾᰿᱀᱁᱂᱃᱄᱅᱆᱇᱈᱉\u1c4a\u1c4b\u1c4cᱍᱎᱏ᱐᱑᱒᱓᱔᱕᱖᱗᱘᱙ᱚᱛᱜᱝᱞᱟᱠᱡᱢᱣᱤᱥᱦᱧᱨᱩᱪᱫᱬᱭᱮᱯᱰᱱᱲᱳᱴᱵᱶᱷᱸᱹᱺᱻᱼᱽ᱾᱿ВДОСТТЪѢꙊ\u1c89\u1c89\u1c8b\u1c8c\u1c8d\u1c8e\u1c8fᲐᲑᲒᲓᲔᲕᲖᲗᲘᲙᲚᲛᲜᲝᲞᲟᲠᲡᲢᲣᲤᲥᲦᲧᲨᲩᲪᲫᲬᲭᲮᲯᲰᲱᲲᲳᲴᲵᲶᲷᲸᲹᲺ\u1cbb\u1cbcᲽᲾᲿ᳀᳁᳂᳃᳄᳅᳆᳇\u1cc8\u1cc9\u1cca\u1ccb\u1ccc\u1ccd\u1cce\u1ccf᳐᳑᳒᳓᳔᳕᳖᳗᳘᳙᳜᳝᳞᳟᳚᳛᳠᳡᳢᳣᳤᳥᳦᳧᳨ᳩᳪᳫᳬ᳭ᳮᳯᳰᳱᳲᳳ᳴ᳵᳶ᳷᳸᳹ᳺ\u1cfb\u1cfc\u1cfd\u1cfe\u1cffᴀᴁᴂᴃᴄᴅᴆᴇᴈᴉᴊᴋᴌᴍᴎᴏᴐᴑᴒᴓᴔᴕᴖᴗᴘᴙᴚᴛᴜᴝᴞᴟᴠᴡᴢᴣᴤᴥᴦᴧᴨᴩᴪᴫᴬᴭᴮᴯᴰᴱᴲᴳᴴᴵᴶᴷᴸᴹᴺᴻᴼᴽᴾᴿᵀᵁᵂᵃᵄᵅᵆᵇᵈᵉᵊᵋᵌᵍᵎᵏᵐᵑᵒᵓᵔᵕᵖᵗᵘᵙᵚᵛᵜᵝᵞᵟᵠᵡᵢᵣᵤᵥᵦᵧᵨᵩᵪᵫᵬᵭᵮᵯᵰᵱᵲᵳᵴᵵᵶᵷᵸꝽᵺᵻᵼⱣᵾᵿᶀᶁᶂᶃᶄᶅᶆᶇᶈᶉᶊᶋᶌᶍꟆᶏᶐᶑᶒᶓᶔᶕᶖᶗᶘᶙᶚᶛᶜᶝᶞᶟᶠᶡᶢᶣᶤᶥᶦᶧᶨᶩᶪᶫᶬᶭᶮᶯᶰᶱᶲᶳᶴᶵᶶᶷᶸᶹᶺᶻᶼᶽᶾᶿ᷐᷎᷺᷂᷊᷏᷹᷽᷿᷷᷸᷀᷁᷃᷄᷅᷆᷇᷈᷉᷋᷌᷑᷒ᷓᷔᷕᷖᷗᷘᷙᷚᷛᷜᷝᷞᷟᷠᷡᷢᷣᷤᷥᷦᷧᷨᷩᷪᷫᷬᷭᷮᷯᷰᷱᷲᷳᷴ᷵᷻᷾᷶᷼᷍"
+ "ḀḀḂḂḄḄḆḆḈḈḊḊḌḌḎḎḐḐḒḒḔḔḖḖḘḘḚḚḜḜḞḞḠḠḢḢḤḤḦḦḨḨḪḪḬḬḮḮḰḰḲḲḴḴḶḶḸḸḺḺḼḼḾḾṀṀṂṂṄṄṆṆṈṈṊṊṌṌṎṎṐṐṒṒṔṔṖṖṘṘṚṚṜṜṞṞṠṠṢṢṤṤṦṦṨṨṪṪṬṬṮṮṰṰṲṲṴṴṶṶṸṸṺṺṼṼṾṾẀẀẂẂẄẄẆẆẈẈẊẊẌẌẎẎẐẐẒẒẔẔẖẗẘẙẚṠẜẝẞẟẠẠẢẢẤẤẦẦẨẨẪẪẬẬẮẮẰẰẲẲẴẴẶẶẸẸẺẺẼẼẾẾỀỀỂỂỄỄỆỆỈỈỊỊỌỌỎỎỐỐỒỒỔỔỖỖỘỘỚỚỜỜỞỞỠỠỢỢỤỤỦỦỨỨỪỪỬỬỮỮỰỰỲỲỴỴỶỶỸỸỺỺỼỼỾỾἈἉἊἋἌἍἎἏἈἉἊἋἌἍἎἏἘἙἚἛἜἝ\u1f16\u1f17ἘἙἚἛἜἝ\u1f1e\u1f1fἨἩἪἫἬἭἮἯἨἩἪἫἬἭἮἯἸἹἺἻἼἽἾἿἸἹἺἻἼἽἾἿὈὉὊὋὌὍ\u1f46\u1f47ὈὉὊὋὌὍ\u1f4e\u1f4fὐὙὒὛὔὝὖὟ\u1f58Ὑ\u1f5aὛ\u1f5cὝ\u1f5eὟὨὩὪὫὬὭὮὯὨὩὪὫὬὭὮὯᾺΆῈΈῊΉῚΊῸΌῪΎῺΏ\u1f7e\u1f7fᾈᾉᾊᾋᾌᾍᾎᾏᾈᾉᾊᾋᾌᾍᾎᾏᾘᾙᾚᾛᾜᾝᾞᾟᾘᾙᾚᾛᾜᾝᾞᾟᾨᾩᾪᾫᾬᾭᾮᾯᾨᾩᾪᾫᾬᾭᾮᾯᾸᾹᾲᾼᾴ\u1fb5ᾶᾷᾸᾹᾺΆᾼ᾽Ι᾿῀῁ῂῌῄ\u1fc5ῆῇῈΈῊΉῌ῍῎῏ῘῙῒΐ\u1fd4\u1fd5ῖῗῘῙῚΊ\u1fdc῝῞῟ῨῩῢΰῤῬῦῧῨῩῪΎῬ῭΅`\u1ff0\u1ff1ῲῼῴ\u1ff5ῶῷῸΌῺΏῼ´῾\u1fff"
+ "           ​‌‍‎‏‐‑‒–—―‖‗‘’‚‛“”„‟†‡•‣․‥…‧  ‪‫‬‭‮ ‰‱′″‴‵‶‷‸‹›※‼‽‾‿⁀⁁⁂⁃⁄⁅⁆⁇⁈⁉⁊⁋⁌⁍⁎⁏⁐⁑⁒⁓⁔⁕⁖⁗⁘⁙⁚⁛⁜⁝⁞ ⁠⁡⁢⁣⁤\u2065⁦⁧⁨⁩⁪⁫⁬⁭⁮⁯⁰ⁱ\u2072\u2073⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾ⁿ₀₁₂₃₄₅₆₇₈₉₊₋₌₍₎\u208fₐₑₒₓₔₕₖₗₘₙₚₛₜ\u209d\u209e\u209f₠₡₢₣₤₥₦₧₨₩₪₫€₭₮₯₰₱₲₳₴₵₶₷₸₹₺₻₼₽₾₿⃀\u20c1\u20c2\u20c3\u20c4\u20c5\u20c6\u20c7\u20c8\u20c9\u20ca\u20cb\u20cc\u20cd\u20ce\u20cf⃒⃓⃘⃙⃚⃐⃑⃔⃕⃖⃗⃛⃜⃝⃞⃟⃠⃡⃢⃣⃤⃥⃦⃪⃫⃨⃬⃭⃮⃯⃧⃩⃰\u20f1\u20f2\u20f3\u20f4\u20f5\u20f6\u20f7\u20f8\u20f9\u20fa\u20fb\u20fc\u20fd\u20fe\u20ff℀℁ℂ℃℄℅℆ℇ℈℉ℊℋℌℍℎℏℐℑℒℓ℔ℕ№℗℘ℙℚℛℜℝ℞℟℠℡™℣ℤ℥Ω℧ℨ℩KÅℬℭ℮ℯℰℱℲℳℴℵℶℷℸℹ℺℻ℼℽℾℿ⅀⅁⅂⅃⅄ⅅⅆⅇⅈⅉ⅊⅋⅌⅍Ⅎ⅏⅐⅑⅒⅓⅔⅕⅖⅗⅘⅙⅚⅛⅜⅝⅞⅟ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅬⅭⅮⅯⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫⅬⅭⅮⅯↀↁↂↃↃↅↆↇↈ↉↊↋\u218c\u218d\u218e\u218f←↑→↓↔↕↖↗↘↙↚↛↜↝↞↟↠↡↢↣↤↥↦↧↨↩↪↫↬↭↮↯↰↱↲↳↴↵↶↷↸↹↺↻↼↽↾↿⇀⇁⇂⇃⇄⇅⇆⇇⇈⇉⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇚⇛⇜⇝⇞⇟⇠⇡⇢⇣⇤⇥⇦⇧⇨⇩⇪⇫⇬⇭⇮⇯⇰⇱⇲⇳⇴⇵⇶⇷⇸⇹⇺⇻⇼⇽⇾⇿"
+ "∀∁∂∃∄∅∆∇∈∉∊∋∌∍∎∏∐∑−∓∔∕∖∗∘∙√∛∜∝∞∟∠∡∢∣∤∥∦∧∨∩∪∫∬∭∮∯∰∱∲∳∴∵∶∷∸∹∺∻∼∽∾∿≀≁≂≃≄≅≆≇≈≉≊≋≌≍≎≏≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟≠≡≢≣≤≥≦≧≨≩≪≫≬≭≮≯≰≱≲≳≴≵≶≷≸≹≺≻≼≽≾≿⊀⊁⊂⊃⊄⊅⊆⊇⊈⊉⊊⊋⊌⊍⊎⊏⊐⊑⊒⊓⊔⊕⊖⊗⊘⊙⊚⊛⊜⊝⊞⊟⊠⊡⊢⊣⊤⊥⊦⊧⊨⊩⊪⊫⊬⊭⊮⊯⊰⊱⊲⊳⊴⊵⊶⊷⊸⊹⊺⊻⊼⊽⊾⊿⋀⋁⋂⋃⋄⋅⋆⋇⋈⋉⋊⋋⋌⋍⋎⋏⋐⋑⋒⋓⋔⋕⋖⋗⋘⋙⋚⋛⋜⋝⋞⋟⋠⋡⋢⋣⋤⋥⋦⋧⋨⋩⋪⋫⋬⋭⋮⋯⋰⋱⋲⋳⋴⋵⋶⋷⋸⋹⋺⋻⋼⋽⋾⋿⌀⌁⌂⌃⌄⌅⌆⌇⌈⌉⌊⌋⌌⌍⌎⌏⌐⌑⌒⌓⌔⌕⌖⌗⌘⌙⌚⌛⌜⌝⌞⌟⌠⌡⌢⌣⌤⌥⌦⌧⌨〈〉⌫⌬⌭⌮⌯⌰⌱⌲⌳⌴⌵⌶⌷⌸⌹⌺⌻⌼⌽⌾⌿⍀⍁⍂⍃⍄⍅⍆⍇⍈⍉⍊⍋⍌⍍⍎⍏⍐⍑⍒⍓⍔⍕⍖⍗⍘⍙⍚⍛⍜⍝⍞⍟⍠⍡⍢⍣⍤⍥⍦⍧⍨⍩⍪⍫⍬⍭⍮⍯⍰⍱⍲⍳⍴⍵⍶⍷⍸⍹⍺⍻⍼⍽⍾⍿⎀⎁⎂⎃⎄⎅⎆⎇⎈⎉⎊⎋⎌⎍⎎⎏⎐⎑⎒⎓⎔⎕⎖⎗⎘⎙⎚⎛⎜⎝⎞⎟⎠⎡⎢⎣⎤⎥⎦⎧⎨⎩⎪⎫⎬⎭⎮⎯⎰⎱⎲⎳⎴⎵⎶⎷⎸⎹⎺⎻⎼⎽⎾⎿⏀⏁⏂⏃⏄⏅⏆⏇⏈⏉⏊⏋⏌⏍⏎⏏⏐⏑⏒⏓⏔⏕⏖⏗⏘⏙⏚⏛⏜⏝⏞⏟⏠⏡⏢⏣⏤⏥⏦⏧⏨⏩⏪⏫⏬⏭⏮⏯⏰⏱⏲⏳⏴⏵⏶⏷⏸⏹⏺⏻⏼⏽⏾⏿"
+ "␀␁␂␃␄␅␆␇␈␉␊␋␌␍␎␏␐␑␒␓␔␕␖␗␘␙␚␛␜␝␞␟␠␡␢␣␤␥␦\u2427\u2428\u2429\u242a\u242b\u242c\u242d\u242e\u242f\u2430\u2431\u2432\u2433\u2434\u2435\u2436\u2437\u2438\u2439\u243a\u243b\u243c\u243d\u243e\u243f⑀⑁⑂⑃⑄⑅⑆⑇⑈⑉⑊\u244b\u244c\u244d\u244e\u244f\u2450\u2451\u2452\u2453\u2454\u2455\u2456\u2457\u2458\u2459\u245a\u245b\u245c\u245d\u245e\u245f①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵ⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏⒶⒷⒸⒹⒺⒻⒼⒽⒾⒿⓀⓁⓂⓃⓄⓅⓆⓇⓈⓉⓊⓋⓌⓍⓎⓏ⓪⓫⓬⓭⓮⓯⓰⓱⓲⓳⓴⓵⓶⓷⓸⓹⓺⓻⓼⓽⓾⓿─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋╌╍╎╏═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳╴╵╶╷╸╹╺╻╼╽╾╿▀▁▂▃▄▅▆▇█▉▊▋▌▍▎▏▐░▒▓▔▕▖▗▘▙▚▛▜▝▞▟■□▢▣▤▥▦▧▨▩▪▫▬▭▮▯▰▱▲△▴▵▶▷▸▹►▻▼▽▾▿◀◁◂◃◄◅◆◇◈◉◊○◌◍◎●◐◑◒◓◔◕◖◗◘◙◚◛◜◝◞◟◠◡◢◣◤◥◦◧◨◩◪◫◬◭◮◯◰◱◲◳◴◵◶◷◸◹◺◻◼◽◾◿"
+ "☀☁☂☃☄★☆☇☈☉☊☋☌☍☎☏☐☑☒☓☔☕☖☗☘☙☚☛☜☝☞☟☠☡☢☣☤☥☦☧☨☩☪☫☬☭☮☯☰☱☲☳☴☵☶☷☸☹☺☻☼☽☾☿♀♁♂♃♄♅♆♇♈♉♊♋♌♍♎♏♐♑♒♓♔♕♖♗♘♙♚♛♜♝♞♟♠♡♢♣♤♥♦♧♨♩♪♫♬♭♮♯♰♱♲♳♴♵♶♷♸♹♺♻♼♽♾♿⚀⚁⚂⚃⚄⚅⚆⚇⚈⚉⚊⚋⚌⚍⚎⚏⚐⚑⚒⚓⚔⚕⚖⚗⚘⚙⚚⚛⚜⚝⚞⚟⚠⚡⚢⚣⚤⚥⚦⚧⚨⚩⚪⚫⚬⚭⚮⚯⚰⚱⚲⚳⚴⚵⚶⚷⚸⚹⚺⚻⚼⚽⚾⚿⛀⛁⛂⛃⛄⛅⛆⛇⛈⛉⛊⛋⛌⛍⛎⛏⛐⛑⛒⛓⛔⛕⛖⛗⛘⛙⛚⛛⛜⛝⛞⛟⛠⛡⛢⛣⛤⛥⛦⛧⛨⛩⛪⛫⛬⛭⛮⛯⛰⛱⛲⛳⛴⛵⛶⛷⛸⛹⛺⛻⛼⛽⛾⛿✀✁✂✃✄✅✆✇✈✉✊✋✌✍✎✏", "✐✑✒✓✔✕✖✗✘✙✚✛✜✝✞✟✠✡✢✣✤✥✦✧✨✩✪✫✬✭✮✯✰✱✲✳✴✵✶✷✸✹✺✻✼✽✾✿❀❁❂❃❄❅❆❇❈❉❊❋❌❍❎❏❐❑❒❓❔❕❖❗❘❙❚❛❜❝❞❟❠❡❢❣❤❥❦❧❨❩❪❫❬❭❮❯❰❱❲❳❴❵❶❷❸❹❺❻❼❽❾❿➀➁➂➃➄➅➆➇➈➉➊➋➌➍➎➏➐➑➒➓➔➕➖➗➘➙➚➛➜➝➞➟➠➡➢➣➤➥➦➧➨➩➪➫➬➭➮➯➰➱➲➳➴➵➶➷➸➹➺➻➼➽➾➿⟀⟁⟂⟃⟄⟅⟆⟇⟈⟉⟊⟋⟌⟍⟎⟏⟐⟑⟒⟓⟔⟕⟖⟗⟘⟙⟚⟛⟜⟝⟞⟟⟠⟡⟢⟣⟤⟥⟦⟧⟨⟩⟪⟫⟬⟭⟮⟯⟰⟱⟲⟳⟴⟵⟶⟷⟸⟹⟺⟻⟼⟽⟾⟿⠀⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿⡀⡁⡂⡃⡄⡅⡆⡇⡈⡉⡊⡋⡌⡍⡎⡏⡐⡑⡒⡓⡔⡕⡖⡗⡘⡙⡚⡛⡜⡝⡞⡟⡠⡡⡢⡣⡤⡥⡦⡧⡨⡩⡪⡫⡬⡭⡮⡯⡰⡱⡲⡳⡴⡵⡶⡷⡸⡹⡺⡻⡼⡽⡾⡿⢀⢁⢂⢃⢄⢅⢆⢇⢈⢉⢊⢋⢌⢍⢎⢏⢐⢑⢒⢓⢔⢕⢖⢗⢘⢙⢚⢛⢜⢝⢞⢟⢠⢡⢢⢣⢤⢥⢦⢧⢨⢩⢪⢫⢬⢭⢮⢯⢰⢱⢲⢳⢴⢵⢶⢷⢸⢹⢺⢻⢼⢽⢾⢿⣀⣁⣂⣃⣄⣅⣆⣇⣈⣉⣊⣋⣌⣍⣎⣏⣐⣑⣒⣓⣔⣕⣖⣗⣘⣙⣚⣛⣜⣝⣞⣟⣠⣡⣢⣣⣤⣥⣦⣧⣨⣩⣪⣫⣬⣭⣮⣯⣰⣱⣲⣳⣴⣵⣶⣷⣸⣹⣺⣻⣼⣽⣾⣿⤀⤁⤂⤃⤄⤅⤆⤇⤈⤉⤊⤋⤌⤍⤎⤏"
+ "⤐⤑⤒⤓⤔⤕⤖⤗⤘⤙⤚⤛⤜⤝⤞⤟⤠⤡⤢⤣⤤⤥⤦⤧⤨⤩⤪⤫⤬⤭⤮⤯⤰⤱⤲⤳⤴⤵⤶⤷⤸⤹⤺⤻⤼⤽⤾⤿⥀⥁⥂⥃⥄⥅⥆⥇⥈⥉⥊⥋⥌⥍⥎⥏⥐⥑⥒⥓⥔⥕⥖⥗⥘⥙⥚⥛⥜⥝⥞⥟⥠⥡⥢⥣⥤⥥⥦⥧⥨⥩⥪⥫⥬⥭⥮⥯⥰⥱⥲⥳⥴⥵⥶⥷⥸⥹⥺⥻⥼⥽⥾⥿⦀⦁⦂⦃⦄⦅⦆⦇⦈⦉⦊⦋⦌⦍⦎⦏⦐⦑⦒⦓⦔⦕⦖⦗⦘⦙⦚⦛⦜⦝⦞⦟⦠⦡⦢⦣⦤⦥⦦⦧⦨⦩⦪⦫⦬⦭⦮⦯⦰⦱⦲⦳⦴⦵⦶⦷⦸⦹⦺⦻⦼⦽⦾⦿⧀⧁⧂⧃⧄⧅⧆⧇⧈⧉⧊⧋⧌⧍⧎⧏⧐⧑⧒⧓⧔⧕⧖⧗⧘⧙⧚⧛⧜⧝⧞⧟⧠⧡⧢⧣⧤⧥⧦⧧⧨⧩⧪⧫⧬⧭⧮⧯⧰⧱⧲⧳⧴⧵⧶⧷⧸⧹⧺⧻⧼⧽⧾⧿⨀⨁⨂⨃⨄⨅⨆⨇⨈⨉⨊⨋⨌⨍⨎⨏⨐⨑⨒⨓⨔⨕⨖⨗⨘⨙⨚⨛⨜⨝⨞⨟⨠⨡⨢⨣⨤⨥⨦⨧⨨⨩⨪⨫⨬⨭⨮⨯⨰⨱⨲⨳⨴⨵⨶⨷⨸⨹⨺⨻⨼⨽⨾⨿⩀⩁⩂⩃⩄⩅⩆⩇⩈⩉⩊⩋⩌⩍⩎⩏⩐⩑⩒⩓⩔⩕⩖⩗⩘⩙⩚⩛⩜⩝⩞⩟⩠⩡⩢⩣⩤⩥⩦⩧⩨⩩⩪⩫⩬⩭⩮⩯⩰⩱⩲⩳⩴⩵⩶⩷⩸⩹⩺⩻⩼⩽⩾⩿⪀⪁⪂⪃⪄⪅⪆⪇⪈⪉⪊⪋⪌⪍⪎⪏⪐⪑⪒⪓⪔⪕⪖⪗⪘⪙⪚⪛⪜⪝⪞⪟⪠⪡⪢⪣⪤⪥⪦⪧⪨⪩⪪⪫⪬⪭⪮⪯⪰⪱⪲⪳⪴⪵⪶⪷⪸⪹⪺⪻⪼⪽⪾⪿⫀⫁⫂⫃⫄⫅⫆⫇⫈⫉⫊⫋⫌⫍⫎⫏⫐⫑⫒⫓⫔⫕⫖⫗⫘⫙⫚⫛⫝̸⫝⫞⫟⫠⫡⫢⫣⫤⫥⫦⫧⫨⫩⫪⫫⫬⫭⫮⫯⫰⫱⫲⫳⫴⫵⫶⫷⫸⫹⫺⫻⫼⫽⫾⫿⬀⬁⬂⬃⬄⬅⬆⬇⬈⬉⬊⬋⬌⬍⬎⬏"
+ "⬐⬑⬒⬓⬔⬕⬖⬗⬘⬙⬚⬛⬜⬝⬞⬟⬠⬡⬢⬣⬤⬥⬦⬧⬨⬩⬪⬫⬬⬭⬮⬯⬰⬱⬲⬳⬴⬵⬶⬷⬸⬹⬺⬻⬼⬽⬾⬿⭀⭁⭂⭃⭄⭅⭆⭇⭈⭉⭊⭋⭌⭍⭎⭏⭐⭑⭒⭓⭔⭕⭖⭗⭘⭙⭚⭛⭜⭝⭞⭟⭠⭡⭢⭣⭤⭥⭦⭧⭨⭩⭪⭫⭬⭭⭮⭯⭰⭱⭲⭳\u2b74\u2b75⭶⭷⭸⭹⭺⭻⭼⭽⭾⭿⮀⮁⮂⮃⮄⮅⮆⮇⮈⮉⮊⮋⮌⮍⮎⮏⮐⮑⮒⮓⮔⮕\u2b96⮗⮘⮙⮚⮛⮜⮝⮞⮟⮠⮡⮢⮣⮤⮥⮦⮧⮨⮩⮪⮫⮬⮭⮮⮯⮰⮱⮲⮳⮴⮵⮶⮷⮸⮹⮺⮻⮼⮽⮾⮿⯀⯁⯂⯃⯄⯅⯆⯇⯈⯉⯊⯋⯌⯍⯎⯏⯐⯑⯒⯓⯔⯕⯖⯗⯘⯙⯚⯛⯜⯝⯞⯟⯠⯡⯢⯣⯤⯥⯦⯧⯨⯩⯪⯫⯬⯭⯮⯯⯰⯱⯲⯳⯴⯵⯶⯷⯸⯹⯺⯻⯼⯽⯾⯿ⰀⰁⰂⰃⰄⰅⰆⰇⰈⰉⰊⰋⰌⰍⰎⰏⰐⰑⰒⰓⰔⰕⰖⰗⰘⰙⰚⰛⰜⰝⰞⰟⰠⰡⰢⰣⰤⰥⰦⰧⰨⰩⰪⰫⰬⰭⰮⰯⰀⰁⰂⰃⰄⰅⰆⰇⰈⰉⰊⰋⰌⰍⰎⰏⰐⰑⰒⰓⰔⰕⰖⰗⰘⰙⰚⰛⰜⰝⰞⰟⰠⰡⰢⰣⰤⰥⰦⰧⰨⰩⰪⰫⰬⰭⰮⰯⱠⱠⱢⱣⱤȺȾⱧⱧⱩⱩⱫⱫⱭⱮⱯⱰⱱⱲⱲⱴⱵⱵⱷⱸⱹⱺⱻⱼⱽⱾⱿⲀⲀⲂⲂⲄⲄⲆⲆⲈⲈⲊⲊⲌⲌⲎⲎⲐⲐⲒⲒⲔⲔⲖⲖⲘⲘⲚⲚⲜⲜⲞⲞⲠⲠⲢⲢⲤⲤⲦⲦⲨⲨⲪⲪⲬⲬⲮⲮⲰⲰⲲⲲⲴⲴⲶⲶⲸⲸⲺⲺⲼⲼⲾⲾⳀⳀⳂⳂⳄⳄⳆⳆⳈⳈⳊⳊⳌⳌⳎⳎⳐⳐⳒⳒⳔⳔⳖⳖⳘⳘⳚⳚⳜⳜⳞⳞⳠⳠⳢⳢⳤ⳥⳦⳧⳨⳩⳪ⳫⳫⳭⳭ⳯⳰⳱ⳲⳲ\u2cf4\u2cf5\u2cf6\u2cf7\u2cf8⳹⳺⳻⳼⳽⳾⳿ႠႡႢႣႤႥႦႧႨႩႪႫႬႭႮႯ"
+ "ႰႱႲႳႴႵႶႷႸႹႺႻႼႽႾႿჀჁჂჃჄჅ\u2d26Ⴧ\u2d28\u2d29\u2d2a\u2d2b\u2d2cჍ\u2d2e\u2d2fⴰⴱⴲⴳⴴⴵⴶⴷⴸⴹⴺⴻⴼⴽⴾⴿⵀⵁⵂⵃⵄⵅⵆⵇⵈⵉⵊⵋⵌⵍⵎⵏⵐⵑⵒⵓⵔⵕⵖⵗⵘⵙⵚⵛⵜⵝⵞⵟⵠⵡⵢⵣⵤⵥⵦⵧ\u2d68\u2d69\u2d6a\u2d6b\u2d6c\u2d6d\u2d6eⵯ⵰\u2d71\u2d72\u2d73\u2d74\u2d75\u2d76\u2d77\u2d78\u2d79\u2d7a\u2d7b\u2d7c\u2d7d\u2d7e⵿ⶀⶁⶂⶃⶄⶅⶆⶇⶈⶉⶊⶋⶌⶍⶎⶏⶐⶑⶒⶓⶔⶕⶖ\u2d97\u2d98\u2d99\u2d9a\u2d9b\u2d9c\u2d9d\u2d9e\u2d9fⶠⶡⶢⶣⶤⶥⶦ\u2da7ⶨⶩⶪⶫⶬⶭⶮ\u2dafⶰⶱⶲⶳⶴⶵⶶ\u2db7ⶸⶹⶺⶻⶼⶽⶾ\u2dbfⷀⷁⷂⷃⷄⷅⷆ\u2dc7ⷈⷉⷊⷋⷌⷍⷎ\u2dcfⷐⷑⷒⷓⷔⷕⷖ\u2dd7ⷘⷙⷚⷛⷜⷝⷞ\u2ddfⷠⷡⷢⷣⷤⷥⷦⷧⷨⷩⷪⷫⷬⷭⷮⷯⷰⷱⷲⷳⷴⷵⷶⷷⷸⷹⷺⷻⷼⷽⷾⷿ⸀⸁⸂⸃⸄⸅⸆⸇⸈⸉⸊⸋⸌⸍⸎⸏⸐⸑⸒⸓⸔⸕⸖⸗⸘⸙⸚⸛⸜⸝⸞⸟⸠⸡⸢⸣⸤⸥⸦⸧⸨⸩⸪⸫⸬⸭⸮ⸯ⸰⸱⸲⸳⸴⸵⸶⸷⸸⸹⸺⸻⸼⸽⸾⸿⹀⹁⹂⹃⹄⹅⹆⹇⹈⹉⹊⹋⹌⹍⹎⹏⹐⹑⹒⹓⹔⹕⹖⹗⹘⹙⹚⹛⹜⹝\u2e5e\u2e5f\u2e60\u2e61\u2e62\u2e63\u2e64\u2e65\u2e66\u2e67\u2e68\u2e69\u2e6a\u2e6b\u2e6c\u2e6d\u2e6e\u2e6f\u2e70\u2e71\u2e72\u2e73\u2e74\u2e75\u2e76\u2e77\u2e78\u2e79\u2e7a\u2e7b\u2e7c\u2e7d\u2e7e\u2e7f⺀⺁⺂⺃⺄⺅⺆⺇⺈⺉⺊⺋⺌⺍⺎⺏⺐⺑⺒⺓⺔⺕⺖⺗⺘⺙\u2e9a⺛⺜⺝⺞⺟⺠⺡⺢⺣⺤⺥⺦⺧⺨⺩⺪⺫⺬⺭⺮⺯⺰⺱⺲⺳⺴⺵⺶⺷⺸⺹⺺⺻⺼⺽⺾⺿⻀⻁⻂⻃⻄⻅⻆⻇⻈⻉⻊⻋⻌⻍⻎⻏⻐⻑⻒⻓⻔⻕⻖⻗⻘⻙⻚⻛⻜⻝⻞⻟⻠⻡⻢⻣⻤⻥⻦⻧⻨⻩⻪⻫⻬⻭⻮⻯⻰⻱⻲⻳\u2ef4\u2ef5\u2ef6\u2ef7\u2ef8\u2ef9\u2efa\u2efb\u2efc\u2efd\u2efe\u2eff⼀⼁⼂⼃⼄⼅⼆⼇⼈⼉⼊⼋⼌⼍⼎⼏"
+ "⼐⼑⼒⼓⼔⼕⼖⼗⼘⼙⼚⼛⼜⼝⼞⼟⼠⼡⼢⼣⼤⼥⼦⼧⼨⼩⼪⼫⼬⼭⼮⼯⼰⼱⼲⼳⼴⼵⼶⼷⼸⼹⼺⼻⼼⼽⼾⼿⽀⽁⽂⽃⽄⽅⽆⽇⽈⽉⽊⽋⽌⽍⽎⽏⽐⽑⽒⽓⽔⽕⽖⽗⽘⽙⽚⽛⽜⽝⽞⽟⽠⽡⽢⽣⽤⽥⽦⽧⽨⽩⽪⽫⽬⽭⽮⽯⽰⽱⽲⽳⽴⽵⽶⽷⽸⽹⽺⽻⽼⽽⽾⽿⾀⾁⾂⾃⾄⾅⾆⾇⾈⾉⾊⾋⾌⾍⾎⾏⾐⾑⾒⾓⾔⾕⾖⾗⾘⾙⾚⾛⾜⾝⾞⾟⾠⾡⾢⾣⾤⾥⾦⾧⾨⾩⾪⾫⾬⾭⾮⾯⾰⾱⾲⾳⾴⾵⾶⾷⾸⾹⾺⾻⾼⾽⾾⾿⿀⿁⿂⿃⿄⿅⿆⿇⿈⿉⿊⿋⿌⿍⿎⿏⿐⿑⿒⿓⿔⿕\u2fd6\u2fd7\u2fd8\u2fd9\u2fda\u2fdb\u2fdc\u2fdd\u2fde\u2fdf\u2fe0\u2fe1\u2fe2\u2fe3\u2fe4\u2fe5\u2fe6\u2fe7\u2fe8\u2fe9\u2fea\u2feb\u2fec\u2fed\u2fee\u2fef⿰⿱⿲⿳⿴⿵⿶⿷⿸⿹⿺⿻\u2ffc\u2ffd\u2ffe\u2fff　、。〃〄々〆〇〈〉《》「」『』【】〒〓〔〕〖〗〘〙〚〛〜〝〞〟〠〡〢〣〤〥〦〧〨〩〪〭〮〯〫〬〰〱〲〳〴〵〶〷〸〹〺〻〼〽〾〿\u3040ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをんゔゕゖ\u3097\u3098゙゚゛゜ゝゞゟ゠ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺ・ーヽヾヿ\u3100\u3101\u3102\u3103\u3104ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏ"
+ "ㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩㄪㄫㄬㄭㄮㄯ\u3130ㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣㅤㅥㅦㅧㅨㅩㅪㅫㅬㅭㅮㅯㅰㅱㅲㅳㅴㅵㅶㅷㅸㅹㅺㅻㅼㅽㅾㅿㆀㆁㆂㆃㆄㆅㆆㆇㆈㆉㆊㆋㆌㆍㆎ\u318f㆐㆑㆒㆓㆔㆕㆖㆗㆘㆙㆚㆛㆜㆝㆞㆟ㆠㆡㆢㆣㆤㆥㆦㆧㆨㆩㆪㆫㆬㆭㆮㆯㆰㆱㆲㆳㆴㆵㆶㆷㆸㆹㆺㆻㆼㆽㆾㆿ㇀㇁㇂㇃㇄㇅㇆㇇㇈㇉㇊㇋㇌㇍㇎㇏㇐㇑㇒㇓㇔㇕㇖㇗㇘㇙㇚㇛㇜㇝㇞㇟㇠㇡㇢㇣\u31e4\u31e5\u31e6\u31e7\u31e8\u31e9\u31ea\u31eb\u31ec\u31ed\u31ee\u31efㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ㈀㈁㈂㈃㈄㈅㈆㈇㈈㈉㈊㈋㈌㈍㈎㈏㈐㈑㈒㈓㈔㈕㈖㈗㈘㈙㈚㈛㈜㈝㈞\u321f㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩㈪㈫㈬㈭㈮㈯㈰㈱㈲㈳㈴㈵㈶㈷㈸㈹㈺㈻㈼㈽㈾㈿㉀㉁㉂㉃㉄㉅㉆㉇㉈㉉㉊㉋㉌㉍㉎㉏㉐㉑㉒㉓㉔㉕㉖㉗㉘㉙㉚㉛㉜㉝㉞㉟㉠㉡㉢㉣㉤㉥㉦㉧㉨㉩㉪㉫㉬㉭㉮㉯㉰㉱㉲㉳㉴㉵㉶㉷㉸㉹㉺㉻㉼㉽㉾㉿㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉㊊㊋㊌㊍㊎㊏㊐㊑㊒㊓㊔㊕㊖㊗㊘㊙㊚㊛㊜㊝㊞㊟㊠㊡㊢㊣㊤㊥㊦㊧㊨㊩㊪㊫㊬㊭㊮㊯㊰㊱㊲㊳㊴㊵㊶㊷㊸㊹㊺㊻㊼㊽㊾㊿㋀㋁㋂㋃㋄㋅㋆㋇㋈㋉㋊㋋㋌㋍㋎㋏㋐㋑㋒㋓㋔㋕㋖㋗㋘㋙㋚㋛㋜㋝㋞㋟㋠㋡㋢㋣㋤㋥㋦㋧㋨㋩㋪㋫㋬㋭㋮㋯㋰㋱㋲㋳㋴㋵㋶㋷㋸㋹㋺㋻㋼㋽㋾㋿㌀㌁㌂㌃㌄㌅㌆㌇㌈㌉㌊㌋㌌㌍㌎㌏"
+ "㌐㌑㌒㌓㌔㌕㌖㌗㌘㌙㌚㌛㌜㌝㌞㌟㌠㌡㌢㌣㌤㌥㌦㌧㌨㌩㌪㌫㌬㌭㌮㌯㌰㌱㌲㌳㌴㌵㌶㌷㌸㌹㌺㌻㌼㌽㌾㌿㍀㍁㍂㍃㍄㍅㍆㍇㍈㍉㍊㍋㍌㍍㍎㍏㍐㍑㍒㍓㍔㍕㍖㍗㍘㍙㍚㍛㍜㍝㍞㍟㍠㍡㍢㍣㍤㍥㍦㍧㍨㍩㍪㍫㍬㍭㍮㍯㍰㍱㍲㍳㍴㍵㍶㍷㍸㍹㍺㍻㍼㍽㍾㍿㎀㎁㎂㎃㎄㎅㎆㎇㎈㎉㎊㎋㎌㎍㎎㎏㎐㎑㎒㎓㎔㎕㎖㎗㎘㎙㎚㎛㎜㎝㎞㎟㎠㎡㎢㎣㎤㎥㎦㎧㎨㎩㎪㎫㎬㎭㎮㎯㎰㎱㎲㎳㎴㎵㎶㎷㎸㎹㎺㎻㎼㎽㎾㎿㏀㏁㏂㏃㏄㏅㏆㏇㏈㏉㏊㏋㏌㏍㏎㏏㏐㏑㏒㏓㏔㏕㏖㏗㏘㏙㏚㏛㏜㏝㏞㏟㏠㏡㏢㏣㏤㏥㏦㏧㏨㏩㏪㏫㏬㏭㏮㏯㏰㏱㏲㏳㏴㏵㏶㏷㏸㏹㏺㏻㏼㏽㏾㏿㐀㐁㐂㐃㐄㐅㐆㐇㐈㐉㐊㐋㐌㐍㐎㐏㐐㐑㐒㐓㐔㐕㐖㐗㐘㐙㐚㐛㐜㐝㐞㐟㐠㐡㐢㐣㐤㐥㐦㐧㐨㐩㐪㐫㐬㐭㐮㐯㐰㐱㐲㐳㐴㐵㐶㐷㐸㐹㐺㐻㐼㐽㐾㐿㑀㑁㑂㑃㑄㑅㑆㑇㑈㑉㑊㑋㑌㑍㑎㑏㑐㑑㑒㑓㑔㑕㑖㑗㑘㑙㑚㑛㑜㑝㑞㑟㑠㑡㑢㑣㑤㑥㑦㑧㑨㑩㑪㑫㑬㑭㑮㑯㑰㑱㑲㑳㑴㑵㑶㑷㑸㑹㑺㑻㑼㑽㑾㑿㒀㒁㒂㒃㒄㒅㒆㒇㒈㒉㒊㒋㒌㒍㒎㒏㒐㒑㒒㒓㒔㒕㒖㒗㒘㒙㒚㒛㒜㒝㒞㒟㒠㒡㒢㒣㒤㒥㒦㒧㒨㒩㒪㒫㒬㒭㒮㒯㒰㒱㒲㒳㒴㒵㒶㒷㒸㒹㒺㒻㒼㒽㒾㒿㓀㓁㓂㓃㓄㓅㓆㓇㓈㓉㓊㓋㓌㓍㓎㓏㓐㓑㓒㓓㓔㓕㓖㓗㓘㓙㓚㓛㓜㓝㓞㓟㓠㓡㓢㓣㓤㓥㓦㓧㓨㓩㓪㓫㓬㓭㓮㓯㓰㓱㓲㓳㓴㓵㓶㓷㓸㓹㓺㓻㓼㓽㓾㓿㔀㔁㔂㔃㔄㔅㔆㔇㔈㔉㔊㔋㔌㔍㔎㔏"
+ "㔐㔑㔒㔓㔔㔕㔖㔗㔘㔙㔚㔛㔜㔝㔞㔟㔠㔡㔢㔣㔤㔥㔦㔧㔨㔩㔪㔫㔬㔭㔮㔯㔰㔱㔲㔳㔴㔵㔶㔷㔸㔹㔺㔻㔼㔽㔾㔿㕀㕁㕂㕃㕄㕅㕆㕇㕈㕉㕊㕋㕌㕍㕎㕏㕐㕑㕒㕓㕔㕕㕖㕗㕘㕙㕚㕛㕜㕝㕞㕟㕠㕡㕢㕣㕤㕥㕦㕧㕨㕩㕪㕫㕬㕭㕮㕯㕰㕱㕲㕳㕴㕵㕶㕷㕸㕹㕺㕻㕼㕽㕾㕿㖀㖁㖂㖃㖄㖅㖆㖇㖈㖉㖊㖋㖌㖍㖎㖏㖐㖑㖒㖓㖔㖕㖖㖗㖘㖙㖚㖛㖜㖝㖞㖟㖠㖡㖢㖣㖤㖥㖦㖧㖨㖩㖪㖫㖬㖭㖮㖯㖰㖱㖲㖳㖴㖵㖶㖷㖸㖹㖺㖻㖼㖽㖾㖿㗀㗁㗂㗃㗄㗅㗆㗇㗈㗉㗊㗋㗌㗍㗎㗏㗐㗑㗒㗓㗔㗕㗖㗗㗘㗙㗚㗛㗜㗝㗞㗟㗠㗡㗢㗣㗤㗥㗦㗧㗨㗩㗪㗫㗬㗭㗮㗯㗰㗱㗲㗳㗴㗵㗶㗷㗸㗹㗺㗻㗼㗽㗾㗿㘀㘁㘂㘃㘄㘅㘆㘇㘈㘉㘊㘋㘌㘍㘎㘏㘐㘑㘒㘓㘔㘕㘖㘗㘘㘙㘚㘛㘜㘝㘞㘟㘠㘡㘢㘣㘤㘥㘦㘧㘨㘩㘪㘫㘬㘭㘮㘯㘰㘱㘲㘳㘴㘵㘶㘷㘸㘹㘺㘻㘼㘽㘾㘿㙀㙁㙂㙃㙄㙅㙆㙇㙈㙉㙊㙋㙌㙍㙎㙏㙐㙑㙒㙓㙔㙕㙖㙗㙘㙙㙚㙛㙜㙝㙞㙟㙠㙡㙢㙣㙤㙥㙦㙧㙨㙩㙪㙫㙬㙭㙮㙯㙰㙱㙲㙳㙴㙵㙶㙷㙸㙹㙺㙻㙼㙽㙾㙿㚀㚁㚂㚃㚄㚅㚆㚇㚈㚉㚊㚋㚌㚍㚎㚏㚐㚑㚒㚓㚔㚕㚖㚗㚘㚙㚚㚛㚜㚝㚞㚟㚠㚡㚢㚣㚤㚥㚦㚧㚨㚩㚪㚫㚬㚭㚮㚯㚰㚱㚲㚳㚴㚵㚶㚷㚸㚹㚺㚻㚼㚽㚾㚿㛀㛁㛂㛃㛄㛅㛆㛇㛈㛉㛊㛋㛌㛍㛎㛏㛐㛑㛒㛓㛔㛕㛖㛗㛘㛙㛚㛛㛜㛝㛞㛟㛠㛡㛢㛣㛤㛥㛦㛧㛨㛩㛪㛫㛬㛭㛮㛯㛰㛱㛲㛳㛴㛵㛶㛷㛸㛹㛺㛻㛼㛽㛾㛿㜀㜁㜂㜃㜄㜅㜆㜇㜈㜉㜊㜋㜌㜍㜎㜏"
+ "㜐㜑㜒㜓㜔㜕㜖㜗㜘㜙㜚㜛㜜㜝㜞㜟㜠㜡㜢㜣㜤㜥㜦㜧㜨㜩㜪㜫㜬㜭㜮㜯㜰㜱㜲㜳㜴㜵㜶㜷㜸㜹㜺㜻㜼㜽㜾㜿㝀㝁㝂㝃㝄㝅㝆㝇㝈㝉㝊㝋㝌㝍㝎㝏㝐㝑㝒㝓㝔㝕㝖㝗㝘㝙㝚㝛㝜㝝㝞㝟㝠㝡㝢㝣㝤㝥㝦㝧㝨㝩㝪㝫㝬㝭㝮㝯㝰㝱㝲㝳㝴㝵㝶㝷㝸㝹㝺㝻㝼㝽㝾㝿㞀㞁㞂㞃㞄㞅㞆㞇㞈㞉㞊㞋㞌㞍㞎㞏㞐㞑㞒㞓㞔㞕㞖㞗㞘㞙㞚㞛㞜㞝㞞㞟㞠㞡㞢㞣㞤㞥㞦㞧㞨㞩㞪㞫㞬㞭㞮㞯㞰㞱㞲㞳㞴㞵㞶㞷㞸㞹㞺㞻㞼㞽㞾㞿㟀㟁㟂㟃㟄㟅㟆㟇㟈㟉㟊㟋㟌㟍㟎㟏㟐㟑㟒㟓㟔㟕㟖㟗㟘㟙㟚㟛㟜㟝㟞㟟㟠㟡㟢㟣㟤㟥㟦㟧㟨㟩㟪㟫㟬㟭㟮㟯㟰㟱㟲㟳㟴㟵㟶㟷㟸㟹㟺㟻㟼㟽㟾㟿㠀㠁㠂㠃㠄㠅㠆㠇㠈㠉㠊㠋㠌㠍㠎㠏㠐㠑㠒㠓㠔㠕㠖㠗㠘㠙㠚㠛㠜㠝㠞㠟㠠㠡㠢㠣㠤㠥㠦㠧㠨㠩㠪㠫㠬㠭㠮㠯㠰㠱㠲㠳㠴㠵㠶㠷㠸㠹㠺㠻㠼㠽㠾㠿㡀㡁㡂㡃㡄㡅㡆㡇㡈㡉㡊㡋㡌㡍㡎㡏㡐㡑㡒㡓㡔㡕㡖㡗㡘㡙㡚㡛㡜㡝㡞㡟㡠㡡㡢㡣㡤㡥㡦㡧㡨㡩㡪㡫㡬㡭㡮㡯㡰㡱㡲㡳㡴㡵㡶㡷㡸㡹㡺㡻㡼㡽㡾㡿㢀㢁㢂㢃㢄㢅㢆㢇㢈㢉㢊㢋㢌㢍㢎㢏㢐㢑㢒㢓㢔㢕㢖㢗㢘㢙㢚㢛㢜㢝㢞㢟㢠㢡㢢㢣㢤㢥㢦㢧㢨㢩㢪㢫㢬㢭㢮㢯㢰㢱㢲㢳㢴㢵㢶㢷㢸㢹㢺㢻㢼㢽㢾㢿㣀㣁㣂㣃㣄㣅㣆㣇㣈㣉㣊㣋㣌㣍㣎㣏㣐㣑㣒㣓㣔㣕㣖㣗㣘㣙㣚㣛㣜㣝㣞㣟㣠㣡㣢㣣㣤㣥㣦㣧㣨㣩㣪㣫㣬㣭㣮㣯㣰㣱㣲㣳㣴㣵㣶㣷㣸㣹㣺㣻㣼㣽㣾㣿㤀㤁㤂㤃㤄㤅㤆㤇㤈㤉㤊㤋㤌㤍㤎㤏"
+ "㤐㤑㤒㤓㤔㤕㤖㤗㤘㤙㤚㤛㤜㤝㤞㤟㤠㤡㤢㤣㤤㤥㤦㤧㤨㤩㤪㤫㤬㤭㤮㤯㤰㤱㤲㤳㤴㤵㤶㤷㤸㤹㤺㤻㤼㤽㤾㤿㥀㥁㥂㥃㥄㥅㥆㥇㥈㥉㥊㥋㥌㥍㥎㥏㥐㥑㥒㥓㥔㥕㥖㥗㥘㥙㥚㥛㥜㥝㥞㥟㥠㥡㥢㥣㥤㥥㥦㥧㥨㥩㥪㥫㥬㥭㥮㥯㥰㥱㥲㥳㥴㥵㥶㥷㥸㥹㥺㥻㥼㥽㥾㥿㦀㦁㦂㦃㦄㦅㦆㦇㦈㦉㦊㦋㦌㦍㦎㦏㦐㦑㦒㦓㦔㦕㦖㦗㦘㦙㦚㦛㦜㦝㦞㦟㦠㦡㦢㦣㦤㦥㦦㦧㦨㦩㦪㦫㦬㦭㦮㦯㦰㦱㦲㦳㦴㦵㦶㦷㦸㦹㦺㦻㦼㦽㦾㦿㧀㧁㧂㧃㧄㧅㧆㧇㧈㧉㧊㧋㧌㧍㧎㧏㧐㧑㧒㧓㧔㧕㧖㧗㧘㧙㧚㧛㧜㧝㧞㧟㧠㧡㧢㧣㧤㧥㧦㧧㧨㧩㧪㧫㧬㧭㧮㧯㧰㧱㧲㧳㧴㧵㧶㧷㧸㧹㧺㧻㧼㧽㧾㧿㨀㨁㨂㨃㨄㨅㨆㨇㨈㨉㨊㨋㨌㨍㨎㨏㨐㨑㨒㨓㨔㨕㨖㨗㨘㨙㨚㨛㨜㨝㨞㨟㨠㨡㨢㨣㨤㨥㨦㨧㨨㨩㨪㨫㨬㨭㨮㨯㨰㨱㨲㨳㨴㨵㨶㨷㨸㨹㨺㨻㨼㨽㨾㨿㩀㩁㩂㩃㩄㩅㩆㩇㩈㩉㩊㩋㩌㩍㩎㩏㩐㩑㩒㩓㩔㩕㩖㩗㩘㩙㩚㩛㩜㩝㩞㩟㩠㩡㩢㩣㩤㩥㩦㩧㩨㩩㩪㩫㩬㩭㩮㩯㩰㩱㩲㩳㩴㩵㩶㩷㩸㩹㩺㩻㩼㩽㩾㩿㪀㪁㪂㪃㪄㪅㪆㪇㪈㪉㪊㪋㪌㪍㪎㪏㪐㪑㪒㪓㪔㪕㪖㪗㪘㪙㪚㪛㪜㪝㪞㪟㪠㪡㪢㪣㪤㪥㪦㪧㪨㪩㪪㪫㪬㪭㪮㪯㪰㪱㪲㪳㪴㪵㪶㪷㪸㪹㪺㪻㪼㪽㪾㪿㫀㫁㫂㫃㫄㫅㫆㫇㫈㫉㫊㫋㫌㫍㫎㫏㫐㫑㫒㫓㫔㫕㫖㫗㫘㫙㫚㫛㫜㫝㫞㫟㫠㫡㫢㫣㫤㫥㫦㫧㫨㫩㫪㫫㫬㫭㫮㫯㫰㫱㫲㫳㫴㫵㫶㫷㫸㫹㫺㫻㫼㫽㫾㫿㬀㬁㬂㬃㬄㬅㬆㬇㬈㬉㬊㬋㬌㬍㬎㬏"
+ "㬐㬑㬒㬓㬔㬕㬖㬗㬘㬙㬚㬛㬜㬝㬞㬟㬠㬡㬢㬣㬤㬥㬦㬧㬨㬩㬪㬫㬬㬭㬮㬯㬰㬱㬲㬳㬴㬵㬶㬷㬸㬹㬺㬻㬼㬽㬾㬿㭀㭁㭂㭃㭄㭅㭆㭇㭈㭉㭊㭋㭌㭍㭎㭏㭐㭑㭒㭓㭔㭕㭖㭗㭘㭙㭚㭛㭜㭝㭞㭟㭠㭡㭢㭣㭤㭥㭦㭧㭨㭩㭪㭫㭬㭭㭮㭯㭰㭱㭲㭳㭴㭵㭶㭷㭸㭹㭺㭻㭼㭽㭾㭿㮀㮁㮂㮃㮄㮅㮆㮇㮈㮉㮊㮋㮌㮍㮎㮏㮐㮑㮒㮓㮔㮕㮖㮗㮘㮙㮚㮛㮜㮝㮞㮟㮠㮡㮢㮣㮤㮥㮦㮧㮨㮩㮪㮫㮬㮭㮮㮯㮰㮱㮲㮳㮴㮵㮶㮷㮸㮹㮺㮻㮼㮽㮾㮿㯀㯁㯂㯃㯄㯅㯆㯇㯈㯉㯊㯋㯌㯍㯎㯏㯐㯑㯒㯓㯔㯕㯖㯗㯘㯙㯚㯛㯜㯝㯞㯟㯠㯡㯢㯣㯤㯥㯦㯧㯨㯩㯪㯫㯬㯭㯮㯯㯰㯱㯲㯳㯴㯵㯶㯷㯸㯹㯺㯻㯼㯽㯾㯿㰀㰁㰂㰃㰄㰅㰆㰇㰈㰉㰊㰋㰌㰍㰎㰏㰐㰑㰒㰓㰔㰕㰖㰗㰘㰙㰚㰛㰜㰝㰞㰟㰠㰡㰢㰣㰤㰥㰦㰧㰨㰩㰪㰫㰬㰭㰮㰯㰰㰱㰲㰳㰴㰵㰶㰷㰸㰹㰺㰻㰼㰽㰾㰿㱀㱁㱂㱃㱄㱅㱆㱇㱈㱉㱊㱋㱌㱍㱎㱏㱐㱑㱒㱓㱔㱕㱖㱗㱘㱙㱚㱛㱜㱝㱞㱟㱠㱡㱢㱣㱤㱥㱦㱧㱨㱩㱪㱫㱬㱭㱮㱯㱰㱱㱲㱳㱴㱵㱶㱷㱸㱹㱺㱻㱼㱽㱾㱿㲀㲁㲂㲃㲄㲅㲆㲇㲈㲉㲊㲋㲌㲍㲎㲏㲐㲑㲒㲓㲔㲕㲖㲗㲘㲙㲚㲛㲜㲝㲞㲟㲠㲡㲢㲣㲤㲥㲦㲧㲨㲩㲪㲫㲬㲭㲮㲯㲰㲱㲲㲳㲴㲵㲶㲷㲸㲹㲺㲻㲼㲽㲾㲿㳀㳁㳂㳃㳄㳅㳆㳇㳈㳉㳊㳋㳌㳍㳎㳏㳐㳑㳒㳓㳔㳕㳖㳗㳘㳙㳚㳛㳜㳝㳞㳟㳠㳡㳢㳣㳤㳥㳦㳧㳨㳩㳪㳫㳬㳭㳮㳯㳰㳱㳲㳳㳴㳵㳶㳷㳸㳹㳺㳻㳼㳽㳾㳿㴀㴁㴂㴃㴄㴅㴆㴇㴈㴉㴊㴋㴌㴍㴎㴏"
+ "㴐㴑㴒㴓㴔㴕㴖㴗㴘㴙㴚㴛㴜㴝㴞㴟㴠㴡㴢㴣㴤㴥㴦㴧㴨㴩㴪㴫㴬㴭㴮㴯㴰㴱㴲㴳㴴㴵㴶㴷㴸㴹㴺㴻㴼㴽㴾㴿㵀㵁㵂㵃㵄㵅㵆㵇㵈㵉㵊㵋㵌㵍㵎㵏㵐㵑㵒㵓㵔㵕㵖㵗㵘㵙㵚㵛㵜㵝㵞㵟㵠㵡㵢㵣㵤㵥㵦㵧㵨㵩㵪㵫㵬㵭㵮㵯㵰㵱㵲㵳㵴㵵㵶㵷㵸㵹㵺㵻㵼㵽㵾㵿㶀㶁㶂㶃㶄㶅㶆㶇㶈㶉㶊㶋㶌㶍㶎㶏㶐㶑㶒㶓㶔㶕㶖㶗㶘㶙㶚㶛㶜㶝㶞㶟㶠㶡㶢㶣㶤㶥㶦㶧㶨㶩㶪㶫㶬㶭㶮㶯㶰㶱㶲㶳㶴㶵㶶㶷㶸㶹㶺㶻㶼㶽㶾㶿㷀㷁㷂㷃㷄㷅㷆㷇㷈㷉㷊㷋㷌㷍㷎㷏㷐㷑㷒㷓㷔㷕㷖㷗㷘㷙㷚㷛㷜㷝㷞㷟㷠㷡㷢㷣㷤㷥㷦㷧㷨㷩㷪㷫㷬㷭㷮㷯㷰㷱㷲㷳㷴㷵㷶㷷㷸㷹㷺㷻㷼㷽㷾㷿㸀㸁㸂㸃㸄㸅㸆㸇㸈㸉㸊㸋㸌㸍㸎㸏㸐㸑㸒㸓㸔㸕㸖㸗㸘㸙㸚㸛㸜㸝㸞㸟㸠㸡㸢㸣㸤㸥㸦㸧㸨㸩㸪㸫㸬㸭㸮㸯㸰㸱㸲㸳㸴㸵㸶㸷㸸㸹㸺㸻㸼㸽㸾㸿㹀㹁㹂㹃㹄㹅㹆㹇㹈㹉㹊㹋㹌㹍㹎㹏㹐㹑㹒㹓㹔㹕㹖㹗㹘㹙㹚㹛㹜㹝㹞㹟㹠㹡㹢㹣㹤㹥㹦㹧㹨㹩㹪㹫㹬㹭㹮㹯㹰㹱㹲㹳㹴㹵㹶㹷㹸㹹㹺㹻㹼㹽㹾㹿㺀㺁㺂㺃㺄㺅㺆㺇㺈㺉㺊㺋㺌㺍㺎㺏㺐㺑㺒㺓㺔㺕㺖㺗㺘㺙㺚㺛㺜㺝㺞㺟㺠㺡㺢㺣㺤㺥㺦㺧㺨㺩㺪㺫㺬㺭㺮㺯㺰㺱㺲㺳㺴㺵㺶㺷㺸㺹㺺㺻㺼㺽㺾㺿㻀㻁㻂㻃㻄㻅㻆㻇㻈㻉㻊㻋㻌㻍㻎㻏㻐㻑㻒㻓㻔㻕㻖㻗㻘㻙㻚㻛㻜㻝㻞㻟㻠㻡㻢㻣㻤㻥㻦㻧㻨㻩㻪㻫㻬㻭㻮㻯㻰㻱㻲㻳㻴㻵㻶㻷㻸㻹㻺㻻㻼㻽㻾㻿㼀㼁㼂㼃㼄㼅㼆㼇㼈㼉㼊㼋㼌㼍㼎㼏"
+ "㼐㼑㼒㼓㼔㼕㼖㼗㼘㼙㼚㼛㼜㼝㼞㼟㼠㼡㼢㼣㼤㼥㼦㼧㼨㼩㼪㼫㼬㼭㼮㼯㼰㼱㼲㼳㼴㼵㼶㼷㼸㼹㼺㼻㼼㼽㼾㼿㽀㽁㽂㽃㽄㽅㽆㽇㽈㽉㽊㽋㽌㽍㽎㽏㽐㽑㽒㽓㽔㽕㽖㽗㽘㽙㽚㽛㽜㽝㽞㽟㽠㽡㽢㽣㽤㽥㽦㽧㽨㽩㽪㽫㽬㽭㽮㽯㽰㽱㽲㽳㽴㽵㽶㽷㽸㽹㽺㽻㽼㽽㽾㽿㾀㾁㾂㾃㾄㾅㾆㾇㾈㾉㾊㾋㾌㾍㾎㾏㾐㾑㾒㾓㾔㾕㾖㾗㾘㾙㾚㾛㾜㾝㾞㾟㾠㾡㾢㾣㾤㾥㾦㾧㾨㾩㾪㾫㾬㾭㾮㾯㾰㾱㾲㾳㾴㾵㾶㾷㾸㾹㾺㾻㾼㾽㾾㾿㿀㿁㿂㿃㿄㿅㿆㿇㿈㿉㿊㿋㿌㿍㿎㿏㿐㿑㿒㿓㿔㿕㿖㿗㿘㿙㿚㿛㿜㿝㿞㿟㿠㿡㿢㿣㿤㿥㿦㿧㿨㿩㿪㿫㿬㿭㿮㿯㿰㿱㿲㿳㿴㿵㿶㿷㿸㿹㿺㿻㿼㿽㿾㿿䀀䀁䀂䀃䀄䀅䀆䀇䀈䀉䀊䀋䀌䀍䀎䀏䀐䀑䀒䀓䀔䀕䀖䀗䀘䀙䀚䀛䀜䀝䀞䀟䀠䀡䀢䀣䀤䀥䀦䀧䀨䀩䀪䀫䀬䀭䀮䀯䀰䀱䀲䀳䀴䀵䀶䀷䀸䀹䀺䀻䀼䀽䀾䀿䁀䁁䁂䁃䁄䁅䁆䁇䁈䁉䁊䁋䁌䁍䁎䁏䁐䁑䁒䁓䁔䁕䁖䁗䁘䁙䁚䁛䁜䁝䁞䁟䁠䁡䁢䁣䁤䁥䁦䁧䁨䁩䁪䁫䁬䁭䁮䁯䁰䁱䁲䁳䁴䁵䁶䁷䁸䁹䁺䁻䁼䁽䁾䁿䂀䂁䂂䂃䂄䂅䂆䂇䂈䂉䂊䂋䂌䂍䂎䂏䂐䂑䂒䂓䂔䂕䂖䂗䂘䂙䂚䂛䂜䂝䂞䂟䂠䂡䂢䂣䂤䂥䂦䂧䂨䂩䂪䂫䂬䂭䂮䂯䂰䂱䂲䂳䂴䂵䂶䂷䂸䂹䂺䂻䂼䂽䂾䂿䃀䃁䃂䃃䃄䃅䃆䃇䃈䃉䃊䃋䃌䃍䃎䃏䃐䃑䃒䃓䃔䃕䃖䃗䃘䃙䃚䃛䃜䃝䃞䃟䃠䃡䃢䃣䃤䃥䃦䃧䃨䃩䃪䃫䃬䃭䃮䃯䃰䃱䃲䃳䃴䃵䃶䃷䃸䃹䃺䃻䃼䃽䃾䃿䄀䄁䄂䄃䄄䄅䄆䄇䄈䄉䄊䄋䄌䄍䄎䄏"
+ "䄐䄑䄒䄓䄔䄕䄖䄗䄘䄙䄚䄛䄜䄝䄞䄟䄠䄡䄢䄣䄤䄥䄦䄧䄨䄩䄪䄫䄬䄭䄮䄯䄰䄱䄲䄳䄴䄵䄶䄷䄸䄹䄺䄻䄼䄽䄾䄿䅀䅁䅂䅃䅄䅅䅆䅇䅈䅉䅊䅋䅌䅍䅎䅏䅐䅑䅒䅓䅔䅕䅖䅗䅘䅙䅚䅛䅜䅝䅞䅟䅠䅡䅢䅣䅤䅥䅦䅧䅨䅩䅪䅫䅬䅭䅮䅯䅰䅱䅲䅳䅴䅵䅶䅷䅸䅹䅺䅻䅼䅽䅾䅿䆀䆁䆂䆃䆄䆅䆆䆇䆈䆉䆊䆋䆌䆍䆎䆏䆐䆑䆒䆓䆔䆕䆖䆗䆘䆙䆚䆛䆜䆝䆞䆟䆠䆡䆢䆣䆤䆥䆦䆧䆨䆩䆪䆫䆬䆭䆮䆯䆰䆱䆲䆳䆴䆵䆶䆷䆸䆹䆺䆻䆼䆽䆾䆿䇀䇁䇂䇃䇄䇅䇆䇇䇈䇉䇊䇋䇌䇍䇎䇏䇐䇑䇒䇓䇔䇕䇖䇗䇘䇙䇚䇛䇜䇝䇞䇟䇠䇡䇢䇣䇤䇥䇦䇧䇨䇩䇪䇫䇬䇭䇮䇯䇰䇱䇲䇳䇴䇵䇶䇷䇸䇹䇺䇻䇼䇽䇾䇿䈀䈁䈂䈃䈄䈅䈆䈇䈈䈉䈊䈋䈌䈍䈎䈏䈐䈑䈒䈓䈔䈕䈖䈗䈘䈙䈚䈛䈜䈝䈞䈟䈠䈡䈢䈣䈤䈥䈦䈧䈨䈩䈪䈫䈬䈭䈮䈯䈰䈱䈲䈳䈴䈵䈶䈷䈸䈹䈺䈻䈼䈽䈾䈿䉀䉁䉂䉃䉄䉅䉆䉇䉈䉉䉊䉋䉌䉍䉎䉏䉐䉑䉒䉓䉔䉕䉖䉗䉘䉙䉚䉛䉜䉝䉞䉟䉠䉡䉢䉣䉤䉥䉦䉧䉨䉩䉪䉫䉬䉭䉮䉯䉰䉱䉲䉳䉴䉵䉶䉷䉸䉹䉺䉻䉼䉽䉾䉿䊀䊁䊂䊃䊄䊅䊆䊇䊈䊉䊊䊋䊌䊍䊎䊏䊐䊑䊒䊓䊔䊕䊖䊗䊘䊙䊚䊛䊜䊝䊞䊟䊠䊡䊢䊣䊤䊥䊦䊧䊨䊩䊪䊫䊬䊭䊮䊯䊰䊱䊲䊳䊴䊵䊶䊷䊸䊹䊺䊻䊼䊽䊾䊿䋀䋁䋂䋃䋄䋅䋆䋇䋈䋉䋊䋋䋌䋍䋎䋏䋐䋑䋒䋓䋔䋕䋖䋗䋘䋙䋚䋛䋜䋝䋞䋟䋠䋡䋢䋣䋤䋥䋦䋧䋨䋩䋪䋫䋬䋭䋮䋯䋰䋱䋲䋳䋴䋵䋶䋷䋸䋹䋺䋻䋼䋽䋾䋿䌀䌁䌂䌃䌄䌅䌆䌇䌈䌉䌊䌋䌌䌍䌎䌏"
+ "䌐䌑䌒䌓䌔䌕䌖䌗䌘䌙䌚䌛䌜䌝䌞䌟䌠䌡䌢䌣䌤䌥䌦䌧䌨䌩䌪䌫䌬䌭䌮䌯䌰䌱䌲䌳䌴䌵䌶䌷䌸䌹䌺䌻䌼䌽䌾䌿䍀䍁䍂䍃䍄䍅䍆䍇䍈䍉䍊䍋䍌䍍䍎䍏䍐䍑䍒䍓䍔䍕䍖䍗䍘䍙䍚䍛䍜䍝䍞䍟䍠䍡䍢䍣䍤䍥䍦䍧䍨䍩䍪䍫䍬䍭䍮䍯䍰䍱䍲䍳䍴䍵䍶䍷䍸䍹䍺䍻䍼䍽䍾䍿䎀䎁䎂䎃䎄䎅䎆䎇䎈䎉䎊䎋䎌䎍䎎䎏䎐䎑䎒䎓䎔䎕䎖䎗䎘䎙䎚䎛䎜䎝䎞䎟䎠䎡䎢䎣䎤䎥䎦䎧䎨䎩䎪䎫䎬䎭䎮䎯䎰䎱䎲䎳䎴䎵䎶䎷䎸䎹䎺䎻䎼䎽䎾䎿䏀䏁䏂䏃䏄䏅䏆䏇䏈䏉䏊䏋䏌䏍䏎䏏䏐䏑䏒䏓䏔䏕䏖䏗䏘䏙䏚䏛䏜䏝䏞䏟䏠䏡䏢䏣䏤䏥䏦䏧䏨䏩䏪䏫䏬䏭䏮䏯䏰䏱䏲䏳䏴䏵䏶䏷䏸䏹䏺䏻䏼䏽䏾䏿䐀䐁䐂䐃䐄䐅䐆䐇䐈䐉䐊䐋䐌䐍䐎䐏䐐䐑䐒䐓䐔䐕䐖䐗䐘䐙䐚䐛䐜䐝䐞䐟䐠䐡䐢䐣䐤䐥䐦䐧䐨䐩䐪䐫䐬䐭䐮䐯䐰䐱䐲䐳䐴䐵䐶䐷䐸䐹䐺䐻䐼䐽䐾䐿䑀䑁䑂䑃䑄䑅䑆䑇䑈䑉䑊䑋䑌䑍䑎䑏䑐䑑䑒䑓䑔䑕䑖䑗䑘䑙䑚䑛䑜䑝䑞䑟䑠䑡䑢䑣䑤䑥䑦䑧䑨䑩䑪䑫䑬䑭䑮䑯䑰䑱䑲䑳䑴䑵䑶䑷䑸䑹䑺䑻䑼䑽䑾䑿䒀䒁䒂䒃䒄䒅䒆䒇䒈䒉䒊䒋䒌䒍䒎䒏䒐䒑䒒䒓䒔䒕䒖䒗䒘䒙䒚䒛䒜䒝䒞䒟䒠䒡䒢䒣䒤䒥䒦䒧䒨䒩䒪䒫䒬䒭䒮䒯䒰䒱䒲䒳䒴䒵䒶䒷䒸䒹䒺䒻䒼䒽䒾䒿䓀䓁䓂䓃䓄䓅䓆䓇䓈䓉䓊䓋䓌䓍䓎䓏䓐䓑䓒䓓䓔䓕䓖䓗䓘䓙䓚䓛䓜䓝䓞䓟䓠䓡䓢䓣䓤䓥䓦䓧䓨䓩䓪䓫䓬䓭䓮䓯䓰䓱䓲䓳䓴䓵䓶䓷䓸䓹䓺䓻䓼䓽䓾䓿䔀䔁䔂䔃䔄䔅䔆䔇䔈䔉䔊䔋䔌䔍䔎䔏"
+ "䔐䔑䔒䔓䔔䔕䔖䔗䔘䔙䔚䔛䔜䔝䔞䔟䔠䔡䔢䔣䔤䔥䔦䔧䔨䔩䔪䔫䔬䔭䔮䔯䔰䔱䔲䔳䔴䔵䔶䔷䔸䔹䔺䔻䔼䔽䔾䔿䕀䕁䕂䕃䕄䕅䕆䕇䕈䕉䕊䕋䕌䕍䕎䕏䕐䕑䕒䕓䕔䕕䕖䕗䕘䕙䕚䕛䕜䕝䕞䕟䕠䕡䕢䕣䕤䕥䕦䕧䕨䕩䕪䕫䕬䕭䕮䕯䕰䕱䕲䕳䕴䕵䕶䕷䕸䕹䕺䕻䕼䕽䕾䕿䖀䖁䖂䖃䖄䖅䖆䖇䖈䖉䖊䖋䖌䖍䖎䖏䖐䖑䖒䖓䖔䖕䖖䖗䖘䖙䖚䖛䖜䖝䖞䖟䖠䖡䖢䖣䖤䖥䖦䖧䖨䖩䖪䖫䖬䖭䖮䖯䖰䖱䖲䖳䖴䖵䖶䖷䖸䖹䖺䖻䖼䖽䖾䖿䗀䗁䗂䗃䗄䗅䗆䗇䗈䗉䗊䗋䗌䗍䗎䗏䗐䗑䗒䗓䗔䗕䗖䗗䗘䗙䗚䗛䗜䗝䗞䗟䗠䗡䗢䗣䗤䗥䗦䗧䗨䗩䗪䗫䗬䗭䗮䗯䗰䗱䗲䗳䗴䗵䗶䗷䗸䗹䗺䗻䗼䗽䗾䗿䘀䘁䘂䘃䘄䘅䘆䘇䘈䘉䘊䘋䘌䘍䘎䘏䘐䘑䘒䘓䘔䘕䘖䘗䘘䘙䘚䘛䘜䘝䘞䘟䘠䘡䘢䘣䘤䘥䘦䘧䘨䘩䘪䘫䘬䘭䘮䘯䘰䘱䘲䘳䘴䘵䘶䘷䘸䘹䘺䘻䘼䘽䘾䘿䙀䙁䙂䙃䙄䙅䙆䙇䙈䙉䙊䙋䙌䙍䙎䙏䙐䙑䙒䙓䙔䙕䙖䙗䙘䙙䙚䙛䙜䙝䙞䙟䙠䙡䙢䙣䙤䙥䙦䙧䙨䙩䙪䙫䙬䙭䙮䙯䙰䙱䙲䙳䙴䙵䙶䙷䙸䙹䙺䙻䙼䙽䙾䙿䚀䚁䚂䚃䚄䚅䚆䚇䚈䚉䚊䚋䚌䚍䚎䚏䚐䚑䚒䚓䚔䚕䚖䚗䚘䚙䚚䚛䚜䚝䚞䚟䚠䚡䚢䚣䚤䚥䚦䚧䚨䚩䚪䚫䚬䚭䚮䚯䚰䚱䚲䚳䚴䚵䚶䚷䚸䚹䚺䚻䚼䚽䚾䚿䛀䛁䛂䛃䛄䛅䛆䛇䛈䛉䛊䛋䛌䛍䛎䛏䛐䛑䛒䛓䛔䛕䛖䛗䛘䛙䛚䛛䛜䛝䛞䛟䛠䛡䛢䛣䛤䛥䛦䛧䛨䛩䛪䛫䛬䛭䛮䛯䛰䛱䛲䛳䛴䛵䛶䛷䛸䛹䛺䛻䛼䛽䛾䛿䜀䜁䜂䜃䜄䜅䜆䜇䜈䜉䜊䜋䜌䜍䜎䜏"
+ "䜐䜑䜒䜓䜔䜕䜖䜗䜘䜙䜚䜛䜜䜝䜞䜟䜠䜡䜢䜣䜤䜥䜦䜧䜨䜩䜪䜫䜬䜭䜮䜯䜰䜱䜲䜳䜴䜵䜶䜷䜸䜹䜺䜻䜼䜽䜾䜿䝀䝁䝂䝃䝄䝅䝆䝇䝈䝉䝊䝋䝌䝍䝎䝏䝐䝑䝒䝓䝔䝕䝖䝗䝘䝙䝚䝛䝜䝝䝞䝟䝠䝡䝢䝣䝤䝥䝦䝧䝨䝩䝪䝫䝬䝭䝮䝯䝰䝱䝲䝳䝴䝵䝶䝷䝸䝹䝺䝻䝼䝽䝾䝿䞀䞁䞂䞃䞄䞅䞆䞇䞈䞉䞊䞋䞌䞍䞎䞏䞐䞑䞒䞓䞔䞕䞖䞗䞘䞙䞚䞛䞜䞝䞞䞟䞠䞡䞢䞣䞤䞥䞦䞧䞨䞩䞪䞫䞬䞭䞮䞯䞰䞱䞲䞳䞴䞵䞶䞷䞸䞹䞺䞻䞼䞽䞾䞿䟀䟁䟂䟃䟄䟅䟆䟇䟈䟉䟊䟋䟌䟍䟎䟏䟐䟑䟒䟓䟔䟕䟖䟗䟘䟙䟚䟛䟜䟝䟞䟟䟠䟡䟢䟣䟤䟥䟦䟧䟨䟩䟪䟫䟬䟭䟮䟯䟰䟱䟲䟳䟴䟵䟶䟷䟸䟹䟺䟻䟼䟽䟾䟿䠀䠁䠂䠃䠄䠅䠆䠇䠈䠉䠊䠋䠌䠍䠎䠏䠐䠑䠒䠓䠔䠕䠖䠗䠘䠙䠚䠛䠜䠝䠞䠟䠠䠡䠢䠣䠤䠥䠦䠧䠨䠩䠪䠫䠬䠭䠮䠯䠰䠱䠲䠳䠴䠵䠶䠷䠸䠹䠺䠻䠼䠽䠾䠿䡀䡁䡂䡃䡄䡅䡆䡇䡈䡉䡊䡋䡌䡍䡎䡏䡐䡑䡒䡓䡔䡕䡖䡗䡘䡙䡚䡛䡜䡝䡞䡟䡠䡡䡢䡣䡤䡥䡦䡧䡨䡩䡪䡫䡬䡭䡮䡯䡰䡱䡲䡳䡴䡵䡶䡷䡸䡹䡺䡻䡼䡽䡾䡿䢀䢁䢂䢃䢄䢅䢆䢇䢈䢉䢊䢋䢌䢍䢎䢏䢐䢑䢒䢓䢔䢕䢖䢗䢘䢙䢚䢛䢜䢝䢞䢟䢠䢡䢢䢣䢤䢥䢦䢧䢨䢩䢪䢫䢬䢭䢮䢯䢰䢱䢲䢳䢴䢵䢶䢷䢸䢹䢺䢻䢼䢽䢾䢿䣀䣁䣂䣃䣄䣅䣆䣇䣈䣉䣊䣋䣌䣍䣎䣏䣐䣑䣒䣓䣔䣕䣖䣗䣘䣙䣚䣛䣜䣝䣞䣟䣠䣡䣢䣣䣤䣥䣦䣧䣨䣩䣪䣫䣬䣭䣮䣯䣰䣱䣲䣳䣴䣵䣶䣷䣸䣹䣺䣻䣼䣽䣾䣿䤀䤁䤂䤃䤄䤅䤆䤇䤈䤉䤊䤋䤌䤍䤎䤏"
+ "䤐䤑䤒䤓䤔䤕䤖䤗䤘䤙䤚䤛䤜䤝䤞䤟䤠䤡䤢䤣䤤䤥䤦䤧䤨䤩䤪䤫䤬䤭䤮䤯䤰䤱䤲䤳䤴䤵䤶䤷䤸䤹䤺䤻䤼䤽䤾䤿䥀䥁䥂䥃䥄䥅䥆䥇䥈䥉䥊䥋䥌䥍䥎䥏䥐䥑䥒䥓䥔䥕䥖䥗䥘䥙䥚䥛䥜䥝䥞䥟䥠䥡䥢䥣䥤䥥䥦䥧䥨䥩䥪䥫䥬䥭䥮䥯䥰䥱䥲䥳䥴䥵䥶䥷䥸䥹䥺䥻䥼䥽䥾䥿䦀䦁䦂䦃䦄䦅䦆䦇䦈䦉䦊䦋䦌䦍䦎䦏䦐䦑䦒䦓䦔䦕䦖䦗䦘䦙䦚䦛䦜䦝䦞䦟䦠䦡䦢䦣䦤䦥䦦䦧䦨䦩䦪䦫䦬䦭䦮䦯䦰䦱䦲䦳䦴䦵䦶䦷䦸䦹䦺䦻䦼䦽䦾䦿䧀䧁䧂䧃䧄䧅䧆䧇䧈䧉䧊䧋䧌䧍䧎䧏䧐䧑䧒䧓䧔䧕䧖䧗䧘䧙䧚䧛䧜䧝䧞䧟䧠䧡䧢䧣䧤䧥䧦䧧䧨䧩䧪䧫䧬䧭䧮䧯䧰䧱䧲䧳䧴䧵䧶䧷䧸䧹䧺䧻䧼䧽䧾䧿䨀䨁䨂䨃䨄䨅䨆䨇䨈䨉䨊䨋䨌䨍䨎䨏䨐䨑䨒䨓䨔䨕䨖䨗䨘䨙䨚䨛䨜䨝䨞䨟䨠䨡䨢䨣䨤䨥䨦䨧䨨䨩䨪䨫䨬䨭䨮䨯䨰䨱䨲䨳䨴䨵䨶䨷䨸䨹䨺䨻䨼䨽䨾䨿䩀䩁䩂䩃䩄䩅䩆䩇䩈䩉䩊䩋䩌䩍䩎䩏䩐䩑䩒䩓䩔䩕䩖䩗䩘䩙䩚䩛䩜䩝䩞䩟䩠䩡䩢䩣䩤䩥䩦䩧䩨䩩䩪䩫䩬䩭䩮䩯䩰䩱䩲䩳䩴䩵䩶䩷䩸䩹䩺䩻䩼䩽䩾䩿䪀䪁䪂䪃䪄䪅䪆䪇䪈䪉䪊䪋䪌䪍䪎䪏䪐䪑䪒䪓䪔䪕䪖䪗䪘䪙䪚䪛䪜䪝䪞䪟䪠䪡䪢䪣䪤䪥䪦䪧䪨䪩䪪䪫䪬䪭䪮䪯䪰䪱䪲䪳䪴䪵䪶䪷䪸䪹䪺䪻䪼䪽䪾䪿䫀䫁䫂䫃䫄䫅䫆䫇䫈䫉䫊䫋䫌䫍䫎䫏䫐䫑䫒䫓䫔䫕䫖䫗䫘䫙䫚䫛䫜䫝䫞䫟䫠䫡䫢䫣䫤䫥䫦䫧䫨䫩䫪䫫䫬䫭䫮䫯䫰䫱䫲䫳䫴䫵䫶䫷䫸䫹䫺䫻䫼䫽䫾䫿䬀䬁䬂䬃䬄䬅䬆䬇䬈䬉䬊䬋䬌䬍䬎䬏"
+ "䬐䬑䬒䬓䬔䬕䬖䬗䬘䬙䬚䬛䬜䬝䬞䬟䬠䬡䬢䬣䬤䬥䬦䬧䬨䬩䬪䬫䬬䬭䬮䬯䬰䬱䬲䬳䬴䬵䬶䬷䬸䬹䬺䬻䬼䬽䬾䬿䭀䭁䭂䭃䭄䭅䭆䭇䭈䭉䭊䭋䭌䭍䭎䭏䭐䭑䭒䭓䭔䭕䭖䭗䭘䭙䭚䭛䭜䭝䭞䭟䭠䭡䭢䭣䭤䭥䭦䭧䭨䭩䭪䭫䭬䭭䭮䭯䭰䭱䭲䭳䭴䭵䭶䭷䭸䭹䭺䭻䭼䭽䭾䭿䮀䮁䮂䮃䮄䮅䮆䮇䮈䮉䮊䮋䮌䮍䮎䮏䮐䮑䮒䮓䮔䮕䮖䮗䮘䮙䮚䮛䮜䮝䮞䮟䮠䮡䮢䮣䮤䮥䮦䮧䮨䮩䮪䮫䮬䮭䮮䮯䮰䮱䮲䮳䮴䮵䮶䮷䮸䮹䮺䮻䮼䮽䮾䮿䯀䯁䯂䯃䯄䯅䯆䯇䯈䯉䯊䯋䯌䯍䯎䯏䯐䯑䯒䯓䯔䯕䯖䯗䯘䯙䯚䯛䯜䯝䯞䯟䯠䯡䯢䯣䯤䯥䯦䯧䯨䯩䯪䯫䯬䯭䯮䯯䯰䯱䯲䯳䯴䯵䯶䯷䯸䯹䯺䯻䯼䯽䯾䯿䰀䰁䰂䰃䰄䰅䰆䰇䰈䰉䰊䰋䰌䰍䰎䰏䰐䰑䰒䰓䰔䰕䰖䰗䰘䰙䰚䰛䰜䰝䰞䰟䰠䰡䰢䰣䰤䰥䰦䰧䰨䰩䰪䰫䰬䰭䰮䰯䰰䰱䰲䰳䰴䰵䰶䰷䰸䰹䰺䰻䰼䰽䰾䰿䱀䱁䱂䱃䱄䱅䱆䱇䱈䱉䱊䱋䱌䱍䱎䱏䱐䱑䱒䱓䱔䱕䱖䱗䱘䱙䱚䱛䱜䱝䱞䱟䱠䱡䱢䱣䱤䱥䱦䱧䱨䱩䱪䱫䱬䱭䱮䱯䱰䱱䱲䱳䱴䱵䱶䱷䱸䱹䱺䱻䱼䱽䱾䱿䲀䲁䲂䲃䲄䲅䲆䲇䲈䲉䲊䲋䲌䲍䲎䲏䲐䲑䲒䲓䲔䲕䲖䲗䲘䲙䲚䲛䲜䲝䲞䲟䲠䲡䲢䲣䲤䲥䲦䲧䲨䲩䲪䲫䲬䲭䲮䲯䲰䲱䲲䲳䲴䲵䲶䲷䲸䲹䲺䲻䲼䲽䲾䲿䳀䳁䳂䳃䳄䳅䳆䳇䳈䳉䳊䳋䳌䳍䳎䳏䳐䳑䳒䳓䳔䳕䳖䳗䳘䳙䳚䳛䳜䳝䳞䳟䳠䳡䳢䳣䳤䳥䳦䳧䳨䳩䳪䳫䳬䳭䳮䳯䳰䳱䳲䳳䳴䳵䳶䳷䳸䳹䳺䳻䳼䳽䳾䳿䴀䴁䴂䴃䴄䴅䴆䴇䴈䴉䴊䴋䴌䴍䴎䴏"
+ "䴐䴑䴒䴓䴔䴕䴖䴗䴘䴙䴚䴛䴜䴝䴞䴟䴠䴡䴢䴣䴤䴥䴦䴧䴨䴩䴪䴫䴬䴭䴮䴯䴰䴱䴲䴳䴴䴵䴶䴷䴸䴹䴺䴻䴼䴽䴾䴿䵀䵁䵂䵃䵄䵅䵆䵇䵈䵉䵊䵋䵌䵍䵎䵏䵐䵑䵒䵓䵔䵕䵖䵗䵘䵙䵚䵛䵜䵝䵞䵟䵠䵡䵢䵣䵤䵥䵦䵧䵨䵩䵪䵫䵬䵭䵮䵯䵰䵱䵲䵳䵴䵵䵶䵷䵸䵹䵺䵻䵼䵽䵾䵿䶀䶁䶂䶃䶄䶅䶆䶇䶈䶉䶊䶋䶌䶍䶎䶏䶐䶑䶒䶓䶔䶕䶖䶗䶘䶙䶚䶛䶜䶝䶞䶟䶠䶡䶢䶣䶤䶥䶦䶧䶨䶩䶪䶫䶬䶭䶮䶯䶰䶱䶲䶳䶴䶵䶶䶷䶸䶹䶺䶻䶼䶽䶾䶿䷀䷁䷂䷃䷄䷅䷆䷇䷈䷉䷊䷋䷌䷍䷎䷏䷐䷑䷒䷓䷔䷕䷖䷗䷘䷙䷚䷛䷜䷝䷞䷟䷠䷡䷢䷣䷤䷥䷦䷧䷨䷩䷪䷫䷬䷭䷮䷯䷰䷱䷲䷳䷴䷵䷶䷷䷸䷹䷺䷻䷼䷽䷾䷿一丁丂七丄丅丆万丈三上下丌不与丏丐丑丒专且丕世丗丘丙业丛东丝丞丟", "丠両丢丣两严並丧丨丩个丫丬中丮丯丰丱串丳临丵丶丷丸丹为主丼丽举丿乀乁乂乃乄久乆乇么义乊之乌乍乎乏乐乑乒乓乔乕乖乗乘乙乚乛乜九乞也习乡乢乣乤乥书乧乨乩乪乫乬乭乮乯买乱乲乳乴乵乶乷乸乹乺乻乼乽乾乿亀亁亂亃亄亅了亇予争亊事二亍于亏亐云互亓五井亖亗亘亙亚些亜亝亞亟亠亡亢亣交亥亦产亨亩亪享京亭亮亯亰亱亲亳亴亵亶亷亸亹人亻亼亽亾亿什仁仂仃仄仅仆仇仈仉今介仌仍从仏仐仑仒仓仔仕他仗付仙仚仛仜仝仞仟仠仡仢代令以仦仧仨仩仪仫们仭仮仯仰仱仲仳仴仵件价仸仹仺任仼份仾仿伀企伂伃伄伅伆伇伈伉伊伋伌伍伎伏伐休伒伓伔伕伖众优伙会伛伜伝伞伟传伡伢伣伤伥伦伧伨伩伪伫伬伭伮伯估伱伲伳伴伵伶伷伸伹伺伻似伽伾伿佀佁佂佃佄佅但佇佈佉佊佋佌位低住佐佑佒体佔何佖佗佘余佚佛作佝佞佟你佡佢佣佤佥佦佧佨佩佪佫佬佭佮佯佰佱佲佳佴併佶佷佸佹佺佻佼佽佾使侀侁侂侃侄侅來侇侈侉侊例侌侍侎侏侐侑侒侓侔侕侖侗侘侙侚供侜依侞侟侠価侢侣侤侥侦侧侨侩侪侫侬侭侮侯侰侱侲侳侴侵侶侷侸侹侺侻侼侽侾便俀俁係促俄俅俆俇俈俉俊俋俌俍俎俏俐俑俒俓俔俕俖俗俘俙俚俛俜保俞俟俠信俢俣俤俥俦俧俨俩俪俫俬俭修俯俰俱俲俳俴俵俶俷俸俹俺俻俼俽俾俿倀倁倂倃倄倅倆倇倈倉倊個倌倍倎倏倐們倒倓倔倕倖倗倘候倚倛倜倝倞借"
+ "倠倡倢倣値倥倦倧倨倩倪倫倬倭倮倯倰倱倲倳倴倵倶倷倸倹债倻值倽倾倿偀偁偂偃偄偅偆假偈偉偊偋偌偍偎偏偐偑偒偓偔偕偖偗偘偙做偛停偝偞偟偠偡偢偣偤健偦偧偨偩偪偫偬偭偮偯偰偱偲偳側偵偶偷偸偹偺偻偼偽偾偿傀傁傂傃傄傅傆傇傈傉傊傋傌傍傎傏傐傑傒傓傔傕傖傗傘備傚傛傜傝傞傟傠傡傢傣傤傥傦傧储傩傪傫催傭傮傯傰傱傲傳傴債傶傷傸傹傺傻傼傽傾傿僀僁僂僃僄僅僆僇僈僉僊僋僌働僎像僐僑僒僓僔僕僖僗僘僙僚僛僜僝僞僟僠僡僢僣僤僥僦僧僨僩僪僫僬僭僮僯僰僱僲僳僴僵僶僷僸價僺僻僼僽僾僿儀儁儂儃億儅儆儇儈儉儊儋儌儍儎儏儐儑儒儓儔儕儖儗儘儙儚儛儜儝儞償儠儡儢儣儤儥儦儧儨儩優儫儬儭儮儯儰儱儲儳儴儵儶儷儸儹儺儻儼儽儾儿兀允兂元兄充兆兇先光兊克兌免兎兏児兑兒兓兔兕兖兗兘兙党兛兜兝兞兟兠兡兢兣兤入兦內全兩兪八公六兮兯兰共兲关兴兵其具典兹兺养兼兽兾兿冀冁冂冃冄内円冇冈冉冊冋册再冎冏冐冑冒冓冔冕冖冗冘写冚军农冝冞冟冠冡冢冣冤冥冦冧冨冩冪冫冬冭冮冯冰冱冲决冴况冶冷冸冹冺冻冼冽冾冿净凁凂凃凄凅准凇凈凉凊凋凌凍凎减凐凑凒凓凔凕凖凗凘凙凚凛凜凝凞凟几凡凢凣凤凥処凧凨凩凪凫凬凭凮凯凰凱凲凳凴凵凶凷凸凹出击凼函凾凿刀刁刂刃刄刅分切刈刉刊刋刌刍刎刏刐刑划刓刔刕刖列刘则刚创刜初刞刟"
+ "删刡刢刣判別刦刧刨利刪别刬刭刮刯到刱刲刳刴刵制刷券刹刺刻刼刽刾刿剀剁剂剃剄剅剆則剈剉削剋剌前剎剏剐剑剒剓剔剕剖剗剘剙剚剛剜剝剞剟剠剡剢剣剤剥剦剧剨剩剪剫剬剭剮副剰剱割剳剴創剶剷剸剹剺剻剼剽剾剿劀劁劂劃劄劅劆劇劈劉劊劋劌劍劎劏劐劑劒劓劔劕劖劗劘劙劚力劜劝办功加务劢劣劤劥劦劧动助努劫劬劭劮劯劰励劲劳労劵劶劷劸効劺劻劼劽劾势勀勁勂勃勄勅勆勇勈勉勊勋勌勍勎勏勐勑勒勓勔動勖勗勘務勚勛勜勝勞募勠勡勢勣勤勥勦勧勨勩勪勫勬勭勮勯勰勱勲勳勴勵勶勷勸勹勺勻勼勽勾勿匀匁匂匃匄包匆匇匈匉匊匋匌匍匎匏匐匑匒匓匔匕化北匘匙匚匛匜匝匞匟匠匡匢匣匤匥匦匧匨匩匪匫匬匭匮匯匰匱匲匳匴匵匶匷匸匹区医匼匽匾匿區十卂千卄卅卆升午卉半卋卌卍华协卐卑卒卓協单卖南単卙博卛卜卝卞卟占卡卢卣卤卥卦卧卨卩卪卫卬卭卮卯印危卲即却卵卶卷卸卹卺卻卼卽卾卿厀厁厂厃厄厅历厇厈厉厊压厌厍厎厏厐厑厒厓厔厕厖厗厘厙厚厛厜厝厞原厠厡厢厣厤厥厦厧厨厩厪厫厬厭厮厯厰厱厲厳厴厵厶厷厸厹厺去厼厽厾县叀叁参參叄叅叆叇又叉及友双反収叏叐发叒叓叔叕取受变叙叚叛叜叝叞叟叠叡叢口古句另叧叨叩只叫召叭叮可台叱史右叴叵叶号司叹叺叻叼叽叾叿吀吁吂吃各吅吆吇合吉吊吋同名后吏吐向吒吓吔吕吖吗吘吙吚君吜吝吞吟"
+ "吠吡吢吣吤吥否吧吨吩吪含听吭吮启吰吱吲吳吴吵吶吷吸吹吺吻吼吽吾吿呀呁呂呃呄呅呆呇呈呉告呋呌呍呎呏呐呑呒呓呔呕呖呗员呙呚呛呜呝呞呟呠呡呢呣呤呥呦呧周呩呪呫呬呭呮呯呰呱呲味呴呵呶呷呸呹呺呻呼命呾呿咀咁咂咃咄咅咆咇咈咉咊咋和咍咎咏咐咑咒咓咔咕咖咗咘咙咚咛咜咝咞咟咠咡咢咣咤咥咦咧咨咩咪咫咬咭咮咯咰咱咲咳咴咵咶咷咸咹咺咻咼咽咾咿哀品哂哃哄哅哆哇哈哉哊哋哌响哎哏哐哑哒哓哔哕哖哗哘哙哚哛哜哝哞哟哠員哢哣哤哥哦哧哨哩哪哫哬哭哮哯哰哱哲哳哴哵哶哷哸哹哺哻哼哽哾哿唀唁唂唃唄唅唆唇唈唉唊唋唌唍唎唏唐唑唒唓唔唕唖唗唘唙唚唛唜唝唞唟唠唡唢唣唤唥唦唧唨唩唪唫唬唭售唯唰唱唲唳唴唵唶唷唸唹唺唻唼唽唾唿啀啁啂啃啄啅商啇啈啉啊啋啌啍啎問啐啑啒啓啔啕啖啗啘啙啚啛啜啝啞啟啠啡啢啣啤啥啦啧啨啩啪啫啬啭啮啯啰啱啲啳啴啵啶啷啸啹啺啻啼啽啾啿喀喁喂喃善喅喆喇喈喉喊喋喌喍喎喏喐喑喒喓喔喕喖喗喘喙喚喛喜喝喞喟喠喡喢喣喤喥喦喧喨喩喪喫喬喭單喯喰喱喲喳喴喵営喷喸喹喺喻喼喽喾喿嗀嗁嗂嗃嗄嗅嗆嗇嗈嗉嗊嗋嗌嗍嗎嗏嗐嗑嗒嗓嗔嗕嗖嗗嗘嗙嗚嗛嗜嗝嗞嗟嗠嗡嗢嗣嗤嗥嗦嗧嗨嗩嗪嗫嗬嗭嗮嗯嗰嗱嗲嗳嗴嗵嗶嗷嗸嗹嗺嗻嗼嗽嗾嗿嘀嘁嘂嘃嘄嘅嘆嘇嘈嘉嘊嘋嘌嘍嘎嘏嘐嘑嘒嘓嘔嘕嘖嘗嘘嘙嘚嘛嘜嘝嘞嘟"
+ "嘠嘡嘢嘣嘤嘥嘦嘧嘨嘩嘪嘫嘬嘭嘮嘯嘰嘱嘲嘳嘴嘵嘶嘷嘸嘹嘺嘻嘼嘽嘾嘿噀噁噂噃噄噅噆噇噈噉噊噋噌噍噎噏噐噑噒噓噔噕噖噗噘噙噚噛噜噝噞噟噠噡噢噣噤噥噦噧器噩噪噫噬噭噮噯噰噱噲噳噴噵噶噷噸噹噺噻噼噽噾噿嚀嚁嚂嚃嚄嚅嚆嚇嚈嚉嚊嚋嚌嚍嚎嚏嚐嚑嚒嚓嚔嚕嚖嚗嚘嚙嚚嚛嚜嚝嚞嚟嚠嚡嚢嚣嚤嚥嚦嚧嚨嚩嚪嚫嚬嚭嚮嚯嚰嚱嚲嚳嚴嚵嚶嚷嚸嚹嚺嚻嚼嚽嚾嚿囀囁囂囃囄囅囆囇囈囉囊囋囌囍囎囏囐囑囒囓囔囕囖囗囘囙囚四囜囝回囟因囡团団囤囥囦囧囨囩囪囫囬园囮囯困囱囲図围囵囶囷囸囹固囻囼国图囿圀圁圂圃圄圅圆圇圈圉圊國圌圍圎圏圐圑園圓圔圕圖圗團圙圚圛圜圝圞土圠圡圢圣圤圥圦圧在圩圪圫圬圭圮圯地圱圲圳圴圵圶圷圸圹场圻圼圽圾圿址坁坂坃坄坅坆均坈坉坊坋坌坍坎坏坐坑坒坓坔坕坖块坘坙坚坛坜坝坞坟坠坡坢坣坤坥坦坧坨坩坪坫坬坭坮坯坰坱坲坳坴坵坶坷坸坹坺坻坼坽坾坿垀垁垂垃垄垅垆垇垈垉垊型垌垍垎垏垐垑垒垓垔垕垖垗垘垙垚垛垜垝垞垟垠垡垢垣垤垥垦垧垨垩垪垫垬垭垮垯垰垱垲垳垴垵垶垷垸垹垺垻垼垽垾垿埀埁埂埃埄埅埆埇埈埉埊埋埌埍城埏埐埑埒埓埔埕埖埗埘埙埚埛埜埝埞域埠埡埢埣埤埥埦埧埨埩埪埫埬埭埮埯埰埱埲埳埴埵埶執埸培基埻埼埽埾埿堀堁堂堃堄堅堆堇堈堉堊堋堌堍堎堏堐堑堒堓堔堕堖堗堘堙堚堛堜堝堞堟"
+ "堠堡堢堣堤堥堦堧堨堩堪堫堬堭堮堯堰報堲堳場堵堶堷堸堹堺堻堼堽堾堿塀塁塂塃塄塅塆塇塈塉塊塋塌塍塎塏塐塑塒塓塔塕塖塗塘塙塚塛塜塝塞塟塠塡塢塣塤塥塦塧塨塩塪填塬塭塮塯塰塱塲塳塴塵塶塷塸塹塺塻塼塽塾塿墀墁墂境墄墅墆墇墈墉墊墋墌墍墎墏墐墑墒墓墔墕墖増墘墙墚墛墜墝增墟墠墡墢墣墤墥墦墧墨墩墪墫墬墭墮墯墰墱墲墳墴墵墶墷墸墹墺墻墼墽墾墿壀壁壂壃壄壅壆壇壈壉壊壋壌壍壎壏壐壑壒壓壔壕壖壗壘壙壚壛壜壝壞壟壠壡壢壣壤壥壦壧壨壩壪士壬壭壮壯声壱売壳壴壵壶壷壸壹壺壻壼壽壾壿夀夁夂夃处夅夆备夈変夊夋夌复夎夏夐夑夒夓夔夕外夗夘夙多夛夜夝夞够夠夡夢夣夤夥夦大夨天太夫夬夭央夯夰失夲夳头夵夶夷夸夹夺夻夼夽夾夿奀奁奂奃奄奅奆奇奈奉奊奋奌奍奎奏奐契奒奓奔奕奖套奘奙奚奛奜奝奞奟奠奡奢奣奤奥奦奧奨奩奪奫奬奭奮奯奰奱奲女奴奵奶奷奸她奺奻奼好奾奿妀妁如妃妄妅妆妇妈妉妊妋妌妍妎妏妐妑妒妓妔妕妖妗妘妙妚妛妜妝妞妟妠妡妢妣妤妥妦妧妨妩妪妫妬妭妮妯妰妱妲妳妴妵妶妷妸妹妺妻妼妽妾妿姀姁姂姃姄姅姆姇姈姉姊始姌姍姎姏姐姑姒姓委姕姖姗姘姙姚姛姜姝姞姟姠姡姢姣姤姥姦姧姨姩姪姫姬姭姮姯姰姱姲姳姴姵姶姷姸姹姺姻姼姽姾姿娀威娂娃娄娅娆娇娈娉娊娋娌娍娎娏娐娑娒娓娔娕娖娗娘娙娚娛娜娝娞娟"
+ "娠娡娢娣娤娥娦娧娨娩娪娫娬娭娮娯娰娱娲娳娴娵娶娷娸娹娺娻娼娽娾娿婀婁婂婃婄婅婆婇婈婉婊婋婌婍婎婏婐婑婒婓婔婕婖婗婘婙婚婛婜婝婞婟婠婡婢婣婤婥婦婧婨婩婪婫婬婭婮婯婰婱婲婳婴婵婶婷婸婹婺婻婼婽婾婿媀媁媂媃媄媅媆媇媈媉媊媋媌媍媎媏媐媑媒媓媔媕媖媗媘媙媚媛媜媝媞媟媠媡媢媣媤媥媦媧媨媩媪媫媬媭媮媯媰媱媲媳媴媵媶媷媸媹媺媻媼媽媾媿嫀嫁嫂嫃嫄嫅嫆嫇嫈嫉嫊嫋嫌嫍嫎嫏嫐嫑嫒嫓嫔嫕嫖嫗嫘嫙嫚嫛嫜嫝嫞嫟嫠嫡嫢嫣嫤嫥嫦嫧嫨嫩嫪嫫嫬嫭嫮嫯嫰嫱嫲嫳嫴嫵嫶嫷嫸嫹嫺嫻嫼嫽嫾嫿嬀嬁嬂嬃嬄嬅嬆嬇嬈嬉嬊嬋嬌嬍嬎嬏嬐嬑嬒嬓嬔嬕嬖嬗嬘嬙嬚嬛嬜嬝嬞嬟嬠嬡嬢嬣嬤嬥嬦嬧嬨嬩嬪嬫嬬嬭嬮嬯嬰嬱嬲嬳嬴嬵嬶嬷嬸嬹嬺嬻嬼嬽嬾嬿孀孁孂孃孄孅孆孇孈孉孊孋孌孍孎孏子孑孒孓孔孕孖字存孙孚孛孜孝孞孟孠孡孢季孤孥学孧孨孩孪孫孬孭孮孯孰孱孲孳孴孵孶孷學孹孺孻孼孽孾孿宀宁宂它宄宅宆宇守安宊宋完宍宎宏宐宑宒宓宔宕宖宗官宙定宛宜宝实実宠审客宣室宥宦宧宨宩宪宫宬宭宮宯宰宱宲害宴宵家宷宸容宺宻宼宽宾宿寀寁寂寃寄寅密寇寈寉寊寋富寍寎寏寐寑寒寓寔寕寖寗寘寙寚寛寜寝寞察寠寡寢寣寤寥實寧寨審寪寫寬寭寮寯寰寱寲寳寴寵寶寷寸对寺寻导寽対寿尀封専尃射尅将將專尉尊尋尌對導小尐少尒尓尔尕尖尗尘尙尚尛尜尝尞尟"
+ "尠尡尢尣尤尥尦尧尨尩尪尫尬尭尮尯尰就尲尳尴尵尶尷尸尹尺尻尼尽尾尿局屁层屃屄居屆屇屈屉届屋屌屍屎屏屐屑屒屓屔展屖屗屘屙屚屛屜屝属屟屠屡屢屣層履屦屧屨屩屪屫屬屭屮屯屰山屲屳屴屵屶屷屸屹屺屻屼屽屾屿岀岁岂岃岄岅岆岇岈岉岊岋岌岍岎岏岐岑岒岓岔岕岖岗岘岙岚岛岜岝岞岟岠岡岢岣岤岥岦岧岨岩岪岫岬岭岮岯岰岱岲岳岴岵岶岷岸岹岺岻岼岽岾岿峀峁峂峃峄峅峆峇峈峉峊峋峌峍峎峏峐峑峒峓峔峕峖峗峘峙峚峛峜峝峞峟峠峡峢峣峤峥峦峧峨峩峪峫峬峭峮峯峰峱峲峳峴峵島峷峸峹峺峻峼峽峾峿崀崁崂崃崄崅崆崇崈崉崊崋崌崍崎崏崐崑崒崓崔崕崖崗崘崙崚崛崜崝崞崟崠崡崢崣崤崥崦崧崨崩崪崫崬崭崮崯崰崱崲崳崴崵崶崷崸崹崺崻崼崽崾崿嵀嵁嵂嵃嵄嵅嵆嵇嵈嵉嵊嵋嵌嵍嵎嵏嵐嵑嵒嵓嵔嵕嵖嵗嵘嵙嵚嵛嵜嵝嵞嵟嵠嵡嵢嵣嵤嵥嵦嵧嵨嵩嵪嵫嵬嵭嵮嵯嵰嵱嵲嵳嵴嵵嵶嵷嵸嵹嵺嵻嵼嵽嵾嵿嶀嶁嶂嶃嶄嶅嶆嶇嶈嶉嶊嶋嶌嶍嶎嶏嶐嶑嶒嶓嶔嶕嶖嶗嶘嶙嶚嶛嶜嶝嶞嶟嶠嶡嶢嶣嶤嶥嶦嶧嶨嶩嶪嶫嶬嶭嶮嶯嶰嶱嶲嶳嶴嶵嶶嶷嶸嶹嶺嶻嶼嶽嶾嶿巀巁巂巃巄巅巆巇巈巉巊巋巌巍巎巏巐巑巒巓巔巕巖巗巘巙巚巛巜川州巟巠巡巢巣巤工左巧巨巩巪巫巬巭差巯巰己已巳巴巵巶巷巸巹巺巻巼巽巾巿帀币市布帄帅帆帇师帉帊帋希帍帎帏帐帑帒帓帔帕帖帗帘帙帚帛帜帝帞帟"
+ "帠帡帢帣帤帥带帧帨帩帪師帬席帮帯帰帱帲帳帴帵帶帷常帹帺帻帼帽帾帿幀幁幂幃幄幅幆幇幈幉幊幋幌幍幎幏幐幑幒幓幔幕幖幗幘幙幚幛幜幝幞幟幠幡幢幣幤幥幦幧幨幩幪幫幬幭幮幯幰幱干平年幵并幷幸幹幺幻幼幽幾广庀庁庂広庄庅庆庇庈庉床庋庌庍庎序庐庑庒库应底庖店庘庙庚庛府庝庞废庠庡庢庣庤庥度座庨庩庪庫庬庭庮庯庰庱庲庳庴庵庶康庸庹庺庻庼庽庾庿廀廁廂廃廄廅廆廇廈廉廊廋廌廍廎廏廐廑廒廓廔廕廖廗廘廙廚廛廜廝廞廟廠廡廢廣廤廥廦廧廨廩廪廫廬廭廮廯廰廱廲廳廴廵延廷廸廹建廻廼廽廾廿开弁异弃弄弅弆弇弈弉弊弋弌弍弎式弐弑弒弓弔引弖弗弘弙弚弛弜弝弞弟张弡弢弣弤弥弦弧弨弩弪弫弬弭弮弯弰弱弲弳弴張弶強弸弹强弻弼弽弾弿彀彁彂彃彄彅彆彇彈彉彊彋彌彍彎彏彐彑归当彔录彖彗彘彙彚彛彜彝彞彟彠彡形彣彤彥彦彧彨彩彪彫彬彭彮彯彰影彲彳彴彵彶彷彸役彺彻彼彽彾彿往征徂徃径待徆徇很徉徊律後徍徎徏徐徑徒従徔徕徖得徘徙徚徛徜徝從徟徠御徢徣徤徥徦徧徨復循徫徬徭微徯徰徱徲徳徴徵徶德徸徹徺徻徼徽徾徿忀忁忂心忄必忆忇忈忉忊忋忌忍忎忏忐忑忒忓忔忕忖志忘忙忚忛応忝忞忟忠忡忢忣忤忥忦忧忨忩忪快忬忭忮忯忰忱忲忳忴念忶忷忸忹忺忻忼忽忾忿怀态怂怃怄怅怆怇怈怉怊怋怌怍怎怏怐怑怒怓怔怕怖怗怘怙怚怛怜思怞怟"
+ "怠怡怢怣怤急怦性怨怩怪怫怬怭怮怯怰怱怲怳怴怵怶怷怸怹怺总怼怽怾怿恀恁恂恃恄恅恆恇恈恉恊恋恌恍恎恏恐恑恒恓恔恕恖恗恘恙恚恛恜恝恞恟恠恡恢恣恤恥恦恧恨恩恪恫恬恭恮息恰恱恲恳恴恵恶恷恸恹恺恻恼恽恾恿悀悁悂悃悄悅悆悇悈悉悊悋悌悍悎悏悐悑悒悓悔悕悖悗悘悙悚悛悜悝悞悟悠悡悢患悤悥悦悧您悩悪悫悬悭悮悯悰悱悲悳悴悵悶悷悸悹悺悻悼悽悾悿惀惁惂惃惄情惆惇惈惉惊惋惌惍惎惏惐惑惒惓惔惕惖惗惘惙惚惛惜惝惞惟惠惡惢惣惤惥惦惧惨惩惪惫惬惭惮惯惰惱惲想惴惵惶惷惸惹惺惻惼惽惾惿愀愁愂愃愄愅愆愇愈愉愊愋愌愍愎意愐愑愒愓愔愕愖愗愘愙愚愛愜愝愞感愠愡愢愣愤愥愦愧愨愩愪愫愬愭愮愯愰愱愲愳愴愵愶愷愸愹愺愻愼愽愾愿慀慁慂慃慄慅慆慇慈慉慊態慌慍慎慏慐慑慒慓慔慕慖慗慘慙慚慛慜慝慞慟慠慡慢慣慤慥慦慧慨慩慪慫慬慭慮慯慰慱慲慳慴慵慶慷慸慹慺慻慼慽慾慿憀憁憂憃憄憅憆憇憈憉憊憋憌憍憎憏憐憑憒憓憔憕憖憗憘憙憚憛憜憝憞憟憠憡憢憣憤憥憦憧憨憩憪憫憬憭憮憯憰憱憲憳憴憵憶憷憸憹憺憻憼憽憾憿懀懁懂懃懄懅懆懇懈應懊懋懌懍懎懏懐懑懒懓懔懕懖懗懘懙懚懛懜懝懞懟懠懡懢懣懤懥懦懧懨懩懪懫懬懭懮懯懰懱懲懳懴懵懶懷懸懹懺懻懼懽懾懿戀戁戂戃戄戅戆戇戈戉戊戋戌戍戎戏成我戒戓戔戕或戗战戙戚戛戜戝戞戟"
+ "戠戡戢戣戤戥戦戧戨戩截戫戬戭戮戯戰戱戲戳戴戵戶户戸戹戺戻戼戽戾房所扁扂扃扄扅扆扇扈扉扊手扌才扎扏扐扑扒打扔払扖扗托扙扚扛扜扝扞扟扠扡扢扣扤扥扦执扨扩扪扫扬扭扮扯扰扱扲扳扴扵扶扷扸批扺扻扼扽找承技抁抂抃抄抅抆抇抈抉把抋抌抍抎抏抐抑抒抓抔投抖抗折抙抚抛抜抝択抟抠抡抢抣护报抦抧抨抩抪披抬抭抮抯抰抱抲抳抴抵抶抷抸抹抺抻押抽抾抿拀拁拂拃拄担拆拇拈拉拊拋拌拍拎拏拐拑拒拓拔拕拖拗拘拙拚招拜拝拞拟拠拡拢拣拤拥拦拧拨择拪拫括拭拮拯拰拱拲拳拴拵拶拷拸拹拺拻拼拽拾拿挀持挂挃挄挅挆指挈按挊挋挌挍挎挏挐挑挒挓挔挕挖挗挘挙挚挛挜挝挞挟挠挡挢挣挤挥挦挧挨挩挪挫挬挭挮振挰挱挲挳挴挵挶挷挸挹挺挻挼挽挾挿捀捁捂捃捄捅捆捇捈捉捊捋捌捍捎捏捐捑捒捓捔捕捖捗捘捙捚捛捜捝捞损捠捡换捣捤捥捦捧捨捩捪捫捬捭据捯捰捱捲捳捴捵捶捷捸捹捺捻捼捽捾捿掀掁掂掃掄掅掆掇授掉掊掋掌掍掎掏掐掑排掓掔掕掖掗掘掙掚掛掜掝掞掟掠採探掣掤接掦控推掩措掫掬掭掮掯掰掱掲掳掴掵掶掷掸掹掺掻掼掽掾掿揀揁揂揃揄揅揆揇揈揉揊揋揌揍揎描提揑插揓揔揕揖揗揘揙揚換揜揝揞揟揠握揢揣揤揥揦揧揨揩揪揫揬揭揮揯揰揱揲揳援揵揶揷揸揹揺揻揼揽揾揿搀搁搂搃搄搅搆搇搈搉搊搋搌損搎搏搐搑搒搓搔搕搖搗搘搙搚搛搜搝搞搟"
+ "搠搡搢搣搤搥搦搧搨搩搪搫搬搭搮搯搰搱搲搳搴搵搶搷搸搹携搻搼搽搾搿摀摁摂摃摄摅摆摇摈摉摊摋摌摍摎摏摐摑摒摓摔摕摖摗摘摙摚摛摜摝摞摟摠摡摢摣摤摥摦摧摨摩摪摫摬摭摮摯摰摱摲摳摴摵摶摷摸摹摺摻摼摽摾摿撀撁撂撃撄撅撆撇撈撉撊撋撌撍撎撏撐撑撒撓撔撕撖撗撘撙撚撛撜撝撞撟撠撡撢撣撤撥撦撧撨撩撪撫撬播撮撯撰撱撲撳撴撵撶撷撸撹撺撻撼撽撾撿擀擁擂擃擄擅擆擇擈擉擊擋擌操擎擏擐擑擒擓擔擕擖擗擘擙據擛擜擝擞擟擠擡擢擣擤擥擦擧擨擩擪擫擬擭擮擯擰擱擲擳擴擵擶擷擸擹擺擻擼擽擾擿攀攁攂攃攄攅攆攇攈攉攊攋攌攍攎攏攐攑攒攓攔攕攖攗攘攙攚攛攜攝攞攟攠攡攢攣攤攥攦攧攨攩攪攫攬攭攮支攰攱攲攳攴攵收攷攸改攺攻攼攽放政敀敁敂敃敄故敆敇效敉敊敋敌敍敎敏敐救敒敓敔敕敖敗敘教敚敛敜敝敞敟敠敡敢散敤敥敦敧敨敩敪敫敬敭敮敯数敱敲敳整敵敶敷數敹敺敻敼敽敾敿斀斁斂斃斄斅斆文斈斉斊斋斌斍斎斏斐斑斒斓斔斕斖斗斘料斚斛斜斝斞斟斠斡斢斣斤斥斦斧斨斩斪斫斬断斮斯新斱斲斳斴斵斶斷斸方斺斻於施斾斿旀旁旂旃旄旅旆旇旈旉旊旋旌旍旎族旐旑旒旓旔旕旖旗旘旙旚旛旜旝旞旟无旡既旣旤日旦旧旨早旪旫旬旭旮旯旰旱旲旳旴旵时旷旸旹旺旻旼旽旾旿昀昁昂昃昄昅昆昇昈昉昊昋昌昍明昏昐昑昒易昔昕昖昗昘昙昚昛昜昝昞星"
+ "映昡昢昣昤春昦昧昨昩昪昫昬昭昮是昰昱昲昳昴昵昶昷昸昹昺昻昼昽显昿晀晁時晃晄晅晆晇晈晉晊晋晌晍晎晏晐晑晒晓晔晕晖晗晘晙晚晛晜晝晞晟晠晡晢晣晤晥晦晧晨晩晪晫晬晭普景晰晱晲晳晴晵晶晷晸晹智晻晼晽晾晿暀暁暂暃暄暅暆暇暈暉暊暋暌暍暎暏暐暑暒暓暔暕暖暗暘暙暚暛暜暝暞暟暠暡暢暣暤暥暦暧暨暩暪暫暬暭暮暯暰暱暲暳暴暵暶暷暸暹暺暻暼暽暾暿曀曁曂曃曄曅曆曇曈曉曊曋曌曍曎曏曐曑曒曓曔曕曖曗曘曙曚曛曜曝曞曟曠曡曢曣曤曥曦曧曨曩曪曫曬曭曮曯曰曱曲曳更曵曶曷書曹曺曻曼曽曾替最朁朂會朄朅朆朇月有朊朋朌服朎朏朐朑朒朓朔朕朖朗朘朙朚望朜朝朞期朠朡朢朣朤朥朦朧木朩未末本札朮术朰朱朲朳朴朵朶朷朸朹机朻朼朽朾朿杀杁杂权杄杅杆杇杈杉杊杋杌杍李杏材村杒杓杔杕杖杗杘杙杚杛杜杝杞束杠条杢杣杤来杦杧杨杩杪杫杬杭杮杯杰東杲杳杴杵杶杷杸杹杺杻杼杽松板枀极枂枃构枅枆枇枈枉枊枋枌枍枎枏析枑枒枓枔枕枖林枘枙枚枛果枝枞枟枠枡枢枣枤枥枦枧枨枩枪枫枬枭枮枯枰枱枲枳枴枵架枷枸枹枺枻枼枽枾枿柀柁柂柃柄柅柆柇柈柉柊柋柌柍柎柏某柑柒染柔柕柖柗柘柙柚柛柜柝柞柟柠柡柢柣柤查柦柧柨柩柪柫柬柭柮柯柰柱柲柳柴柵柶柷柸柹柺査柼柽柾柿栀栁栂栃栄栅栆标栈栉栊栋栌栍栎栏栐树栒栓栔栕栖栗栘栙栚栛栜栝栞栟"
+ "栠校栢栣栤栥栦栧栨栩株栫栬栭栮栯栰栱栲栳栴栵栶样核根栺栻格栽栾栿桀桁桂桃桄桅框桇案桉桊桋桌桍桎桏桐桑桒桓桔桕桖桗桘桙桚桛桜桝桞桟桠桡桢档桤桥桦桧桨桩桪桫桬桭桮桯桰桱桲桳桴桵桶桷桸桹桺桻桼桽桾桿梀梁梂梃梄梅梆梇梈梉梊梋梌梍梎梏梐梑梒梓梔梕梖梗梘梙梚梛梜條梞梟梠梡梢梣梤梥梦梧梨梩梪梫梬梭梮梯械梱梲梳梴梵梶梷梸梹梺梻梼梽梾梿检棁棂棃棄棅棆棇棈棉棊棋棌棍棎棏棐棑棒棓棔棕棖棗棘棙棚棛棜棝棞棟棠棡棢棣棤棥棦棧棨棩棪棫棬棭森棯棰棱棲棳棴棵棶棷棸棹棺棻棼棽棾棿椀椁椂椃椄椅椆椇椈椉椊椋椌植椎椏椐椑椒椓椔椕椖椗椘椙椚椛検椝椞椟椠椡椢椣椤椥椦椧椨椩椪椫椬椭椮椯椰椱椲椳椴椵椶椷椸椹椺椻椼椽椾椿楀楁楂楃楄楅楆楇楈楉楊楋楌楍楎楏楐楑楒楓楔楕楖楗楘楙楚楛楜楝楞楟楠楡楢楣楤楥楦楧楨楩楪楫楬業楮楯楰楱楲楳楴極楶楷楸楹楺楻楼楽楾楿榀榁概榃榄榅榆榇榈榉榊榋榌榍榎榏榐榑榒榓榔榕榖榗榘榙榚榛榜榝榞榟榠榡榢榣榤榥榦榧榨榩榪榫榬榭榮榯榰榱榲榳榴榵榶榷榸榹榺榻榼榽榾榿槀槁槂槃槄槅槆槇槈槉槊構槌槍槎槏槐槑槒槓槔槕槖槗様槙槚槛槜槝槞槟槠槡槢槣槤槥槦槧槨槩槪槫槬槭槮槯槰槱槲槳槴槵槶槷槸槹槺槻槼槽槾槿樀樁樂樃樄樅樆樇樈樉樊樋樌樍樎樏樐樑樒樓樔樕樖樗樘標樚樛樜樝樞樟"
+ "樠模樢樣樤樥樦樧樨権横樫樬樭樮樯樰樱樲樳樴樵樶樷樸樹樺樻樼樽樾樿橀橁橂橃橄橅橆橇橈橉橊橋橌橍橎橏橐橑橒橓橔橕橖橗橘橙橚橛橜橝橞機橠橡橢橣橤橥橦橧橨橩橪橫橬橭橮橯橰橱橲橳橴橵橶橷橸橹橺橻橼橽橾橿檀檁檂檃檄檅檆檇檈檉檊檋檌檍檎檏檐檑檒檓檔檕檖檗檘檙檚檛檜檝檞檟檠檡檢檣檤檥檦檧檨檩檪檫檬檭檮檯檰檱檲檳檴檵檶檷檸檹檺檻檼檽檾檿櫀櫁櫂櫃櫄櫅櫆櫇櫈櫉櫊櫋櫌櫍櫎櫏櫐櫑櫒櫓櫔櫕櫖櫗櫘櫙櫚櫛櫜櫝櫞櫟櫠櫡櫢櫣櫤櫥櫦櫧櫨櫩櫪櫫櫬櫭櫮櫯櫰櫱櫲櫳櫴櫵櫶櫷櫸櫹櫺櫻櫼櫽櫾櫿欀欁欂欃欄欅欆欇欈欉權欋欌欍欎欏欐欑欒欓欔欕欖欗欘欙欚欛欜欝欞欟欠次欢欣欤欥欦欧欨欩欪欫欬欭欮欯欰欱欲欳欴欵欶欷欸欹欺欻欼欽款欿歀歁歂歃歄歅歆歇歈歉歊歋歌歍歎歏歐歑歒歓歔歕歖歗歘歙歚歛歜歝歞歟歠歡止正此步武歧歨歩歪歫歬歭歮歯歰歱歲歳歴歵歶歷歸歹歺死歼歽歾歿殀殁殂殃殄殅殆殇殈殉殊残殌殍殎殏殐殑殒殓殔殕殖殗殘殙殚殛殜殝殞殟殠殡殢殣殤殥殦殧殨殩殪殫殬殭殮殯殰殱殲殳殴段殶殷殸殹殺殻殼殽殾殿毀毁毂毃毄毅毆毇毈毉毊毋毌母毎每毐毑毒毓比毕毖毗毘毙毚毛毜毝毞毟毠毡毢毣毤毥毦毧毨毩毪毫毬毭毮毯毰毱毲毳毴毵毶毷毸毹毺毻毼毽毾毿氀氁氂氃氄氅氆氇氈氉氊氋氌氍氎氏氐民氒氓气氕氖気氘氙氚氛氜氝氞氟"
+ "氠氡氢氣氤氥氦氧氨氩氪氫氬氭氮氯氰氱氲氳水氵氶氷永氹氺氻氼氽氾氿汀汁求汃汄汅汆汇汈汉汊汋汌汍汎汏汐汑汒汓汔汕汖汗汘汙汚汛汜汝汞江池污汢汣汤汥汦汧汨汩汪汫汬汭汮汯汰汱汲汳汴汵汶汷汸汹決汻汼汽汾汿沀沁沂沃沄沅沆沇沈沉沊沋沌沍沎沏沐沑沒沓沔沕沖沗沘沙沚沛沜沝沞沟沠没沢沣沤沥沦沧沨沩沪沫沬沭沮沯沰沱沲河沴沵沶沷沸油沺治沼沽沾沿泀況泂泃泄泅泆泇泈泉泊泋泌泍泎泏泐泑泒泓泔法泖泗泘泙泚泛泜泝泞泟泠泡波泣泤泥泦泧注泩泪泫泬泭泮泯泰泱泲泳泴泵泶泷泸泹泺泻泼泽泾泿洀洁洂洃洄洅洆洇洈洉洊洋洌洍洎洏洐洑洒洓洔洕洖洗洘洙洚洛洜洝洞洟洠洡洢洣洤津洦洧洨洩洪洫洬洭洮洯洰洱洲洳洴洵洶洷洸洹洺活洼洽派洿浀流浂浃浄浅浆浇浈浉浊测浌浍济浏浐浑浒浓浔浕浖浗浘浙浚浛浜浝浞浟浠浡浢浣浤浥浦浧浨浩浪浫浬浭浮浯浰浱浲浳浴浵浶海浸浹浺浻浼浽浾浿涀涁涂涃涄涅涆涇消涉涊涋涌涍涎涏涐涑涒涓涔涕涖涗涘涙涚涛涜涝涞涟涠涡涢涣涤涥润涧涨涩涪涫涬涭涮涯涰涱液涳涴涵涶涷涸涹涺涻涼涽涾涿淀淁淂淃淄淅淆淇淈淉淊淋淌淍淎淏淐淑淒淓淔淕淖淗淘淙淚淛淜淝淞淟淠淡淢淣淤淥淦淧淨淩淪淫淬淭淮淯淰深淲淳淴淵淶混淸淹淺添淼淽淾淿渀渁渂渃渄清渆渇済渉渊渋渌渍渎渏渐渑渒渓渔渕渖渗渘渙渚減渜渝渞渟"
+ "渠渡渢渣渤渥渦渧渨温渪渫測渭渮港渰渱渲渳渴渵渶渷游渹渺渻渼渽渾渿湀湁湂湃湄湅湆湇湈湉湊湋湌湍湎湏湐湑湒湓湔湕湖湗湘湙湚湛湜湝湞湟湠湡湢湣湤湥湦湧湨湩湪湫湬湭湮湯湰湱湲湳湴湵湶湷湸湹湺湻湼湽湾湿満溁溂溃溄溅溆溇溈溉溊溋溌溍溎溏源溑溒溓溔溕準溗溘溙溚溛溜溝溞溟溠溡溢溣溤溥溦溧溨溩溪溫溬溭溮溯溰溱溲溳溴溵溶溷溸溹溺溻溼溽溾溿滀滁滂滃滄滅滆滇滈滉滊滋滌滍滎滏滐滑滒滓滔滕滖滗滘滙滚滛滜滝滞滟滠满滢滣滤滥滦滧滨滩滪滫滬滭滮滯滰滱滲滳滴滵滶滷滸滹滺滻滼滽滾滿漀漁漂漃漄漅漆漇漈漉漊漋漌漍漎漏漐漑漒漓演漕漖漗漘漙漚漛漜漝漞漟漠漡漢漣漤漥漦漧漨漩漪漫漬漭漮漯漰漱漲漳漴漵漶漷漸漹漺漻漼漽漾漿潀潁潂潃潄潅潆潇潈潉潊潋潌潍潎潏潐潑潒潓潔潕潖潗潘潙潚潛潜潝潞潟潠潡潢潣潤潥潦潧潨潩潪潫潬潭潮潯潰潱潲潳潴潵潶潷潸潹潺潻潼潽潾潿澀澁澂澃澄澅澆澇澈澉澊澋澌澍澎澏澐澑澒澓澔澕澖澗澘澙澚澛澜澝澞澟澠澡澢澣澤澥澦澧澨澩澪澫澬澭澮澯澰澱澲澳澴澵澶澷澸澹澺澻澼澽澾澿激濁濂濃濄濅濆濇濈濉濊濋濌濍濎濏濐濑濒濓濔濕濖濗濘濙濚濛濜濝濞濟濠濡濢濣濤濥濦濧濨濩濪濫濬濭濮濯濰濱濲濳濴濵濶濷濸濹濺濻濼濽濾濿瀀瀁瀂瀃瀄瀅瀆瀇瀈瀉瀊瀋瀌瀍瀎瀏瀐瀑瀒瀓瀔瀕瀖瀗瀘瀙瀚瀛瀜瀝瀞瀟"
+ "瀠瀡瀢瀣瀤瀥瀦瀧瀨瀩瀪瀫瀬瀭瀮瀯瀰瀱瀲瀳瀴瀵瀶瀷瀸瀹瀺瀻瀼瀽瀾瀿灀灁灂灃灄灅灆灇灈灉灊灋灌灍灎灏灐灑灒灓灔灕灖灗灘灙灚灛灜灝灞灟灠灡灢灣灤灥灦灧灨灩灪火灬灭灮灯灰灱灲灳灴灵灶灷灸灹灺灻灼災灾灿炀炁炂炃炄炅炆炇炈炉炊炋炌炍炎炏炐炑炒炓炔炕炖炗炘炙炚炛炜炝炞炟炠炡炢炣炤炥炦炧炨炩炪炫炬炭炮炯炰炱炲炳炴炵炶炷炸点為炻炼炽炾炿烀烁烂烃烄烅烆烇烈烉烊烋烌烍烎烏烐烑烒烓烔烕烖烗烘烙烚烛烜烝烞烟烠烡烢烣烤烥烦烧烨烩烪烫烬热烮烯烰烱烲烳烴烵烶烷烸烹烺烻烼烽烾烿焀焁焂焃焄焅焆焇焈焉焊焋焌焍焎焏焐焑焒焓焔焕焖焗焘焙焚焛焜焝焞焟焠無焢焣焤焥焦焧焨焩焪焫焬焭焮焯焰焱焲焳焴焵然焷焸焹焺焻焼焽焾焿煀煁煂煃煄煅煆煇煈煉煊煋煌煍煎煏煐煑煒煓煔煕煖煗煘煙煚煛煜煝煞煟煠煡煢煣煤煥煦照煨煩煪煫煬煭煮煯煰煱煲煳煴煵煶煷煸煹煺煻煼煽煾煿熀熁熂熃熄熅熆熇熈熉熊熋熌熍熎熏熐熑熒熓熔熕熖熗熘熙熚熛熜熝熞熟熠熡熢熣熤熥熦熧熨熩熪熫熬熭熮熯熰熱熲熳熴熵熶熷熸熹熺熻熼熽熾熿燀燁燂燃燄燅燆燇燈燉燊燋燌燍燎燏燐燑燒燓燔燕燖燗燘燙燚燛燜燝燞營燠燡燢燣燤燥燦燧燨燩燪燫燬燭燮燯燰燱燲燳燴燵燶燷燸燹燺燻燼燽燾燿爀爁爂爃爄爅爆爇爈爉爊爋爌爍爎爏爐爑爒爓爔爕爖爗爘爙爚爛爜爝爞爟"
+ "爠爡爢爣爤爥爦爧爨爩爪爫爬爭爮爯爰爱爲爳爴爵父爷爸爹爺爻爼爽爾爿牀牁牂牃牄牅牆片版牉牊牋牌牍牎牏牐牑牒牓牔牕牖牗牘牙牚牛牜牝牞牟牠牡牢牣牤牥牦牧牨物牪牫牬牭牮牯牰牱牲牳牴牵牶牷牸特牺牻牼牽牾牿犀犁犂犃犄犅犆犇犈犉犊犋犌犍犎犏犐犑犒犓犔犕犖犗犘犙犚犛犜犝犞犟犠犡犢犣犤犥犦犧犨犩犪犫犬犭犮犯犰犱犲犳犴犵状犷犸犹犺犻犼犽犾犿狀狁狂狃狄狅狆狇狈狉狊狋狌狍狎狏狐狑狒狓狔狕狖狗狘狙狚狛狜狝狞狟狠狡狢狣狤狥狦狧狨狩狪狫独狭狮狯狰狱狲狳狴狵狶狷狸狹狺狻狼狽狾狿猀猁猂猃猄猅猆猇猈猉猊猋猌猍猎猏猐猑猒猓猔猕猖猗猘猙猚猛猜猝猞猟猠猡猢猣猤猥猦猧猨猩猪猫猬猭献猯猰猱猲猳猴猵猶猷猸猹猺猻猼猽猾猿獀獁獂獃獄獅獆獇獈獉獊獋獌獍獎獏獐獑獒獓獔獕獖獗獘獙獚獛獜獝獞獟獠獡獢獣獤獥獦獧獨獩獪獫獬獭獮獯獰獱獲獳獴獵獶獷獸獹獺獻獼獽獾獿玀玁玂玃玄玅玆率玈玉玊王玌玍玎玏玐玑玒玓玔玕玖玗玘玙玚玛玜玝玞玟玠玡玢玣玤玥玦玧玨玩玪玫玬玭玮环现玱玲玳玴玵玶玷玸玹玺玻玼玽玾玿珀珁珂珃珄珅珆珇珈珉珊珋珌珍珎珏珐珑珒珓珔珕珖珗珘珙珚珛珜珝珞珟珠珡珢珣珤珥珦珧珨珩珪珫珬班珮珯珰珱珲珳珴珵珶珷珸珹珺珻珼珽現珿琀琁琂球琄琅理琇琈琉琊琋琌琍琎琏琐琑琒琓琔琕琖琗琘琙琚琛琜琝琞琟"
+ "琠琡琢琣琤琥琦琧琨琩琪琫琬琭琮琯琰琱琲琳琴琵琶琷琸琹琺琻琼琽琾琿瑀瑁瑂瑃瑄瑅瑆瑇瑈瑉瑊瑋瑌瑍瑎瑏瑐瑑瑒瑓瑔瑕瑖瑗瑘瑙瑚瑛瑜瑝瑞瑟瑠瑡瑢瑣瑤瑥瑦瑧瑨瑩瑪瑫瑬瑭瑮瑯瑰瑱瑲瑳瑴瑵瑶瑷瑸瑹瑺瑻瑼瑽瑾瑿璀璁璂璃璄璅璆璇璈璉璊璋璌璍璎璏璐璑璒璓璔璕璖璗璘璙璚璛璜璝璞璟璠璡璢璣璤璥璦璧璨璩璪璫璬璭璮璯環璱璲璳璴璵璶璷璸璹璺璻璼璽璾璿瓀瓁瓂瓃瓄瓅瓆瓇瓈瓉瓊瓋瓌瓍瓎瓏瓐瓑瓒瓓瓔瓕瓖瓗瓘瓙瓚瓛瓜瓝瓞瓟瓠瓡瓢瓣瓤瓥瓦瓧瓨瓩瓪瓫瓬瓭瓮瓯瓰瓱瓲瓳瓴瓵瓶瓷瓸瓹瓺瓻瓼瓽瓾瓿甀甁甂甃甄甅甆甇甈甉甊甋甌甍甎甏甐甑甒甓甔甕甖甗甘甙甚甛甜甝甞生甠甡產産甤甥甦甧用甩甪甫甬甭甮甯", "田由甲申甴电甶男甸甹町画甼甽甾甿畀畁畂畃畄畅畆畇畈畉畊畋界畍畎畏畐畑畒畓畔畕畖畗畘留畚畛畜畝畞畟畠畡畢畣畤略畦畧畨畩番畫畬畭畮畯異畱畲畳畴畵當畷畸畹畺畻畼畽畾畿疀疁疂疃疄疅疆疇疈疉疊疋疌疍疎疏疐疑疒疓疔疕疖疗疘疙疚疛疜疝疞疟疠疡疢疣疤疥疦疧疨疩疪疫疬疭疮疯疰疱疲疳疴疵疶疷疸疹疺疻疼疽疾疿痀痁痂痃痄病痆症痈痉痊痋痌痍痎痏痐痑痒痓痔痕痖痗痘痙痚痛痜痝痞痟痠痡痢痣痤痥痦痧痨痩痪痫痬痭痮痯痰痱痲痳痴痵痶痷痸痹痺痻痼痽痾痿瘀瘁瘂瘃瘄瘅瘆瘇瘈瘉瘊瘋瘌瘍瘎瘏瘐瘑瘒瘓瘔瘕瘖瘗瘘瘙瘚瘛瘜瘝瘞瘟瘠瘡瘢瘣瘤瘥瘦瘧瘨瘩瘪瘫瘬瘭瘮瘯瘰瘱瘲瘳瘴瘵瘶瘷瘸瘹瘺瘻瘼瘽瘾瘿癀癁療癃癄癅癆癇癈癉癊癋癌癍癎癏癐癑癒癓癔癕癖癗癘癙癚癛癜癝癞癟癠癡癢癣癤癥癦癧癨癩癪癫癬癭癮癯癰癱癲癳癴癵癶癷癸癹発登發白百癿皀皁皂皃的皅皆皇皈皉皊皋皌皍皎皏皐皑皒皓皔皕皖皗皘皙皚皛皜皝皞皟皠皡皢皣皤皥皦皧皨皩皪皫皬皭皮皯皰皱皲皳皴皵皶皷皸皹皺皻皼皽皾皿盀盁盂盃盄盅盆盇盈盉益盋盌盍盎盏盐监盒盓盔盕盖盗盘盙盚盛盜盝盞盟盠盡盢監盤盥盦盧盨盩盪盫盬盭目盯盰盱盲盳直盵盶盷相盹盺盻盼盽盾盿眀省眂眃眄眅眆眇眈眉眊看県眍眎眏眐眑眒眓眔眕眖眗眘眙眚眛眜眝眞真眠眡眢眣眤眥眦眧眨眩眪眫眬眭眮眯"
+ "眰眱眲眳眴眵眶眷眸眹眺眻眼眽眾眿着睁睂睃睄睅睆睇睈睉睊睋睌睍睎睏睐睑睒睓睔睕睖睗睘睙睚睛睜睝睞睟睠睡睢督睤睥睦睧睨睩睪睫睬睭睮睯睰睱睲睳睴睵睶睷睸睹睺睻睼睽睾睿瞀瞁瞂瞃瞄瞅瞆瞇瞈瞉瞊瞋瞌瞍瞎瞏瞐瞑瞒瞓瞔瞕瞖瞗瞘瞙瞚瞛瞜瞝瞞瞟瞠瞡瞢瞣瞤瞥瞦瞧瞨瞩瞪瞫瞬瞭瞮瞯瞰瞱瞲瞳瞴瞵瞶瞷瞸瞹瞺瞻瞼瞽瞾瞿矀矁矂矃矄矅矆矇矈矉矊矋矌矍矎矏矐矑矒矓矔矕矖矗矘矙矚矛矜矝矞矟矠矡矢矣矤知矦矧矨矩矪矫矬短矮矯矰矱矲石矴矵矶矷矸矹矺矻矼矽矾矿砀码砂砃砄砅砆砇砈砉砊砋砌砍砎砏砐砑砒砓研砕砖砗砘砙砚砛砜砝砞砟砠砡砢砣砤砥砦砧砨砩砪砫砬砭砮砯砰砱砲砳破砵砶砷砸砹砺砻砼砽砾砿础硁硂硃硄硅硆硇硈硉硊硋硌硍硎硏硐硑硒硓硔硕硖硗硘硙硚硛硜硝硞硟硠硡硢硣硤硥硦硧硨硩硪硫硬硭确硯硰硱硲硳硴硵硶硷硸硹硺硻硼硽硾硿碀碁碂碃碄碅碆碇碈碉碊碋碌碍碎碏碐碑碒碓碔碕碖碗碘碙碚碛碜碝碞碟碠碡碢碣碤碥碦碧碨碩碪碫碬碭碮碯碰碱碲碳碴碵碶碷碸碹確碻碼碽碾碿磀磁磂磃磄磅磆磇磈磉磊磋磌磍磎磏磐磑磒磓磔磕磖磗磘磙磚磛磜磝磞磟磠磡磢磣磤磥磦磧磨磩磪磫磬磭磮磯磰磱磲磳磴磵磶磷磸磹磺磻磼磽磾磿礀礁礂礃礄礅礆礇礈礉礊礋礌礍礎礏礐礑礒礓礔礕礖礗礘礙礚礛礜礝礞礟礠礡礢礣礤礥礦礧礨礩礪礫礬礭礮礯"
+ "礰礱礲礳礴礵礶礷礸礹示礻礼礽社礿祀祁祂祃祄祅祆祇祈祉祊祋祌祍祎祏祐祑祒祓祔祕祖祗祘祙祚祛祜祝神祟祠祡祢祣祤祥祦祧票祩祪祫祬祭祮祯祰祱祲祳祴祵祶祷祸祹祺祻祼祽祾祿禀禁禂禃禄禅禆禇禈禉禊禋禌禍禎福禐禑禒禓禔禕禖禗禘禙禚禛禜禝禞禟禠禡禢禣禤禥禦禧禨禩禪禫禬禭禮禯禰禱禲禳禴禵禶禷禸禹禺离禼禽禾禿秀私秂秃秄秅秆秇秈秉秊秋秌种秎秏秐科秒秓秔秕秖秗秘秙秚秛秜秝秞租秠秡秢秣秤秥秦秧秨秩秪秫秬秭秮积称秱秲秳秴秵秶秷秸秹秺移秼秽秾秿稀稁稂稃稄稅稆稇稈稉稊程稌稍税稏稐稑稒稓稔稕稖稗稘稙稚稛稜稝稞稟稠稡稢稣稤稥稦稧稨稩稪稫稬稭種稯稰稱稲稳稴稵稶稷稸稹稺稻稼稽稾稿穀穁穂穃穄穅穆穇穈穉穊穋穌積穎穏穐穑穒穓穔穕穖穗穘穙穚穛穜穝穞穟穠穡穢穣穤穥穦穧穨穩穪穫穬穭穮穯穰穱穲穳穴穵究穷穸穹空穻穼穽穾穿窀突窂窃窄窅窆窇窈窉窊窋窌窍窎窏窐窑窒窓窔窕窖窗窘窙窚窛窜窝窞窟窠窡窢窣窤窥窦窧窨窩窪窫窬窭窮窯窰窱窲窳窴窵窶窷窸窹窺窻窼窽窾窿竀竁竂竃竄竅竆竇竈竉竊立竌竍竎竏竐竑竒竓竔竕竖竗竘站竚竛竜竝竞竟章竡竢竣竤童竦竧竨竩竪竫竬竭竮端竰竱竲竳竴竵競竷竸竹竺竻竼竽竾竿笀笁笂笃笄笅笆笇笈笉笊笋笌笍笎笏笐笑笒笓笔笕笖笗笘笙笚笛笜笝笞笟笠笡笢笣笤笥符笧笨笩笪笫第笭笮笯"
+ "笰笱笲笳笴笵笶笷笸笹笺笻笼笽笾笿筀筁筂筃筄筅筆筇筈等筊筋筌筍筎筏筐筑筒筓答筕策筗筘筙筚筛筜筝筞筟筠筡筢筣筤筥筦筧筨筩筪筫筬筭筮筯筰筱筲筳筴筵筶筷筸筹筺筻筼筽签筿简箁箂箃箄箅箆箇箈箉箊箋箌箍箎箏箐箑箒箓箔箕箖算箘箙箚箛箜箝箞箟箠管箢箣箤箥箦箧箨箩箪箫箬箭箮箯箰箱箲箳箴箵箶箷箸箹箺箻箼箽箾箿節篁篂篃範篅篆篇篈築篊篋篌篍篎篏篐篑篒篓篔篕篖篗篘篙篚篛篜篝篞篟篠篡篢篣篤篥篦篧篨篩篪篫篬篭篮篯篰篱篲篳篴篵篶篷篸篹篺篻篼篽篾篿簀簁簂簃簄簅簆簇簈簉簊簋簌簍簎簏簐簑簒簓簔簕簖簗簘簙簚簛簜簝簞簟簠簡簢簣簤簥簦簧簨簩簪簫簬簭簮簯簰簱簲簳簴簵簶簷簸簹簺簻簼簽簾簿籀籁籂籃籄籅籆籇籈籉籊籋籌籍籎籏籐籑籒籓籔籕籖籗籘籙籚籛籜籝籞籟籠籡籢籣籤籥籦籧籨籩籪籫籬籭籮籯籰籱籲米籴籵籶籷籸籹籺类籼籽籾籿粀粁粂粃粄粅粆粇粈粉粊粋粌粍粎粏粐粑粒粓粔粕粖粗粘粙粚粛粜粝粞粟粠粡粢粣粤粥粦粧粨粩粪粫粬粭粮粯粰粱粲粳粴粵粶粷粸粹粺粻粼粽精粿糀糁糂糃糄糅糆糇糈糉糊糋糌糍糎糏糐糑糒糓糔糕糖糗糘糙糚糛糜糝糞糟糠糡糢糣糤糥糦糧糨糩糪糫糬糭糮糯糰糱糲糳糴糵糶糷糸糹糺系糼糽糾糿紀紁紂紃約紅紆紇紈紉紊紋紌納紎紏紐紑紒紓純紕紖紗紘紙級紛紜紝紞紟素紡索紣紤紥紦紧紨紩紪紫紬紭紮累"
+ "細紱紲紳紴紵紶紷紸紹紺紻紼紽紾紿絀絁終絃組絅絆絇絈絉絊絋経絍絎絏結絑絒絓絔絕絖絗絘絙絚絛絜絝絞絟絠絡絢絣絤絥給絧絨絩絪絫絬絭絮絯絰統絲絳絴絵絶絷絸絹絺絻絼絽絾絿綀綁綂綃綄綅綆綇綈綉綊綋綌綍綎綏綐綑綒經綔綕綖綗綘継続綛綜綝綞綟綠綡綢綣綤綥綦綧綨綩綪綫綬維綮綯綰綱網綳綴綵綶綷綸綹綺綻綼綽綾綿緀緁緂緃緄緅緆緇緈緉緊緋緌緍緎総緐緑緒緓緔緕緖緗緘緙線緛緜緝緞緟締緡緢緣緤緥緦緧編緩緪緫緬緭緮緯緰緱緲緳練緵緶緷緸緹緺緻緼緽緾緿縀縁縂縃縄縅縆縇縈縉縊縋縌縍縎縏縐縑縒縓縔縕縖縗縘縙縚縛縜縝縞縟縠縡縢縣縤縥縦縧縨縩縪縫縬縭縮縯縰縱縲縳縴縵縶縷縸縹縺縻縼總績縿繀繁繂繃繄繅繆繇繈繉繊繋繌繍繎繏繐繑繒繓織繕繖繗繘繙繚繛繜繝繞繟繠繡繢繣繤繥繦繧繨繩繪繫繬繭繮繯繰繱繲繳繴繵繶繷繸繹繺繻繼繽繾繿纀纁纂纃纄纅纆纇纈纉纊纋續纍纎纏纐纑纒纓纔纕纖纗纘纙纚纛纜纝纞纟纠纡红纣纤纥约级纨纩纪纫纬纭纮纯纰纱纲纳纴纵纶纷纸纹纺纻纼纽纾线绀绁绂练组绅细织终绉绊绋绌绍绎经绐绑绒结绔绕绖绗绘给绚绛络绝绞统绠绡绢绣绤绥绦继绨绩绪绫绬续绮绯绰绱绲绳维绵绶绷绸绹绺绻综绽绾绿缀缁缂缃缄缅缆缇缈缉缊缋缌缍缎缏缐缑缒缓缔缕编缗缘缙缚缛缜缝缞缟缠缡缢缣缤缥缦缧缨缩缪缫缬缭缮缯"
+ "缰缱缲缳缴缵缶缷缸缹缺缻缼缽缾缿罀罁罂罃罄罅罆罇罈罉罊罋罌罍罎罏罐网罒罓罔罕罖罗罘罙罚罛罜罝罞罟罠罡罢罣罤罥罦罧罨罩罪罫罬罭置罯罰罱署罳罴罵罶罷罸罹罺罻罼罽罾罿羀羁羂羃羄羅羆羇羈羉羊羋羌羍美羏羐羑羒羓羔羕羖羗羘羙羚羛羜羝羞羟羠羡羢羣群羥羦羧羨義羪羫羬羭羮羯羰羱羲羳羴羵羶羷羸羹羺羻羼羽羾羿翀翁翂翃翄翅翆翇翈翉翊翋翌翍翎翏翐翑習翓翔翕翖翗翘翙翚翛翜翝翞翟翠翡翢翣翤翥翦翧翨翩翪翫翬翭翮翯翰翱翲翳翴翵翶翷翸翹翺翻翼翽翾翿耀老耂考耄者耆耇耈耉耊耋而耍耎耏耐耑耒耓耔耕耖耗耘耙耚耛耜耝耞耟耠耡耢耣耤耥耦耧耨耩耪耫耬耭耮耯耰耱耲耳耴耵耶耷耸耹耺耻耼耽耾耿聀聁聂聃聄聅聆聇聈聉聊聋职聍聎聏聐聑聒聓联聕聖聗聘聙聚聛聜聝聞聟聠聡聢聣聤聥聦聧聨聩聪聫聬聭聮聯聰聱聲聳聴聵聶職聸聹聺聻聼聽聾聿肀肁肂肃肄肅肆肇肈肉肊肋肌肍肎肏肐肑肒肓肔肕肖肗肘肙肚肛肜肝肞肟肠股肢肣肤肥肦肧肨肩肪肫肬肭肮肯肰肱育肳肴肵肶肷肸肹肺肻肼肽肾肿胀胁胂胃胄胅胆胇胈胉胊胋背胍胎胏胐胑胒胓胔胕胖胗胘胙胚胛胜胝胞胟胠胡胢胣胤胥胦胧胨胩胪胫胬胭胮胯胰胱胲胳胴胵胶胷胸胹胺胻胼能胾胿脀脁脂脃脄脅脆脇脈脉脊脋脌脍脎脏脐脑脒脓脔脕脖脗脘脙脚脛脜脝脞脟脠脡脢脣脤脥脦脧脨脩脪脫脬脭脮脯"
+ "脰脱脲脳脴脵脶脷脸脹脺脻脼脽脾脿腀腁腂腃腄腅腆腇腈腉腊腋腌腍腎腏腐腑腒腓腔腕腖腗腘腙腚腛腜腝腞腟腠腡腢腣腤腥腦腧腨腩腪腫腬腭腮腯腰腱腲腳腴腵腶腷腸腹腺腻腼腽腾腿膀膁膂膃膄膅膆膇膈膉膊膋膌膍膎膏膐膑膒膓膔膕膖膗膘膙膚膛膜膝膞膟膠膡膢膣膤膥膦膧膨膩膪膫膬膭膮膯膰膱膲膳膴膵膶膷膸膹膺膻膼膽膾膿臀臁臂臃臄臅臆臇臈臉臊臋臌臍臎臏臐臑臒臓臔臕臖臗臘臙臚臛臜臝臞臟臠臡臢臣臤臥臦臧臨臩自臫臬臭臮臯臰臱臲至致臵臶臷臸臹臺臻臼臽臾臿舀舁舂舃舄舅舆與興舉舊舋舌舍舎舏舐舑舒舓舔舕舖舗舘舙舚舛舜舝舞舟舠舡舢舣舤舥舦舧舨舩航舫般舭舮舯舰舱舲舳舴舵舶舷舸船舺舻舼舽舾舿艀艁艂艃艄艅艆艇艈艉艊艋艌艍艎艏艐艑艒艓艔艕艖艗艘艙艚艛艜艝艞艟艠艡艢艣艤艥艦艧艨艩艪艫艬艭艮良艰艱色艳艴艵艶艷艸艹艺艻艼艽艾艿芀芁节芃芄芅芆芇芈芉芊芋芌芍芎芏芐芑芒芓芔芕芖芗芘芙芚芛芜芝芞芟芠芡芢芣芤芥芦芧芨芩芪芫芬芭芮芯芰花芲芳芴芵芶芷芸芹芺芻芼芽芾芿苀苁苂苃苄苅苆苇苈苉苊苋苌苍苎苏苐苑苒苓苔苕苖苗苘苙苚苛苜苝苞苟苠苡苢苣苤若苦苧苨苩苪苫苬苭苮苯苰英苲苳苴苵苶苷苸苹苺苻苼苽苾苿茀茁茂范茄茅茆茇茈茉茊茋茌茍茎茏茐茑茒茓茔茕茖茗茘茙茚茛茜茝茞茟茠茡茢茣茤茥茦茧茨茩茪茫茬茭茮茯"
+ "茰茱茲茳茴茵茶茷茸茹茺茻茼茽茾茿荀荁荂荃荄荅荆荇荈草荊荋荌荍荎荏荐荑荒荓荔荕荖荗荘荙荚荛荜荝荞荟荠荡荢荣荤荥荦荧荨荩荪荫荬荭荮药荰荱荲荳荴荵荶荷荸荹荺荻荼荽荾荿莀莁莂莃莄莅莆莇莈莉莊莋莌莍莎莏莐莑莒莓莔莕莖莗莘莙莚莛莜莝莞莟莠莡莢莣莤莥莦莧莨莩莪莫莬莭莮莯莰莱莲莳莴莵莶获莸莹莺莻莼莽莾莿菀菁菂菃菄菅菆菇菈菉菊菋菌菍菎菏菐菑菒菓菔菕菖菗菘菙菚菛菜菝菞菟菠菡菢菣菤菥菦菧菨菩菪菫菬菭菮華菰菱菲菳菴菵菶菷菸菹菺菻菼菽菾菿萀萁萂萃萄萅萆萇萈萉萊萋萌萍萎萏萐萑萒萓萔萕萖萗萘萙萚萛萜萝萞萟萠萡萢萣萤营萦萧萨萩萪萫萬萭萮萯萰萱萲萳萴萵萶萷萸萹萺萻萼落萾萿葀葁葂葃葄葅葆葇葈葉葊葋葌葍葎葏葐葑葒葓葔葕葖著葘葙葚葛葜葝葞葟葠葡葢董葤葥葦葧葨葩葪葫葬葭葮葯葰葱葲葳葴葵葶葷葸葹葺葻葼葽葾葿蒀蒁蒂蒃蒄蒅蒆蒇蒈蒉蒊蒋蒌蒍蒎蒏蒐蒑蒒蒓蒔蒕蒖蒗蒘蒙蒚蒛蒜蒝蒞蒟蒠蒡蒢蒣蒤蒥蒦蒧蒨蒩蒪蒫蒬蒭蒮蒯蒰蒱蒲蒳蒴蒵蒶蒷蒸蒹蒺蒻蒼蒽蒾蒿蓀蓁蓂蓃蓄蓅蓆蓇蓈蓉蓊蓋蓌蓍蓎蓏蓐蓑蓒蓓蓔蓕蓖蓗蓘蓙蓚蓛蓜蓝蓞蓟蓠蓡蓢蓣蓤蓥蓦蓧蓨蓩蓪蓫蓬蓭蓮蓯蓰蓱蓲蓳蓴蓵蓶蓷蓸蓹蓺蓻蓼蓽蓾蓿蔀蔁蔂蔃蔄蔅蔆蔇蔈蔉蔊蔋蔌蔍蔎蔏蔐蔑蔒蔓蔔蔕蔖蔗蔘蔙蔚蔛蔜蔝蔞蔟蔠蔡蔢蔣蔤蔥蔦蔧蔨蔩蔪蔫蔬蔭蔮蔯"
+ "蔰蔱蔲蔳蔴蔵蔶蔷蔸蔹蔺蔻蔼蔽蔾蔿蕀蕁蕂蕃蕄蕅蕆蕇蕈蕉蕊蕋蕌蕍蕎蕏蕐蕑蕒蕓蕔蕕蕖蕗蕘蕙蕚蕛蕜蕝蕞蕟蕠蕡蕢蕣蕤蕥蕦蕧蕨蕩蕪蕫蕬蕭蕮蕯蕰蕱蕲蕳蕴蕵蕶蕷蕸蕹蕺蕻蕼蕽蕾蕿薀薁薂薃薄薅薆薇薈薉薊薋薌薍薎薏薐薑薒薓薔薕薖薗薘薙薚薛薜薝薞薟薠薡薢薣薤薥薦薧薨薩薪薫薬薭薮薯薰薱薲薳薴薵薶薷薸薹薺薻薼薽薾薿藀藁藂藃藄藅藆藇藈藉藊藋藌藍藎藏藐藑藒藓藔藕藖藗藘藙藚藛藜藝藞藟藠藡藢藣藤藥藦藧藨藩藪藫藬藭藮藯藰藱藲藳藴藵藶藷藸藹藺藻藼藽藾藿蘀蘁蘂蘃蘄蘅蘆蘇蘈蘉蘊蘋蘌蘍蘎蘏蘐蘑蘒蘓蘔蘕蘖蘗蘘蘙蘚蘛蘜蘝蘞蘟蘠蘡蘢蘣蘤蘥蘦蘧蘨蘩蘪蘫蘬蘭蘮蘯蘰蘱蘲蘳蘴蘵蘶蘷蘸蘹蘺蘻蘼蘽蘾蘿虀虁虂虃虄虅虆虇虈虉虊虋虌虍虎虏虐虑虒虓虔處虖虗虘虙虚虛虜虝虞號虠虡虢虣虤虥虦虧虨虩虪虫虬虭虮虯虰虱虲虳虴虵虶虷虸虹虺虻虼虽虾虿蚀蚁蚂蚃蚄蚅蚆蚇蚈蚉蚊蚋蚌蚍蚎蚏蚐蚑蚒蚓蚔蚕蚖蚗蚘蚙蚚蚛蚜蚝蚞蚟蚠蚡蚢蚣蚤蚥蚦蚧蚨蚩蚪蚫蚬蚭蚮蚯蚰蚱蚲蚳蚴蚵蚶蚷蚸蚹蚺蚻蚼蚽蚾蚿蛀蛁蛂蛃蛄蛅蛆蛇蛈蛉蛊蛋蛌蛍蛎蛏蛐蛑蛒蛓蛔蛕蛖蛗蛘蛙蛚蛛蛜蛝蛞蛟蛠蛡蛢蛣蛤蛥蛦蛧蛨蛩蛪蛫蛬蛭蛮蛯蛰蛱蛲蛳蛴蛵蛶蛷蛸蛹蛺蛻蛼蛽蛾蛿蜀蜁蜂蜃蜄蜅蜆蜇蜈蜉蜊蜋蜌蜍蜎蜏蜐蜑蜒蜓蜔蜕蜖蜗蜘蜙蜚蜛蜜蜝蜞蜟蜠蜡蜢蜣蜤蜥蜦蜧蜨蜩蜪蜫蜬蜭蜮蜯"
+ "蜰蜱蜲蜳蜴蜵蜶蜷蜸蜹蜺蜻蜼蜽蜾蜿蝀蝁蝂蝃蝄蝅蝆蝇蝈蝉蝊蝋蝌蝍蝎蝏蝐蝑蝒蝓蝔蝕蝖蝗蝘蝙蝚蝛蝜蝝蝞蝟蝠蝡蝢蝣蝤蝥蝦蝧蝨蝩蝪蝫蝬蝭蝮蝯蝰蝱蝲蝳蝴蝵蝶蝷蝸蝹蝺蝻蝼蝽蝾蝿螀螁螂螃螄螅螆螇螈螉螊螋螌融螎螏螐螑螒螓螔螕螖螗螘螙螚螛螜螝螞螟螠螡螢螣螤螥螦螧螨螩螪螫螬螭螮螯螰螱螲螳螴螵螶螷螸螹螺螻螼螽螾螿蟀蟁蟂蟃蟄蟅蟆蟇蟈蟉蟊蟋蟌蟍蟎蟏蟐蟑蟒蟓蟔蟕蟖蟗蟘蟙蟚蟛蟜蟝蟞蟟蟠蟡蟢蟣蟤蟥蟦蟧蟨蟩蟪蟫蟬蟭蟮蟯蟰蟱蟲蟳蟴蟵蟶蟷蟸蟹蟺蟻蟼蟽蟾蟿蠀蠁蠂蠃蠄蠅蠆蠇蠈蠉蠊蠋蠌蠍蠎蠏蠐蠑蠒蠓蠔蠕蠖蠗蠘蠙蠚蠛蠜蠝蠞蠟蠠蠡蠢蠣蠤蠥蠦蠧蠨蠩蠪蠫蠬蠭蠮蠯蠰蠱蠲蠳蠴蠵蠶蠷蠸蠹蠺蠻蠼蠽蠾蠿血衁衂衃衄衅衆衇衈衉衊衋行衍衎衏衐衑衒術衔衕衖街衘衙衚衛衜衝衞衟衠衡衢衣衤补衦衧表衩衪衫衬衭衮衯衰衱衲衳衴衵衶衷衸衹衺衻衼衽衾衿袀袁袂袃袄袅袆袇袈袉袊袋袌袍袎袏袐袑袒袓袔袕袖袗袘袙袚袛袜袝袞袟袠袡袢袣袤袥袦袧袨袩袪被袬袭袮袯袰袱袲袳袴袵袶袷袸袹袺袻袼袽袾袿裀裁裂裃裄装裆裇裈裉裊裋裌裍裎裏裐裑裒裓裔裕裖裗裘裙裚裛補裝裞裟裠裡裢裣裤裥裦裧裨裩裪裫裬裭裮裯裰裱裲裳裴裵裶裷裸裹裺裻裼製裾裿褀褁褂褃褄褅褆複褈褉褊褋褌褍褎褏褐褑褒褓褔褕褖褗褘褙褚褛褜褝褞褟褠褡褢褣褤褥褦褧褨褩褪褫褬褭褮褯"
+ "褰褱褲褳褴褵褶褷褸褹褺褻褼褽褾褿襀襁襂襃襄襅襆襇襈襉襊襋襌襍襎襏襐襑襒襓襔襕襖襗襘襙襚襛襜襝襞襟襠襡襢襣襤襥襦襧襨襩襪襫襬襭襮襯襰襱襲襳襴襵襶襷襸襹襺襻襼襽襾西覀要覂覃覄覅覆覇覈覉覊見覌覍覎規覐覑覒覓覔覕視覗覘覙覚覛覜覝覞覟覠覡覢覣覤覥覦覧覨覩親覫覬覭覮覯覰覱覲観覴覵覶覷覸覹覺覻覼覽覾覿觀见观觃规觅视觇览觉觊觋觌觍觎觏觐觑角觓觔觕觖觗觘觙觚觛觜觝觞觟觠觡觢解觤觥触觧觨觩觪觫觬觭觮觯觰觱觲觳觴觵觶觷觸觹觺觻觼觽觾觿言訁訂訃訄訅訆訇計訉訊訋訌訍討訏訐訑訒訓訔訕訖託記訙訚訛訜訝訞訟訠訡訢訣訤訥訦訧訨訩訪訫訬設訮訯訰許訲訳訴訵訶訷訸訹診註証訽訾訿詀詁詂詃詄詅詆詇詈詉詊詋詌詍詎詏詐詑詒詓詔評詖詗詘詙詚詛詜詝詞詟詠詡詢詣詤詥試詧詨詩詪詫詬詭詮詯詰話該詳詴詵詶詷詸詹詺詻詼詽詾詿誀誁誂誃誄誅誆誇誈誉誊誋誌認誎誏誐誑誒誓誔誕誖誗誘誙誚誛誜誝語誟誠誡誢誣誤誥誦誧誨誩說誫説読誮誯誰誱課誳誴誵誶誷誸誹誺誻誼誽誾調諀諁諂諃諄諅諆談諈諉諊請諌諍諎諏諐諑諒諓諔諕論諗諘諙諚諛諜諝諞諟諠諡諢諣諤諥諦諧諨諩諪諫諬諭諮諯諰諱諲諳諴諵諶諷諸諹諺諻諼諽諾諿謀謁謂謃謄謅謆謇謈謉謊謋謌謍謎謏謐謑謒謓謔謕謖謗謘謙謚講謜謝謞謟謠謡謢謣謤謥謦謧謨謩謪謫謬謭謮謯"
+ "謰謱謲謳謴謵謶謷謸謹謺謻謼謽謾謿譀譁譂譃譄譅譆譇譈證譊譋譌譍譎譏譐譑譒譓譔譕譖譗識譙譚譛譜譝譞譟譠譡譢譣譤譥警譧譨譩譪譫譬譭譮譯議譱譲譳譴譵譶護譸譹譺譻譼譽譾譿讀讁讂讃讄讅讆讇讈讉變讋讌讍讎讏讐讑讒讓讔讕讖讗讘讙讚讛讜讝讞讟讠计订讣认讥讦讧讨让讪讫讬训议讯记讱讲讳讴讵讶讷许讹论讻讼讽设访诀证诂诃评诅识诇诈诉诊诋诌词诎诏诐译诒诓诔试诖诗诘诙诚诛诜话诞诟诠诡询诣诤该详诧诨诩诪诫诬语诮误诰诱诲诳说诵诶请诸诹诺读诼诽课诿谀谁谂调谄谅谆谇谈谉谊谋谌谍谎谏谐谑谒谓谔谕谖谗谘谙谚谛谜谝谞谟谠谡谢谣谤谥谦谧谨谩谪谫谬谭谮谯谰谱谲谳谴谵谶谷谸谹谺谻谼谽谾谿豀豁豂豃豄豅豆豇豈豉豊豋豌豍豎豏豐豑豒豓豔豕豖豗豘豙豚豛豜豝豞豟豠象豢豣豤豥豦豧豨豩豪豫豬豭豮豯豰豱豲豳豴豵豶豷豸豹豺豻豼豽豾豿貀貁貂貃貄貅貆貇貈貉貊貋貌貍貎貏貐貑貒貓貔貕貖貗貘貙貚貛貜貝貞貟負財貢貣貤貥貦貧貨販貪貫責貭貮貯貰貱貲貳貴貵貶買貸貹貺費貼貽貾貿賀賁賂賃賄賅賆資賈賉賊賋賌賍賎賏賐賑賒賓賔賕賖賗賘賙賚賛賜賝賞賟賠賡賢賣賤賥賦賧賨賩質賫賬賭賮賯賰賱賲賳賴賵賶賷賸賹賺賻購賽賾賿贀贁贂贃贄贅贆贇贈贉贊贋贌贍贎贏贐贑贒贓贔贕贖贗贘贙贚贛贜贝贞负贠贡财责贤败账货质贩贪贫贬购贮贯"
+ "贰贱贲贳贴贵贶贷贸费贺贻贼贽贾贿赀赁赂赃资赅赆赇赈赉赊赋赌赍赎赏赐赑赒赓赔赕赖赗赘赙赚赛赜赝赞赟赠赡赢赣赤赥赦赧赨赩赪赫赬赭赮赯走赱赲赳赴赵赶起赸赹赺赻赼赽赾赿趀趁趂趃趄超趆趇趈趉越趋趌趍趎趏趐趑趒趓趔趕趖趗趘趙趚趛趜趝趞趟趠趡趢趣趤趥趦趧趨趩趪趫趬趭趮趯趰趱趲足趴趵趶趷趸趹趺趻趼趽趾趿跀跁跂跃跄跅跆跇跈跉跊跋跌跍跎跏跐跑跒跓跔跕跖跗跘跙跚跛跜距跞跟跠跡跢跣跤跥跦跧跨跩跪跫跬跭跮路跰跱跲跳跴践跶跷跸跹跺跻跼跽跾跿踀踁踂踃踄踅踆踇踈踉踊踋踌踍踎踏踐踑踒踓踔踕踖踗踘踙踚踛踜踝踞踟踠踡踢踣踤踥踦踧踨踩踪踫踬踭踮踯踰踱踲踳踴踵踶踷踸踹踺踻踼踽踾踿蹀蹁蹂蹃蹄蹅蹆蹇蹈蹉蹊蹋蹌蹍蹎蹏蹐蹑蹒蹓蹔蹕蹖蹗蹘蹙蹚蹛蹜蹝蹞蹟蹠蹡蹢蹣蹤蹥蹦蹧蹨蹩蹪蹫蹬蹭蹮蹯蹰蹱蹲蹳蹴蹵蹶蹷蹸蹹蹺蹻蹼蹽蹾蹿躀躁躂躃躄躅躆躇躈躉躊躋躌躍躎躏躐躑躒躓躔躕躖躗躘躙躚躛躜躝躞躟躠躡躢躣躤躥躦躧躨躩躪身躬躭躮躯躰躱躲躳躴躵躶躷躸躹躺躻躼躽躾躿軀軁軂軃軄軅軆軇軈軉車軋軌軍軎軏軐軑軒軓軔軕軖軗軘軙軚軛軜軝軞軟軠軡転軣軤軥軦軧軨軩軪軫軬軭軮軯軰軱軲軳軴軵軶軷軸軹軺軻軼軽軾軿輀輁輂較輄輅輆輇輈載輊輋輌輍輎輏輐輑輒輓輔輕輖輗輘輙輚輛輜輝輞輟輠輡輢輣輤輥輦輧輨輩輪輫輬輭輮輯"
+ "輰輱輲輳輴輵輶輷輸輹輺輻輼輽輾輿轀轁轂轃轄轅轆轇轈轉轊轋轌轍轎轏轐轑轒轓轔轕轖轗轘轙轚轛轜轝轞轟轠轡轢轣轤轥车轧轨轩轪轫转轭轮软轰轱轲轳轴轵轶轷轸轹轺轻轼载轾轿辀辁辂较辄辅辆辇辈辉辊辋辌辍辎辏辐辑辒输辔辕辖辗辘辙辚辛辜辝辞辟辠辡辢辣辤辥辦辧辨辩辪辫辬辭辮辯辰辱農辳辴辵辶辷辸边辺辻込辽达辿迀迁迂迃迄迅迆过迈迉迊迋迌迍迎迏运近迒迓返迕迖迗还这迚进远违连迟迠迡迢迣迤迥迦迧迨迩迪迫迬迭迮迯述迱迲迳迴迵迶迷迸迹迺迻迼追迾迿退送适逃逄逅逆逇逈选逊逋逌逍逎透逐逑递逓途逕逖逗逘這通逛逜逝逞速造逡逢連逤逥逦逧逨逩逪逫逬逭逮逯逰週進逳逴逵逶逷逸逹逺逻逼逽逾逿遀遁遂遃遄遅遆遇遈遉遊運遌遍過遏遐遑遒道達違遖遗遘遙遚遛遜遝遞遟遠遡遢遣遤遥遦遧遨適遪遫遬遭遮遯遰遱遲遳遴遵遶遷選遹遺遻遼遽遾避邀邁邂邃還邅邆邇邈邉邊邋邌邍邎邏邐邑邒邓邔邕邖邗邘邙邚邛邜邝邞邟邠邡邢那邤邥邦邧邨邩邪邫邬邭邮邯邰邱邲邳邴邵邶邷邸邹邺邻邼邽邾邿郀郁郂郃郄郅郆郇郈郉郊郋郌郍郎郏郐郑郒郓郔郕郖郗郘郙郚郛郜郝郞郟郠郡郢郣郤郥郦郧部郩郪郫郬郭郮郯郰郱郲郳郴郵郶郷郸郹郺郻郼都郾郿鄀鄁鄂鄃鄄鄅鄆鄇鄈鄉鄊鄋鄌鄍鄎鄏鄐鄑鄒鄓鄔鄕鄖鄗鄘鄙鄚鄛鄜鄝鄞鄟鄠鄡鄢鄣鄤鄥鄦鄧鄨鄩鄪鄫鄬鄭鄮鄯"
+ "鄰鄱鄲鄳鄴鄵鄶鄷鄸鄹鄺鄻鄼鄽鄾鄿酀酁酂酃酄酅酆酇酈酉酊酋酌配酎酏酐酑酒酓酔酕酖酗酘酙酚酛酜酝酞酟酠酡酢酣酤酥酦酧酨酩酪酫酬酭酮酯酰酱酲酳酴酵酶酷酸酹酺酻酼酽酾酿醀醁醂醃醄醅醆醇醈醉醊醋醌醍醎醏醐醑醒醓醔醕醖醗醘醙醚醛醜醝醞醟醠醡醢醣醤醥醦醧醨醩醪醫醬醭醮醯醰醱醲醳醴醵醶醷醸醹醺醻醼醽醾醿釀釁釂釃釄釅釆采釈釉释釋里重野量釐金釒釓釔釕釖釗釘釙釚釛釜針釞釟釠釡釢釣釤釥釦釧釨釩釪釫釬釭釮釯釰釱釲釳釴釵釶釷釸釹釺釻釼釽釾釿鈀鈁鈂鈃鈄鈅鈆鈇鈈鈉鈊鈋鈌鈍鈎鈏鈐鈑鈒鈓鈔鈕鈖鈗鈘鈙鈚鈛鈜鈝鈞鈟鈠鈡鈢鈣鈤鈥鈦鈧鈨鈩鈪鈫鈬鈭鈮鈯鈰鈱鈲鈳鈴鈵鈶鈷鈸鈹鈺鈻鈼鈽鈾鈿鉀鉁鉂鉃鉄鉅鉆鉇鉈鉉鉊鉋鉌鉍鉎鉏鉐鉑鉒鉓鉔鉕鉖鉗鉘鉙鉚鉛鉜鉝鉞鉟鉠鉡鉢鉣鉤鉥鉦鉧鉨鉩鉪鉫鉬鉭鉮鉯鉰鉱鉲鉳鉴鉵鉶鉷鉸鉹鉺鉻鉼鉽鉾鉿銀銁銂銃銄銅銆銇銈銉銊銋銌銍銎銏銐銑銒銓銔銕銖銗銘銙銚銛銜銝銞銟銠銡銢銣銤銥銦銧銨銩銪銫銬銭銮銯銰銱銲銳銴銵銶銷銸銹銺銻銼銽銾銿鋀鋁鋂鋃鋄鋅鋆鋇鋈鋉鋊鋋鋌鋍鋎鋏鋐鋑鋒鋓鋔鋕鋖鋗鋘鋙鋚鋛鋜鋝鋞鋟鋠鋡鋢鋣鋤鋥鋦鋧鋨鋩鋪鋫鋬鋭鋮鋯鋰鋱鋲鋳鋴鋵鋶鋷鋸鋹鋺鋻鋼鋽鋾鋿錀錁錂錃錄錅錆錇錈錉錊錋錌錍錎錏錐錑錒錓錔錕錖錗錘錙錚錛錜錝錞錟錠錡錢錣錤錥錦錧錨錩錪錫錬錭錮錯"
+ "錰錱録錳錴錵錶錷錸錹錺錻錼錽錾錿鍀鍁鍂鍃鍄鍅鍆鍇鍈鍉鍊鍋鍌鍍鍎鍏鍐鍑鍒鍓鍔鍕鍖鍗鍘鍙鍚鍛鍜鍝鍞鍟鍠鍡鍢鍣鍤鍥鍦鍧鍨鍩鍪鍫鍬鍭鍮鍯鍰鍱鍲鍳鍴鍵鍶鍷鍸鍹鍺鍻鍼鍽鍾鍿鎀鎁鎂鎃鎄鎅鎆鎇鎈鎉鎊鎋鎌鎍鎎鎏鎐鎑鎒鎓鎔鎕鎖鎗鎘鎙鎚鎛鎜鎝鎞鎟鎠鎡鎢鎣鎤鎥鎦鎧鎨鎩鎪鎫鎬鎭鎮鎯鎰鎱鎲鎳鎴鎵鎶鎷鎸鎹鎺鎻鎼鎽鎾鎿鏀鏁鏂鏃鏄鏅鏆鏇鏈鏉鏊鏋鏌鏍鏎鏏鏐鏑鏒鏓鏔鏕鏖鏗鏘鏙鏚鏛鏜鏝鏞鏟鏠鏡鏢鏣鏤鏥鏦鏧鏨鏩鏪鏫鏬鏭鏮鏯鏰鏱鏲鏳鏴鏵鏶鏷鏸鏹鏺鏻鏼鏽鏾鏿鐀鐁鐂鐃鐄鐅鐆鐇鐈鐉鐊鐋鐌鐍鐎鐏鐐鐑鐒鐓鐔鐕鐖鐗鐘鐙鐚鐛鐜鐝鐞鐟鐠鐡鐢鐣鐤鐥鐦鐧鐨鐩鐪鐫鐬鐭鐮鐯鐰鐱鐲鐳鐴鐵鐶鐷鐸鐹鐺鐻鐼鐽鐾鐿鑀鑁鑂鑃鑄鑅鑆鑇鑈鑉鑊鑋鑌鑍鑎鑏鑐鑑鑒鑓鑔鑕鑖鑗鑘鑙鑚鑛鑜鑝鑞鑟鑠鑡鑢鑣鑤鑥鑦鑧鑨鑩鑪鑫鑬鑭鑮鑯鑰鑱鑲鑳鑴鑵鑶鑷鑸鑹鑺鑻鑼鑽鑾鑿钀钁钂钃钄钅钆钇针钉钊钋钌钍钎钏钐钑钒钓钔钕钖钗钘钙钚钛钜钝钞钟钠钡钢钣钤钥钦钧钨钩钪钫钬钭钮钯钰钱钲钳钴钵钶钷钸钹钺钻钼钽钾钿铀铁铂铃铄铅铆铇铈铉铊铋铌铍铎铏铐铑铒铓铔铕铖铗铘铙铚铛铜铝铞铟铠铡铢铣铤铥铦铧铨铩铪铫铬铭铮铯铰铱铲铳铴铵银铷铸铹铺铻铼铽链铿销锁锂锃锄锅锆锇锈锉锊锋锌锍锎锏锐锑锒锓锔锕锖锗锘错锚锛锜锝锞锟锠锡锢锣锤锥锦锧锨锩锪锫锬锭键锯"
+ "锰锱锲锳锴锵锶锷锸锹锺锻锼锽锾锿镀镁镂镃镄镅镆镇镈镉镊镋镌镍镎镏镐镑镒镓镔镕镖镗镘镙镚镛镜镝镞镟镠镡镢镣镤镥镦镧镨镩镪镫镬镭镮镯镰镱镲镳镴镵镶長镸镹镺镻镼镽镾长門閁閂閃閄閅閆閇閈閉閊開閌閍閎閏閐閑閒間閔閕閖閗閘閙閚閛閜閝閞閟閠閡関閣閤閥閦閧閨閩閪閫閬閭閮閯閰閱閲閳閴閵閶閷閸閹閺閻閼閽閾閿闀闁闂闃闄闅闆闇闈闉闊闋闌闍闎闏闐闑闒闓闔闕闖闗闘闙闚闛關闝闞闟闠闡闢闣闤闥闦闧门闩闪闫闬闭问闯闰闱闲闳间闵闶闷闸闹闺闻闼闽闾闿阀阁阂阃阄阅阆阇阈阉阊阋阌阍阎阏阐阑阒阓阔阕阖阗阘阙阚阛阜阝阞队阠阡阢阣阤阥阦阧阨阩阪阫阬阭阮阯阰阱防阳阴阵阶阷阸阹阺阻阼阽阾阿陀陁陂陃附际陆陇陈陉陊陋陌降陎陏限陑陒陓陔陕陖陗陘陙陚陛陜陝陞陟陠陡院陣除陥陦陧陨险陪陫陬陭陮陯陰陱陲陳陴陵陶陷陸陹険陻陼陽陾陿隀隁隂隃隄隅隆隇隈隉隊隋隌隍階随隐隑隒隓隔隕隖隗隘隙隚際障隝隞隟隠隡隢隣隤隥隦隧隨隩險隫隬隭隮隯隰隱隲隳隴隵隶隷隸隹隺隻隼隽难隿雀雁雂雃雄雅集雇雈雉雊雋雌雍雎雏雐雑雒雓雔雕雖雗雘雙雚雛雜雝雞雟雠雡離難雤雥雦雧雨雩雪雫雬雭雮雯雰雱雲雳雴雵零雷雸雹雺電雼雽雾雿需霁霂霃霄霅霆震霈霉霊霋霌霍霎霏霐霑霒霓霔霕霖霗霘霙霚霛霜霝霞霟霠霡霢霣霤霥霦霧霨霩霪霫霬霭霮霯"
+ "霰霱露霳霴霵霶霷霸霹霺霻霼霽霾霿靀靁靂靃靄靅靆靇靈靉靊靋靌靍靎靏靐靑青靓靔靕靖靗靘静靚靛靜靝非靟靠靡面靣靤靥靦靧靨革靪靫靬靭靮靯靰靱靲靳靴靵靶靷靸靹靺靻靼靽靾靿鞀鞁鞂鞃鞄鞅鞆鞇鞈鞉鞊鞋鞌鞍鞎鞏鞐鞑鞒鞓鞔鞕鞖鞗鞘鞙鞚鞛鞜鞝鞞鞟鞠鞡鞢鞣鞤鞥鞦鞧鞨鞩鞪鞫鞬鞭鞮鞯鞰鞱鞲鞳鞴鞵鞶鞷鞸鞹鞺鞻鞼鞽鞾鞿韀韁韂韃韄韅韆韇韈韉韊韋韌韍韎韏韐韑韒韓韔韕韖韗韘韙韚韛韜韝韞韟韠韡韢韣韤韥韦韧韨韩韪韫韬韭韮韯韰韱韲音韴韵韶韷韸韹韺韻韼韽韾響頀頁頂頃頄項順頇須頉頊頋頌頍頎頏預頑頒頓頔頕頖頗領頙頚頛頜頝頞頟頠頡頢頣頤頥頦頧頨頩頪頫頬頭頮頯頰頱頲頳頴頵頶頷頸頹頺頻頼頽頾頿顀顁顂顃顄顅顆顇顈顉顊顋題額顎顏顐顑顒顓顔顕顖顗願顙顚顛顜顝類顟顠顡顢顣顤顥顦顧顨顩顪顫顬顭顮顯顰顱顲顳顴页顶顷顸项顺须顼顽顾顿颀颁颂颃预颅领颇颈颉颊颋颌颍颎颏颐频颒颓颔颕颖颗题颙颚颛颜额颞颟颠颡颢颣颤颥颦颧風颩颪颫颬颭颮颯颰颱颲颳颴颵颶颷颸颹颺颻颼颽颾颿飀飁飂飃飄飅飆飇飈飉飊飋飌飍风飏飐飑飒飓飔飕飖飗飘飙飚飛飜飝飞食飠飡飢飣飤飥飦飧飨飩飪飫飬飭飮飯飰飱飲飳飴飵飶飷飸飹飺飻飼飽飾飿餀餁餂餃餄餅餆餇餈餉養餋餌餍餎餏餐餑餒餓餔餕餖餗餘餙餚餛餜餝餞餟餠餡餢餣餤餥餦餧館餩餪餫餬餭餮餯"
+ "餰餱餲餳餴餵餶餷餸餹餺餻餼餽餾餿饀饁饂饃饄饅饆饇饈饉饊饋饌饍饎饏饐饑饒饓饔饕饖饗饘饙饚饛饜饝饞饟饠饡饢饣饤饥饦饧饨饩饪饫饬饭饮饯饰饱饲饳饴饵饶饷饸饹饺饻饼饽饾饿馀馁馂馃馄馅馆馇馈馉馊馋馌馍馎馏馐馑馒馓馔馕首馗馘香馚馛馜馝馞馟馠馡馢馣馤馥馦馧馨馩馪馫馬馭馮馯馰馱馲馳馴馵馶馷馸馹馺馻馼馽馾馿駀駁駂駃駄駅駆駇駈駉駊駋駌駍駎駏駐駑駒駓駔駕駖駗駘駙駚駛駜駝駞駟駠駡駢駣駤駥駦駧駨駩駪駫駬駭駮駯駰駱駲駳駴駵駶駷駸駹駺駻駼駽駾駿騀騁騂騃騄騅騆騇騈騉騊騋騌騍騎騏騐騑騒験騔騕騖騗騘騙騚騛騜騝騞騟騠騡騢騣騤騥騦騧騨騩騪騫騬騭騮騯騰騱騲騳騴騵騶騷騸騹騺騻騼騽騾騿驀驁驂驃驄驅驆驇驈驉驊驋驌驍驎驏驐驑驒驓驔驕驖驗驘驙驚驛驜驝驞驟驠驡驢驣驤驥驦驧驨驩驪驫马驭驮驯驰驱驲驳驴驵驶驷驸驹驺驻驼驽驾驿骀骁骂骃骄骅骆骇骈骉骊骋验骍骎骏骐骑骒骓骔骕骖骗骘骙骚骛骜骝骞骟骠骡骢骣骤骥骦骧骨骩骪骫骬骭骮骯骰骱骲骳骴骵骶骷骸骹骺骻骼骽骾骿髀髁髂髃髄髅髆髇髈髉髊髋髌髍髎髏髐髑髒髓體髕髖髗高髙髚髛髜髝髞髟髠髡髢髣髤髥髦髧髨髩髪髫髬髭髮髯髰髱髲髳髴髵髶髷髸髹髺髻髼髽髾髿鬀鬁鬂鬃鬄鬅鬆鬇鬈鬉鬊鬋鬌鬍鬎鬏鬐鬑鬒鬓鬔鬕鬖鬗鬘鬙鬚鬛鬜鬝鬞鬟鬠鬡鬢鬣鬤鬥鬦鬧鬨鬩鬪鬫鬬鬭鬮鬯"
+ "鬰鬱鬲鬳鬴鬵鬶鬷鬸鬹鬺鬻鬼鬽鬾鬿魀魁魂魃魄魅魆魇魈魉魊魋魌魍魎魏魐魑魒魓魔魕魖魗魘魙魚魛魜魝魞魟魠魡魢魣魤魥魦魧魨魩魪魫魬魭魮魯魰魱魲魳魴魵魶魷魸魹魺魻魼魽魾魿鮀鮁鮂鮃鮄鮅鮆鮇鮈鮉鮊鮋鮌鮍鮎鮏鮐鮑鮒鮓鮔鮕鮖鮗鮘鮙鮚鮛鮜鮝鮞鮟鮠鮡鮢鮣鮤鮥鮦鮧鮨鮩鮪鮫鮬鮭鮮鮯鮰鮱鮲鮳鮴鮵鮶鮷鮸鮹鮺鮻鮼鮽鮾鮿鯀鯁鯂鯃鯄鯅鯆鯇鯈鯉鯊鯋鯌鯍鯎鯏鯐鯑鯒鯓鯔鯕鯖鯗鯘鯙鯚鯛鯜鯝鯞鯟鯠鯡鯢鯣鯤鯥鯦鯧鯨鯩鯪鯫鯬鯭鯮鯯鯰鯱鯲鯳鯴鯵鯶鯷鯸鯹鯺鯻鯼鯽鯾鯿鰀鰁鰂鰃鰄鰅鰆鰇鰈鰉鰊鰋鰌鰍鰎鰏鰐鰑鰒鰓鰔鰕鰖鰗鰘鰙鰚鰛鰜鰝鰞鰟鰠鰡鰢鰣鰤鰥鰦鰧鰨鰩鰪鰫鰬鰭鰮鰯鰰鰱鰲鰳鰴鰵鰶鰷鰸鰹鰺鰻鰼鰽鰾鰿", "鱀鱁鱂鱃鱄鱅鱆鱇鱈鱉鱊鱋鱌鱍鱎鱏鱐鱑鱒鱓鱔鱕鱖鱗鱘鱙鱚鱛鱜鱝鱞鱟鱠鱡鱢鱣鱤鱥鱦鱧鱨鱩鱪鱫鱬鱭鱮鱯鱰鱱鱲鱳鱴鱵鱶鱷鱸鱹鱺鱻鱼鱽鱾鱿鲀鲁鲂鲃鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳚鳛鳜鳝鳞鳟鳠鳡鳢鳣鳤鳥鳦鳧鳨鳩鳪鳫鳬鳭鳮鳯鳰鳱鳲鳳鳴鳵鳶鳷鳸鳹鳺鳻鳼鳽鳾鳿鴀鴁鴂鴃鴄鴅鴆鴇鴈鴉鴊鴋鴌鴍鴎鴏鴐鴑鴒鴓鴔鴕鴖鴗鴘鴙鴚鴛鴜鴝鴞鴟鴠鴡鴢鴣鴤鴥鴦鴧鴨鴩鴪鴫鴬鴭鴮鴯鴰鴱鴲鴳鴴鴵鴶鴷鴸鴹鴺鴻鴼鴽鴾鴿鵀鵁鵂鵃鵄鵅鵆鵇鵈鵉鵊鵋鵌鵍鵎鵏鵐鵑鵒鵓鵔鵕鵖鵗鵘鵙鵚鵛鵜鵝鵞鵟鵠鵡鵢鵣鵤鵥鵦鵧鵨鵩鵪鵫鵬鵭鵮鵯鵰鵱鵲鵳鵴鵵鵶鵷鵸鵹鵺鵻鵼鵽鵾鵿鶀鶁鶂鶃鶄鶅鶆鶇鶈鶉鶊鶋鶌鶍鶎鶏鶐鶑鶒鶓鶔鶕鶖鶗鶘鶙鶚鶛鶜鶝鶞鶟鶠鶡鶢鶣鶤鶥鶦鶧鶨鶩鶪鶫鶬鶭鶮鶯鶰鶱鶲鶳鶴鶵鶶鶷鶸鶹鶺鶻鶼鶽鶾鶿鷀鷁鷂鷃鷄鷅鷆鷇鷈鷉鷊鷋鷌鷍鷎鷏鷐鷑鷒鷓鷔鷕鷖鷗鷘鷙鷚鷛鷜鷝鷞鷟鷠鷡鷢鷣鷤鷥鷦鷧鷨鷩鷪鷫鷬鷭鷮鷯鷰鷱鷲鷳鷴鷵鷶鷷鷸鷹鷺鷻鷼鷽鷾鷿鸀鸁鸂鸃鸄鸅鸆鸇鸈鸉鸊鸋鸌鸍鸎鸏鸐鸑鸒鸓鸔鸕鸖鸗鸘鸙鸚鸛鸜鸝鸞鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿"
+ "鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹙鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹮鹯鹰鹱鹲鹳鹴鹵鹶鹷鹸鹹鹺鹻鹼鹽鹾鹿麀麁麂麃麄麅麆麇麈麉麊麋麌麍麎麏麐麑麒麓麔麕麖麗麘麙麚麛麜麝麞麟麠麡麢麣麤麥麦麧麨麩麪麫麬麭麮麯麰麱麲麳麴麵麶麷麸麹麺麻麼麽麾麿黀黁黂黃黄黅黆黇黈黉黊黋黌黍黎黏黐黑黒黓黔黕黖黗默黙黚黛黜黝點黟黠黡黢黣黤黥黦黧黨黩黪黫黬黭黮黯黰黱黲黳黴黵黶黷黸黹黺黻黼黽黾黿鼀鼁鼂鼃鼄鼅鼆鼇鼈鼉鼊鼋鼌鼍鼎鼏鼐鼑鼒鼓鼔鼕鼖鼗鼘鼙鼚鼛鼜鼝鼞鼟鼠鼡鼢鼣鼤鼥鼦鼧鼨鼩鼪鼫鼬鼭鼮鼯鼰鼱鼲鼳鼴鼵鼶鼷鼸鼹鼺鼻鼼鼽鼾鼿齀齁齂齃齄齅齆齇齈齉齊齋齌齍齎齏齐齑齒齓齔齕齖齗齘齙齚齛齜齝齞齟齠齡齢齣齤齥齦齧齨齩齪齫齬齭齮齯齰齱齲齳齴齵齶齷齸齹齺齻齼齽齾齿龀龁龂龃龄龅龆龇龈龉龊龋龌龍龎龏龐龑龒龓龔龕龖龗龘龙龚龛龜龝龞龟龠龡龢龣龤龥龦龧龨龩龪龫龬龭龮龯龰龱龲龳龴龵龶龷龸龹龺龻龼龽龾龿鿀鿁鿂鿃鿄鿅鿆鿇鿈鿉鿊鿋鿌鿍鿎鿏鿐鿑鿒鿓鿔鿕鿖鿗鿘鿙鿚鿛鿜鿝鿞鿟鿠鿡鿢鿣鿤鿥鿦鿧鿨鿩鿪鿫鿬鿭鿮鿯鿰鿱鿲鿳鿴鿵鿶鿷鿸鿹鿺鿻鿼鿽鿾鿿ꀀꀁꀂꀃꀄꀅꀆꀇꀈꀉꀊꀋꀌꀍꀎꀏꀐꀑꀒꀓꀔꀕꀖꀗꀘꀙꀚꀛꀜꀝꀞꀟꀠꀡꀢꀣꀤꀥꀦꀧꀨꀩꀪꀫꀬꀭꀮꀯꀰꀱꀲꀳꀴꀵꀶꀷꀸꀹꀺꀻꀼꀽꀾꀿ"
+ "ꁀꁁꁂꁃꁄꁅꁆꁇꁈꁉꁊꁋꁌꁍꁎꁏꁐꁑꁒꁓꁔꁕꁖꁗꁘꁙꁚꁛꁜꁝꁞꁟꁠꁡꁢꁣꁤꁥꁦꁧꁨꁩꁪꁫꁬꁭꁮꁯꁰꁱꁲꁳꁴꁵꁶꁷꁸꁹꁺꁻꁼꁽꁾꁿꂀꂁꂂꂃꂄꂅꂆꂇꂈꂉꂊꂋꂌꂍꂎꂏꂐꂑꂒꂓꂔꂕꂖꂗꂘꂙꂚꂛꂜꂝꂞꂟꂠꂡꂢꂣꂤꂥꂦꂧꂨꂩꂪꂫꂬꂭꂮꂯꂰꂱꂲꂳꂴꂵꂶꂷꂸꂹꂺꂻꂼꂽꂾꂿꃀꃁꃂꃃꃄꃅꃆꃇꃈꃉꃊꃋꃌꃍꃎꃏꃐꃑꃒꃓꃔꃕꃖꃗꃘꃙꃚꃛꃜꃝꃞꃟꃠꃡꃢꃣꃤꃥꃦꃧꃨꃩꃪꃫꃬꃭꃮꃯꃰꃱꃲꃳꃴꃵꃶꃷꃸꃹꃺꃻꃼꃽꃾꃿꄀꄁꄂꄃꄄꄅꄆꄇꄈꄉꄊꄋꄌꄍꄎꄏꄐꄑꄒꄓꄔꄕꄖꄗꄘꄙꄚꄛꄜꄝꄞꄟꄠꄡꄢꄣꄤꄥꄦꄧꄨꄩꄪꄫꄬꄭꄮꄯꄰꄱꄲꄳꄴꄵꄶꄷꄸꄹꄺꄻꄼꄽꄾꄿꅀꅁꅂꅃꅄꅅꅆꅇꅈꅉꅊꅋꅌꅍꅎꅏꅐꅑꅒꅓꅔꅕꅖꅗꅘꅙꅚꅛꅜꅝꅞꅟꅠꅡꅢꅣꅤꅥꅦꅧꅨꅩꅪꅫꅬꅭꅮꅯꅰꅱꅲꅳꅴꅵꅶꅷꅸꅹꅺꅻꅼꅽꅾꅿꆀꆁꆂꆃꆄꆅꆆꆇꆈꆉꆊꆋꆌꆍꆎꆏꆐꆑꆒꆓꆔꆕꆖꆗꆘꆙꆚꆛꆜꆝꆞꆟꆠꆡꆢꆣꆤꆥꆦꆧꆨꆩꆪꆫꆬꆭꆮꆯꆰꆱꆲꆳꆴꆵꆶꆷꆸꆹꆺꆻꆼꆽꆾꆿꇀꇁꇂꇃꇄꇅꇆꇇꇈꇉꇊꇋꇌꇍꇎꇏꇐꇑꇒꇓꇔꇕꇖꇗꇘꇙꇚꇛꇜꇝꇞꇟꇠꇡꇢꇣꇤꇥꇦꇧꇨꇩꇪꇫꇬꇭꇮꇯꇰꇱꇲꇳꇴꇵꇶꇷꇸꇹꇺꇻꇼꇽꇾꇿꈀꈁꈂꈃꈄꈅꈆꈇꈈꈉꈊꈋꈌꈍꈎꈏꈐꈑꈒꈓꈔꈕꈖꈗꈘꈙꈚꈛꈜꈝꈞꈟꈠꈡꈢꈣꈤꈥꈦꈧꈨꈩꈪꈫꈬꈭꈮꈯꈰꈱꈲꈳꈴꈵꈶꈷꈸꈹꈺꈻꈼꈽꈾꈿ"
+ "ꉀꉁꉂꉃꉄꉅꉆꉇꉈꉉꉊꉋꉌꉍꉎꉏꉐꉑꉒꉓꉔꉕꉖꉗꉘꉙꉚꉛꉜꉝꉞꉟꉠꉡꉢꉣꉤꉥꉦꉧꉨꉩꉪꉫꉬꉭꉮꉯꉰꉱꉲꉳꉴꉵꉶꉷꉸꉹꉺꉻꉼꉽꉾꉿꊀꊁꊂꊃꊄꊅꊆꊇꊈꊉꊊꊋꊌꊍꊎꊏꊐꊑꊒꊓꊔꊕꊖꊗꊘꊙꊚꊛꊜꊝꊞꊟꊠꊡꊢꊣꊤꊥꊦꊧꊨꊩꊪꊫꊬꊭꊮꊯꊰꊱꊲꊳꊴꊵꊶꊷꊸꊹꊺꊻꊼꊽꊾꊿꋀꋁꋂꋃꋄꋅꋆꋇꋈꋉꋊꋋꋌꋍꋎꋏꋐꋑꋒꋓꋔꋕꋖꋗꋘꋙꋚꋛꋜꋝꋞꋟꋠꋡꋢꋣꋤꋥꋦꋧꋨꋩꋪꋫꋬꋭꋮꋯꋰꋱꋲꋳꋴꋵꋶꋷꋸꋹꋺꋻꋼꋽꋾꋿꌀꌁꌂꌃꌄꌅꌆꌇꌈꌉꌊꌋꌌꌍꌎꌏꌐꌑꌒꌓꌔꌕꌖꌗꌘꌙꌚꌛꌜꌝꌞꌟꌠꌡꌢꌣꌤꌥꌦꌧꌨꌩꌪꌫꌬꌭꌮꌯꌰꌱꌲꌳꌴꌵꌶꌷꌸꌹꌺꌻꌼꌽꌾꌿꍀꍁꍂꍃꍄꍅꍆꍇꍈꍉꍊꍋꍌꍍꍎꍏꍐꍑꍒꍓꍔꍕꍖꍗꍘꍙꍚꍛꍜꍝꍞꍟꍠꍡꍢꍣꍤꍥꍦꍧꍨꍩꍪꍫꍬꍭꍮꍯꍰꍱꍲꍳꍴꍵꍶꍷꍸꍹꍺꍻꍼꍽꍾꍿꎀꎁꎂꎃꎄꎅꎆꎇꎈꎉꎊꎋꎌꎍꎎꎏꎐꎑꎒꎓꎔꎕꎖꎗꎘꎙꎚꎛꎜꎝꎞꎟꎠꎡꎢꎣꎤꎥꎦꎧꎨꎩꎪꎫꎬꎭꎮꎯꎰꎱꎲꎳꎴꎵꎶꎷꎸꎹꎺꎻꎼꎽꎾꎿꏀꏁꏂꏃꏄꏅꏆꏇꏈꏉꏊꏋꏌꏍꏎꏏꏐꏑꏒꏓꏔꏕꏖꏗꏘꏙꏚꏛꏜꏝꏞꏟꏠꏡꏢꏣꏤꏥꏦꏧꏨꏩꏪꏫꏬꏭꏮꏯꏰꏱꏲꏳꏴꏵꏶꏷꏸꏹꏺꏻꏼꏽꏾꏿꐀꐁꐂꐃꐄꐅꐆꐇꐈꐉꐊꐋꐌꐍꐎꐏꐐꐑꐒꐓꐔꐕꐖꐗꐘꐙꐚꐛꐜꐝꐞꐟꐠꐡꐢꐣꐤꐥꐦꐧꐨꐩꐪꐫꐬꐭꐮꐯꐰꐱꐲꐳꐴꐵꐶꐷꐸꐹꐺꐻꐼꐽꐾꐿ"
+ "ꑀꑁꑂꑃꑄꑅꑆꑇꑈꑉꑊꑋꑌꑍꑎꑏꑐꑑꑒꑓꑔꑕꑖꑗꑘꑙꑚꑛꑜꑝꑞꑟꑠꑡꑢꑣꑤꑥꑦꑧꑨꑩꑪꑫꑬꑭꑮꑯꑰꑱꑲꑳꑴꑵꑶꑷꑸꑹꑺꑻꑼꑽꑾꑿꒀꒁꒂꒃꒄꒅꒆꒇꒈꒉꒊꒋꒌ\ua48d\ua48e\ua48f꒐꒑꒒꒓꒔꒕꒖꒗꒘꒙꒚꒛꒜꒝꒞꒟꒠꒡꒢꒣꒤꒥꒦꒧꒨꒩꒪꒫꒬꒭꒮꒯꒰꒱꒲꒳꒴꒵꒶꒷꒸꒹꒺꒻꒼꒽꒾꒿꓀꓁꓂꓃꓄꓅꓆\ua4c7\ua4c8\ua4c9\ua4ca\ua4cb\ua4cc\ua4cd\ua4ce\ua4cfꓐꓑꓒꓓꓔꓕꓖꓗꓘꓙꓚꓛꓜꓝꓞꓟꓠꓡꓢꓣꓤꓥꓦꓧꓨꓩꓪꓫꓬꓭꓮꓯꓰꓱꓲꓳꓴꓵꓶꓷꓸꓹꓺꓻꓼꓽ꓾꓿ꔀꔁꔂꔃꔄꔅꔆꔇꔈꔉꔊꔋꔌꔍꔎꔏꔐꔑꔒꔓꔔꔕꔖꔗꔘꔙꔚꔛꔜꔝꔞꔟꔠꔡꔢꔣꔤꔥꔦꔧꔨꔩꔪꔫꔬꔭꔮꔯꔰꔱꔲꔳꔴꔵꔶꔷꔸꔹꔺꔻꔼꔽꔾꔿꕀꕁꕂꕃꕄꕅꕆꕇꕈꕉꕊꕋꕌꕍꕎꕏꕐꕑꕒꕓꕔꕕꕖꕗꕘꕙꕚꕛꕜꕝꕞꕟꕠꕡꕢꕣꕤꕥꕦꕧꕨꕩꕪꕫꕬꕭꕮꕯꕰꕱꕲꕳꕴꕵꕶꕷꕸꕹꕺꕻꕼꕽꕾꕿꖀꖁꖂꖃꖄꖅꖆꖇꖈꖉꖊꖋꖌꖍꖎꖏꖐꖑꖒꖓꖔꖕꖖꖗꖘꖙꖚꖛꖜꖝꖞꖟꖠꖡꖢꖣꖤꖥꖦꖧꖨꖩꖪꖫꖬꖭꖮꖯꖰꖱꖲꖳꖴꖵꖶꖷꖸꖹꖺꖻꖼꖽꖾꖿꗀꗁꗂꗃꗄꗅꗆꗇꗈꗉꗊꗋꗌꗍꗎꗏꗐꗑꗒꗓꗔꗕꗖꗗꗘꗙꗚꗛꗜꗝꗞꗟꗠꗡꗢꗣꗤꗥꗦꗧꗨꗩꗪꗫꗬꗭꗮꗯꗰꗱꗲꗳꗴꗵꗶꗷꗸꗹꗺꗻꗼꗽꗾꗿꘀꘁꘂꘃꘄꘅꘆꘇꘈꘉꘊꘋꘌ꘍꘎꘏ꘐꘑꘒꘓꘔꘕꘖꘗꘘꘙꘚꘛꘜꘝꘞꘟ꘠꘡꘢꘣꘤꘥꘦꘧꘨꘩ꘪꘫ\ua62c\ua62d\ua62e\ua62f\ua630\ua631\ua632\ua633\ua634\ua635\ua636\ua637\ua638\ua639\ua63a\ua63b\ua63c\ua63d\ua63e\ua63f"
+ "ꙀꙀꙂꙂꙄꙄꙆꙆꙈꙈꙊꙊꙌꙌꙎꙎꙐꙐꙒꙒꙔꙔꙖꙖꙘꙘꙚꙚꙜꙜꙞꙞꙠꙠꙢꙢꙤꙤꙦꙦꙨꙨꙪꙪꙬꙬꙮ꙯꙰꙱꙲꙳ꙴꙵꙶꙷꙸꙹꙺꙻ꙼꙽꙾ꙿꚀꚀꚂꚂꚄꚄꚆꚆꚈꚈꚊꚊꚌꚌꚎꚎꚐꚐꚒꚒꚔꚔꚖꚖꚘꚘꚚꚚꚜꚝꚞꚟꚠꚡꚢꚣꚤꚥꚦꚧꚨꚩꚪꚫꚬꚭꚮꚯꚰꚱꚲꚳꚴꚵꚶꚷꚸꚹꚺꚻꚼꚽꚾꚿꛀꛁꛂꛃꛄꛅꛆꛇꛈꛉꛊꛋꛌꛍꛎꛏꛐꛑꛒꛓꛔꛕꛖꛗꛘꛙꛚꛛꛜꛝꛞꛟꛠꛡꛢꛣꛤꛥꛦꛧꛨꛩꛪꛫꛬꛭꛮꛯ꛰꛱꛲꛳꛴꛵꛶꛷\ua6f8\ua6f9\ua6fa\ua6fb\ua6fc\ua6fd\ua6fe\ua6ff꜀꜁꜂꜃꜄꜅꜆꜇꜈꜉꜊꜋꜌꜍꜎꜏꜐꜑꜒꜓꜔꜕꜖ꜗꜘꜙꜚꜛꜜꜝꜞꜟ꜠꜡ꜢꜢꜤꜤꜦꜦꜨꜨꜪꜪꜬꜬꜮꜮꜰꜱꜲꜲꜴꜴꜶꜶꜸꜸꜺꜺꜼꜼꜾꜾꝀꝀꝂꝂꝄꝄꝆꝆꝈꝈꝊꝊꝌꝌꝎꝎꝐꝐꝒꝒꝔꝔꝖꝖꝘꝘꝚꝚꝜꝜꝞꝞꝠꝠꝢꝢꝤꝤꝦꝦꝨꝨꝪꝪꝬꝬꝮꝮꝰꝱꝲꝳꝴꝵꝶꝷꝸꝹꝹꝻꝻꝽꝾꝾꞀꞀꞂꞂꞄꞄꞆꞆꞈ꞉꞊ꞋꞋꞍꞎꞏꞐꞐꞒꞒꟄꞕꞖꞖꞘꞘꞚꞚꞜꞜꞞꞞꞠꞠꞢꞢꞤꞤꞦꞦꞨꞨꞪꞫꞬꞭꞮꞯꞰꞱꞲꞳꞴꞴꞶꞶꞸꞸꞺꞺꞼꞼꞾꞾꟀꟀꟂꟂꟄꟅꟆꟇꟇꟉꟉ\ua7cb\ua7cc\ua7cc\ua7ce\ua7cfꟐꟐ\ua7d2ꟓ\ua7d4ꟕꟖꟖꟘꟘ\ua7da\ua7da\ua7dc\ua7dd\ua7de\ua7df\ua7e0\ua7e1\ua7e2\ua7e3\ua7e4\ua7e5\ua7e6\ua7e7\ua7e8\ua7e9\ua7ea\ua7eb\ua7ec\ua7ed\ua7ee\ua7ef\ua7f0\ua7f1ꟲꟳꟴꟵꟵꟷꟸꟹꟺꟻꟼꟽꟾꟿꠀꠁꠂꠃꠄꠅ꠆ꠇꠈꠉꠊꠋꠌꠍꠎꠏꠐꠑꠒꠓꠔꠕꠖꠗꠘꠙꠚꠛꠜꠝꠞꠟꠠꠡꠢꠣꠤꠥꠦꠧ꠨꠩꠪꠫꠬\ua82d\ua82e\ua82f꠰꠱꠲꠳꠴꠵꠶꠷꠸꠹\ua83a\ua83b\ua83c\ua83d\ua83e\ua83f"
+ "ꡀꡁꡂꡃꡄꡅꡆꡇꡈꡉꡊꡋꡌꡍꡎꡏꡐꡑꡒꡓꡔꡕꡖꡗꡘꡙꡚꡛꡜꡝꡞꡟꡠꡡꡢꡣꡤꡥꡦꡧꡨꡩꡪꡫꡬꡭꡮꡯꡰꡱꡲꡳ꡴꡵꡶꡷\ua878\ua879\ua87a\ua87b\ua87c\ua87d\ua87e\ua87fꢀꢁꢂꢃꢄꢅꢆꢇꢈꢉꢊꢋꢌꢍꢎꢏꢐꢑꢒꢓꢔꢕꢖꢗꢘꢙꢚꢛꢜꢝꢞꢟꢠꢡꢢꢣꢤꢥꢦꢧꢨꢩꢪꢫꢬꢭꢮꢯꢰꢱꢲꢳꢴꢵꢶꢷꢸꢹꢺꢻꢼꢽꢾꢿꣀꣁꣂꣃ꣄ꣅ\ua8c6\ua8c7\ua8c8\ua8c9\ua8ca\ua8cb\ua8cc\ua8cd꣎꣏꣐꣑꣒꣓꣔꣕꣖꣗꣘꣙\ua8da\ua8db\ua8dc\ua8dd\ua8de\ua8df꣠꣡꣢꣣꣤꣥꣦꣧꣨꣩꣪꣫꣬꣭꣮꣯꣰꣱ꣲꣳꣴꣵꣶꣷ꣸꣹꣺ꣻ꣼ꣽꣾꣿ꤀꤁꤂꤃꤄꤅꤆꤇꤈꤉ꤊꤋꤌꤍꤎꤏꤐꤑꤒꤓꤔꤕꤖꤗꤘꤙꤚꤛꤜꤝꤞꤟꤠꤡꤢꤣꤤꤥꤦꤧꤨꤩꤪ꤫꤬꤭꤮꤯ꤰꤱꤲꤳꤴꤵꤶꤷꤸꤹꤺꤻꤼꤽꤾꤿꥀꥁꥂꥃꥄꥅꥆꥇꥈꥉꥊꥋꥌꥍꥎꥏꥐꥑꥒ꥓\ua954\ua955\ua956\ua957\ua958\ua959\ua95a\ua95b\ua95c\ua95d\ua95e꥟ꥠꥡꥢꥣꥤꥥꥦꥧꥨꥩꥪꥫꥬꥭꥮꥯꥰꥱꥲꥳꥴꥵꥶꥷꥸꥹꥺꥻꥼ\ua97d\ua97e\ua97fꦀꦁꦂꦃꦄꦅꦆꦇꦈꦉꦊꦋꦌꦍꦎꦏꦐꦑꦒꦓꦔꦕꦖꦗꦘꦙꦚꦛꦜꦝꦞꦟꦠꦡꦢꦣꦤꦥꦦꦧꦨꦩꦪꦫꦬꦭꦮꦯꦰꦱꦲ꦳ꦴꦵꦶꦷꦸꦹꦺꦻꦼꦽꦾꦿ꧀꧁꧂꧃꧄꧅꧆꧇꧈꧉꧊꧋꧌꧍\ua9ceꧏ꧐꧑꧒꧓꧔꧕꧖꧗꧘꧙\ua9da\ua9db\ua9dc\ua9dd꧞꧟ꧠꧡꧢꧣꧤꧥꧦꧧꧨꧩꧪꧫꧬꧭꧮꧯ꧰꧱꧲꧳꧴꧵꧶꧷꧸꧹ꧺꧻꧼꧽꧾ\ua9ffꨀꨁꨂꨃꨄꨅꨆꨇꨈꨉꨊꨋꨌꨍꨎꨏꨐꨑꨒꨓꨔꨕꨖꨗꨘꨙꨚꨛꨜꨝꨞꨟꨠꨡꨢꨣꨤꨥꨦꨧꨨꨩꨪꨫꨬꨭꨮꨯꨰꨱꨲꨳꨴꨵꨶ\uaa37\uaa38\uaa39\uaa3a\uaa3b\uaa3c\uaa3d\uaa3e\uaa3f"
+ "ꩀꩁꩂꩃꩄꩅꩆꩇꩈꩉꩊꩋꩌꩍ\uaa4e\uaa4f꩐꩑꩒꩓꩔꩕꩖꩗꩘꩙\uaa5a\uaa5b꩜꩝꩞꩟ꩠꩡꩢꩣꩤꩥꩦꩧꩨꩩꩪꩫꩬꩭꩮꩯꩰꩱꩲꩳꩴꩵꩶ꩷꩸꩹ꩺꩻꩼꩽꩾꩿꪀꪁꪂꪃꪄꪅꪆꪇꪈꪉꪊꪋꪌꪍꪎꪏꪐꪑꪒꪓꪔꪕꪖꪗꪘꪙꪚꪛꪜꪝꪞꪟꪠꪡꪢꪣꪤꪥꪦꪧꪨꪩꪪꪫꪬꪭꪮꪯꪰꪱꪴꪲꪳꪵꪶꪷꪸꪹꪺꪻꪼꪽꪾ꪿ꫀ꫁ꫂ\uaac3\uaac4\uaac5\uaac6\uaac7\uaac8\uaac9\uaaca\uaacb\uaacc\uaacd\uaace\uaacf\uaad0\uaad1\uaad2\uaad3\uaad4\uaad5\uaad6\uaad7\uaad8\uaad9\uaadaꫛꫜꫝ꫞꫟ꫠꫡꫢꫣꫤꫥꫦꫧꫨꫩꫪꫫꫬꫭꫮꫯ꫰꫱ꫲꫳꫴꫵ꫶\uaaf7\uaaf8\uaaf9\uaafa\uaafb\uaafc\uaafd\uaafe\uaaff\uab00ꬁꬂꬃꬄꬅꬆ\uab07\uab08ꬉꬊꬋꬌꬍꬎ\uab0f\uab10ꬑꬒꬓꬔꬕꬖ\uab17\uab18\uab19\uab1a\uab1b\uab1c\uab1d\uab1e\uab1fꬠꬡꬢꬣꬤꬥꬦ\uab27ꬨꬩꬪꬫꬬꬭꬮ\uab2fꬰꬱꬲꬳꬴꬵꬶꬷꬸꬹꬺꬻꬼꬽꬾꬿꭀꭁꭂꭃꭄꭅꭆꭇꭈꭉꭊꭋꭌꭍꭎꭏꭐꭑꭒꞳꭔꭕꭖꭗꭘꭙꭚ꭛ꭜꭝꭞꭟꭠꭡꭢꭣꭤꭥꭦꭧꭨꭩ꭪꭫\uab6c\uab6d\uab6e\uab6fᎠᎡᎢᎣᎤᎥᎦᎧᎨᎩᎪᎫᎬᎭᎮᎯᎰᎱᎲᎳᎴᎵᎶᎷᎸᎹᎺᎻᎼᎽᎾᎿᏀᏁᏂᏃᏄᏅᏆᏇᏈᏉᏊᏋᏌᏍᏎᏏᏐᏑᏒᏓᏔᏕᏖᏗᏘᏙᏚᏛᏜᏝᏞᏟᏠᏡᏢᏣᏤᏥᏦᏧᏨᏩᏪᏫᏬᏭᏮᏯꯀꯁꯂꯃꯄꯅꯆꯇꯈꯉꯊꯋꯌꯍꯎꯏꯐꯑꯒꯓꯔꯕꯖꯗꯘꯙꯚꯛꯜꯝꯞꯟꯠꯡꯢꯣꯤꯥꯦꯧꯨꯩꯪ꯫꯬꯭\uabee\uabef꯰꯱꯲꯳꯴꯵꯶꯷꯸꯹\uabfa\uabfb\uabfc\uabfd\uabfe\uabff가각갂갃간갅갆갇갈갉갊갋갌갍갎갏감갑값갓갔강갖갗갘같갚갛개객갞갟갠갡갢갣갤갥갦갧갨갩갪갫갬갭갮갯갰갱갲갳갴갵갶갷갸갹갺갻갼갽갾갿"
+ "걀걁걂걃걄걅걆걇걈걉걊걋걌걍걎걏걐걑걒걓걔걕걖걗걘걙걚걛걜걝걞걟걠걡걢걣걤걥걦걧걨걩걪걫걬걭걮걯거걱걲걳건걵걶걷걸걹걺걻걼걽걾걿검겁겂것겄겅겆겇겈겉겊겋게겍겎겏겐겑겒겓겔겕겖겗겘겙겚겛겜겝겞겟겠겡겢겣겤겥겦겧겨격겪겫견겭겮겯결겱겲겳겴겵겶겷겸겹겺겻겼경겾겿곀곁곂곃계곅곆곇곈곉곊곋곌곍곎곏곐곑곒곓곔곕곖곗곘곙곚곛곜곝곞곟고곡곢곣곤곥곦곧골곩곪곫곬곭곮곯곰곱곲곳곴공곶곷곸곹곺곻과곽곾곿관괁괂괃괄괅괆괇괈괉괊괋괌괍괎괏괐광괒괓괔괕괖괗괘괙괚괛괜괝괞괟괠괡괢괣괤괥괦괧괨괩괪괫괬괭괮괯괰괱괲괳괴괵괶괷괸괹괺괻괼괽괾괿굀굁굂굃굄굅굆굇굈굉굊굋굌굍굎굏교굑굒굓굔굕굖굗굘굙굚굛굜굝굞굟굠굡굢굣굤굥굦굧굨굩굪굫구국굮굯군굱굲굳굴굵굶굷굸굹굺굻굼굽굾굿궀궁궂궃궄궅궆궇궈궉궊궋권궍궎궏궐궑궒궓궔궕궖궗궘궙궚궛궜궝궞궟궠궡궢궣궤궥궦궧궨궩궪궫궬궭궮궯궰궱궲궳궴궵궶궷궸궹궺궻궼궽궾궿귀귁귂귃귄귅귆귇귈귉귊귋귌귍귎귏귐귑귒귓귔귕귖귗귘귙귚귛규귝귞귟균귡귢귣귤귥귦귧귨귩귪귫귬귭귮귯귰귱귲귳귴귵귶귷그극귺귻근귽귾귿글긁긂긃긄긅긆긇금급긊긋긌긍긎긏긐긑긒긓긔긕긖긗긘긙긚긛긜긝긞긟긠긡긢긣긤긥긦긧긨긩긪긫긬긭긮긯기긱긲긳긴긵긶긷길긹긺긻긼긽긾긿"
+ "김깁깂깃깄깅깆깇깈깉깊깋까깍깎깏깐깑깒깓깔깕깖깗깘깙깚깛깜깝깞깟깠깡깢깣깤깥깦깧깨깩깪깫깬깭깮깯깰깱깲깳깴깵깶깷깸깹깺깻깼깽깾깿꺀꺁꺂꺃꺄꺅꺆꺇꺈꺉꺊꺋꺌꺍꺎꺏꺐꺑꺒꺓꺔꺕꺖꺗꺘꺙꺚꺛꺜꺝꺞꺟꺠꺡꺢꺣꺤꺥꺦꺧꺨꺩꺪꺫꺬꺭꺮꺯꺰꺱꺲꺳꺴꺵꺶꺷꺸꺹꺺꺻꺼꺽꺾꺿껀껁껂껃껄껅껆껇껈껉껊껋껌껍껎껏껐껑껒껓껔껕껖껗께껙껚껛껜껝껞껟껠껡껢껣껤껥껦껧껨껩껪껫껬껭껮껯껰껱껲껳껴껵껶껷껸껹껺껻껼껽껾껿꼀꼁꼂꼃꼄꼅꼆꼇꼈꼉꼊꼋꼌꼍꼎꼏꼐꼑꼒꼓꼔꼕꼖꼗꼘꼙꼚꼛꼜꼝꼞꼟꼠꼡꼢꼣꼤꼥꼦꼧꼨꼩꼪꼫꼬꼭꼮꼯꼰꼱꼲꼳꼴꼵꼶꼷꼸꼹꼺꼻꼼꼽꼾꼿꽀꽁꽂꽃꽄꽅꽆꽇꽈꽉꽊꽋꽌꽍꽎꽏꽐꽑꽒꽓꽔꽕꽖꽗꽘꽙꽚꽛꽜꽝꽞꽟꽠꽡꽢꽣꽤꽥꽦꽧꽨꽩꽪꽫꽬꽭꽮꽯꽰꽱꽲꽳꽴꽵꽶꽷꽸꽹꽺꽻꽼꽽꽾꽿꾀꾁꾂꾃꾄꾅꾆꾇꾈꾉꾊꾋꾌꾍꾎꾏꾐꾑꾒꾓꾔꾕꾖꾗꾘꾙꾚꾛꾜꾝꾞꾟꾠꾡꾢꾣꾤꾥꾦꾧꾨꾩꾪꾫꾬꾭꾮꾯꾰꾱꾲꾳꾴꾵꾶꾷꾸꾹꾺꾻꾼꾽꾾꾿꿀꿁꿂꿃꿄꿅꿆꿇꿈꿉꿊꿋꿌꿍꿎꿏꿐꿑꿒꿓꿔꿕꿖꿗꿘꿙꿚꿛꿜꿝꿞꿟꿠꿡꿢꿣꿤꿥꿦꿧꿨꿩꿪꿫꿬꿭꿮꿯꿰꿱꿲꿳꿴꿵꿶꿷꿸꿹꿺꿻꿼꿽꿾꿿뀀뀁뀂뀃뀄뀅뀆뀇뀈뀉뀊뀋뀌뀍뀎뀏뀐뀑뀒뀓뀔뀕뀖뀗뀘뀙뀚뀛뀜뀝뀞뀟뀠뀡뀢뀣뀤뀥뀦뀧뀨뀩뀪뀫뀬뀭뀮뀯뀰뀱뀲뀳뀴뀵뀶뀷뀸뀹뀺뀻뀼뀽뀾뀿"
+ "끀끁끂끃끄끅끆끇끈끉끊끋끌끍끎끏끐끑끒끓끔끕끖끗끘끙끚끛끜끝끞끟끠끡끢끣끤끥끦끧끨끩끪끫끬끭끮끯끰끱끲끳끴끵끶끷끸끹끺끻끼끽끾끿낀낁낂낃낄낅낆낇낈낉낊낋낌낍낎낏낐낑낒낓낔낕낖낗나낙낚낛난낝낞낟날낡낢낣낤낥낦낧남납낪낫났낭낮낯낰낱낲낳내낵낶낷낸낹낺낻낼낽낾낿냀냁냂냃냄냅냆냇냈냉냊냋냌냍냎냏냐냑냒냓냔냕냖냗냘냙냚냛냜냝냞냟냠냡냢냣냤냥냦냧냨냩냪냫냬냭냮냯냰냱냲냳냴냵냶냷냸냹냺냻냼냽냾냿넀넁넂넃넄넅넆넇너넉넊넋넌넍넎넏널넑넒넓넔넕넖넗넘넙넚넛넜넝넞넟넠넡넢넣네넥넦넧넨넩넪넫넬넭넮넯넰넱넲넳넴넵넶넷넸넹넺넻넼넽넾넿녀녁녂녃년녅녆녇녈녉녊녋녌녍녎녏념녑녒녓녔녕녖녗녘녙녚녛녜녝녞녟녠녡녢녣녤녥녦녧녨녩녪녫녬녭녮녯녰녱녲녳녴녵녶녷노녹녺녻논녽녾녿놀놁놂놃놄놅놆놇놈놉놊놋놌농놎놏놐놑높놓놔놕놖놗놘놙놚놛놜놝놞놟놠놡놢놣놤놥놦놧놨놩놪놫놬놭놮놯놰놱놲놳놴놵놶놷놸놹놺놻놼놽놾놿뇀뇁뇂뇃뇄뇅뇆뇇뇈뇉뇊뇋뇌뇍뇎뇏뇐뇑뇒뇓뇔뇕뇖뇗뇘뇙뇚뇛뇜뇝뇞뇟뇠뇡뇢뇣뇤뇥뇦뇧뇨뇩뇪뇫뇬뇭뇮뇯뇰뇱뇲뇳뇴뇵뇶뇷뇸뇹뇺뇻뇼뇽뇾뇿눀눁눂눃누눅눆눇눈눉눊눋눌눍눎눏눐눑눒눓눔눕눖눗눘눙눚눛눜눝눞눟눠눡눢눣눤눥눦눧눨눩눪눫눬눭눮눯눰눱눲눳눴눵눶눷눸눹눺눻눼눽눾눿"
+ "뉀뉁뉂뉃뉄뉅뉆뉇뉈뉉뉊뉋뉌뉍뉎뉏뉐뉑뉒뉓뉔뉕뉖뉗뉘뉙뉚뉛뉜뉝뉞뉟뉠뉡뉢뉣뉤뉥뉦뉧뉨뉩뉪뉫뉬뉭뉮뉯뉰뉱뉲뉳뉴뉵뉶뉷뉸뉹뉺뉻뉼뉽뉾뉿늀늁늂늃늄늅늆늇늈늉늊늋늌늍늎늏느늑늒늓는늕늖늗늘늙늚늛늜늝늞늟늠늡늢늣늤능늦늧늨늩늪늫늬늭늮늯늰늱늲늳늴늵늶늷늸늹늺늻늼늽늾늿닀닁닂닃닄닅닆닇니닉닊닋닌닍닎닏닐닑닒닓닔닕닖닗님닙닚닛닜닝닞닟닠닡닢닣다닥닦닧단닩닪닫달닭닮닯닰닱닲닳담답닶닷닸당닺닻닼닽닾닿대댁댂댃댄댅댆댇댈댉댊댋댌댍댎댏댐댑댒댓댔댕댖댗댘댙댚댛댜댝댞댟댠댡댢댣댤댥댦댧댨댩댪댫댬댭댮댯댰댱댲댳댴댵댶댷댸댹댺댻댼댽댾댿덀덁덂덃덄덅덆덇덈덉덊덋덌덍덎덏덐덑덒덓더덕덖덗던덙덚덛덜덝덞덟덠덡덢덣덤덥덦덧덨덩덪덫덬덭덮덯데덱덲덳덴덵덶덷델덹덺덻덼덽덾덿뎀뎁뎂뎃뎄뎅뎆뎇뎈뎉뎊뎋뎌뎍뎎뎏뎐뎑뎒뎓뎔뎕뎖뎗뎘뎙뎚뎛뎜뎝뎞뎟뎠뎡뎢뎣뎤뎥뎦뎧뎨뎩뎪뎫뎬뎭뎮뎯뎰뎱뎲뎳뎴뎵뎶뎷뎸뎹뎺뎻뎼뎽뎾뎿돀돁돂돃도독돆돇돈돉돊돋돌돍돎돏돐돑돒돓돔돕돖돗돘동돚돛돜돝돞돟돠돡돢돣돤돥돦돧돨돩돪돫돬돭돮돯돰돱돲돳돴돵돶돷돸돹돺돻돼돽돾돿됀됁됂됃됄됅됆됇됈됉됊됋됌됍됎됏됐됑됒됓됔됕됖됗되됙됚됛된됝됞됟될됡됢됣됤됥됦됧됨됩됪됫됬됭됮됯됰됱됲됳됴됵됶됷됸됹됺됻됼됽됾됿"
+ "둀둁둂둃둄둅둆둇둈둉둊둋둌둍둎둏두둑둒둓둔둕둖둗둘둙둚둛둜둝둞둟둠둡둢둣둤둥둦둧둨둩둪둫둬둭둮둯둰둱둲둳둴둵둶둷둸둹둺둻둼둽둾둿뒀뒁뒂뒃뒄뒅뒆뒇뒈뒉뒊뒋뒌뒍뒎뒏뒐뒑뒒뒓뒔뒕뒖뒗뒘뒙뒚뒛뒜뒝뒞뒟뒠뒡뒢뒣뒤뒥뒦뒧뒨뒩뒪뒫뒬뒭뒮뒯뒰뒱뒲뒳뒴뒵뒶뒷뒸뒹뒺뒻뒼뒽뒾뒿듀듁듂듃듄듅듆듇듈듉듊듋듌듍듎듏듐듑듒듓듔듕듖듗듘듙듚듛드득듞듟든듡듢듣들듥듦듧듨듩듪듫듬듭듮듯듰등듲듳듴듵듶듷듸듹듺듻듼듽듾듿딀딁딂딃딄딅딆딇딈딉딊딋딌딍딎딏딐딑딒딓디딕딖딗딘딙딚딛딜딝딞딟딠딡딢딣딤딥딦딧딨딩딪딫딬딭딮딯따딱딲딳딴딵딶딷딸딹딺딻딼딽딾딿땀땁땂땃땄땅땆땇땈땉땊땋때땍땎땏땐땑땒땓땔땕땖땗땘땙땚땛땜땝땞땟땠땡땢땣땤땥땦땧땨땩땪땫땬땭땮땯땰땱땲땳땴땵땶땷땸땹땺땻땼땽땾땿떀떁떂떃떄떅떆떇떈떉떊떋떌떍떎떏떐떑떒떓떔떕떖떗떘떙떚떛떜떝떞떟떠떡떢떣떤떥떦떧떨떩떪떫떬떭떮떯떰떱떲떳떴떵떶떷떸떹떺떻떼떽떾떿뗀뗁뗂뗃뗄뗅뗆뗇뗈뗉뗊뗋뗌뗍뗎뗏뗐뗑뗒뗓뗔뗕뗖뗗뗘뗙뗚뗛뗜뗝뗞뗟뗠뗡뗢뗣뗤뗥뗦뗧뗨뗩뗪뗫뗬뗭뗮뗯뗰뗱뗲뗳뗴뗵뗶뗷뗸뗹뗺뗻뗼뗽뗾뗿똀똁똂똃똄똅똆똇똈똉똊똋똌똍똎똏또똑똒똓똔똕똖똗똘똙똚똛똜똝똞똟똠똡똢똣똤똥똦똧똨똩똪똫똬똭똮똯똰똱똲똳똴똵똶똷똸똹똺똻똼똽똾똿"
+ "뙀뙁뙂뙃뙄뙅뙆뙇뙈뙉뙊뙋뙌뙍뙎뙏뙐뙑뙒뙓뙔뙕뙖뙗뙘뙙뙚뙛뙜뙝뙞뙟뙠뙡뙢뙣뙤뙥뙦뙧뙨뙩뙪뙫뙬뙭뙮뙯뙰뙱뙲뙳뙴뙵뙶뙷뙸뙹뙺뙻뙼뙽뙾뙿뚀뚁뚂뚃뚄뚅뚆뚇뚈뚉뚊뚋뚌뚍뚎뚏뚐뚑뚒뚓뚔뚕뚖뚗뚘뚙뚚뚛뚜뚝뚞뚟뚠뚡뚢뚣뚤뚥뚦뚧뚨뚩뚪뚫뚬뚭뚮뚯뚰뚱뚲뚳뚴뚵뚶뚷뚸뚹뚺뚻뚼뚽뚾뚿뛀뛁뛂뛃뛄뛅뛆뛇뛈뛉뛊뛋뛌뛍뛎뛏뛐뛑뛒뛓뛔뛕뛖뛗뛘뛙뛚뛛뛜뛝뛞뛟뛠뛡뛢뛣뛤뛥뛦뛧뛨뛩뛪뛫뛬뛭뛮뛯뛰뛱뛲뛳뛴뛵뛶뛷뛸뛹뛺뛻뛼뛽뛾뛿뜀뜁뜂뜃뜄뜅뜆뜇뜈뜉뜊뜋뜌뜍뜎뜏뜐뜑뜒뜓뜔뜕뜖뜗뜘뜙뜚뜛뜜뜝뜞뜟뜠뜡뜢뜣뜤뜥뜦뜧뜨뜩뜪뜫뜬뜭뜮뜯뜰뜱뜲뜳뜴뜵뜶뜷뜸뜹뜺뜻뜼뜽뜾뜿띀띁띂띃띄띅띆띇띈띉띊띋띌띍띎띏띐띑띒띓띔띕띖띗띘띙띚띛띜띝띞띟띠띡띢띣띤띥띦띧띨띩띪띫띬띭띮띯띰띱띲띳띴띵띶띷띸띹띺띻라락띾띿란랁랂랃랄랅랆랇랈랉랊랋람랍랎랏랐랑랒랓랔랕랖랗래랙랚랛랜랝랞랟랠랡랢랣랤랥랦랧램랩랪랫랬랭랮랯랰랱랲랳랴략랶랷랸랹랺랻랼랽랾랿럀럁럂럃럄럅럆럇럈량럊럋럌럍럎럏럐럑럒럓럔럕럖럗럘럙럚럛럜럝럞럟럠럡럢럣럤럥럦럧럨럩럪럫러럭럮럯런럱럲럳럴럵럶럷럸럹럺럻럼럽럾럿렀렁렂렃렄렅렆렇레렉렊렋렌렍렎렏렐렑렒렓렔렕렖렗렘렙렚렛렜렝렞렟렠렡렢렣려력렦렧련렩렪렫렬렭렮렯렰렱렲렳렴렵렶렷렸령렺렻렼렽렾렿"
+ "례롁롂롃롄롅롆롇롈롉롊롋롌롍롎롏롐롑롒롓롔롕롖롗롘롙롚롛로록롞롟론롡롢롣롤롥롦롧롨롩롪롫롬롭롮롯롰롱롲롳롴롵롶롷롸롹롺롻롼롽롾롿뢀뢁뢂뢃뢄뢅뢆뢇뢈뢉뢊뢋뢌뢍뢎뢏뢐뢑뢒뢓뢔뢕뢖뢗뢘뢙뢚뢛뢜뢝뢞뢟뢠뢡뢢뢣뢤뢥뢦뢧뢨뢩뢪뢫뢬뢭뢮뢯뢰뢱뢲뢳뢴뢵뢶뢷뢸뢹뢺뢻뢼뢽뢾뢿룀룁룂룃룄룅룆룇룈룉룊룋료룍룎룏룐룑룒룓룔룕룖룗룘룙룚룛룜룝룞룟룠룡룢룣룤룥룦룧루룩룪룫룬룭룮룯룰룱룲룳룴룵룶룷룸룹룺룻룼룽룾룿뤀뤁뤂뤃뤄뤅뤆뤇뤈뤉뤊뤋뤌뤍뤎뤏뤐뤑뤒뤓뤔뤕뤖뤗뤘뤙뤚뤛뤜뤝뤞뤟뤠뤡뤢뤣뤤뤥뤦뤧뤨뤩뤪뤫뤬뤭뤮뤯뤰뤱뤲뤳뤴뤵뤶뤷뤸뤹뤺뤻뤼뤽뤾뤿륀륁륂륃륄륅륆륇륈륉륊륋륌륍륎륏륐륑륒륓륔륕륖륗류륙륚륛륜륝륞륟률륡륢륣륤륥륦륧륨륩륪륫륬륭륮륯륰륱륲륳르륵륶륷른륹륺륻를륽륾륿릀릁릂릃름릅릆릇릈릉릊릋릌릍릎릏릐릑릒릓릔릕릖릗릘릙릚릛릜릝릞릟릠릡릢릣릤릥릦릧릨릩릪릫리릭릮릯린릱릲릳릴릵릶릷릸릹릺릻림립릾릿맀링맂맃맄맅맆맇마막맊맋만맍많맏말맑맒맓맔맕맖맗맘맙맚맛맜망맞맟맠맡맢맣매맥맦맧맨맩맪맫맬맭맮맯맰맱맲맳맴맵맶맷맸맹맺맻맼맽맾맿먀먁먂먃먄먅먆먇먈먉먊먋먌먍먎먏먐먑먒먓먔먕먖먗먘먙먚먛먜먝먞먟먠먡먢먣먤먥먦먧먨먩먪먫먬먭먮먯먰먱먲먳먴먵먶먷머먹먺먻먼먽먾먿"
+ "멀멁멂멃멄멅멆멇멈멉멊멋멌멍멎멏멐멑멒멓메멕멖멗멘멙멚멛멜멝멞멟멠멡멢멣멤멥멦멧멨멩멪멫멬멭멮멯며멱멲멳면멵멶멷멸멹멺멻멼멽멾멿몀몁몂몃몄명몆몇몈몉몊몋몌몍몎몏몐몑몒몓몔몕몖몗몘몙몚몛몜몝몞몟몠몡몢몣몤몥몦몧모목몪몫몬몭몮몯몰몱몲몳몴몵몶몷몸몹몺못몼몽몾몿뫀뫁뫂뫃뫄뫅뫆뫇뫈뫉뫊뫋뫌뫍뫎뫏뫐뫑뫒뫓뫔뫕뫖뫗뫘뫙뫚뫛뫜뫝뫞뫟뫠뫡뫢뫣뫤뫥뫦뫧뫨뫩뫪뫫뫬뫭뫮뫯뫰뫱뫲뫳뫴뫵뫶뫷뫸뫹뫺뫻뫼뫽뫾뫿묀묁묂묃묄묅묆묇묈묉묊묋묌묍묎묏묐묑묒묓묔묕묖묗묘묙묚묛묜묝묞묟묠묡묢묣묤묥묦묧묨묩묪묫묬묭묮묯묰묱묲묳무묵묶묷문묹묺묻물묽묾묿뭀뭁뭂뭃뭄뭅뭆뭇뭈뭉뭊뭋뭌뭍뭎뭏뭐뭑뭒뭓뭔뭕뭖뭗뭘뭙뭚뭛뭜뭝뭞뭟뭠뭡뭢뭣뭤뭥뭦뭧뭨뭩뭪뭫뭬뭭뭮뭯뭰뭱뭲뭳뭴뭵뭶뭷뭸뭹뭺뭻뭼뭽뭾뭿뮀뮁뮂뮃뮄뮅뮆뮇뮈뮉뮊뮋뮌뮍뮎뮏뮐뮑뮒뮓뮔뮕뮖뮗뮘뮙뮚뮛뮜뮝뮞뮟뮠뮡뮢뮣뮤뮥뮦뮧뮨뮩뮪뮫뮬뮭뮮뮯뮰뮱뮲뮳뮴뮵뮶뮷뮸뮹뮺뮻뮼뮽뮾뮿므믁믂믃믄믅믆믇믈믉믊믋믌믍믎믏믐믑믒믓믔믕믖믗믘믙믚믛믜믝믞믟믠믡믢믣믤믥믦믧믨믩믪믫믬믭믮믯믰믱믲믳믴믵믶믷미믹믺믻민믽믾믿밀밁밂밃밄밅밆밇밈밉밊밋밌밍밎및밐밑밒밓바박밖밗반밙밚받발밝밞밟밠밡밢밣밤밥밦밧밨방밪밫밬밭밮밯배백밲밳밴밵밶밷밸밹밺밻밼밽밾밿"
+ "뱀뱁뱂뱃뱄뱅뱆뱇뱈뱉뱊뱋뱌뱍뱎뱏뱐뱑뱒뱓뱔뱕뱖뱗뱘뱙뱚뱛뱜뱝뱞뱟뱠뱡뱢뱣뱤뱥뱦뱧뱨뱩뱪뱫뱬뱭뱮뱯뱰뱱뱲뱳뱴뱵뱶뱷뱸뱹뱺뱻뱼뱽뱾뱿벀벁벂벃버벅벆벇번벉벊벋벌벍벎벏벐벑벒벓범법벖벗벘벙벚벛벜벝벞벟베벡벢벣벤벥벦벧벨벩벪벫벬벭벮벯벰벱벲벳벴벵벶벷벸벹벺벻벼벽벾벿변볁볂볃별볅볆볇볈볉볊볋볌볍볎볏볐병볒볓볔볕볖볗볘볙볚볛볜볝볞볟볠볡볢볣볤볥볦볧볨볩볪볫볬볭볮볯볰볱볲볳보복볶볷본볹볺볻볼볽볾볿봀봁봂봃봄봅봆봇봈봉봊봋봌봍봎봏봐봑봒봓봔봕봖봗봘봙봚봛봜봝봞봟봠봡봢봣봤봥봦봧봨봩봪봫봬봭봮봯봰봱봲봳봴봵봶봷봸봹봺봻봼봽봾봿뵀뵁뵂뵃뵄뵅뵆뵇뵈뵉뵊뵋뵌뵍뵎뵏뵐뵑뵒뵓뵔뵕뵖뵗뵘뵙뵚뵛뵜뵝뵞뵟뵠뵡뵢뵣뵤뵥뵦뵧뵨뵩뵪뵫뵬뵭뵮뵯뵰뵱뵲뵳뵴뵵뵶뵷뵸뵹뵺뵻뵼뵽뵾뵿부북붂붃분붅붆붇불붉붊붋붌붍붎붏붐붑붒붓붔붕붖붗붘붙붚붛붜붝붞붟붠붡붢붣붤붥붦붧붨붩붪붫붬붭붮붯붰붱붲붳붴붵붶붷붸붹붺붻붼붽붾붿뷀뷁뷂뷃뷄뷅뷆뷇뷈뷉뷊뷋뷌뷍뷎뷏뷐뷑뷒뷓뷔뷕뷖뷗뷘뷙뷚뷛뷜뷝뷞뷟뷠뷡뷢뷣뷤뷥뷦뷧뷨뷩뷪뷫뷬뷭뷮뷯뷰뷱뷲뷳뷴뷵뷶뷷뷸뷹뷺뷻뷼뷽뷾뷿븀븁븂븃븄븅븆븇븈븉븊븋브븍븎븏븐븑븒븓블븕븖븗븘븙븚븛븜븝븞븟븠븡븢븣븤븥븦븧븨븩븪븫븬븭븮븯븰븱븲븳븴븵븶븷븸븹븺븻븼븽븾븿"
+ "빀빁빂빃비빅빆빇빈빉빊빋빌빍빎빏빐빑빒빓빔빕빖빗빘빙빚빛빜빝빞빟빠빡빢빣빤빥빦빧빨빩빪빫빬빭빮빯빰빱빲빳빴빵빶빷빸빹빺빻빼빽빾빿뺀뺁뺂뺃뺄뺅뺆뺇뺈뺉뺊뺋뺌뺍뺎뺏뺐뺑뺒뺓뺔뺕뺖뺗뺘뺙뺚뺛뺜뺝뺞뺟뺠뺡뺢뺣뺤뺥뺦뺧뺨뺩뺪뺫뺬뺭뺮뺯뺰뺱뺲뺳뺴뺵뺶뺷뺸뺹뺺뺻뺼뺽뺾뺿뻀뻁뻂뻃뻄뻅뻆뻇뻈뻉뻊뻋뻌뻍뻎뻏뻐뻑뻒뻓뻔뻕뻖뻗뻘뻙뻚뻛뻜뻝뻞뻟뻠뻡뻢뻣뻤뻥뻦뻧뻨뻩뻪뻫뻬뻭뻮뻯뻰뻱뻲뻳뻴뻵뻶뻷뻸뻹뻺뻻뻼뻽뻾뻿뼀뼁뼂뼃뼄뼅뼆뼇뼈뼉뼊뼋뼌뼍뼎뼏뼐뼑뼒뼓뼔뼕뼖뼗뼘뼙뼚뼛뼜뼝뼞뼟뼠뼡뼢뼣뼤뼥뼦뼧뼨뼩뼪뼫뼬뼭뼮뼯뼰뼱뼲뼳뼴뼵뼶뼷뼸뼹뼺뼻뼼뼽뼾뼿뽀뽁뽂뽃뽄뽅뽆뽇뽈뽉뽊뽋뽌뽍뽎뽏뽐뽑뽒뽓뽔뽕뽖뽗뽘뽙뽚뽛뽜뽝뽞뽟뽠뽡뽢뽣뽤뽥뽦뽧뽨뽩뽪뽫뽬뽭뽮뽯뽰뽱뽲뽳뽴뽵뽶뽷뽸뽹뽺뽻뽼뽽뽾뽿뾀뾁뾂뾃뾄뾅뾆뾇뾈뾉뾊뾋뾌뾍뾎뾏뾐뾑뾒뾓뾔뾕뾖뾗뾘뾙뾚뾛뾜뾝뾞뾟뾠뾡뾢뾣뾤뾥뾦뾧뾨뾩뾪뾫뾬뾭뾮뾯뾰뾱뾲뾳뾴뾵뾶뾷뾸뾹뾺뾻뾼뾽뾾뾿뿀뿁뿂뿃뿄뿅뿆뿇뿈뿉뿊뿋뿌뿍뿎뿏뿐뿑뿒뿓뿔뿕뿖뿗뿘뿙뿚뿛뿜뿝뿞뿟뿠뿡뿢뿣뿤뿥뿦뿧뿨뿩뿪뿫뿬뿭뿮뿯뿰뿱뿲뿳뿴뿵뿶뿷뿸뿹뿺뿻뿼뿽뿾뿿쀀쀁쀂쀃쀄쀅쀆쀇쀈쀉쀊쀋쀌쀍쀎쀏쀐쀑쀒쀓쀔쀕쀖쀗쀘쀙쀚쀛쀜쀝쀞쀟쀠쀡쀢쀣쀤쀥쀦쀧쀨쀩쀪쀫쀬쀭쀮쀯쀰쀱쀲쀳쀴쀵쀶쀷쀸쀹쀺쀻쀼쀽쀾쀿"
+ "쁀쁁쁂쁃쁄쁅쁆쁇쁈쁉쁊쁋쁌쁍쁎쁏쁐쁑쁒쁓쁔쁕쁖쁗쁘쁙쁚쁛쁜쁝쁞쁟쁠쁡쁢쁣쁤쁥쁦쁧쁨쁩쁪쁫쁬쁭쁮쁯쁰쁱쁲쁳쁴쁵쁶쁷쁸쁹쁺쁻쁼쁽쁾쁿삀삁삂삃삄삅삆삇삈삉삊삋삌삍삎삏삐삑삒삓삔삕삖삗삘삙삚삛삜삝삞삟삠삡삢삣삤삥삦삧삨삩삪삫사삭삮삯산삱삲삳살삵삶삷삸삹삺삻삼삽삾삿샀상샂샃샄샅샆샇새색샊샋샌샍샎샏샐샑샒샓샔샕샖샗샘샙샚샛샜생샞샟샠샡샢샣샤샥샦샧샨샩샪샫샬샭샮샯샰샱샲샳샴샵샶샷샸샹샺샻샼샽샾샿섀섁섂섃섄섅섆섇섈섉섊섋섌섍섎섏섐섑섒섓섔섕섖섗섘섙섚섛서석섞섟선섡섢섣설섥섦섧섨섩섪섫섬섭섮섯섰성섲섳섴섵섶섷세섹섺섻센섽섾섿셀셁셂셃셄셅셆셇셈셉셊셋셌셍셎셏셐셑셒셓셔셕셖셗션셙셚셛셜셝셞셟셠셡셢셣셤셥셦셧셨셩셪셫셬셭셮셯셰셱셲셳셴셵셶셷셸셹셺셻셼셽셾셿솀솁솂솃솄솅솆솇솈솉솊솋소속솎솏손솑솒솓솔솕솖솗솘솙솚솛솜솝솞솟솠송솢솣솤솥솦솧솨솩솪솫솬솭솮솯솰솱솲솳솴솵솶솷솸솹솺솻솼솽솾솿쇀쇁쇂쇃쇄쇅쇆쇇쇈쇉쇊쇋쇌쇍쇎쇏쇐쇑쇒쇓쇔쇕쇖쇗쇘쇙쇚쇛쇜쇝쇞쇟쇠쇡쇢쇣쇤쇥쇦쇧쇨쇩쇪쇫쇬쇭쇮쇯쇰쇱쇲쇳쇴쇵쇶쇷쇸쇹쇺쇻쇼쇽쇾쇿숀숁숂숃숄숅숆숇숈숉숊숋숌숍숎숏숐숑숒숓숔숕숖숗수숙숚숛순숝숞숟술숡숢숣숤숥숦숧숨숩숪숫숬숭숮숯숰숱숲숳숴숵숶숷숸숹숺숻숼숽숾숿"
+ "쉀쉁쉂쉃쉄쉅쉆쉇쉈쉉쉊쉋쉌쉍쉎쉏쉐쉑쉒쉓쉔쉕쉖쉗쉘쉙쉚쉛쉜쉝쉞쉟쉠쉡쉢쉣쉤쉥쉦쉧쉨쉩쉪쉫쉬쉭쉮쉯쉰쉱쉲쉳쉴쉵쉶쉷쉸쉹쉺쉻쉼쉽쉾쉿슀슁슂슃슄슅슆슇슈슉슊슋슌슍슎슏슐슑슒슓슔슕슖슗슘슙슚슛슜슝슞슟슠슡슢슣스슥슦슧슨슩슪슫슬슭슮슯슰슱슲슳슴습슶슷슸승슺슻슼슽슾슿싀싁싂싃싄싅싆싇싈싉싊싋싌싍싎싏싐싑싒싓싔싕싖싗싘싙싚싛시식싞싟신싡싢싣실싥싦싧싨싩싪싫심십싮싯싰싱싲싳싴싵싶싷싸싹싺싻싼싽싾싿쌀쌁쌂쌃쌄쌅쌆쌇쌈쌉쌊쌋쌌쌍쌎쌏쌐쌑쌒쌓쌔쌕쌖쌗쌘쌙쌚쌛쌜쌝쌞쌟쌠쌡쌢쌣쌤쌥쌦쌧쌨쌩쌪쌫쌬쌭쌮쌯쌰쌱쌲쌳쌴쌵쌶쌷쌸쌹쌺쌻쌼쌽쌾쌿썀썁썂썃썄썅썆썇썈썉썊썋썌썍썎썏", "썐썑썒썓썔썕썖썗썘썙썚썛썜썝썞썟썠썡썢썣썤썥썦썧써썩썪썫썬썭썮썯썰썱썲썳썴썵썶썷썸썹썺썻썼썽썾썿쎀쎁쎂쎃쎄쎅쎆쎇쎈쎉쎊쎋쎌쎍쎎쎏쎐쎑쎒쎓쎔쎕쎖쎗쎘쎙쎚쎛쎜쎝쎞쎟쎠쎡쎢쎣쎤쎥쎦쎧쎨쎩쎪쎫쎬쎭쎮쎯쎰쎱쎲쎳쎴쎵쎶쎷쎸쎹쎺쎻쎼쎽쎾쎿쏀쏁쏂쏃쏄쏅쏆쏇쏈쏉쏊쏋쏌쏍쏎쏏쏐쏑쏒쏓쏔쏕쏖쏗쏘쏙쏚쏛쏜쏝쏞쏟쏠쏡쏢쏣쏤쏥쏦쏧쏨쏩쏪쏫쏬쏭쏮쏯쏰쏱쏲쏳쏴쏵쏶쏷쏸쏹쏺쏻쏼쏽쏾쏿쐀쐁쐂쐃쐄쐅쐆쐇쐈쐉쐊쐋쐌쐍쐎쐏쐐쐑쐒쐓쐔쐕쐖쐗쐘쐙쐚쐛쐜쐝쐞쐟쐠쐡쐢쐣쐤쐥쐦쐧쐨쐩쐪쐫쐬쐭쐮쐯쐰쐱쐲쐳쐴쐵쐶쐷쐸쐹쐺쐻쐼쐽쐾쐿쑀쑁쑂쑃쑄쑅쑆쑇쑈쑉쑊쑋쑌쑍쑎쑏쑐쑑쑒쑓쑔쑕쑖쑗쑘쑙쑚쑛쑜쑝쑞쑟쑠쑡쑢쑣쑤쑥쑦쑧쑨쑩쑪쑫쑬쑭쑮쑯쑰쑱쑲쑳쑴쑵쑶쑷쑸쑹쑺쑻쑼쑽쑾쑿쒀쒁쒂쒃쒄쒅쒆쒇쒈쒉쒊쒋쒌쒍쒎쒏쒐쒑쒒쒓쒔쒕쒖쒗쒘쒙쒚쒛쒜쒝쒞쒟쒠쒡쒢쒣쒤쒥쒦쒧쒨쒩쒪쒫쒬쒭쒮쒯쒰쒱쒲쒳쒴쒵쒶쒷쒸쒹쒺쒻쒼쒽쒾쒿쓀쓁쓂쓃쓄쓅쓆쓇쓈쓉쓊쓋쓌쓍쓎쓏쓐쓑쓒쓓쓔쓕쓖쓗쓘쓙쓚쓛쓜쓝쓞쓟쓠쓡쓢쓣쓤쓥쓦쓧쓨쓩쓪쓫쓬쓭쓮쓯쓰쓱쓲쓳쓴쓵쓶쓷쓸쓹쓺쓻쓼쓽쓾쓿씀씁씂씃씄씅씆씇씈씉씊씋씌씍씎씏씐씑씒씓씔씕씖씗씘씙씚씛씜씝씞씟씠씡씢씣씤씥씦씧씨씩씪씫씬씭씮씯씰씱씲씳씴씵씶씷씸씹씺씻씼씽씾씿앀앁앂앃아악앆앇안앉않앋알앍앎앏"
+ "앐앑앒앓암압앖앗았앙앚앛앜앝앞앟애액앢앣앤앥앦앧앨앩앪앫앬앭앮앯앰앱앲앳앴앵앶앷앸앹앺앻야약앾앿얀얁얂얃얄얅얆얇얈얉얊얋얌얍얎얏얐양얒얓얔얕얖얗얘얙얚얛얜얝얞얟얠얡얢얣얤얥얦얧얨얩얪얫얬얭얮얯얰얱얲얳어억얶얷언얹얺얻얼얽얾얿엀엁엂엃엄업없엇었엉엊엋엌엍엎엏에엑엒엓엔엕엖엗엘엙엚엛엜엝엞엟엠엡엢엣엤엥엦엧엨엩엪엫여역엮엯연엱엲엳열엵엶엷엸엹엺엻염엽엾엿였영옂옃옄옅옆옇예옉옊옋옌옍옎옏옐옑옒옓옔옕옖옗옘옙옚옛옜옝옞옟옠옡옢옣오옥옦옧온옩옪옫올옭옮옯옰옱옲옳옴옵옶옷옸옹옺옻옼옽옾옿와왁왂왃완왅왆왇왈왉왊왋왌왍왎왏왐왑왒왓왔왕왖왗왘왙왚왛왜왝왞왟왠왡왢왣왤왥왦왧왨왩왪왫왬왭왮왯왰왱왲왳왴왵왶왷외왹왺왻왼왽왾왿욀욁욂욃욄욅욆욇욈욉욊욋욌욍욎욏욐욑욒욓요욕욖욗욘욙욚욛욜욝욞욟욠욡욢욣욤욥욦욧욨용욪욫욬욭욮욯우욱욲욳운욵욶욷울욹욺욻욼욽욾욿움웁웂웃웄웅웆웇웈웉웊웋워웍웎웏원웑웒웓월웕웖웗웘웙웚웛웜웝웞웟웠웡웢웣웤웥웦웧웨웩웪웫웬웭웮웯웰웱웲웳웴웵웶웷웸웹웺웻웼웽웾웿윀윁윂윃위윅윆윇윈윉윊윋윌윍윎윏윐윑윒윓윔윕윖윗윘윙윚윛윜윝윞윟유육윢윣윤윥윦윧율윩윪윫윬윭윮윯윰윱윲윳윴융윶윷윸윹윺윻으윽윾윿은읁읂읃을읅읆읇읈읉읊읋음읍읎읏"
+ "읐응읒읓읔읕읖읗의읙읚읛읜읝읞읟읠읡읢읣읤읥읦읧읨읩읪읫읬읭읮읯읰읱읲읳이익읶읷인읹읺읻일읽읾읿잀잁잂잃임입잆잇있잉잊잋잌잍잎잏자작잒잓잔잕잖잗잘잙잚잛잜잝잞잟잠잡잢잣잤장잦잧잨잩잪잫재잭잮잯잰잱잲잳잴잵잶잷잸잹잺잻잼잽잾잿쟀쟁쟂쟃쟄쟅쟆쟇쟈쟉쟊쟋쟌쟍쟎쟏쟐쟑쟒쟓쟔쟕쟖쟗쟘쟙쟚쟛쟜쟝쟞쟟쟠쟡쟢쟣쟤쟥쟦쟧쟨쟩쟪쟫쟬쟭쟮쟯쟰쟱쟲쟳쟴쟵쟶쟷쟸쟹쟺쟻쟼쟽쟾쟿저적젂젃전젅젆젇절젉젊젋젌젍젎젏점접젒젓젔정젖젗젘젙젚젛제젝젞젟젠젡젢젣젤젥젦젧젨젩젪젫젬젭젮젯젰젱젲젳젴젵젶젷져젹젺젻젼젽젾젿졀졁졂졃졄졅졆졇졈졉졊졋졌졍졎졏졐졑졒졓졔졕졖졗졘졙졚졛졜졝졞졟졠졡졢졣졤졥졦졧졨졩졪졫졬졭졮졯조족졲졳존졵졶졷졸졹졺졻졼졽졾졿좀좁좂좃좄종좆좇좈좉좊좋좌좍좎좏좐좑좒좓좔좕좖좗좘좙좚좛좜좝좞좟좠좡좢좣좤좥좦좧좨좩좪좫좬좭좮좯좰좱좲좳좴좵좶좷좸좹좺좻좼좽좾좿죀죁죂죃죄죅죆죇죈죉죊죋죌죍죎죏죐죑죒죓죔죕죖죗죘죙죚죛죜죝죞죟죠죡죢죣죤죥죦죧죨죩죪죫죬죭죮죯죰죱죲죳죴죵죶죷죸죹죺죻주죽죾죿준줁줂줃줄줅줆줇줈줉줊줋줌줍줎줏줐중줒줓줔줕줖줗줘줙줚줛줜줝줞줟줠줡줢줣줤줥줦줧줨줩줪줫줬줭줮줯줰줱줲줳줴줵줶줷줸줹줺줻줼줽줾줿쥀쥁쥂쥃쥄쥅쥆쥇쥈쥉쥊쥋쥌쥍쥎쥏"
+ "쥐쥑쥒쥓쥔쥕쥖쥗쥘쥙쥚쥛쥜쥝쥞쥟쥠쥡쥢쥣쥤쥥쥦쥧쥨쥩쥪쥫쥬쥭쥮쥯쥰쥱쥲쥳쥴쥵쥶쥷쥸쥹쥺쥻쥼쥽쥾쥿즀즁즂즃즄즅즆즇즈즉즊즋즌즍즎즏즐즑즒즓즔즕즖즗즘즙즚즛즜증즞즟즠즡즢즣즤즥즦즧즨즩즪즫즬즭즮즯즰즱즲즳즴즵즶즷즸즹즺즻즼즽즾즿지직짂짃진짅짆짇질짉짊짋짌짍짎짏짐집짒짓짔징짖짗짘짙짚짛짜짝짞짟짠짡짢짣짤짥짦짧짨짩짪짫짬짭짮짯짰짱짲짳짴짵짶짷째짹짺짻짼짽짾짿쨀쨁쨂쨃쨄쨅쨆쨇쨈쨉쨊쨋쨌쨍쨎쨏쨐쨑쨒쨓쨔쨕쨖쨗쨘쨙쨚쨛쨜쨝쨞쨟쨠쨡쨢쨣쨤쨥쨦쨧쨨쨩쨪쨫쨬쨭쨮쨯쨰쨱쨲쨳쨴쨵쨶쨷쨸쨹쨺쨻쨼쨽쨾쨿쩀쩁쩂쩃쩄쩅쩆쩇쩈쩉쩊쩋쩌쩍쩎쩏쩐쩑쩒쩓쩔쩕쩖쩗쩘쩙쩚쩛쩜쩝쩞쩟쩠쩡쩢쩣쩤쩥쩦쩧쩨쩩쩪쩫쩬쩭쩮쩯쩰쩱쩲쩳쩴쩵쩶쩷쩸쩹쩺쩻쩼쩽쩾쩿쪀쪁쪂쪃쪄쪅쪆쪇쪈쪉쪊쪋쪌쪍쪎쪏쪐쪑쪒쪓쪔쪕쪖쪗쪘쪙쪚쪛쪜쪝쪞쪟쪠쪡쪢쪣쪤쪥쪦쪧쪨쪩쪪쪫쪬쪭쪮쪯쪰쪱쪲쪳쪴쪵쪶쪷쪸쪹쪺쪻쪼쪽쪾쪿쫀쫁쫂쫃쫄쫅쫆쫇쫈쫉쫊쫋쫌쫍쫎쫏쫐쫑쫒쫓쫔쫕쫖쫗쫘쫙쫚쫛쫜쫝쫞쫟쫠쫡쫢쫣쫤쫥쫦쫧쫨쫩쫪쫫쫬쫭쫮쫯쫰쫱쫲쫳쫴쫵쫶쫷쫸쫹쫺쫻쫼쫽쫾쫿쬀쬁쬂쬃쬄쬅쬆쬇쬈쬉쬊쬋쬌쬍쬎쬏쬐쬑쬒쬓쬔쬕쬖쬗쬘쬙쬚쬛쬜쬝쬞쬟쬠쬡쬢쬣쬤쬥쬦쬧쬨쬩쬪쬫쬬쬭쬮쬯쬰쬱쬲쬳쬴쬵쬶쬷쬸쬹쬺쬻쬼쬽쬾쬿쭀쭁쭂쭃쭄쭅쭆쭇쭈쭉쭊쭋쭌쭍쭎쭏"
+ "쭐쭑쭒쭓쭔쭕쭖쭗쭘쭙쭚쭛쭜쭝쭞쭟쭠쭡쭢쭣쭤쭥쭦쭧쭨쭩쭪쭫쭬쭭쭮쭯쭰쭱쭲쭳쭴쭵쭶쭷쭸쭹쭺쭻쭼쭽쭾쭿쮀쮁쮂쮃쮄쮅쮆쮇쮈쮉쮊쮋쮌쮍쮎쮏쮐쮑쮒쮓쮔쮕쮖쮗쮘쮙쮚쮛쮜쮝쮞쮟쮠쮡쮢쮣쮤쮥쮦쮧쮨쮩쮪쮫쮬쮭쮮쮯쮰쮱쮲쮳쮴쮵쮶쮷쮸쮹쮺쮻쮼쮽쮾쮿쯀쯁쯂쯃쯄쯅쯆쯇쯈쯉쯊쯋쯌쯍쯎쯏쯐쯑쯒쯓쯔쯕쯖쯗쯘쯙쯚쯛쯜쯝쯞쯟쯠쯡쯢쯣쯤쯥쯦쯧쯨쯩쯪쯫쯬쯭쯮쯯쯰쯱쯲쯳쯴쯵쯶쯷쯸쯹쯺쯻쯼쯽쯾쯿찀찁찂찃찄찅찆찇찈찉찊찋찌찍찎찏찐찑찒찓찔찕찖찗찘찙찚찛찜찝찞찟찠찡찢찣찤찥찦찧차착찪찫찬찭찮찯찰찱찲찳찴찵찶찷참찹찺찻찼창찾찿챀챁챂챃채책챆챇챈챉챊챋챌챍챎챏챐챑챒챓챔챕챖챗챘챙챚챛챜챝챞챟챠챡챢챣챤챥챦챧챨챩챪챫챬챭챮챯챰챱챲챳챴챵챶챷챸챹챺챻챼챽챾챿첀첁첂첃첄첅첆첇첈첉첊첋첌첍첎첏첐첑첒첓첔첕첖첗처척첚첛천첝첞첟철첡첢첣첤첥첦첧첨첩첪첫첬청첮첯첰첱첲첳체첵첶첷첸첹첺첻첼첽첾첿쳀쳁쳂쳃쳄쳅쳆쳇쳈쳉쳊쳋쳌쳍쳎쳏쳐쳑쳒쳓쳔쳕쳖쳗쳘쳙쳚쳛쳜쳝쳞쳟쳠쳡쳢쳣쳤쳥쳦쳧쳨쳩쳪쳫쳬쳭쳮쳯쳰쳱쳲쳳쳴쳵쳶쳷쳸쳹쳺쳻쳼쳽쳾쳿촀촁촂촃촄촅촆촇초촉촊촋촌촍촎촏촐촑촒촓촔촕촖촗촘촙촚촛촜총촞촟촠촡촢촣촤촥촦촧촨촩촪촫촬촭촮촯촰촱촲촳촴촵촶촷촸촹촺촻촼촽촾촿쵀쵁쵂쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏"
+ "쵐쵑쵒쵓쵔쵕쵖쵗쵘쵙쵚쵛최쵝쵞쵟쵠쵡쵢쵣쵤쵥쵦쵧쵨쵩쵪쵫쵬쵭쵮쵯쵰쵱쵲쵳쵴쵵쵶쵷쵸쵹쵺쵻쵼쵽쵾쵿춀춁춂춃춄춅춆춇춈춉춊춋춌춍춎춏춐춑춒춓추축춖춗춘춙춚춛출춝춞춟춠춡춢춣춤춥춦춧춨충춪춫춬춭춮춯춰춱춲춳춴춵춶춷춸춹춺춻춼춽춾춿췀췁췂췃췄췅췆췇췈췉췊췋췌췍췎췏췐췑췒췓췔췕췖췗췘췙췚췛췜췝췞췟췠췡췢췣췤췥췦췧취췩췪췫췬췭췮췯췰췱췲췳췴췵췶췷췸췹췺췻췼췽췾췿츀츁츂츃츄츅츆츇츈츉츊츋츌츍츎츏츐츑츒츓츔츕츖츗츘츙츚츛츜츝츞츟츠측츢츣츤츥츦츧츨츩츪츫츬츭츮츯츰츱츲츳츴층츶츷츸츹츺츻츼츽츾츿칀칁칂칃칄칅칆칇칈칉칊칋칌칍칎칏칐칑칒칓칔칕칖칗치칙칚칛친칝칞칟칠칡칢칣칤칥칦칧침칩칪칫칬칭칮칯칰칱칲칳카칵칶칷칸칹칺칻칼칽칾칿캀캁캂캃캄캅캆캇캈캉캊캋캌캍캎캏캐캑캒캓캔캕캖캗캘캙캚캛캜캝캞캟캠캡캢캣캤캥캦캧캨캩캪캫캬캭캮캯캰캱캲캳캴캵캶캷캸캹캺캻캼캽캾캿컀컁컂컃컄컅컆컇컈컉컊컋컌컍컎컏컐컑컒컓컔컕컖컗컘컙컚컛컜컝컞컟컠컡컢컣커컥컦컧컨컩컪컫컬컭컮컯컰컱컲컳컴컵컶컷컸컹컺컻컼컽컾컿케켁켂켃켄켅켆켇켈켉켊켋켌켍켎켏켐켑켒켓켔켕켖켗켘켙켚켛켜켝켞켟켠켡켢켣켤켥켦켧켨켩켪켫켬켭켮켯켰켱켲켳켴켵켶켷켸켹켺켻켼켽켾켿콀콁콂콃콄콅콆콇콈콉콊콋콌콍콎콏"
+ "콐콑콒콓코콕콖콗콘콙콚콛콜콝콞콟콠콡콢콣콤콥콦콧콨콩콪콫콬콭콮콯콰콱콲콳콴콵콶콷콸콹콺콻콼콽콾콿쾀쾁쾂쾃쾄쾅쾆쾇쾈쾉쾊쾋쾌쾍쾎쾏쾐쾑쾒쾓쾔쾕쾖쾗쾘쾙쾚쾛쾜쾝쾞쾟쾠쾡쾢쾣쾤쾥쾦쾧쾨쾩쾪쾫쾬쾭쾮쾯쾰쾱쾲쾳쾴쾵쾶쾷쾸쾹쾺쾻쾼쾽쾾쾿쿀쿁쿂쿃쿄쿅쿆쿇쿈쿉쿊쿋쿌쿍쿎쿏쿐쿑쿒쿓쿔쿕쿖쿗쿘쿙쿚쿛쿜쿝쿞쿟쿠쿡쿢쿣쿤쿥쿦쿧쿨쿩쿪쿫쿬쿭쿮쿯쿰쿱쿲쿳쿴쿵쿶쿷쿸쿹쿺쿻쿼쿽쿾쿿퀀퀁퀂퀃퀄퀅퀆퀇퀈퀉퀊퀋퀌퀍퀎퀏퀐퀑퀒퀓퀔퀕퀖퀗퀘퀙퀚퀛퀜퀝퀞퀟퀠퀡퀢퀣퀤퀥퀦퀧퀨퀩퀪퀫퀬퀭퀮퀯퀰퀱퀲퀳퀴퀵퀶퀷퀸퀹퀺퀻퀼퀽퀾퀿큀큁큂큃큄큅큆큇큈큉큊큋큌큍큎큏큐큑큒큓큔큕큖큗큘큙큚큛큜큝큞큟큠큡큢큣큤큥큦큧큨큩큪큫크큭큮큯큰큱큲큳클큵큶큷큸큹큺큻큼큽큾큿킀킁킂킃킄킅킆킇킈킉킊킋킌킍킎킏킐킑킒킓킔킕킖킗킘킙킚킛킜킝킞킟킠킡킢킣키킥킦킧킨킩킪킫킬킭킮킯킰킱킲킳킴킵킶킷킸킹킺킻킼킽킾킿타탁탂탃탄탅탆탇탈탉탊탋탌탍탎탏탐탑탒탓탔탕탖탗탘탙탚탛태택탞탟탠탡탢탣탤탥탦탧탨탩탪탫탬탭탮탯탰탱탲탳탴탵탶탷탸탹탺탻탼탽탾탿턀턁턂턃턄턅턆턇턈턉턊턋턌턍턎턏턐턑턒턓턔턕턖턗턘턙턚턛턜턝턞턟턠턡턢턣턤턥턦턧턨턩턪턫턬턭턮턯터턱턲턳턴턵턶턷털턹턺턻턼턽턾턿텀텁텂텃텄텅텆텇텈텉텊텋테텍텎텏"
+ "텐텑텒텓텔텕텖텗텘텙텚텛템텝텞텟텠텡텢텣텤텥텦텧텨텩텪텫텬텭텮텯텰텱텲텳텴텵텶텷텸텹텺텻텼텽텾텿톀톁톂톃톄톅톆톇톈톉톊톋톌톍톎톏톐톑톒톓톔톕톖톗톘톙톚톛톜톝톞톟토톡톢톣톤톥톦톧톨톩톪톫톬톭톮톯톰톱톲톳톴통톶톷톸톹톺톻톼톽톾톿퇀퇁퇂퇃퇄퇅퇆퇇퇈퇉퇊퇋퇌퇍퇎퇏퇐퇑퇒퇓퇔퇕퇖퇗퇘퇙퇚퇛퇜퇝퇞퇟퇠퇡퇢퇣퇤퇥퇦퇧퇨퇩퇪퇫퇬퇭퇮퇯퇰퇱퇲퇳퇴퇵퇶퇷퇸퇹퇺퇻퇼퇽퇾퇿툀툁툂툃툄툅툆툇툈툉툊툋툌툍툎툏툐툑툒툓툔툕툖툗툘툙툚툛툜툝툞툟툠툡툢툣툤툥툦툧툨툩툪툫투툭툮툯툰툱툲툳툴툵툶툷툸툹툺툻툼툽툾툿퉀퉁퉂퉃퉄퉅퉆퉇퉈퉉퉊퉋퉌퉍퉎퉏퉐퉑퉒퉓퉔퉕퉖퉗퉘퉙퉚퉛퉜퉝퉞퉟퉠퉡퉢퉣퉤퉥퉦퉧퉨퉩퉪퉫퉬퉭퉮퉯퉰퉱퉲퉳퉴퉵퉶퉷퉸퉹퉺퉻퉼퉽퉾퉿튀튁튂튃튄튅튆튇튈튉튊튋튌튍튎튏튐튑튒튓튔튕튖튗튘튙튚튛튜튝튞튟튠튡튢튣튤튥튦튧튨튩튪튫튬튭튮튯튰튱튲튳튴튵튶튷트특튺튻튼튽튾튿틀틁틂틃틄틅틆틇틈틉틊틋틌틍틎틏틐틑틒틓틔틕틖틗틘틙틚틛틜틝틞틟틠틡틢틣틤틥틦틧틨틩틪틫틬틭틮틯티틱틲틳틴틵틶틷틸틹틺틻틼틽틾틿팀팁팂팃팄팅팆팇팈팉팊팋파팍팎팏판팑팒팓팔팕팖팗팘팙팚팛팜팝팞팟팠팡팢팣팤팥팦팧패팩팪팫팬팭팮팯팰팱팲팳팴팵팶팷팸팹팺팻팼팽팾팿퍀퍁퍂퍃퍄퍅퍆퍇퍈퍉퍊퍋퍌퍍퍎퍏"
+ "퍐퍑퍒퍓퍔퍕퍖퍗퍘퍙퍚퍛퍜퍝퍞퍟퍠퍡퍢퍣퍤퍥퍦퍧퍨퍩퍪퍫퍬퍭퍮퍯퍰퍱퍲퍳퍴퍵퍶퍷퍸퍹퍺퍻퍼퍽퍾퍿펀펁펂펃펄펅펆펇펈펉펊펋펌펍펎펏펐펑펒펓펔펕펖펗페펙펚펛펜펝펞펟펠펡펢펣펤펥펦펧펨펩펪펫펬펭펮펯펰펱펲펳펴펵펶펷편펹펺펻펼펽펾펿폀폁폂폃폄폅폆폇폈평폊폋폌폍폎폏폐폑폒폓폔폕폖폗폘폙폚폛폜폝폞폟폠폡폢폣폤폥폦폧폨폩폪폫포폭폮폯폰폱폲폳폴폵폶폷폸폹폺폻폼폽폾폿퐀퐁퐂퐃퐄퐅퐆퐇퐈퐉퐊퐋퐌퐍퐎퐏퐐퐑퐒퐓퐔퐕퐖퐗퐘퐙퐚퐛퐜퐝퐞퐟퐠퐡퐢퐣퐤퐥퐦퐧퐨퐩퐪퐫퐬퐭퐮퐯퐰퐱퐲퐳퐴퐵퐶퐷퐸퐹퐺퐻퐼퐽퐾퐿푀푁푂푃푄푅푆푇푈푉푊푋푌푍푎푏푐푑푒푓푔푕푖푗푘푙푚푛표푝푞푟푠푡푢푣푤푥푦푧푨푩푪푫푬푭푮푯푰푱푲푳푴푵푶푷푸푹푺푻푼푽푾푿풀풁풂풃풄풅풆풇품풉풊풋풌풍풎풏풐풑풒풓풔풕풖풗풘풙풚풛풜풝풞풟풠풡풢풣풤풥풦풧풨풩풪풫풬풭풮풯풰풱풲풳풴풵풶풷풸풹풺풻풼풽풾풿퓀퓁퓂퓃퓄퓅퓆퓇퓈퓉퓊퓋퓌퓍퓎퓏퓐퓑퓒퓓퓔퓕퓖퓗퓘퓙퓚퓛퓜퓝퓞퓟퓠퓡퓢퓣퓤퓥퓦퓧퓨퓩퓪퓫퓬퓭퓮퓯퓰퓱퓲퓳퓴퓵퓶퓷퓸퓹퓺퓻퓼퓽퓾퓿픀픁픂픃프픅픆픇픈픉픊픋플픍픎픏픐픑픒픓픔픕픖픗픘픙픚픛픜픝픞픟픠픡픢픣픤픥픦픧픨픩픪픫픬픭픮픯픰픱픲픳픴픵픶픷픸픹픺픻피픽픾픿핀핁핂핃필핅핆핇핈핉핊핋핌핍핎핏"
+ "핐핑핒핓핔핕핖핗하학핚핛한핝핞핟할핡핢핣핤핥핦핧함합핪핫핬항핮핯핰핱핲핳해핵핶핷핸핹핺핻핼핽핾핿햀햁햂햃햄햅햆햇했행햊햋햌햍햎햏햐햑햒햓햔햕햖햗햘햙햚햛햜햝햞햟햠햡햢햣햤향햦햧햨햩햪햫햬햭햮햯햰햱햲햳햴햵햶햷햸햹햺햻햼햽햾햿헀헁헂헃헄헅헆헇허헉헊헋헌헍헎헏헐헑헒헓헔헕헖헗험헙헚헛헜헝헞헟헠헡헢헣헤헥헦헧헨헩헪헫헬헭헮헯헰헱헲헳헴헵헶헷헸헹헺헻헼헽헾헿혀혁혂혃현혅혆혇혈혉혊혋혌혍혎혏혐협혒혓혔형혖혗혘혙혚혛혜혝혞혟혠혡혢혣혤혥혦혧혨혩혪혫혬혭혮혯혰혱혲혳혴혵혶혷호혹혺혻혼혽혾혿홀홁홂홃홄홅홆홇홈홉홊홋홌홍홎홏홐홑홒홓화확홖홗환홙홚홛활홝홞홟홠홡홢홣홤홥홦홧홨황홪홫홬홭홮홯홰홱홲홳홴홵홶홷홸홹홺홻홼홽홾홿횀횁횂횃횄횅횆횇횈횉횊횋회획횎횏횐횑횒횓횔횕횖횗횘횙횚횛횜횝횞횟횠횡횢횣횤횥횦횧효횩횪횫횬횭횮횯횰횱횲횳횴횵횶횷횸횹횺횻횼횽횾횿훀훁훂훃후훅훆훇훈훉훊훋훌훍훎훏훐훑훒훓훔훕훖훗훘훙훚훛훜훝훞훟훠훡훢훣훤훥훦훧훨훩훪훫훬훭훮훯훰훱훲훳훴훵훶훷훸훹훺훻훼훽훾훿휀휁휂휃휄휅휆휇휈휉휊휋휌휍휎휏휐휑휒휓휔휕휖휗휘휙휚휛휜휝휞휟휠휡휢휣휤휥휦휧휨휩휪휫휬휭휮휯휰휱휲휳휴휵휶휷휸휹휺휻휼휽휾휿흀흁흂흃흄흅흆흇흈흉흊흋흌흍흎흏"
+ "흐흑흒흓흔흕흖흗흘흙흚흛흜흝흞흟흠흡흢흣흤흥흦흧흨흩흪흫희흭흮흯흰흱흲흳흴흵흶흷흸흹흺흻흼흽흾흿힀힁힂힃힄힅힆힇히힉힊힋힌힍힎힏힐힑힒힓힔힕힖힗힘힙힚힛힜힝힞힟힠힡힢힣\ud7a4\ud7a5\ud7a6\ud7a7\ud7a8\ud7a9\ud7aa\ud7ab\ud7ac\ud7ad\ud7ae\ud7afힰힱힲힳힴힵힶힷힸힹힺힻힼힽힾힿퟀퟁퟂퟃퟄퟅퟆ\ud7c7\ud7c8\ud7c9\ud7caퟋퟌퟍퟎퟏퟐퟑퟒퟓퟔퟕퟖퟗퟘퟙퟚퟛퟜퟝퟞퟟퟠퟡퟢퟣퟤퟥퟦퟧퟨퟩퟪퟫퟬퟭퟮퟯퟰퟱퟲퟳퟴퟵퟶퟷퟸퟹퟺퟻ\ud7fc\ud7fd\ud7fe\ud7ff????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"

+ "???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\udbff\udc00???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"

+ "????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ "豈更車賈滑串句龜龜契金喇奈懶癩羅蘿螺裸邏樂洛烙珞落酪駱亂卵欄爛蘭鸞嵐濫藍襤拉臘蠟廊朗浪狼郎來冷勞擄櫓爐盧老蘆虜路露魯鷺碌祿綠菉錄鹿論壟弄籠聾牢磊賂雷壘屢樓淚漏累"
+ "縷陋勒肋凜凌稜綾菱陵讀拏樂諾丹寧怒率異北磻便復不泌數索參塞省葉說殺辰沈拾若掠略亮兩凉梁糧良諒量勵呂女廬旅濾礪閭驪麗黎力曆歷轢年憐戀撚漣煉璉秊練聯輦蓮連鍊列劣咽烈裂說廉念捻殮簾獵令囹寧嶺怜玲瑩羚聆鈴零靈領例禮醴隸惡了僚寮尿料樂燎療蓼遼龍暈阮劉杻柳流溜琉留硫紐類六戮陸倫崙淪輪律慄栗率隆利吏履易李梨泥理痢罹裏裡里離匿溺吝燐璘藺隣鱗麟林淋臨立笠粒狀炙識什茶刺切度拓糖宅洞暴輻行降見廓兀嗀﨎﨏塚﨑晴﨓﨔凞猪益礼神祥福靖精羽﨟蘒﨡諸﨣﨤逸都﨧﨨﨩飯飼館鶴郞隷侮僧免勉勤卑喝嘆器塀墨層屮悔慨憎懲敏既暑梅海渚漢煮爫琢碑社祉祈祐祖祝禍禎穀突節練縉繁署者臭艹艹著褐視謁謹賓贈辶逸難響頻恵𤋮舘\ufa6e\ufa6f並况全侀充冀勇勺喝啕喙嗢塚墳奄奔婢嬨廒廙彩徭惘慎愈憎慠懲戴揄搜摒敖晴朗望杖歹殺流滛滋漢瀞煮瞧爵犯猪瑱甆画瘝瘟益盛直睊着磌窱節类絛練缾者荒華蝹襁覆視調諸請謁諾諭謹變贈輸遲醙鉶陼難靖韛響頋頻鬒龜𢡊𢡄𣏕㮝䀘䀹𥉉𥳐𧻓齃龎\ufada\ufadb\ufadc\ufadd\ufade\ufadf\ufae0\ufae1\ufae2\ufae3\ufae4\ufae5\ufae6\ufae7\ufae8\ufae9\ufaea\ufaeb\ufaec\ufaed\ufaee\ufaef\ufaf0\ufaf1\ufaf2\ufaf3\ufaf4\ufaf5\ufaf6\ufaf7\ufaf8\ufaf9\ufafa\ufafb\ufafc\ufafd\ufafe\ufaffﬀﬁﬂﬃﬄﬅﬆ\ufb07\ufb08\ufb09\ufb0a\ufb0b\ufb0c\ufb0d\ufb0e\ufb0f\ufb10\ufb11\ufb12ﬓﬔﬕﬖﬗ\ufb18\ufb19\ufb1a\ufb1b\ufb1cיִﬞײַﬠﬡﬢﬣﬤﬥﬦﬧﬨ﬩שׁשׂשּׁשּׂאַאָאּבּגּדּהּוּזּ\ufb37טּיּךּכּלּ\ufb3dמּ\ufb3fנּסּ\ufb42ףּפּ\ufb45צּקּרּשּתּוֹבֿכֿפֿﭏ"
+ "ﭐﭑﭒﭓﭔﭕﭖﭗﭘﭙﭚﭛﭜﭝﭞﭟﭠﭡﭢﭣﭤﭥﭦﭧﭨﭩﭪﭫﭬﭭﭮﭯﭰﭱﭲﭳﭴﭵﭶﭷﭸﭹﭺﭻﭼﭽﭾﭿﮀﮁﮂﮃﮄﮅﮆﮇﮈﮉﮊﮋﮌﮍﮎﮏﮐﮑﮒﮓﮔﮕﮖﮗﮘﮙﮚﮛﮜﮝﮞﮟﮠﮡﮢﮣﮤﮥﮦﮧﮨﮩﮪﮫﮬﮭﮮﮯﮰﮱ﮲﮳﮴﮵﮶﮷﮸﮹﮺﮻﮼﮽﮾﮿﯀﯁﯂\ufbc3\ufbc4\ufbc5\ufbc6\ufbc7\ufbc8\ufbc9\ufbca\ufbcb\ufbcc\ufbcd\ufbce\ufbcf\ufbd0\ufbd1\ufbd2ﯓﯔﯕﯖﯗﯘﯙﯚﯛﯜﯝﯞﯟﯠﯡﯢﯣﯤﯥﯦﯧﯨﯩﯪﯫﯬﯭﯮﯯﯰﯱﯲﯳﯴﯵﯶﯷﯸﯹﯺﯻﯼﯽﯾﯿﰀﰁﰂﰃﰄﰅﰆﰇﰈﰉﰊﰋﰌﰍﰎﰏﰐﰑﰒﰓﰔﰕﰖﰗﰘﰙﰚﰛﰜﰝﰞﰟﰠﰡﰢﰣﰤﰥﰦﰧﰨﰩﰪﰫﰬﰭﰮﰯﰰﰱﰲﰳﰴﰵﰶﰷﰸﰹﰺﰻﰼﰽﰾﰿﱀﱁﱂﱃﱄﱅﱆﱇﱈﱉﱊﱋﱌﱍﱎﱏﱐﱑﱒﱓﱔﱕﱖﱗﱘﱙﱚﱛﱜﱝﱞﱟﱠﱡﱢﱣﱤﱥﱦﱧﱨﱩﱪﱫﱬﱭﱮﱯﱰﱱﱲﱳﱴﱵﱶﱷﱸﱹﱺﱻﱼﱽﱾﱿﲀﲁﲂﲃﲄﲅﲆﲇﲈﲉﲊﲋﲌﲍﲎﲏﲐﲑﲒﲓﲔﲕﲖﲗﲘﲙﲚﲛﲜﲝﲞﲟﲠﲡﲢﲣﲤﲥﲦﲧﲨﲩﲪﲫﲬﲭﲮﲯﲰﲱﲲﲳﲴﲵﲶﲷﲸﲹﲺﲻﲼﲽﲾﲿﳀﳁﳂﳃﳄﳅﳆﳇﳈﳉﳊﳋﳌﳍﳎﳏﳐﳑﳒﳓﳔﳕﳖﳗﳘﳙﳚﳛﳜﳝﳞﳟﳠﳡﳢﳣﳤﳥﳦﳧﳨﳩﳪﳫﳬﳭﳮﳯﳰﳱﳲﳳﳴﳵﳶﳷﳸﳹﳺﳻﳼﳽﳾﳿﴀﴁﴂﴃﴄﴅﴆﴇﴈﴉﴊﴋﴌﴍﴎﴏﴐﴑﴒﴓﴔﴕﴖﴗﴘﴙﴚﴛﴜﴝﴞﴟﴠﴡﴢﴣﴤﴥﴦﴧﴨﴩﴪﴫﴬﴭﴮﴯﴰﴱﴲﴳﴴﴵﴶﴷﴸﴹﴺﴻﴼﴽ﴾﴿﵀﵁﵂﵃﵄﵅﵆﵇﵈﵉﵊﵋﵌﵍﵎﵏"
+ "ﵐﵑﵒﵓﵔﵕﵖﵗﵘﵙﵚﵛﵜﵝﵞﵟﵠﵡﵢﵣﵤﵥﵦﵧﵨﵩﵪﵫﵬﵭﵮﵯﵰﵱﵲﵳﵴﵵﵶﵷﵸﵹﵺﵻﵼﵽﵾﵿﶀﶁﶂﶃﶄﶅﶆﶇﶈﶉﶊﶋﶌﶍﶎﶏ\ufd90\ufd91ﶒﶓﶔﶕﶖﶗﶘﶙﶚﶛﶜﶝﶞﶟﶠﶡﶢﶣﶤﶥﶦﶧﶨﶩﶪﶫﶬﶭﶮﶯﶰﶱﶲﶳﶴﶵﶶﶷﶸﶹﶺﶻﶼﶽﶾﶿﷀﷁﷂﷃﷄﷅﷆﷇ\ufdc8\ufdc9\ufdca\ufdcb\ufdcc\ufdcd\ufdce﷏\ufdd0\ufdd1\ufdd2\ufdd3\ufdd4\ufdd5\ufdd6\ufdd7\ufdd8\ufdd9\ufdda\ufddb\ufddc\ufddd\ufdde\ufddf\ufde0\ufde1\ufde2\ufde3\ufde4\ufde5\ufde6\ufde7\ufde8\ufde9\ufdea\ufdeb\ufdec\ufded\ufdee\ufdefﷰﷱﷲﷳﷴﷵﷶﷷﷸﷹﷺﷻ﷼﷽﷾﷿︀︁︂︃︄︅︆︇︈︉︊︋︌︍︎️︐︑︒︓︔︕︖︗︘︙\ufe1a\ufe1b\ufe1c\ufe1d\ufe1e\ufe1f︧︨︩︪︫︬︭︠︡︢︣︤︥︦︮︯︰︱︲︳︴︵︶︷︸︹︺︻︼︽︾︿﹀﹁﹂﹃﹄﹅﹆﹇﹈﹉﹊﹋﹌﹍﹎﹏﹐﹑﹒\ufe53﹔﹕﹖﹗﹘﹙﹚﹛﹜﹝﹞﹟﹠﹡﹢﹣﹤﹥﹦\ufe67﹨﹩﹪﹫\ufe6c\ufe6d\ufe6e\ufe6fﹰﹱﹲﹳﹴ\ufe75ﹶﹷﹸﹹﹺﹻﹼﹽﹾﹿﺀﺁﺂﺃﺄﺅﺆﺇﺈﺉﺊﺋﺌﺍﺎﺏﺐﺑﺒﺓﺔﺕﺖﺗﺘﺙﺚﺛﺜﺝﺞﺟﺠﺡﺢﺣﺤﺥﺦﺧﺨﺩﺪﺫﺬﺭﺮﺯﺰﺱﺲﺳﺴﺵﺶﺷﺸﺹﺺﺻﺼﺽﺾﺿﻀﻁﻂﻃﻄﻅﻆﻇﻈﻉﻊﻋﻌﻍﻎﻏﻐﻑﻒﻓﻔﻕﻖﻗﻘﻙﻚﻛﻜﻝﻞﻟﻠﻡﻢﻣﻤﻥﻦﻧﻨﻩﻪﻫﻬﻭﻮﻯﻰﻱﻲﻳﻴﻵﻶﻷﻸﻹﻺﻻﻼ\ufefd\ufefe﻿\uff00！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯ"
+ "ＰＱＲＳＴＵＶＷＸＹＺ｛｜｝～｟｠｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟﾠﾡﾢﾣﾤﾥﾦﾧﾨﾩﾪﾫﾬﾭﾮﾯﾰﾱﾲﾳﾴﾵﾶﾷﾸﾹﾺﾻﾼﾽﾾ\uffbf\uffc0\uffc1ￂￃￄￅￆￇ\uffc8\uffc9ￊￋￌￍￎￏ\uffd0\uffd1ￒￓￔￕￖￗ\uffd8\uffd9ￚￛￜ\uffdd\uffde\uffdf￠￡￢￣￤￥￦\uffe7￨￩￪￫￬￭￮\uffef\ufff0\ufff1\ufff2\ufff3\ufff4\ufff5\ufff6\ufff7\ufff8￹￺￻￼�\ufffe\uffff", "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\u0008\t\n\u000b\u000c\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&\'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿àáâãäåæçèéêëìíîïðñòóôõö×øùúûüýþßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿāāăăąąććĉĉċċččďďđđēēĕĕėėęęěěĝĝğğġġģģĥĥħħĩĩīīĭĭįįiıĳĳĵĵķķĸĺĺļļľľŀŀłłńńņņňňŉŋŋōōŏŏőőœœŕŕŗŗřřśśŝŝşşššţţťťŧŧũũūūŭŭůůűűųųŵŵŷŷÿźźżżžžſƀɓƃƃƅƅɔƈƈɖɗƌƌƍǝəɛƒƒɠɣƕɩɨƙƙƚƛɯɲƞɵơơƣƣƥƥʀƨƨʃƪƫƭƭʈưưʊʋƴƴƶƶʒƹƹƺƻƽƽƾƿǀǁǂǃǆǆǆǉǉǉǌǌǌǎǎǐǐǒǒǔǔǖǖǘǘǚǚǜǜǝǟǟǡǡǣǣǥǥǧǧǩǩǫǫǭǭǯǯǰǳǳǳǵǵƕƿǹǹǻǻǽǽǿǿ"
+ "ȁȁȃȃȅȅȇȇȉȉȋȋȍȍȏȏȑȑȓȓȕȕȗȗșșțțȝȝȟȟƞȡȣȣȥȥȧȧȩȩȫȫȭȭȯȯȱȱȳȳȴȵȶȷȸȹⱥȼȼƚⱦȿɀɂɂƀʉʌɇɇɉɉɋɋɍɍɏɏɐɑɒɓɔɕɖɗɘəɚɛɜɝɞɟɠɡɢɣɤɥɦɧɨɩɪɫɬɭɮɯɰɱɲɳɴɵɶɷɸɹɺɻɼɽɾɿʀʁʂʃʄʅʆʇʈʉʊʋʌʍʎʏʐʑʒʓʔʕʖʗʘʙʚʛʜʝʞʟʠʡʢʣʤʥʦʧʨʩʪʫʬʭʮʯʰʱʲʳʴʵʶʷʸʹʺʻʼʽʾʿˀˁ˂˃˄˅ˆˇˈˉˊˋˌˍˎˏːˑ˒˓˔˕˖˗˘˙˚˛˜˝˞˟ˠˡˢˣˤ˥˦˧˨˩˪˫ˬ˭ˮ˯˰˱˲˳˴˵˶˷˸˹˺˻˼˽˾˿̴̵̶̷̸̡̢̧̨̛̖̗̘̙̜̝̞̟̠̣̤̥̦̩̪̫̬̭̮̯̰̱̲̳̹̺̻̼͇͈͉͍͎̀́̂̃̄̅̆̇̈̉̊̋̌̍̎̏̐̑̒̓̔̽̾̿̀́͂̓̈́͆͊͋͌̕̚ͅ͏͓͔͕͖͙͚͐͑͒͗͛ͣͤͥͦͧͨͩͪͫͬͭͮͯ͘͜͟͢͝͞͠͡ͱͱͳͳʹ͵ͷͷ\u0378\u0379ͺͻͼͽ;ϳ\u0380\u0381\u0382\u0383΄΅ά·έήί\u038bό\u038dύώΐαβγδεζηθικλμνξοπρ\u03a2στυφχψωϊϋάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώϗϐϑϒϓϔϕϖϗϙϙϛϛϝϝϟϟϡϡϣϣϥϥϧϧϩϩϫϫϭϭϯϯϰϱϲϳθϵ϶ϸϸϲϻϻϼͻͼͽ"
+ "ѐёђѓєѕіїјљњћќѝўџабвгдежзийклмнопрстуфхцчшщъыьэюяабвгдежзийклмнопрстуфхцчшщъыьэюяѐёђѓєѕіїјљњћќѝўџѡѡѣѣѥѥѧѧѩѩѫѫѭѭѯѯѱѱѳѳѵѵѷѷѹѹѻѻѽѽѿѿҁҁ҂҃҄҅҆҇҈҉ҋҋҍҍҏҏґґғғҕҕҗҗҙҙққҝҝҟҟҡҡңңҥҥҧҧҩҩҫҫҭҭүүұұҳҳҵҵҷҷҹҹһһҽҽҿҿӏӂӂӄӄӆӆӈӈӊӊӌӌӎӎӏӑӑӓӓӕӕӗӗәәӛӛӝӝӟӟӡӡӣӣӥӥӧӧөөӫӫӭӭӯӯӱӱӳӳӵӵӷӷӹӹӻӻӽӽӿӿԁԁԃԃԅԅԇԇԉԉԋԋԍԍԏԏԑԑԓԓԕԕԗԗԙԙԛԛԝԝԟԟԡԡԣԣԥԥԧԧԩԩԫԫԭԭԯԯ\u0530աբգդեզէըթժիլխծկհձղճմյնշոչպջռսվտրցւփքօֆ\u0557\u0558ՙ՚՛՜՝՞՟ՠաբգդեզէըթժիլխծկհձղճմյնշոչպջռսվտրցւփքօֆևֈ։֊\u058b\u058c֍֎֏\u0590ְֱֲֳִֵֶַָֹֺֻּֽ֑֖֛֢֣֤֥֦֧֪֚֭֮֒֓֔֕֗֘֙֜֝֞֟֠֡֨֩֫֬֯־ֿ׀ׁׂ׃ׅׄ׆ׇ\u05c8\u05c9\u05ca\u05cb\u05cc\u05cd\u05ce\u05cfאבגדהוזחטיךכלםמןנסעףפץצקרשת\u05eb\u05ec\u05ed\u05eeׯװױײ׳״\u05f5\u05f6\u05f7\u05f8\u05f9\u05fa\u05fb\u05fc\u05fd\u05fe\u05ff"
+ "؀؁؂؃؄؅؆؇؈؉؊؋،؍؎؏ؘؙؚؐؑؒؓؔؕؖؗ؛؜؝؞؟ؠءآأؤإئابةتثجحخدذرزسشصضطظعغػؼؽؾؿـفقكلمنهوىيًٌٍَُِّْٕٖٜٟٓٔٗ٘ٙٚٛٝٞ٠١٢٣٤٥٦٧٨٩٪٫٬٭ٮٯٰٱٲٳٴٵٶٷٸٹٺٻټٽپٿڀځڂڃڄڅچڇڈډڊڋڌڍڎڏڐڑڒړڔڕږڗژڙښڛڜڝڞڟڠڡڢڣڤڥڦڧڨکڪګڬڭڮگڰڱڲڳڴڵڶڷڸڹںڻڼڽھڿۀہۂۃۄۅۆۇۈۉۊۋیۍێۏېۑےۓ۔ەۖۗۘۙۚۛۜ۝۞ۣ۟۠ۡۢۤۥۦۧۨ۩۪ۭ۫۬ۮۯ۰۱۲۳۴۵۶۷۸۹ۺۻۼ۽۾ۿ܀܁܂܃܄܅܆܇܈܉܊܋܌܍\u070e܏ܐܑܒܓܔܕܖܗܘܙܚܛܜܝܞܟܠܡܢܣܤܥܦܧܨܩܪܫܬܭܮܯܱܴܷܸܹܻܼܾ݂݄݆݈ܰܲܳܵܶܺܽܿ݀݁݃݅݇݉݊\u074b\u074cݍݎݏݐݑݒݓݔݕݖݗݘݙݚݛݜݝݞݟݠݡݢݣݤݥݦݧݨݩݪݫݬݭݮݯݰݱݲݳݴݵݶݷݸݹݺݻݼݽݾݿހށނރބޅކއވމފދތލގޏސޑޒޓޔޕޖޗޘޙޚޛޜޝޞޟޠޡޢޣޤޥަާިީުޫެޭޮޯްޱ\u07b2\u07b3\u07b4\u07b5\u07b6\u07b7\u07b8\u07b9\u07ba\u07bb\u07bc\u07bd\u07be\u07bf߀߁߂߃߄߅߆߇߈߉ߊߋߌߍߎߏߐߑߒߓߔߕߖߗߘߙߚߛߜߝߞߟߠߡߢߣߤߥߦߧߨߩߪ߲߫߬߭߮߯߰߱߳ߴߵ߶߷߸߹ߺ\u07fb\u07fc߽߾߿"
+ "ࠀࠁࠂࠃࠄࠅࠆࠇࠈࠉࠊࠋࠌࠍࠎࠏࠐࠑࠒࠓࠔࠕࠖࠗ࠘࠙ࠚࠛࠜࠝࠞࠟࠠࠡࠢࠣࠤࠥࠦࠧࠨࠩࠪࠫࠬ࠭\u082e\u082f࠰࠱࠲࠳࠴࠵࠶࠷࠸࠹࠺࠻࠼࠽࠾\u083fࡀࡁࡂࡃࡄࡅࡆࡇࡈࡉࡊࡋࡌࡍࡎࡏࡐࡑࡒࡓࡔࡕࡖࡗࡘ࡙࡚࡛\u085c\u085d࡞\u085fࡠࡡࡢࡣࡤࡥࡦࡧࡨࡩࡪ\u086b\u086c\u086d\u086e\u086fࡰࡱࡲࡳࡴࡵࡶࡷࡸࡹࡺࡻࡼࡽࡾࡿࢀࢁࢂࢃࢄࢅࢆࢇ࢈ࢉࢊࢋࢌࢍࢎ\u088f࢐࢑\u0892\u0893\u0894\u0895\u0896\u0897࢙࢚࢛࢘࢜࢝࢞࢟ࢠࢡࢢࢣࢤࢥࢦࢧࢨࢩࢪࢫࢬࢭࢮࢯࢰࢱࢲࢳࢴࢵࢶࢷࢸࢹࢺࢻࢼࢽࢾࢿࣀࣁࣂࣃࣄࣅࣆࣇࣈࣉ࣏࣐࣑࣒࣓࣊࣋࣌࣍࣎ࣔࣕࣖࣗࣘࣙࣚࣛࣜࣝࣞࣟ࣠࣡࣢ࣰࣱࣲࣣࣦࣩ࣭࣮࣯ࣶࣹࣺࣤࣥࣧࣨ࣪࣫࣬ࣳࣴࣵࣷࣸࣻࣼࣽࣾࣿऀँंःऄअआइईउऊऋऌऍऎएऐऑऒओऔकखगघङचछजझञटठडढणतथदधनऩपफबभमयरऱलळऴवशषसहऺऻ़ऽािीुूृॄॅॆेैॉॊोौ्ॎॏॐ॒॑॓॔ॕॖॗक़ख़ग़ज़ड़ढ़फ़य़ॠॡॢॣ।॥०१२३४५६७८९॰ॱॲॳॴॵॶॷॸॹॺॻॼॽॾॿঀঁংঃ\u0984অআইঈউঊঋঌ\u098d\u098eএঐ\u0991\u0992ওঔকখগঘঙচছজঝঞটঠডঢণতথদধন\u09a9পফবভমযর\u09b1ল\u09b3\u09b4\u09b5শষসহ\u09ba\u09bb়ঽািীুূৃৄ\u09c5\u09c6েৈ\u09c9\u09caোৌ্ৎ\u09cf\u09d0\u09d1\u09d2\u09d3\u09d4\u09d5\u09d6ৗ\u09d8\u09d9\u09da\u09dbড়ঢ়\u09deয়ৠৡৢৣ\u09e4\u09e5০১২৩৪৫৬৭৮৯ৰৱ৲৳৴৵৶৷৸৹৺৻ৼ৽৾\u09ff"
+ "\u0a00ਁਂਃ\u0a04ਅਆਇਈਉਊ\u0a0b\u0a0c\u0a0d\u0a0eਏਐ\u0a11\u0a12ਓਔਕਖਗਘਙਚਛਜਝਞਟਠਡਢਣਤਥਦਧਨ\u0a29ਪਫਬਭਮਯਰ\u0a31ਲਲ਼\u0a34ਵਸ਼\u0a37ਸਹ\u0a3a\u0a3b਼\u0a3dਾਿੀੁੂ\u0a43\u0a44\u0a45\u0a46ੇੈ\u0a49\u0a4aੋੌ੍\u0a4e\u0a4f\u0a50ੑ\u0a52\u0a53\u0a54\u0a55\u0a56\u0a57\u0a58ਖ਼ਗ਼ਜ਼ੜ\u0a5dਫ਼\u0a5f\u0a60\u0a61\u0a62\u0a63\u0a64\u0a65੦੧੨੩੪੫੬੭੮੯ੰੱੲੳੴੵ੶\u0a77\u0a78\u0a79\u0a7a\u0a7b\u0a7c\u0a7d\u0a7e\u0a7f\u0a80ઁંઃ\u0a84અઆઇઈઉઊઋઌઍ\u0a8eએઐઑ\u0a92ઓઔકખગઘઙચછજઝઞટઠડઢણતથદધન\u0aa9પફબભમયર\u0ab1લળ\u0ab4વશષસહ\u0aba\u0abb઼ઽાિીુૂૃૄૅ\u0ac6ેૈૉ\u0acaોૌ્\u0ace\u0acfૐ\u0ad1\u0ad2\u0ad3\u0ad4\u0ad5\u0ad6\u0ad7\u0ad8\u0ad9\u0ada\u0adb\u0adc\u0add\u0ade\u0adfૠૡૢૣ\u0ae4\u0ae5૦૧૨૩૪૫૬૭૮૯૰૱\u0af2\u0af3\u0af4\u0af5\u0af6\u0af7\u0af8ૹૺૻૼ૽૾૿\u0b00ଁଂଃ\u0b04ଅଆଇଈଉଊଋଌ\u0b0d\u0b0eଏଐ\u0b11\u0b12ଓଔକଖଗଘଙଚଛଜଝଞଟଠଡଢଣତଥଦଧନ\u0b29ପଫବଭମଯର\u0b31ଲଳ\u0b34ଵଶଷସହ\u0b3a\u0b3b଼ଽାିୀୁୂୃୄ\u0b45\u0b46େୈ\u0b49\u0b4aୋୌ୍\u0b4e\u0b4f\u0b50\u0b51\u0b52\u0b53\u0b54୕ୖୗ\u0b58\u0b59\u0b5a\u0b5bଡ଼ଢ଼\u0b5eୟୠୡୢୣ\u0b64\u0b65୦୧୨୩୪୫୬୭୮୯୰ୱ୲୳୴୵୶୷\u0b78\u0b79\u0b7a\u0b7b\u0b7c\u0b7d\u0b7e\u0b7f\u0b80\u0b81ஂஃ\u0b84அஆஇஈஉஊ\u0b8b\u0b8c\u0b8dஎஏஐ\u0b91ஒஓஔக\u0b96\u0b97\u0b98ஙச\u0b9bஜ\u0b9dஞட\u0ba0\u0ba1\u0ba2ணத\u0ba5\u0ba6\u0ba7நனப\u0bab\u0bac\u0badமயரறலளழவஶஷஸஹ\u0bba\u0bbb\u0bbc\u0bbdாிீுூ\u0bc3\u0bc4\u0bc5ெேை\u0bc9ொோௌ்\u0bce\u0bcfௐ\u0bd1\u0bd2\u0bd3\u0bd4\u0bd5\u0bd6ௗ\u0bd8\u0bd9\u0bda\u0bdb\u0bdc\u0bdd\u0bde\u0bdf\u0be0\u0be1\u0be2\u0be3\u0be4\u0be5௦௧௨௩௪௫௬௭௮௯௰௱௲௳௴௵௶௷௸௹௺\u0bfb\u0bfc\u0bfd\u0bfe\u0bff"
+ "ఀఁంఃఄఅఆఇఈఉఊఋఌ\u0c0dఎఏఐ\u0c11ఒఓఔకఖగఘఙచఛజఝఞటఠడఢణతథదధన\u0c29పఫబభమయరఱలళఴవశషసహ\u0c3a\u0c3b఼ఽాిీుూృౄ\u0c45ెేై\u0c49ొోౌ్\u0c4e\u0c4f\u0c50\u0c51\u0c52\u0c53\u0c54ౕౖ\u0c57ౘౙౚ\u0c5b\u0c5cౝ\u0c5e\u0c5fౠౡౢౣ\u0c64\u0c65౦౧౨౩౪౫౬౭౮౯\u0c70\u0c71\u0c72\u0c73\u0c74\u0c75\u0c76౷౸౹౺౻౼౽౾౿ಀಁಂಃ಄ಅಆಇಈಉಊಋಌ\u0c8dಎಏಐ\u0c91ಒಓಔಕಖಗಘಙಚಛಜಝಞಟಠಡಢಣತಥದಧನ\u0ca9ಪಫಬಭಮಯರಱಲಳ\u0cb4ವಶಷಸಹ\u0cba\u0cbb಼ಽಾಿೀುೂೃೄ\u0cc5ೆೇೈ\u0cc9ೊೋೌ್\u0cce\u0ccf\u0cd0\u0cd1\u0cd2\u0cd3\u0cd4ೕೖ\u0cd7\u0cd8\u0cd9\u0cda\u0cdb\u0cdcೝೞ\u0cdfೠೡೢೣ\u0ce4\u0ce5೦೧೨೩೪೫೬೭೮೯\u0cf0ೱೲೳ\u0cf4\u0cf5\u0cf6\u0cf7\u0cf8\u0cf9\u0cfa\u0cfb\u0cfc\u0cfd\u0cfe\u0cffഀഁംഃഄഅആഇഈഉഊഋഌ\u0d0dഎഏഐ\u0d11ഒഓഔകഖഗഘങചഛജഝഞടഠഡഢണതഥദധനഩപഫബഭമയരറലളഴവശഷസഹഺ഻഼ഽാിീുൂൃൄ\u0d45െേൈ\u0d49ൊോൌ്ൎ൏\u0d50\u0d51\u0d52\u0d53ൔൕൖൗ൘൙൚൛൜൝൞ൟൠൡൢൣ\u0d64\u0d65൦൧൨൩൪൫൬൭൮൯൰൱൲൳൴൵൶൷൸൹ൺൻർൽൾൿ\u0d80ඁංඃ\u0d84අආඇඈඉඊඋඌඍඎඏඐඑඒඓඔඕඖ\u0d97\u0d98\u0d99කඛගඝඞඟචඡජඣඤඥඦටඨඩඪණඬතථදධන\u0db2ඳපඵබභමඹයර\u0dbcල\u0dbe\u0dbfවශෂසහළෆ\u0dc7\u0dc8\u0dc9්\u0dcb\u0dcc\u0dcd\u0dceාැෑිීු\u0dd5ූ\u0dd7ෘෙේෛොෝෞෟ\u0de0\u0de1\u0de2\u0de3\u0de4\u0de5෦෧෨෩෪෫෬෭෮෯\u0df0\u0df1ෲෳ෴\u0df5\u0df6\u0df7\u0df8\u0df9\u0dfa\u0dfb\u0dfc\u0dfd\u0dfe\u0dff"
+ "\u0e00กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\u0e3b\u0e3c\u0e3d\u0e3e฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛\u0e5c\u0e5d\u0e5e\u0e5f\u0e60\u0e61\u0e62\u0e63\u0e64\u0e65\u0e66\u0e67\u0e68\u0e69\u0e6a\u0e6b\u0e6c\u0e6d\u0e6e\u0e6f\u0e70\u0e71\u0e72\u0e73\u0e74\u0e75\u0e76\u0e77\u0e78\u0e79\u0e7a\u0e7b\u0e7c\u0e7d\u0e7e\u0e7f\u0e80ກຂ\u0e83ຄ\u0e85ຆງຈຉຊ\u0e8bຌຍຎຏຐຑຒຓດຕຖທຘນບປຜຝພຟຠມຢຣ\u0ea4ລ\u0ea6ວຨຩສຫຬອຮຯະັາຳິີຶື຺ຸູົຼຽ\u0ebe\u0ebfເແໂໃໄ\u0ec5ໆ\u0ec7່້໊໋໌ໍ໎\u0ecf໐໑໒໓໔໕໖໗໘໙\u0eda\u0edbໜໝໞໟ\u0ee0\u0ee1\u0ee2\u0ee3\u0ee4\u0ee5\u0ee6\u0ee7\u0ee8\u0ee9\u0eea\u0eeb\u0eec\u0eed\u0eee\u0eef\u0ef0\u0ef1\u0ef2\u0ef3\u0ef4\u0ef5\u0ef6\u0ef7\u0ef8\u0ef9\u0efa\u0efb\u0efc\u0efd\u0efe\u0effༀ༁༂༃༄༅༆༇༈༉༊་༌།༎༏༐༑༒༓༔༕༖༗༘༙༚༛༜༝༞༟༠༡༢༣༤༥༦༧༨༩༪༫༬༭༮༯༰༱༲༳༴༵༶༷༸༹༺༻༼༽༾༿ཀཁགགྷངཅཆཇ\u0f48ཉཊཋཌཌྷཎཏཐདདྷནཔཕབབྷམཙཚཛཛྷཝཞཟའཡརལཤཥསཧཨཀྵཪཫཬ\u0f6d\u0f6e\u0f6f\u0f70ཱཱཱིིུུྲྀཷླྀཹེཻོཽཾཿ྄ཱྀྀྂྃ྅྆྇ྈྉྊྋྌྍྎྏྐྑྒྒྷྔྕྖྗ\u0f98ྙྚྛྜྜྷྞྟྠྡྡྷྣྤྥྦྦྷྨྩྪྫྫྷྭྮྯྰྱྲླྴྵྶྷྸྐྵྺྻྼ\u0fbd྾྿࿀࿁࿂࿃࿄࿅࿆࿇࿈࿉࿊࿋࿌\u0fcd࿎࿏࿐࿑࿒࿓࿔࿕࿖࿗࿘࿙࿚\u0fdb\u0fdc\u0fdd\u0fde\u0fdf\u0fe0\u0fe1\u0fe2\u0fe3\u0fe4\u0fe5\u0fe6\u0fe7\u0fe8\u0fe9\u0fea\u0feb\u0fec\u0fed\u0fee\u0fef\u0ff0\u0ff1\u0ff2\u0ff3\u0ff4\u0ff5\u0ff6\u0ff7\u0ff8\u0ff9\u0ffa\u0ffb\u0ffc\u0ffd\u0ffe\u0fff"
+ "ကခဂဃငစဆဇဈဉညဋဌဍဎဏတထဒဓနပဖဗဘမယရလဝသဟဠအဢဣဤဥဦဧဨဩဪါာိီုူေဲဳဴဵံ့း္်ျြွှဿ၀၁၂၃၄၅၆၇၈၉၊။၌၍၎၏ၐၑၒၓၔၕၖၗၘၙၚၛၜၝၞၟၠၡၢၣၤၥၦၧၨၩၪၫၬၭၮၯၰၱၲၳၴၵၶၷၸၹၺၻၼၽၾၿႀႁႂႃႄႅႆႇႈႉႊႋႌႍႎႏ႐႑႒႓႔႕႖႗႘႙ႚႛႜႝ႞႟ⴀⴁⴂⴃⴄⴅⴆⴇⴈⴉⴊⴋⴌⴍⴎⴏⴐⴑⴒⴓⴔⴕⴖⴗⴘⴙⴚⴛⴜⴝⴞⴟⴠⴡⴢⴣⴤⴥ\u10c6ⴧ\u10c8\u10c9\u10ca\u10cb\u10ccⴭ\u10ce\u10cfაბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶჷჸჹჺ჻ჼჽჾჿᄀᄁᄂᄃᄄᄅᄆᄇᄈᄉᄊᄋᄌᄍᄎᄏᄐᄑᄒᄓᄔᄕᄖᄗᄘᄙᄚᄛᄜᄝᄞᄟᄠᄡᄢᄣᄤᄥᄦᄧᄨᄩᄪᄫᄬᄭᄮᄯᄰᄱᄲᄳᄴᄵᄶᄷᄸᄹᄺᄻᄼᄽᄾᄿᅀᅁᅂᅃᅄᅅᅆᅇᅈᅉᅊᅋᅌᅍᅎᅏᅐᅑᅒᅓᅔᅕᅖᅗᅘᅙᅚᅛᅜᅝᅞᅟᅠᅡᅢᅣᅤᅥᅦᅧᅨᅩᅪᅫᅬᅭᅮᅯᅰᅱᅲᅳᅴᅵᅶᅷᅸᅹᅺᅻᅼᅽᅾᅿᆀᆁᆂᆃᆄᆅᆆᆇᆈᆉᆊᆋᆌᆍᆎᆏᆐᆑᆒᆓᆔᆕᆖᆗᆘᆙᆚᆛᆜᆝᆞᆟᆠᆡᆢᆣᆤᆥᆦᆧᆨᆩᆪᆫᆬᆭᆮᆯᆰᆱᆲᆳᆴᆵᆶᆷᆸᆹᆺᆻᆼᆽᆾᆿᇀᇁᇂᇃᇄᇅᇆᇇᇈᇉᇊᇋᇌᇍᇎᇏᇐᇑᇒᇓᇔᇕᇖᇗᇘᇙᇚᇛᇜᇝᇞᇟᇠᇡᇢᇣᇤᇥᇦᇧᇨᇩᇪᇫᇬᇭᇮᇯᇰᇱᇲᇳᇴᇵᇶᇷᇸᇹᇺᇻᇼᇽᇾᇿ"
+ "ሀሁሂሃሄህሆሇለሉሊላሌልሎሏሐሑሒሓሔሕሖሗመሙሚማሜምሞሟሠሡሢሣሤሥሦሧረሩሪራሬርሮሯሰሱሲሳሴስሶሷሸሹሺሻሼሽሾሿቀቁቂቃቄቅቆቇቈ\u1249ቊቋቌቍ\u124e\u124fቐቑቒቓቔቕቖ\u1257ቘ\u1259ቚቛቜቝ\u125e\u125fበቡቢባቤብቦቧቨቩቪቫቬቭቮቯተቱቲታቴትቶቷቸቹቺቻቼችቾቿኀኁኂኃኄኅኆኇኈ\u1289ኊኋኌኍ\u128e\u128fነኑኒናኔንኖኗኘኙኚኛኜኝኞኟአኡኢኣኤእኦኧከኩኪካኬክኮኯኰ\u12b1ኲኳኴኵ\u12b6\u12b7ኸኹኺኻኼኽኾ\u12bfዀ\u12c1ዂዃዄዅ\u12c6\u12c7ወዉዊዋዌውዎዏዐዑዒዓዔዕዖ\u12d7ዘዙዚዛዜዝዞዟዠዡዢዣዤዥዦዧየዩዪያዬይዮዯደዱዲዳዴድዶዷዸዹዺዻዼዽዾዿጀጁጂጃጄጅጆጇገጉጊጋጌግጎጏጐ\u1311ጒጓጔጕ\u1316\u1317ጘጙጚጛጜጝጞጟጠጡጢጣጤጥጦጧጨጩጪጫጬጭጮጯጰጱጲጳጴጵጶጷጸጹጺጻጼጽጾጿፀፁፂፃፄፅፆፇፈፉፊፋፌፍፎፏፐፑፒፓፔፕፖፗፘፙፚ\u135b\u135c፝፞፟፠፡።፣፤፥፦፧፨፩፪፫፬፭፮፯፰፱፲፳፴፵፶፷፸፹፺፻፼\u137d\u137e\u137fᎀᎁᎂᎃᎄᎅᎆᎇᎈᎉᎊᎋᎌᎍᎎᎏ᎐᎑᎒᎓᎔᎕᎖᎗᎘᎙\u139a\u139b\u139c\u139d\u139e\u139fꭰꭱꭲꭳꭴꭵꭶꭷꭸꭹꭺꭻꭼꭽꭾꭿꮀꮁꮂꮃꮄꮅꮆꮇꮈꮉꮊꮋꮌꮍꮎꮏꮐꮑꮒꮓꮔꮕꮖꮗꮘꮙꮚꮛꮜꮝꮞꮟꮠꮡꮢꮣꮤꮥꮦꮧꮨꮩꮪꮫꮬꮭꮮꮯꮰꮱꮲꮳꮴꮵꮶꮷꮸꮹꮺꮻꮼꮽꮾꮿᏸᏹᏺᏻᏼᏽ\u13f6\u13f7ᏸᏹᏺᏻᏼᏽ\u13fe\u13ff"
+ "᐀ᐁᐂᐃᐄᐅᐆᐇᐈᐉᐊᐋᐌᐍᐎᐏᐐᐑᐒᐓᐔᐕᐖᐗᐘᐙᐚᐛᐜᐝᐞᐟᐠᐡᐢᐣᐤᐥᐦᐧᐨᐩᐪᐫᐬᐭᐮᐯᐰᐱᐲᐳᐴᐵᐶᐷᐸᐹᐺᐻᐼᐽᐾᐿᑀᑁᑂᑃᑄᑅᑆᑇᑈᑉᑊᑋᑌᑍᑎᑏᑐᑑᑒᑓᑔᑕᑖᑗᑘᑙᑚᑛᑜᑝᑞᑟᑠᑡᑢᑣᑤᑥᑦᑧᑨᑩᑪᑫᑬᑭᑮᑯᑰᑱᑲᑳᑴᑵᑶᑷᑸᑹᑺᑻᑼᑽᑾᑿᒀᒁᒂᒃᒄᒅᒆᒇᒈᒉᒊᒋᒌᒍᒎᒏᒐᒑᒒᒓᒔᒕᒖᒗᒘᒙᒚᒛᒜᒝᒞᒟᒠᒡᒢᒣᒤᒥᒦᒧᒨᒩᒪᒫᒬᒭᒮᒯᒰᒱᒲᒳᒴᒵᒶᒷᒸᒹᒺᒻᒼᒽᒾᒿᓀᓁᓂᓃᓄᓅᓆᓇᓈᓉᓊᓋᓌᓍᓎᓏᓐᓑᓒᓓᓔᓕᓖᓗᓘᓙᓚᓛᓜᓝᓞᓟᓠᓡᓢᓣᓤᓥᓦᓧᓨᓩᓪᓫᓬᓭᓮᓯᓰᓱᓲᓳᓴᓵᓶᓷᓸᓹᓺᓻᓼᓽᓾᓿᔀᔁᔂᔃᔄᔅᔆᔇᔈᔉᔊᔋᔌᔍᔎᔏᔐᔑᔒᔓᔔᔕᔖᔗᔘᔙᔚᔛᔜᔝᔞᔟᔠᔡᔢᔣᔤᔥᔦᔧᔨᔩᔪᔫᔬᔭᔮᔯᔰᔱᔲᔳᔴᔵᔶᔷᔸᔹᔺᔻᔼᔽᔾᔿᕀᕁᕂᕃᕄᕅᕆᕇᕈᕉᕊᕋᕌᕍᕎᕏᕐᕑᕒᕓᕔᕕᕖᕗᕘᕙᕚᕛᕜᕝᕞᕟᕠᕡᕢᕣᕤᕥᕦᕧᕨᕩᕪᕫᕬᕭᕮᕯᕰᕱᕲᕳᕴᕵᕶᕷᕸᕹᕺᕻᕼᕽᕾᕿᖀᖁᖂᖃᖄᖅᖆᖇᖈᖉᖊᖋᖌᖍᖎᖏᖐᖑᖒᖓᖔᖕᖖᖗᖘᖙᖚᖛᖜᖝᖞᖟᖠᖡᖢᖣᖤᖥᖦᖧᖨᖩᖪᖫᖬᖭᖮᖯᖰᖱᖲᖳᖴᖵᖶᖷᖸᖹᖺᖻᖼᖽᖾᖿᗀᗁᗂᗃᗄᗅᗆᗇᗈᗉᗊᗋᗌᗍᗎᗏᗐᗑᗒᗓᗔᗕᗖᗗᗘᗙᗚᗛᗜᗝᗞᗟᗠᗡᗢᗣᗤᗥᗦᗧᗨᗩᗪᗫᗬᗭᗮᗯᗰᗱᗲᗳᗴᗵᗶᗷᗸᗹᗺᗻᗼᗽᗾᗿ"
+ "ᘀᘁᘂᘃᘄᘅᘆᘇᘈᘉᘊᘋᘌᘍᘎᘏᘐᘑᘒᘓᘔᘕᘖᘗᘘᘙᘚᘛᘜᘝᘞᘟᘠᘡᘢᘣᘤᘥᘦᘧᘨᘩᘪᘫᘬᘭᘮᘯᘰᘱᘲᘳᘴᘵᘶᘷᘸᘹᘺᘻᘼᘽᘾᘿᙀᙁᙂᙃᙄᙅᙆᙇᙈᙉᙊᙋᙌᙍᙎᙏᙐᙑᙒᙓᙔᙕᙖᙗᙘᙙᙚᙛᙜᙝᙞᙟᙠᙡᙢᙣᙤᙥᙦᙧᙨᙩᙪᙫᙬ᙭᙮ᙯᙰᙱᙲᙳᙴᙵᙶᙷᙸᙹᙺᙻᙼᙽᙾᙿ ᚁᚂᚃᚄᚅᚆᚇᚈᚉᚊᚋᚌᚍᚎᚏᚐᚑᚒᚓᚔᚕᚖᚗᚘᚙᚚ᚛᚜\u169d\u169e\u169fᚠᚡᚢᚣᚤᚥᚦᚧᚨᚩᚪᚫᚬᚭᚮᚯᚰᚱᚲᚳᚴᚵᚶᚷᚸᚹᚺᚻᚼᚽᚾᚿᛀᛁᛂᛃᛄᛅᛆᛇᛈᛉᛊᛋᛌᛍᛎᛏᛐᛑᛒᛓᛔᛕᛖᛗᛘᛙᛚᛛᛜᛝᛞᛟᛠᛡᛢᛣᛤᛥᛦᛧᛨᛩᛪ᛫᛬᛭ᛮᛯᛰᛱᛲᛳᛴᛵᛶᛷᛸ\u16f9\u16fa\u16fb\u16fc\u16fd\u16fe\u16ffᜀᜁᜂᜃᜄᜅᜆᜇᜈᜉᜊᜋᜌᜍᜎᜏᜐᜑᜒᜓ᜔᜕\u1716\u1717\u1718\u1719\u171a\u171b\u171c\u171d\u171eᜟᜠᜡᜢᜣᜤᜥᜦᜧᜨᜩᜪᜫᜬᜭᜮᜯᜰᜱᜲᜳ᜴᜵᜶\u1737\u1738\u1739\u173a\u173b\u173c\u173d\u173e\u173fᝀᝁᝂᝃᝄᝅᝆᝇᝈᝉᝊᝋᝌᝍᝎᝏᝐᝑᝒᝓ\u1754\u1755\u1756\u1757\u1758\u1759\u175a\u175b\u175c\u175d\u175e\u175fᝠᝡᝢᝣᝤᝥᝦᝧᝨᝩᝪᝫᝬ\u176dᝮᝯᝰ\u1771ᝲᝳ\u1774\u1775\u1776\u1777\u1778\u1779\u177a\u177b\u177c\u177d\u177e\u177fកខគឃងចឆជឈញដឋឌឍណតថទធនបផពភមយរលវឝឞសហឡអឣឤឥឦឧឨឩឪឫឬឭឮឯឰឱឲឳ឴឵ាិីឹឺុូួើឿៀេែៃោៅំះៈ៉៊់៌៍៎៏័៑្៓។៕៖ៗ៘៙៚៛ៜ៝\u17de\u17df០១២៣៤៥៦៧៨៩\u17ea\u17eb\u17ec\u17ed\u17ee\u17ef៰៱៲៳៴៵៶៷៸៹\u17fa\u17fb\u17fc\u17fd\u17fe\u17ff"
+ "᠀᠁᠂᠃᠄᠅᠆᠇᠈᠉᠊᠋᠌᠍᠎᠏᠐᠑᠒᠓᠔᠕᠖᠗᠘᠙\u181a\u181b\u181c\u181d\u181e\u181fᠠᠡᠢᠣᠤᠥᠦᠧᠨᠩᠪᠫᠬᠭᠮᠯᠰᠱᠲᠳᠴᠵᠶᠷᠸᠹᠺᠻᠼᠽᠾᠿᡀᡁᡂᡃᡄᡅᡆᡇᡈᡉᡊᡋᡌᡍᡎᡏᡐᡑᡒᡓᡔᡕᡖᡗᡘᡙᡚᡛᡜᡝᡞᡟᡠᡡᡢᡣᡤᡥᡦᡧᡨᡩᡪᡫᡬᡭᡮᡯᡰᡱᡲᡳᡴᡵᡶᡷᡸ\u1879\u187a\u187b\u187c\u187d\u187e\u187fᢀᢁᢂᢃᢄᢅᢆᢇᢈᢉᢊᢋᢌᢍᢎᢏᢐᢑᢒᢓᢔᢕᢖᢗᢘᢙᢚᢛᢜᢝᢞᢟᢠᢡᢢᢣᢤᢥᢦᢧᢨᢩᢪ\u18ab\u18ac\u18ad\u18ae\u18afᢰᢱᢲᢳᢴᢵᢶᢷᢸᢹᢺᢻᢼᢽᢾᢿᣀᣁᣂᣃᣄᣅᣆᣇᣈᣉᣊᣋᣌᣍᣎᣏᣐᣑᣒᣓᣔᣕᣖᣗᣘᣙᣚᣛᣜᣝᣞᣟᣠᣡᣢᣣᣤᣥᣦᣧᣨᣩᣪᣫᣬᣭᣮᣯᣰᣱᣲᣳᣴᣵ\u18f6\u18f7\u18f8\u18f9\u18fa\u18fb\u18fc\u18fd\u18fe\u18ffᤀᤁᤂᤃᤄᤅᤆᤇᤈᤉᤊᤋᤌᤍᤎᤏᤐᤑᤒᤓᤔᤕᤖᤗᤘᤙᤚᤛᤜᤝᤞ\u191fᤠᤡᤢᤣᤤᤥᤦᤧᤨᤩᤪᤫ\u192c\u192d\u192e\u192fᤰᤱᤲᤳᤴᤵᤶᤷᤸ᤻᤹᤺\u193c\u193d\u193e\u193f᥀\u1941\u1942\u1943᥄᥅᥆᥇᥈᥉᥊᥋᥌᥍᥎᥏ᥐᥑᥒᥓᥔᥕᥖᥗᥘᥙᥚᥛᥜᥝᥞᥟᥠᥡᥢᥣᥤᥥᥦᥧᥨᥩᥪᥫᥬᥭ\u196e\u196fᥰᥱᥲᥳᥴ\u1975\u1976\u1977\u1978\u1979\u197a\u197b\u197c\u197d\u197e\u197fᦀᦁᦂᦃᦄᦅᦆᦇᦈᦉᦊᦋᦌᦍᦎᦏᦐᦑᦒᦓᦔᦕᦖᦗᦘᦙᦚᦛᦜᦝᦞᦟᦠᦡᦢᦣᦤᦥᦦᦧᦨᦩᦪᦫ\u19ac\u19ad\u19ae\u19afᦰᦱᦲᦳᦴᦵᦶᦷᦸᦹᦺᦻᦼᦽᦾᦿᧀᧁᧂᧃᧄᧅᧆᧇᧈᧉ\u19ca\u19cb\u19cc\u19cd\u19ce\u19cf᧐᧑᧒᧓᧔᧕᧖᧗᧘᧙᧚\u19db\u19dc\u19dd᧞᧟᧠᧡᧢᧣᧤᧥᧦᧧᧨᧩᧪᧫᧬᧭᧮᧯᧰᧱᧲᧳᧴᧵᧶᧷᧸᧹᧺᧻᧼᧽᧾᧿"
+ "ᨀᨁᨂᨃᨄᨅᨆᨇᨈᨉᨊᨋᨌᨍᨎᨏᨐᨑᨒᨓᨔᨕᨖᨘᨗᨙᨚᨛ\u1a1c\u1a1d᨞᨟ᨠᨡᨢᨣᨤᨥᨦᨧᨨᨩᨪᨫᨬᨭᨮᨯᨰᨱᨲᨳᨴᨵᨶᨷᨸᨹᨺᨻᨼᨽᨾᨿᩀᩁᩂᩃᩄᩅᩆᩇᩈᩉᩊᩋᩌᩍᩎᩏᩐᩑᩒᩓᩔᩕᩖᩗᩘᩙᩚᩛᩜᩝᩞ\u1a5f᩠ᩡᩢᩣᩤᩥᩦᩧᩨᩩᩪᩫᩬᩭᩮᩯᩰᩱᩲᩳᩴ᩵᩶᩷᩸᩹᩺᩻᩼\u1a7d\u1a7e᩿᪀᪁᪂᪃᪄᪅᪆᪇᪈᪉\u1a8a\u1a8b\u1a8c\u1a8d\u1a8e\u1a8f᪐᪑᪒᪓᪔᪕᪖᪗᪘᪙\u1a9a\u1a9b\u1a9c\u1a9d\u1a9e\u1a9f᪠᪡᪢᪣᪤᪥᪦ᪧ᪨᪩᪪᪫᪬᪭\u1aae\u1aaf᪵᪶᪷᪸᪹᪺᪽᪰᪱᪲᪳᪴᪻᪼᪾ᪿᫀ᫃᫄᫊᫁᫂᫅᫆᫇᫈᫉᫋ᫌᫍᫎ\u1acf\u1ad0\u1ad1\u1ad2\u1ad3\u1ad4\u1ad5\u1ad6\u1ad7\u1ad8\u1ad9\u1ada\u1adb\u1adc\u1add\u1ade\u1adf\u1ae0\u1ae1\u1ae2\u1ae3\u1ae4\u1ae5\u1ae6\u1ae7\u1ae8\u1ae9\u1aea\u1aeb\u1aec\u1aed\u1aee\u1aef\u1af0\u1af1\u1af2\u1af3\u1af4\u1af5\u1af6\u1af7\u1af8\u1af9\u1afa\u1afb\u1afc\u1afd\u1afe\u1affᬀᬁᬂᬃᬄᬅᬆᬇᬈᬉᬊᬋᬌᬍᬎᬏᬐᬑᬒᬓᬔᬕᬖᬗᬘᬙᬚᬛᬜᬝᬞᬟᬠᬡᬢᬣᬤᬥᬦᬧᬨᬩᬪᬫᬬᬭᬮᬯᬰᬱᬲᬳ᬴ᬵᬶᬷᬸᬹᬺᬻᬼᬽᬾᬿᭀᭁᭂᭃ᭄ᭅᭆᭇᭈᭉᭊᭋᭌ\u1b4d\u1b4e\u1b4f᭐᭑᭒᭓᭔᭕᭖᭗᭘᭙᭚᭛᭜᭝᭞᭟᭠᭡᭢᭣᭤᭥᭦᭧᭨᭩᭪᭬᭫᭭᭮᭯᭰᭱᭲᭳᭴᭵᭶᭷᭸᭹᭺᭻᭼᭽᭾\u1b7fᮀᮁᮂᮃᮄᮅᮆᮇᮈᮉᮊᮋᮌᮍᮎᮏᮐᮑᮒᮓᮔᮕᮖᮗᮘᮙᮚᮛᮜᮝᮞᮟᮠᮡᮢᮣᮤᮥᮦᮧᮨᮩ᮪᮫ᮬᮭᮮᮯ᮰᮱᮲᮳᮴᮵᮶᮷᮸᮹ᮺᮻᮼᮽᮾᮿᯀᯁᯂᯃᯄᯅᯆᯇᯈᯉᯊᯋᯌᯍᯎᯏᯐᯑᯒᯓᯔᯕᯖᯗᯘᯙᯚᯛᯜᯝᯞᯟᯠᯡᯢᯣᯤᯥ᯦ᯧᯨᯩᯪᯫᯬᯭᯮᯯᯰᯱ᯲᯳\u1bf4\u1bf5\u1bf6\u1bf7\u1bf8\u1bf9\u1bfa\u1bfb᯼᯽᯾᯿"
+ "ᰀᰁᰂᰃᰄᰅᰆᰇᰈᰉᰊᰋᰌᰍᰎᰏᰐᰑᰒᰓᰔᰕᰖᰗᰘᰙᰚᰛᰜᰝᰞᰟᰠᰡᰢᰣᰤᰥᰦᰧᰨᰩᰪᰫᰬᰭᰮᰯᰰᰱᰲᰳᰴᰵᰶ᰷\u1c38\u1c39\u1c3a᰻᰼᰽᰾᰿᱀᱁᱂᱃᱄᱅᱆᱇᱈᱉\u1c4a\u1c4b\u1c4cᱍᱎᱏ᱐᱑᱒᱓᱔᱕᱖᱗᱘᱙ᱚᱛᱜᱝᱞᱟᱠᱡᱢᱣᱤᱥᱦᱧᱨᱩᱪᱫᱬᱭᱮᱯᱰᱱᱲᱳᱴᱵᱶᱷᱸᱹᱺᱻᱼᱽ᱾᱿ᲀᲁᲂᲃᲄᲅᲆᲇᲈ\u1c8a\u1c8a\u1c8b\u1c8c\u1c8d\u1c8e\u1c8fაბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶჷჸჹჺ\u1cbb\u1cbcჽჾჿ᳀᳁᳂᳃᳄᳅᳆᳇\u1cc8\u1cc9\u1cca\u1ccb\u1ccc\u1ccd\u1cce\u1ccf᳐᳑᳒᳓᳔᳕᳖᳗᳘᳙᳜᳝᳞᳟᳚᳛᳠᳡᳢᳣᳤᳥᳦᳧᳨ᳩᳪᳫᳬ᳭ᳮᳯᳰᳱᳲᳳ᳴ᳵᳶ᳷᳸᳹ᳺ\u1cfb\u1cfc\u1cfd\u1cfe\u1cffᴀᴁᴂᴃᴄᴅᴆᴇᴈᴉᴊᴋᴌᴍᴎᴏᴐᴑᴒᴓᴔᴕᴖᴗᴘᴙᴚᴛᴜᴝᴞᴟᴠᴡᴢᴣᴤᴥᴦᴧᴨᴩᴪᴫᴬᴭᴮᴯᴰᴱᴲᴳᴴᴵᴶᴷᴸᴹᴺᴻᴼᴽᴾᴿᵀᵁᵂᵃᵄᵅᵆᵇᵈᵉᵊᵋᵌᵍᵎᵏᵐᵑᵒᵓᵔᵕᵖᵗᵘᵙᵚᵛᵜᵝᵞᵟᵠᵡᵢᵣᵤᵥᵦᵧᵨᵩᵪᵫᵬᵭᵮᵯᵰᵱᵲᵳᵴᵵᵶᵷᵸᵹᵺᵻᵼᵽᵾᵿᶀᶁᶂᶃᶄᶅᶆᶇᶈᶉᶊᶋᶌᶍᶎᶏᶐᶑᶒᶓᶔᶕᶖᶗᶘᶙᶚᶛᶜᶝᶞᶟᶠᶡᶢᶣᶤᶥᶦᶧᶨᶩᶪᶫᶬᶭᶮᶯᶰᶱᶲᶳᶴᶵᶶᶷᶸᶹᶺᶻᶼᶽᶾᶿ᷐᷎᷺᷂᷊᷏᷹᷽᷿᷷᷸᷀᷁᷃᷄᷅᷆᷇᷈᷉᷋᷌᷑᷒ᷓᷔᷕᷖᷗᷘᷙᷚᷛᷜᷝᷞᷟᷠᷡᷢᷣᷤᷥᷦᷧᷨᷩᷪᷫᷬᷭᷮᷯᷰᷱᷲᷳᷴ᷵᷻᷾᷶᷼᷍"
+ "ḁḁḃḃḅḅḇḇḉḉḋḋḍḍḏḏḑḑḓḓḕḕḗḗḙḙḛḛḝḝḟḟḡḡḣḣḥḥḧḧḩḩḫḫḭḭḯḯḱḱḳḳḵḵḷḷḹḹḻḻḽḽḿḿṁṁṃṃṅṅṇṇṉṉṋṋṍṍṏṏṑṑṓṓṕṕṗṗṙṙṛṛṝṝṟṟṡṡṣṣṥṥṧṧṩṩṫṫṭṭṯṯṱṱṳṳṵṵṷṷṹṹṻṻṽṽṿṿẁẁẃẃẅẅẇẇẉẉẋẋẍẍẏẏẑẑẓẓẕẕẖẗẘẙẚẛẜẝßẟạạảảấấầầẩẩẫẫậậắắằằẳẳẵẵặặẹẹẻẻẽẽếếềềểểễễệệỉỉịịọọỏỏốốồồổổỗỗộộớớờờởởỡỡợợụụủủứứừừửửữữựựỳỳỵỵỷỷỹỹỻỻỽỽỿỿἀἁἂἃἄἅἆἇἀἁἂἃἄἅἆἇἐἑἒἓἔἕ\u1f16\u1f17ἐἑἒἓἔἕ\u1f1e\u1f1fἠἡἢἣἤἥἦἧἠἡἢἣἤἥἦἧἰἱἲἳἴἵἶἷἰἱἲἳἴἵἶἷὀὁὂὃὄὅ\u1f46\u1f47ὀὁὂὃὄὅ\u1f4e\u1f4fὐὑὒὓὔὕὖὗ\u1f58ὑ\u1f5aὓ\u1f5cὕ\u1f5eὗὠὡὢὣὤὥὦὧὠὡὢὣὤὥὦὧὰάὲέὴήὶίὸόὺύὼώ\u1f7e\u1f7fᾀᾁᾂᾃᾄᾅᾆᾇᾀᾁᾂᾃᾄᾅᾆᾇᾐᾑᾒᾓᾔᾕᾖᾗᾐᾑᾒᾓᾔᾕᾖᾗᾠᾡᾢᾣᾤᾥᾦᾧᾠᾡᾢᾣᾤᾥᾦᾧᾰᾱᾲᾳᾴ\u1fb5ᾶᾷᾰᾱὰάᾳ᾽ι᾿῀῁ῂῃῄ\u1fc5ῆῇὲέὴήῃ῍῎῏ῐῑῒΐ\u1fd4\u1fd5ῖῗῐῑὶί\u1fdc῝῞῟ῠῡῢΰῤῥῦῧῠῡὺύῥ῭΅`\u1ff0\u1ff1ῲῳῴ\u1ff5ῶῷὸόὼώῳ´῾\u1fff"
+ "           ​‌‍‎‏‐‑‒–—―‖‗‘’‚‛“”„‟†‡•‣․‥…‧  ‪‫‬‭‮ ‰‱′″‴‵‶‷‸‹›※‼‽‾‿⁀⁁⁂⁃⁄⁅⁆⁇⁈⁉⁊⁋⁌⁍⁎⁏⁐⁑⁒⁓⁔⁕⁖⁗⁘⁙⁚⁛⁜⁝⁞ ⁠⁡⁢⁣⁤\u2065⁦⁧⁨⁩⁪⁫⁬⁭⁮⁯⁰ⁱ\u2072\u2073⁴⁵⁶⁷⁸⁹⁺⁻⁼⁽⁾ⁿ₀₁₂₃₄₅₆₇₈₉₊₋₌₍₎\u208fₐₑₒₓₔₕₖₗₘₙₚₛₜ\u209d\u209e\u209f₠₡₢₣₤₥₦₧₨₩₪₫€₭₮₯₰₱₲₳₴₵₶₷₸₹₺₻₼₽₾₿⃀\u20c1\u20c2\u20c3\u20c4\u20c5\u20c6\u20c7\u20c8\u20c9\u20ca\u20cb\u20cc\u20cd\u20ce\u20cf⃒⃓⃘⃙⃚⃐⃑⃔⃕⃖⃗⃛⃜⃝⃞⃟⃠⃡⃢⃣⃤⃥⃦⃪⃫⃨⃬⃭⃮⃯⃧⃩⃰\u20f1\u20f2\u20f3\u20f4\u20f5\u20f6\u20f7\u20f8\u20f9\u20fa\u20fb\u20fc\u20fd\u20fe\u20ff℀℁ℂ℃℄℅℆ℇ℈℉ℊℋℌℍℎℏℐℑℒℓ℔ℕ№℗℘ℙℚℛℜℝ℞℟℠℡™℣ℤ℥ω℧ℨ℩kåℬℭ℮ℯℰℱⅎℳℴℵℶℷℸℹ℺℻ℼℽℾℿ⅀⅁⅂⅃⅄ⅅⅆⅇⅈⅉ⅊⅋⅌⅍ⅎ⅏⅐⅑⅒⅓⅔⅕⅖⅗⅘⅙⅚⅛⅜⅝⅞⅟ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅺⅻⅼⅽⅾⅿⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅺⅻⅼⅽⅾⅿↀↁↂↄↄↅↆↇↈ↉↊↋\u218c\u218d\u218e\u218f←↑→↓↔↕↖↗↘↙↚↛↜↝↞↟↠↡↢↣↤↥↦↧↨↩↪↫↬↭↮↯↰↱↲↳↴↵↶↷↸↹↺↻↼↽↾↿⇀⇁⇂⇃⇄⇅⇆⇇⇈⇉⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇚⇛⇜⇝⇞⇟⇠⇡⇢⇣⇤⇥⇦⇧⇨⇩⇪⇫⇬⇭⇮⇯⇰⇱⇲⇳⇴⇵⇶⇷⇸⇹⇺⇻⇼⇽⇾⇿"
+ "∀∁∂∃∄∅∆∇∈∉∊∋∌∍∎∏∐∑−∓∔∕∖∗∘∙√∛∜∝∞∟∠∡∢∣∤∥∦∧∨∩∪∫∬∭∮∯∰∱∲∳∴∵∶∷∸∹∺∻∼∽∾∿≀≁≂≃≄≅≆≇≈≉≊≋≌≍≎≏≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟≠≡≢≣≤≥≦≧≨≩≪≫≬≭≮≯≰≱≲≳≴≵≶≷≸≹≺≻≼≽≾≿⊀⊁⊂⊃⊄⊅⊆⊇⊈⊉⊊⊋⊌⊍⊎⊏⊐⊑⊒⊓⊔⊕⊖⊗⊘⊙⊚⊛⊜⊝⊞⊟⊠⊡⊢⊣⊤⊥⊦⊧⊨⊩⊪⊫⊬⊭⊮⊯⊰⊱⊲⊳⊴⊵⊶⊷⊸⊹⊺⊻⊼⊽⊾⊿⋀⋁⋂⋃⋄⋅⋆⋇⋈⋉⋊⋋⋌⋍⋎⋏⋐⋑⋒⋓⋔⋕⋖⋗⋘⋙⋚⋛⋜⋝⋞⋟⋠⋡⋢⋣⋤⋥⋦⋧⋨⋩⋪⋫⋬⋭⋮⋯⋰⋱⋲⋳⋴⋵⋶⋷⋸⋹⋺⋻⋼⋽⋾⋿⌀⌁⌂⌃⌄⌅⌆⌇⌈⌉⌊⌋⌌⌍⌎⌏⌐⌑⌒⌓⌔⌕⌖⌗⌘⌙⌚⌛⌜⌝⌞⌟⌠⌡⌢⌣⌤⌥⌦⌧⌨〈〉⌫⌬⌭⌮⌯⌰⌱⌲⌳⌴⌵⌶⌷⌸⌹⌺⌻⌼⌽⌾⌿⍀⍁⍂⍃⍄⍅⍆⍇⍈⍉⍊⍋⍌⍍⍎⍏⍐⍑⍒⍓⍔⍕⍖⍗⍘⍙⍚⍛⍜⍝⍞⍟⍠⍡⍢⍣⍤⍥⍦⍧⍨⍩⍪⍫⍬⍭⍮⍯⍰⍱⍲⍳⍴⍵⍶⍷⍸⍹⍺⍻⍼⍽⍾⍿⎀⎁⎂⎃⎄⎅⎆⎇⎈⎉⎊⎋⎌⎍⎎⎏⎐⎑⎒⎓⎔⎕⎖⎗⎘⎙⎚⎛⎜⎝⎞⎟⎠⎡⎢⎣⎤⎥⎦⎧⎨⎩⎪⎫⎬⎭⎮⎯⎰⎱⎲⎳⎴⎵⎶⎷⎸⎹⎺⎻⎼⎽⎾⎿⏀⏁⏂⏃⏄⏅⏆⏇⏈⏉⏊⏋⏌⏍⏎⏏⏐⏑⏒⏓⏔⏕⏖⏗⏘⏙⏚⏛⏜⏝⏞⏟⏠⏡⏢⏣⏤⏥⏦⏧⏨⏩⏪⏫⏬⏭⏮⏯⏰⏱⏲⏳⏴⏵⏶⏷⏸⏹⏺⏻⏼⏽⏾⏿"
+ "␀␁␂␃␄␅␆␇␈␉␊␋␌␍␎␏␐␑␒␓␔␕␖␗␘␙␚␛␜␝␞␟␠␡␢␣␤␥␦\u2427\u2428\u2429\u242a\u242b\u242c\u242d\u242e\u242f\u2430\u2431\u2432\u2433\u2434\u2435\u2436\u2437\u2438\u2439\u243a\u243b\u243c\u243d\u243e\u243f⑀⑁⑂⑃⑄⑅⑆⑇⑈⑉⑊\u244b\u244c\u244d\u244e\u244f\u2450\u2451\u2452\u2453\u2454\u2455\u2456\u2457\u2458\u2459\u245a\u245b\u245c\u245d\u245e\u245f①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵ⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ⓪⓫⓬⓭⓮⓯⓰⓱⓲⓳⓴⓵⓶⓷⓸⓹⓺⓻⓼⓽⓾⓿─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋╌╍╎╏═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳╴╵╶╷╸╹╺╻╼╽╾╿▀▁▂▃▄▅▆▇█▉▊▋▌▍▎▏▐░▒▓▔▕▖▗▘▙▚▛▜▝▞▟■□▢▣▤▥▦▧▨▩▪▫▬▭▮▯▰▱▲△▴▵▶▷▸▹►▻▼▽▾▿◀◁◂◃◄◅◆◇◈◉◊○◌◍◎●◐◑◒◓◔◕◖◗◘◙◚◛◜◝◞◟◠◡◢◣◤◥◦◧◨◩◪◫◬◭◮◯◰◱◲◳◴◵◶◷◸◹◺◻◼◽◾◿"
+ "☀☁☂☃☄★☆☇☈☉☊☋☌☍☎☏☐☑☒☓☔☕☖☗☘☙☚☛☜☝☞☟☠☡☢☣☤☥☦☧☨☩☪☫☬☭☮☯☰☱☲☳☴☵☶☷☸☹☺☻☼☽☾☿♀♁♂♃♄♅♆♇♈♉♊♋♌♍♎♏♐♑♒♓♔♕♖♗♘♙♚♛♜♝♞♟♠♡♢♣♤♥♦♧♨♩♪♫♬♭♮♯♰♱♲♳♴♵♶♷♸♹♺♻♼♽♾♿⚀⚁⚂⚃⚄⚅⚆⚇⚈⚉⚊⚋⚌⚍⚎⚏⚐⚑⚒⚓⚔⚕⚖⚗⚘⚙⚚⚛⚜⚝⚞⚟⚠⚡⚢⚣⚤⚥⚦⚧⚨⚩⚪⚫⚬⚭⚮⚯⚰⚱⚲⚳⚴⚵⚶⚷⚸⚹⚺⚻⚼⚽⚾⚿⛀⛁⛂⛃⛄⛅⛆⛇⛈⛉⛊⛋⛌⛍⛎⛏⛐⛑⛒⛓⛔⛕⛖⛗⛘⛙⛚⛛⛜⛝⛞⛟⛠⛡⛢⛣⛤⛥⛦⛧⛨⛩⛪⛫⛬⛭⛮⛯⛰⛱⛲⛳⛴⛵⛶⛷⛸⛹⛺⛻⛼⛽⛾⛿✀✁✂✃✄✅✆✇✈✉✊✋✌✍✎✏", "✐✑✒✓✔✕✖✗✘✙✚✛✜✝✞✟✠✡✢✣✤✥✦✧✨✩✪✫✬✭✮✯✰✱✲✳✴✵✶✷✸✹✺✻✼✽✾✿❀❁❂❃❄❅❆❇❈❉❊❋❌❍❎❏❐❑❒❓❔❕❖❗❘❙❚❛❜❝❞❟❠❡❢❣❤❥❦❧❨❩❪❫❬❭❮❯❰❱❲❳❴❵❶❷❸❹❺❻❼❽❾❿➀➁➂➃➄➅➆➇➈➉➊➋➌➍➎➏➐➑➒➓➔➕➖➗➘➙➚➛➜➝➞➟➠➡➢➣➤➥➦➧➨➩➪➫➬➭➮➯➰➱➲➳➴➵➶➷➸➹➺➻➼➽➾➿⟀⟁⟂⟃⟄⟅⟆⟇⟈⟉⟊⟋⟌⟍⟎⟏⟐⟑⟒⟓⟔⟕⟖⟗⟘⟙⟚⟛⟜⟝⟞⟟⟠⟡⟢⟣⟤⟥⟦⟧⟨⟩⟪⟫⟬⟭⟮⟯⟰⟱⟲⟳⟴⟵⟶⟷⟸⟹⟺⟻⟼⟽⟾⟿⠀⠁⠂⠃⠄⠅⠆⠇⠈⠉⠊⠋⠌⠍⠎⠏⠐⠑⠒⠓⠔⠕⠖⠗⠘⠙⠚⠛⠜⠝⠞⠟⠠⠡⠢⠣⠤⠥⠦⠧⠨⠩⠪⠫⠬⠭⠮⠯⠰⠱⠲⠳⠴⠵⠶⠷⠸⠹⠺⠻⠼⠽⠾⠿⡀⡁⡂⡃⡄⡅⡆⡇⡈⡉⡊⡋⡌⡍⡎⡏⡐⡑⡒⡓⡔⡕⡖⡗⡘⡙⡚⡛⡜⡝⡞⡟⡠⡡⡢⡣⡤⡥⡦⡧⡨⡩⡪⡫⡬⡭⡮⡯⡰⡱⡲⡳⡴⡵⡶⡷⡸⡹⡺⡻⡼⡽⡾⡿⢀⢁⢂⢃⢄⢅⢆⢇⢈⢉⢊⢋⢌⢍⢎⢏⢐⢑⢒⢓⢔⢕⢖⢗⢘⢙⢚⢛⢜⢝⢞⢟⢠⢡⢢⢣⢤⢥⢦⢧⢨⢩⢪⢫⢬⢭⢮⢯⢰⢱⢲⢳⢴⢵⢶⢷⢸⢹⢺⢻⢼⢽⢾⢿⣀⣁⣂⣃⣄⣅⣆⣇⣈⣉⣊⣋⣌⣍⣎⣏⣐⣑⣒⣓⣔⣕⣖⣗⣘⣙⣚⣛⣜⣝⣞⣟⣠⣡⣢⣣⣤⣥⣦⣧⣨⣩⣪⣫⣬⣭⣮⣯⣰⣱⣲⣳⣴⣵⣶⣷⣸⣹⣺⣻⣼⣽⣾⣿⤀⤁⤂⤃⤄⤅⤆⤇⤈⤉⤊⤋⤌⤍⤎⤏"
+ "⤐⤑⤒⤓⤔⤕⤖⤗⤘⤙⤚⤛⤜⤝⤞⤟⤠⤡⤢⤣⤤⤥⤦⤧⤨⤩⤪⤫⤬⤭⤮⤯⤰⤱⤲⤳⤴⤵⤶⤷⤸⤹⤺⤻⤼⤽⤾⤿⥀⥁⥂⥃⥄⥅⥆⥇⥈⥉⥊⥋⥌⥍⥎⥏⥐⥑⥒⥓⥔⥕⥖⥗⥘⥙⥚⥛⥜⥝⥞⥟⥠⥡⥢⥣⥤⥥⥦⥧⥨⥩⥪⥫⥬⥭⥮⥯⥰⥱⥲⥳⥴⥵⥶⥷⥸⥹⥺⥻⥼⥽⥾⥿⦀⦁⦂⦃⦄⦅⦆⦇⦈⦉⦊⦋⦌⦍⦎⦏⦐⦑⦒⦓⦔⦕⦖⦗⦘⦙⦚⦛⦜⦝⦞⦟⦠⦡⦢⦣⦤⦥⦦⦧⦨⦩⦪⦫⦬⦭⦮⦯⦰⦱⦲⦳⦴⦵⦶⦷⦸⦹⦺⦻⦼⦽⦾⦿⧀⧁⧂⧃⧄⧅⧆⧇⧈⧉⧊⧋⧌⧍⧎⧏⧐⧑⧒⧓⧔⧕⧖⧗⧘⧙⧚⧛⧜⧝⧞⧟⧠⧡⧢⧣⧤⧥⧦⧧⧨⧩⧪⧫⧬⧭⧮⧯⧰⧱⧲⧳⧴⧵⧶⧷⧸⧹⧺⧻⧼⧽⧾⧿⨀⨁⨂⨃⨄⨅⨆⨇⨈⨉⨊⨋⨌⨍⨎⨏⨐⨑⨒⨓⨔⨕⨖⨗⨘⨙⨚⨛⨜⨝⨞⨟⨠⨡⨢⨣⨤⨥⨦⨧⨨⨩⨪⨫⨬⨭⨮⨯⨰⨱⨲⨳⨴⨵⨶⨷⨸⨹⨺⨻⨼⨽⨾⨿⩀⩁⩂⩃⩄⩅⩆⩇⩈⩉⩊⩋⩌⩍⩎⩏⩐⩑⩒⩓⩔⩕⩖⩗⩘⩙⩚⩛⩜⩝⩞⩟⩠⩡⩢⩣⩤⩥⩦⩧⩨⩩⩪⩫⩬⩭⩮⩯⩰⩱⩲⩳⩴⩵⩶⩷⩸⩹⩺⩻⩼⩽⩾⩿⪀⪁⪂⪃⪄⪅⪆⪇⪈⪉⪊⪋⪌⪍⪎⪏⪐⪑⪒⪓⪔⪕⪖⪗⪘⪙⪚⪛⪜⪝⪞⪟⪠⪡⪢⪣⪤⪥⪦⪧⪨⪩⪪⪫⪬⪭⪮⪯⪰⪱⪲⪳⪴⪵⪶⪷⪸⪹⪺⪻⪼⪽⪾⪿⫀⫁⫂⫃⫄⫅⫆⫇⫈⫉⫊⫋⫌⫍⫎⫏⫐⫑⫒⫓⫔⫕⫖⫗⫘⫙⫚⫛⫝̸⫝⫞⫟⫠⫡⫢⫣⫤⫥⫦⫧⫨⫩⫪⫫⫬⫭⫮⫯⫰⫱⫲⫳⫴⫵⫶⫷⫸⫹⫺⫻⫼⫽⫾⫿⬀⬁⬂⬃⬄⬅⬆⬇⬈⬉⬊⬋⬌⬍⬎⬏"
+ "⬐⬑⬒⬓⬔⬕⬖⬗⬘⬙⬚⬛⬜⬝⬞⬟⬠⬡⬢⬣⬤⬥⬦⬧⬨⬩⬪⬫⬬⬭⬮⬯⬰⬱⬲⬳⬴⬵⬶⬷⬸⬹⬺⬻⬼⬽⬾⬿⭀⭁⭂⭃⭄⭅⭆⭇⭈⭉⭊⭋⭌⭍⭎⭏⭐⭑⭒⭓⭔⭕⭖⭗⭘⭙⭚⭛⭜⭝⭞⭟⭠⭡⭢⭣⭤⭥⭦⭧⭨⭩⭪⭫⭬⭭⭮⭯⭰⭱⭲⭳\u2b74\u2b75⭶⭷⭸⭹⭺⭻⭼⭽⭾⭿⮀⮁⮂⮃⮄⮅⮆⮇⮈⮉⮊⮋⮌⮍⮎⮏⮐⮑⮒⮓⮔⮕\u2b96⮗⮘⮙⮚⮛⮜⮝⮞⮟⮠⮡⮢⮣⮤⮥⮦⮧⮨⮩⮪⮫⮬⮭⮮⮯⮰⮱⮲⮳⮴⮵⮶⮷⮸⮹⮺⮻⮼⮽⮾⮿⯀⯁⯂⯃⯄⯅⯆⯇⯈⯉⯊⯋⯌⯍⯎⯏⯐⯑⯒⯓⯔⯕⯖⯗⯘⯙⯚⯛⯜⯝⯞⯟⯠⯡⯢⯣⯤⯥⯦⯧⯨⯩⯪⯫⯬⯭⯮⯯⯰⯱⯲⯳⯴⯵⯶⯷⯸⯹⯺⯻⯼⯽⯾⯿ⰰⰱⰲⰳⰴⰵⰶⰷⰸⰹⰺⰻⰼⰽⰾⰿⱀⱁⱂⱃⱄⱅⱆⱇⱈⱉⱊⱋⱌⱍⱎⱏⱐⱑⱒⱓⱔⱕⱖⱗⱘⱙⱚⱛⱜⱝⱞⱟⰰⰱⰲⰳⰴⰵⰶⰷⰸⰹⰺⰻⰼⰽⰾⰿⱀⱁⱂⱃⱄⱅⱆⱇⱈⱉⱊⱋⱌⱍⱎⱏⱐⱑⱒⱓⱔⱕⱖⱗⱘⱙⱚⱛⱜⱝⱞⱟⱡⱡɫᵽɽⱥⱦⱨⱨⱪⱪⱬⱬɑɱɐɒⱱⱳⱳⱴⱶⱶⱷⱸⱹⱺⱻⱼⱽȿɀⲁⲁⲃⲃⲅⲅⲇⲇⲉⲉⲋⲋⲍⲍⲏⲏⲑⲑⲓⲓⲕⲕⲗⲗⲙⲙⲛⲛⲝⲝⲟⲟⲡⲡⲣⲣⲥⲥⲧⲧⲩⲩⲫⲫⲭⲭⲯⲯⲱⲱⲳⲳⲵⲵⲷⲷⲹⲹⲻⲻⲽⲽⲿⲿⳁⳁⳃⳃⳅⳅⳇⳇⳉⳉⳋⳋⳍⳍⳏⳏⳑⳑⳓⳓⳕⳕⳗⳗⳙⳙⳛⳛⳝⳝⳟⳟⳡⳡⳣⳣⳤ⳥⳦⳧⳨⳩⳪ⳬⳬⳮⳮ⳯⳰⳱ⳳⳳ\u2cf4\u2cf5\u2cf6\u2cf7\u2cf8⳹⳺⳻⳼⳽⳾⳿ⴀⴁⴂⴃⴄⴅⴆⴇⴈⴉⴊⴋⴌⴍⴎⴏ"
+ "ⴐⴑⴒⴓⴔⴕⴖⴗⴘⴙⴚⴛⴜⴝⴞⴟⴠⴡⴢⴣⴤⴥ\u2d26ⴧ\u2d28\u2d29\u2d2a\u2d2b\u2d2cⴭ\u2d2e\u2d2fⴰⴱⴲⴳⴴⴵⴶⴷⴸⴹⴺⴻⴼⴽⴾⴿⵀⵁⵂⵃⵄⵅⵆⵇⵈⵉⵊⵋⵌⵍⵎⵏⵐⵑⵒⵓⵔⵕⵖⵗⵘⵙⵚⵛⵜⵝⵞⵟⵠⵡⵢⵣⵤⵥⵦⵧ\u2d68\u2d69\u2d6a\u2d6b\u2d6c\u2d6d\u2d6eⵯ⵰\u2d71\u2d72\u2d73\u2d74\u2d75\u2d76\u2d77\u2d78\u2d79\u2d7a\u2d7b\u2d7c\u2d7d\u2d7e⵿ⶀⶁⶂⶃⶄⶅⶆⶇⶈⶉⶊⶋⶌⶍⶎⶏⶐⶑⶒⶓⶔⶕⶖ\u2d97\u2d98\u2d99\u2d9a\u2d9b\u2d9c\u2d9d\u2d9e\u2d9fⶠⶡⶢⶣⶤⶥⶦ\u2da7ⶨⶩⶪⶫⶬⶭⶮ\u2dafⶰⶱⶲⶳⶴⶵⶶ\u2db7ⶸⶹⶺⶻⶼⶽⶾ\u2dbfⷀⷁⷂⷃⷄⷅⷆ\u2dc7ⷈⷉⷊⷋⷌⷍⷎ\u2dcfⷐⷑⷒⷓⷔⷕⷖ\u2dd7ⷘⷙⷚⷛⷜⷝⷞ\u2ddfⷠⷡⷢⷣⷤⷥⷦⷧⷨⷩⷪⷫⷬⷭⷮⷯⷰⷱⷲⷳⷴⷵⷶⷷⷸⷹⷺⷻⷼⷽⷾⷿ⸀⸁⸂⸃⸄⸅⸆⸇⸈⸉⸊⸋⸌⸍⸎⸏⸐⸑⸒⸓⸔⸕⸖⸗⸘⸙⸚⸛⸜⸝⸞⸟⸠⸡⸢⸣⸤⸥⸦⸧⸨⸩⸪⸫⸬⸭⸮ⸯ⸰⸱⸲⸳⸴⸵⸶⸷⸸⸹⸺⸻⸼⸽⸾⸿⹀⹁⹂⹃⹄⹅⹆⹇⹈⹉⹊⹋⹌⹍⹎⹏⹐⹑⹒⹓⹔⹕⹖⹗⹘⹙⹚⹛⹜⹝\u2e5e\u2e5f\u2e60\u2e61\u2e62\u2e63\u2e64\u2e65\u2e66\u2e67\u2e68\u2e69\u2e6a\u2e6b\u2e6c\u2e6d\u2e6e\u2e6f\u2e70\u2e71\u2e72\u2e73\u2e74\u2e75\u2e76\u2e77\u2e78\u2e79\u2e7a\u2e7b\u2e7c\u2e7d\u2e7e\u2e7f⺀⺁⺂⺃⺄⺅⺆⺇⺈⺉⺊⺋⺌⺍⺎⺏⺐⺑⺒⺓⺔⺕⺖⺗⺘⺙\u2e9a⺛⺜⺝⺞⺟⺠⺡⺢⺣⺤⺥⺦⺧⺨⺩⺪⺫⺬⺭⺮⺯⺰⺱⺲⺳⺴⺵⺶⺷⺸⺹⺺⺻⺼⺽⺾⺿⻀⻁⻂⻃⻄⻅⻆⻇⻈⻉⻊⻋⻌⻍⻎⻏⻐⻑⻒⻓⻔⻕⻖⻗⻘⻙⻚⻛⻜⻝⻞⻟⻠⻡⻢⻣⻤⻥⻦⻧⻨⻩⻪⻫⻬⻭⻮⻯⻰⻱⻲⻳\u2ef4\u2ef5\u2ef6\u2ef7\u2ef8\u2ef9\u2efa\u2efb\u2efc\u2efd\u2efe\u2eff⼀⼁⼂⼃⼄⼅⼆⼇⼈⼉⼊⼋⼌⼍⼎⼏"
+ "⼐⼑⼒⼓⼔⼕⼖⼗⼘⼙⼚⼛⼜⼝⼞⼟⼠⼡⼢⼣⼤⼥⼦⼧⼨⼩⼪⼫⼬⼭⼮⼯⼰⼱⼲⼳⼴⼵⼶⼷⼸⼹⼺⼻⼼⼽⼾⼿⽀⽁⽂⽃⽄⽅⽆⽇⽈⽉⽊⽋⽌⽍⽎⽏⽐⽑⽒⽓⽔⽕⽖⽗⽘⽙⽚⽛⽜⽝⽞⽟⽠⽡⽢⽣⽤⽥⽦⽧⽨⽩⽪⽫⽬⽭⽮⽯⽰⽱⽲⽳⽴⽵⽶⽷⽸⽹⽺⽻⽼⽽⽾⽿⾀⾁⾂⾃⾄⾅⾆⾇⾈⾉⾊⾋⾌⾍⾎⾏⾐⾑⾒⾓⾔⾕⾖⾗⾘⾙⾚⾛⾜⾝⾞⾟⾠⾡⾢⾣⾤⾥⾦⾧⾨⾩⾪⾫⾬⾭⾮⾯⾰⾱⾲⾳⾴⾵⾶⾷⾸⾹⾺⾻⾼⾽⾾⾿⿀⿁⿂⿃⿄⿅⿆⿇⿈⿉⿊⿋⿌⿍⿎⿏⿐⿑⿒⿓⿔⿕\u2fd6\u2fd7\u2fd8\u2fd9\u2fda\u2fdb\u2fdc\u2fdd\u2fde\u2fdf\u2fe0\u2fe1\u2fe2\u2fe3\u2fe4\u2fe5\u2fe6\u2fe7\u2fe8\u2fe9\u2fea\u2feb\u2fec\u2fed\u2fee\u2fef⿰⿱⿲⿳⿴⿵⿶⿷⿸⿹⿺⿻\u2ffc\u2ffd\u2ffe\u2fff　、。〃〄々〆〇〈〉《》「」『』【】〒〓〔〕〖〗〘〙〚〛〜〝〞〟〠〡〢〣〤〥〦〧〨〩〪〭〮〯〫〬〰〱〲〳〴〵〶〷〸〹〺〻〼〽〾〿\u3040ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをんゔゕゖ\u3097\u3098゙゚゛゜ゝゞゟ゠ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶヷヸヹヺ・ーヽヾヿ\u3100\u3101\u3102\u3103\u3104ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏ"
+ "ㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩㄪㄫㄬㄭㄮㄯ\u3130ㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣㅤㅥㅦㅧㅨㅩㅪㅫㅬㅭㅮㅯㅰㅱㅲㅳㅴㅵㅶㅷㅸㅹㅺㅻㅼㅽㅾㅿㆀㆁㆂㆃㆄㆅㆆㆇㆈㆉㆊㆋㆌㆍㆎ\u318f㆐㆑㆒㆓㆔㆕㆖㆗㆘㆙㆚㆛㆜㆝㆞㆟ㆠㆡㆢㆣㆤㆥㆦㆧㆨㆩㆪㆫㆬㆭㆮㆯㆰㆱㆲㆳㆴㆵㆶㆷㆸㆹㆺㆻㆼㆽㆾㆿ㇀㇁㇂㇃㇄㇅㇆㇇㇈㇉㇊㇋㇌㇍㇎㇏㇐㇑㇒㇓㇔㇕㇖㇗㇘㇙㇚㇛㇜㇝㇞㇟㇠㇡㇢㇣\u31e4\u31e5\u31e6\u31e7\u31e8\u31e9\u31ea\u31eb\u31ec\u31ed\u31ee\u31efㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ㈀㈁㈂㈃㈄㈅㈆㈇㈈㈉㈊㈋㈌㈍㈎㈏㈐㈑㈒㈓㈔㈕㈖㈗㈘㈙㈚㈛㈜㈝㈞\u321f㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩㈪㈫㈬㈭㈮㈯㈰㈱㈲㈳㈴㈵㈶㈷㈸㈹㈺㈻㈼㈽㈾㈿㉀㉁㉂㉃㉄㉅㉆㉇㉈㉉㉊㉋㉌㉍㉎㉏㉐㉑㉒㉓㉔㉕㉖㉗㉘㉙㉚㉛㉜㉝㉞㉟㉠㉡㉢㉣㉤㉥㉦㉧㉨㉩㉪㉫㉬㉭㉮㉯㉰㉱㉲㉳㉴㉵㉶㉷㉸㉹㉺㉻㉼㉽㉾㉿㊀㊁㊂㊃㊄㊅㊆㊇㊈㊉㊊㊋㊌㊍㊎㊏㊐㊑㊒㊓㊔㊕㊖㊗㊘㊙㊚㊛㊜㊝㊞㊟㊠㊡㊢㊣㊤㊥㊦㊧㊨㊩㊪㊫㊬㊭㊮㊯㊰㊱㊲㊳㊴㊵㊶㊷㊸㊹㊺㊻㊼㊽㊾㊿㋀㋁㋂㋃㋄㋅㋆㋇㋈㋉㋊㋋㋌㋍㋎㋏㋐㋑㋒㋓㋔㋕㋖㋗㋘㋙㋚㋛㋜㋝㋞㋟㋠㋡㋢㋣㋤㋥㋦㋧㋨㋩㋪㋫㋬㋭㋮㋯㋰㋱㋲㋳㋴㋵㋶㋷㋸㋹㋺㋻㋼㋽㋾㋿㌀㌁㌂㌃㌄㌅㌆㌇㌈㌉㌊㌋㌌㌍㌎㌏"
+ "㌐㌑㌒㌓㌔㌕㌖㌗㌘㌙㌚㌛㌜㌝㌞㌟㌠㌡㌢㌣㌤㌥㌦㌧㌨㌩㌪㌫㌬㌭㌮㌯㌰㌱㌲㌳㌴㌵㌶㌷㌸㌹㌺㌻㌼㌽㌾㌿㍀㍁㍂㍃㍄㍅㍆㍇㍈㍉㍊㍋㍌㍍㍎㍏㍐㍑㍒㍓㍔㍕㍖㍗㍘㍙㍚㍛㍜㍝㍞㍟㍠㍡㍢㍣㍤㍥㍦㍧㍨㍩㍪㍫㍬㍭㍮㍯㍰㍱㍲㍳㍴㍵㍶㍷㍸㍹㍺㍻㍼㍽㍾㍿㎀㎁㎂㎃㎄㎅㎆㎇㎈㎉㎊㎋㎌㎍㎎㎏㎐㎑㎒㎓㎔㎕㎖㎗㎘㎙㎚㎛㎜㎝㎞㎟㎠㎡㎢㎣㎤㎥㎦㎧㎨㎩㎪㎫㎬㎭㎮㎯㎰㎱㎲㎳㎴㎵㎶㎷㎸㎹㎺㎻㎼㎽㎾㎿㏀㏁㏂㏃㏄㏅㏆㏇㏈㏉㏊㏋㏌㏍㏎㏏㏐㏑㏒㏓㏔㏕㏖㏗㏘㏙㏚㏛㏜㏝㏞㏟㏠㏡㏢㏣㏤㏥㏦㏧㏨㏩㏪㏫㏬㏭㏮㏯㏰㏱㏲㏳㏴㏵㏶㏷㏸㏹㏺㏻㏼㏽㏾㏿㐀㐁㐂㐃㐄㐅㐆㐇㐈㐉㐊㐋㐌㐍㐎㐏㐐㐑㐒㐓㐔㐕㐖㐗㐘㐙㐚㐛㐜㐝㐞㐟㐠㐡㐢㐣㐤㐥㐦㐧㐨㐩㐪㐫㐬㐭㐮㐯㐰㐱㐲㐳㐴㐵㐶㐷㐸㐹㐺㐻㐼㐽㐾㐿㑀㑁㑂㑃㑄㑅㑆㑇㑈㑉㑊㑋㑌㑍㑎㑏㑐㑑㑒㑓㑔㑕㑖㑗㑘㑙㑚㑛㑜㑝㑞㑟㑠㑡㑢㑣㑤㑥㑦㑧㑨㑩㑪㑫㑬㑭㑮㑯㑰㑱㑲㑳㑴㑵㑶㑷㑸㑹㑺㑻㑼㑽㑾㑿㒀㒁㒂㒃㒄㒅㒆㒇㒈㒉㒊㒋㒌㒍㒎㒏㒐㒑㒒㒓㒔㒕㒖㒗㒘㒙㒚㒛㒜㒝㒞㒟㒠㒡㒢㒣㒤㒥㒦㒧㒨㒩㒪㒫㒬㒭㒮㒯㒰㒱㒲㒳㒴㒵㒶㒷㒸㒹㒺㒻㒼㒽㒾㒿㓀㓁㓂㓃㓄㓅㓆㓇㓈㓉㓊㓋㓌㓍㓎㓏㓐㓑㓒㓓㓔㓕㓖㓗㓘㓙㓚㓛㓜㓝㓞㓟㓠㓡㓢㓣㓤㓥㓦㓧㓨㓩㓪㓫㓬㓭㓮㓯㓰㓱㓲㓳㓴㓵㓶㓷㓸㓹㓺㓻㓼㓽㓾㓿㔀㔁㔂㔃㔄㔅㔆㔇㔈㔉㔊㔋㔌㔍㔎㔏"
+ "㔐㔑㔒㔓㔔㔕㔖㔗㔘㔙㔚㔛㔜㔝㔞㔟㔠㔡㔢㔣㔤㔥㔦㔧㔨㔩㔪㔫㔬㔭㔮㔯㔰㔱㔲㔳㔴㔵㔶㔷㔸㔹㔺㔻㔼㔽㔾㔿㕀㕁㕂㕃㕄㕅㕆㕇㕈㕉㕊㕋㕌㕍㕎㕏㕐㕑㕒㕓㕔㕕㕖㕗㕘㕙㕚㕛㕜㕝㕞㕟㕠㕡㕢㕣㕤㕥㕦㕧㕨㕩㕪㕫㕬㕭㕮㕯㕰㕱㕲㕳㕴㕵㕶㕷㕸㕹㕺㕻㕼㕽㕾㕿㖀㖁㖂㖃㖄㖅㖆㖇㖈㖉㖊㖋㖌㖍㖎㖏㖐㖑㖒㖓㖔㖕㖖㖗㖘㖙㖚㖛㖜㖝㖞㖟㖠㖡㖢㖣㖤㖥㖦㖧㖨㖩㖪㖫㖬㖭㖮㖯㖰㖱㖲㖳㖴㖵㖶㖷㖸㖹㖺㖻㖼㖽㖾㖿㗀㗁㗂㗃㗄㗅㗆㗇㗈㗉㗊㗋㗌㗍㗎㗏㗐㗑㗒㗓㗔㗕㗖㗗㗘㗙㗚㗛㗜㗝㗞㗟㗠㗡㗢㗣㗤㗥㗦㗧㗨㗩㗪㗫㗬㗭㗮㗯㗰㗱㗲㗳㗴㗵㗶㗷㗸㗹㗺㗻㗼㗽㗾㗿㘀㘁㘂㘃㘄㘅㘆㘇㘈㘉㘊㘋㘌㘍㘎㘏㘐㘑㘒㘓㘔㘕㘖㘗㘘㘙㘚㘛㘜㘝㘞㘟㘠㘡㘢㘣㘤㘥㘦㘧㘨㘩㘪㘫㘬㘭㘮㘯㘰㘱㘲㘳㘴㘵㘶㘷㘸㘹㘺㘻㘼㘽㘾㘿㙀㙁㙂㙃㙄㙅㙆㙇㙈㙉㙊㙋㙌㙍㙎㙏㙐㙑㙒㙓㙔㙕㙖㙗㙘㙙㙚㙛㙜㙝㙞㙟㙠㙡㙢㙣㙤㙥㙦㙧㙨㙩㙪㙫㙬㙭㙮㙯㙰㙱㙲㙳㙴㙵㙶㙷㙸㙹㙺㙻㙼㙽㙾㙿㚀㚁㚂㚃㚄㚅㚆㚇㚈㚉㚊㚋㚌㚍㚎㚏㚐㚑㚒㚓㚔㚕㚖㚗㚘㚙㚚㚛㚜㚝㚞㚟㚠㚡㚢㚣㚤㚥㚦㚧㚨㚩㚪㚫㚬㚭㚮㚯㚰㚱㚲㚳㚴㚵㚶㚷㚸㚹㚺㚻㚼㚽㚾㚿㛀㛁㛂㛃㛄㛅㛆㛇㛈㛉㛊㛋㛌㛍㛎㛏㛐㛑㛒㛓㛔㛕㛖㛗㛘㛙㛚㛛㛜㛝㛞㛟㛠㛡㛢㛣㛤㛥㛦㛧㛨㛩㛪㛫㛬㛭㛮㛯㛰㛱㛲㛳㛴㛵㛶㛷㛸㛹㛺㛻㛼㛽㛾㛿㜀㜁㜂㜃㜄㜅㜆㜇㜈㜉㜊㜋㜌㜍㜎㜏"
+ "㜐㜑㜒㜓㜔㜕㜖㜗㜘㜙㜚㜛㜜㜝㜞㜟㜠㜡㜢㜣㜤㜥㜦㜧㜨㜩㜪㜫㜬㜭㜮㜯㜰㜱㜲㜳㜴㜵㜶㜷㜸㜹㜺㜻㜼㜽㜾㜿㝀㝁㝂㝃㝄㝅㝆㝇㝈㝉㝊㝋㝌㝍㝎㝏㝐㝑㝒㝓㝔㝕㝖㝗㝘㝙㝚㝛㝜㝝㝞㝟㝠㝡㝢㝣㝤㝥㝦㝧㝨㝩㝪㝫㝬㝭㝮㝯㝰㝱㝲㝳㝴㝵㝶㝷㝸㝹㝺㝻㝼㝽㝾㝿㞀㞁㞂㞃㞄㞅㞆㞇㞈㞉㞊㞋㞌㞍㞎㞏㞐㞑㞒㞓㞔㞕㞖㞗㞘㞙㞚㞛㞜㞝㞞㞟㞠㞡㞢㞣㞤㞥㞦㞧㞨㞩㞪㞫㞬㞭㞮㞯㞰㞱㞲㞳㞴㞵㞶㞷㞸㞹㞺㞻㞼㞽㞾㞿㟀㟁㟂㟃㟄㟅㟆㟇㟈㟉㟊㟋㟌㟍㟎㟏㟐㟑㟒㟓㟔㟕㟖㟗㟘㟙㟚㟛㟜㟝㟞㟟㟠㟡㟢㟣㟤㟥㟦㟧㟨㟩㟪㟫㟬㟭㟮㟯㟰㟱㟲㟳㟴㟵㟶㟷㟸㟹㟺㟻㟼㟽㟾㟿㠀㠁㠂㠃㠄㠅㠆㠇㠈㠉㠊㠋㠌㠍㠎㠏㠐㠑㠒㠓㠔㠕㠖㠗㠘㠙㠚㠛㠜㠝㠞㠟㠠㠡㠢㠣㠤㠥㠦㠧㠨㠩㠪㠫㠬㠭㠮㠯㠰㠱㠲㠳㠴㠵㠶㠷㠸㠹㠺㠻㠼㠽㠾㠿㡀㡁㡂㡃㡄㡅㡆㡇㡈㡉㡊㡋㡌㡍㡎㡏㡐㡑㡒㡓㡔㡕㡖㡗㡘㡙㡚㡛㡜㡝㡞㡟㡠㡡㡢㡣㡤㡥㡦㡧㡨㡩㡪㡫㡬㡭㡮㡯㡰㡱㡲㡳㡴㡵㡶㡷㡸㡹㡺㡻㡼㡽㡾㡿㢀㢁㢂㢃㢄㢅㢆㢇㢈㢉㢊㢋㢌㢍㢎㢏㢐㢑㢒㢓㢔㢕㢖㢗㢘㢙㢚㢛㢜㢝㢞㢟㢠㢡㢢㢣㢤㢥㢦㢧㢨㢩㢪㢫㢬㢭㢮㢯㢰㢱㢲㢳㢴㢵㢶㢷㢸㢹㢺㢻㢼㢽㢾㢿㣀㣁㣂㣃㣄㣅㣆㣇㣈㣉㣊㣋㣌㣍㣎㣏㣐㣑㣒㣓㣔㣕㣖㣗㣘㣙㣚㣛㣜㣝㣞㣟㣠㣡㣢㣣㣤㣥㣦㣧㣨㣩㣪㣫㣬㣭㣮㣯㣰㣱㣲㣳㣴㣵㣶㣷㣸㣹㣺㣻㣼㣽㣾㣿㤀㤁㤂㤃㤄㤅㤆㤇㤈㤉㤊㤋㤌㤍㤎㤏"
+ "㤐㤑㤒㤓㤔㤕㤖㤗㤘㤙㤚㤛㤜㤝㤞㤟㤠㤡㤢㤣㤤㤥㤦㤧㤨㤩㤪㤫㤬㤭㤮㤯㤰㤱㤲㤳㤴㤵㤶㤷㤸㤹㤺㤻㤼㤽㤾㤿㥀㥁㥂㥃㥄㥅㥆㥇㥈㥉㥊㥋㥌㥍㥎㥏㥐㥑㥒㥓㥔㥕㥖㥗㥘㥙㥚㥛㥜㥝㥞㥟㥠㥡㥢㥣㥤㥥㥦㥧㥨㥩㥪㥫㥬㥭㥮㥯㥰㥱㥲㥳㥴㥵㥶㥷㥸㥹㥺㥻㥼㥽㥾㥿㦀㦁㦂㦃㦄㦅㦆㦇㦈㦉㦊㦋㦌㦍㦎㦏㦐㦑㦒㦓㦔㦕㦖㦗㦘㦙㦚㦛㦜㦝㦞㦟㦠㦡㦢㦣㦤㦥㦦㦧㦨㦩㦪㦫㦬㦭㦮㦯㦰㦱㦲㦳㦴㦵㦶㦷㦸㦹㦺㦻㦼㦽㦾㦿㧀㧁㧂㧃㧄㧅㧆㧇㧈㧉㧊㧋㧌㧍㧎㧏㧐㧑㧒㧓㧔㧕㧖㧗㧘㧙㧚㧛㧜㧝㧞㧟㧠㧡㧢㧣㧤㧥㧦㧧㧨㧩㧪㧫㧬㧭㧮㧯㧰㧱㧲㧳㧴㧵㧶㧷㧸㧹㧺㧻㧼㧽㧾㧿㨀㨁㨂㨃㨄㨅㨆㨇㨈㨉㨊㨋㨌㨍㨎㨏㨐㨑㨒㨓㨔㨕㨖㨗㨘㨙㨚㨛㨜㨝㨞㨟㨠㨡㨢㨣㨤㨥㨦㨧㨨㨩㨪㨫㨬㨭㨮㨯㨰㨱㨲㨳㨴㨵㨶㨷㨸㨹㨺㨻㨼㨽㨾㨿㩀㩁㩂㩃㩄㩅㩆㩇㩈㩉㩊㩋㩌㩍㩎㩏㩐㩑㩒㩓㩔㩕㩖㩗㩘㩙㩚㩛㩜㩝㩞㩟㩠㩡㩢㩣㩤㩥㩦㩧㩨㩩㩪㩫㩬㩭㩮㩯㩰㩱㩲㩳㩴㩵㩶㩷㩸㩹㩺㩻㩼㩽㩾㩿㪀㪁㪂㪃㪄㪅㪆㪇㪈㪉㪊㪋㪌㪍㪎㪏㪐㪑㪒㪓㪔㪕㪖㪗㪘㪙㪚㪛㪜㪝㪞㪟㪠㪡㪢㪣㪤㪥㪦㪧㪨㪩㪪㪫㪬㪭㪮㪯㪰㪱㪲㪳㪴㪵㪶㪷㪸㪹㪺㪻㪼㪽㪾㪿㫀㫁㫂㫃㫄㫅㫆㫇㫈㫉㫊㫋㫌㫍㫎㫏㫐㫑㫒㫓㫔㫕㫖㫗㫘㫙㫚㫛㫜㫝㫞㫟㫠㫡㫢㫣㫤㫥㫦㫧㫨㫩㫪㫫㫬㫭㫮㫯㫰㫱㫲㫳㫴㫵㫶㫷㫸㫹㫺㫻㫼㫽㫾㫿㬀㬁㬂㬃㬄㬅㬆㬇㬈㬉㬊㬋㬌㬍㬎㬏"
+ "㬐㬑㬒㬓㬔㬕㬖㬗㬘㬙㬚㬛㬜㬝㬞㬟㬠㬡㬢㬣㬤㬥㬦㬧㬨㬩㬪㬫㬬㬭㬮㬯㬰㬱㬲㬳㬴㬵㬶㬷㬸㬹㬺㬻㬼㬽㬾㬿㭀㭁㭂㭃㭄㭅㭆㭇㭈㭉㭊㭋㭌㭍㭎㭏㭐㭑㭒㭓㭔㭕㭖㭗㭘㭙㭚㭛㭜㭝㭞㭟㭠㭡㭢㭣㭤㭥㭦㭧㭨㭩㭪㭫㭬㭭㭮㭯㭰㭱㭲㭳㭴㭵㭶㭷㭸㭹㭺㭻㭼㭽㭾㭿㮀㮁㮂㮃㮄㮅㮆㮇㮈㮉㮊㮋㮌㮍㮎㮏㮐㮑㮒㮓㮔㮕㮖㮗㮘㮙㮚㮛㮜㮝㮞㮟㮠㮡㮢㮣㮤㮥㮦㮧㮨㮩㮪㮫㮬㮭㮮㮯㮰㮱㮲㮳㮴㮵㮶㮷㮸㮹㮺㮻㮼㮽㮾㮿㯀㯁㯂㯃㯄㯅㯆㯇㯈㯉㯊㯋㯌㯍㯎㯏㯐㯑㯒㯓㯔㯕㯖㯗㯘㯙㯚㯛㯜㯝㯞㯟㯠㯡㯢㯣㯤㯥㯦㯧㯨㯩㯪㯫㯬㯭㯮㯯㯰㯱㯲㯳㯴㯵㯶㯷㯸㯹㯺㯻㯼㯽㯾㯿㰀㰁㰂㰃㰄㰅㰆㰇㰈㰉㰊㰋㰌㰍㰎㰏㰐㰑㰒㰓㰔㰕㰖㰗㰘㰙㰚㰛㰜㰝㰞㰟㰠㰡㰢㰣㰤㰥㰦㰧㰨㰩㰪㰫㰬㰭㰮㰯㰰㰱㰲㰳㰴㰵㰶㰷㰸㰹㰺㰻㰼㰽㰾㰿㱀㱁㱂㱃㱄㱅㱆㱇㱈㱉㱊㱋㱌㱍㱎㱏㱐㱑㱒㱓㱔㱕㱖㱗㱘㱙㱚㱛㱜㱝㱞㱟㱠㱡㱢㱣㱤㱥㱦㱧㱨㱩㱪㱫㱬㱭㱮㱯㱰㱱㱲㱳㱴㱵㱶㱷㱸㱹㱺㱻㱼㱽㱾㱿㲀㲁㲂㲃㲄㲅㲆㲇㲈㲉㲊㲋㲌㲍㲎㲏㲐㲑㲒㲓㲔㲕㲖㲗㲘㲙㲚㲛㲜㲝㲞㲟㲠㲡㲢㲣㲤㲥㲦㲧㲨㲩㲪㲫㲬㲭㲮㲯㲰㲱㲲㲳㲴㲵㲶㲷㲸㲹㲺㲻㲼㲽㲾㲿㳀㳁㳂㳃㳄㳅㳆㳇㳈㳉㳊㳋㳌㳍㳎㳏㳐㳑㳒㳓㳔㳕㳖㳗㳘㳙㳚㳛㳜㳝㳞㳟㳠㳡㳢㳣㳤㳥㳦㳧㳨㳩㳪㳫㳬㳭㳮㳯㳰㳱㳲㳳㳴㳵㳶㳷㳸㳹㳺㳻㳼㳽㳾㳿㴀㴁㴂㴃㴄㴅㴆㴇㴈㴉㴊㴋㴌㴍㴎㴏"
+ "㴐㴑㴒㴓㴔㴕㴖㴗㴘㴙㴚㴛㴜㴝㴞㴟㴠㴡㴢㴣㴤㴥㴦㴧㴨㴩㴪㴫㴬㴭㴮㴯㴰㴱㴲㴳㴴㴵㴶㴷㴸㴹㴺㴻㴼㴽㴾㴿㵀㵁㵂㵃㵄㵅㵆㵇㵈㵉㵊㵋㵌㵍㵎㵏㵐㵑㵒㵓㵔㵕㵖㵗㵘㵙㵚㵛㵜㵝㵞㵟㵠㵡㵢㵣㵤㵥㵦㵧㵨㵩㵪㵫㵬㵭㵮㵯㵰㵱㵲㵳㵴㵵㵶㵷㵸㵹㵺㵻㵼㵽㵾㵿㶀㶁㶂㶃㶄㶅㶆㶇㶈㶉㶊㶋㶌㶍㶎㶏㶐㶑㶒㶓㶔㶕㶖㶗㶘㶙㶚㶛㶜㶝㶞㶟㶠㶡㶢㶣㶤㶥㶦㶧㶨㶩㶪㶫㶬㶭㶮㶯㶰㶱㶲㶳㶴㶵㶶㶷㶸㶹㶺㶻㶼㶽㶾㶿㷀㷁㷂㷃㷄㷅㷆㷇㷈㷉㷊㷋㷌㷍㷎㷏㷐㷑㷒㷓㷔㷕㷖㷗㷘㷙㷚㷛㷜㷝㷞㷟㷠㷡㷢㷣㷤㷥㷦㷧㷨㷩㷪㷫㷬㷭㷮㷯㷰㷱㷲㷳㷴㷵㷶㷷㷸㷹㷺㷻㷼㷽㷾㷿㸀㸁㸂㸃㸄㸅㸆㸇㸈㸉㸊㸋㸌㸍㸎㸏㸐㸑㸒㸓㸔㸕㸖㸗㸘㸙㸚㸛㸜㸝㸞㸟㸠㸡㸢㸣㸤㸥㸦㸧㸨㸩㸪㸫㸬㸭㸮㸯㸰㸱㸲㸳㸴㸵㸶㸷㸸㸹㸺㸻㸼㸽㸾㸿㹀㹁㹂㹃㹄㹅㹆㹇㹈㹉㹊㹋㹌㹍㹎㹏㹐㹑㹒㹓㹔㹕㹖㹗㹘㹙㹚㹛㹜㹝㹞㹟㹠㹡㹢㹣㹤㹥㹦㹧㹨㹩㹪㹫㹬㹭㹮㹯㹰㹱㹲㹳㹴㹵㹶㹷㹸㹹㹺㹻㹼㹽㹾㹿㺀㺁㺂㺃㺄㺅㺆㺇㺈㺉㺊㺋㺌㺍㺎㺏㺐㺑㺒㺓㺔㺕㺖㺗㺘㺙㺚㺛㺜㺝㺞㺟㺠㺡㺢㺣㺤㺥㺦㺧㺨㺩㺪㺫㺬㺭㺮㺯㺰㺱㺲㺳㺴㺵㺶㺷㺸㺹㺺㺻㺼㺽㺾㺿㻀㻁㻂㻃㻄㻅㻆㻇㻈㻉㻊㻋㻌㻍㻎㻏㻐㻑㻒㻓㻔㻕㻖㻗㻘㻙㻚㻛㻜㻝㻞㻟㻠㻡㻢㻣㻤㻥㻦㻧㻨㻩㻪㻫㻬㻭㻮㻯㻰㻱㻲㻳㻴㻵㻶㻷㻸㻹㻺㻻㻼㻽㻾㻿㼀㼁㼂㼃㼄㼅㼆㼇㼈㼉㼊㼋㼌㼍㼎㼏"
+ "㼐㼑㼒㼓㼔㼕㼖㼗㼘㼙㼚㼛㼜㼝㼞㼟㼠㼡㼢㼣㼤㼥㼦㼧㼨㼩㼪㼫㼬㼭㼮㼯㼰㼱㼲㼳㼴㼵㼶㼷㼸㼹㼺㼻㼼㼽㼾㼿㽀㽁㽂㽃㽄㽅㽆㽇㽈㽉㽊㽋㽌㽍㽎㽏㽐㽑㽒㽓㽔㽕㽖㽗㽘㽙㽚㽛㽜㽝㽞㽟㽠㽡㽢㽣㽤㽥㽦㽧㽨㽩㽪㽫㽬㽭㽮㽯㽰㽱㽲㽳㽴㽵㽶㽷㽸㽹㽺㽻㽼㽽㽾㽿㾀㾁㾂㾃㾄㾅㾆㾇㾈㾉㾊㾋㾌㾍㾎㾏㾐㾑㾒㾓㾔㾕㾖㾗㾘㾙㾚㾛㾜㾝㾞㾟㾠㾡㾢㾣㾤㾥㾦㾧㾨㾩㾪㾫㾬㾭㾮㾯㾰㾱㾲㾳㾴㾵㾶㾷㾸㾹㾺㾻㾼㾽㾾㾿㿀㿁㿂㿃㿄㿅㿆㿇㿈㿉㿊㿋㿌㿍㿎㿏㿐㿑㿒㿓㿔㿕㿖㿗㿘㿙㿚㿛㿜㿝㿞㿟㿠㿡㿢㿣㿤㿥㿦㿧㿨㿩㿪㿫㿬㿭㿮㿯㿰㿱㿲㿳㿴㿵㿶㿷㿸㿹㿺㿻㿼㿽㿾㿿䀀䀁䀂䀃䀄䀅䀆䀇䀈䀉䀊䀋䀌䀍䀎䀏䀐䀑䀒䀓䀔䀕䀖䀗䀘䀙䀚䀛䀜䀝䀞䀟䀠䀡䀢䀣䀤䀥䀦䀧䀨䀩䀪䀫䀬䀭䀮䀯䀰䀱䀲䀳䀴䀵䀶䀷䀸䀹䀺䀻䀼䀽䀾䀿䁀䁁䁂䁃䁄䁅䁆䁇䁈䁉䁊䁋䁌䁍䁎䁏䁐䁑䁒䁓䁔䁕䁖䁗䁘䁙䁚䁛䁜䁝䁞䁟䁠䁡䁢䁣䁤䁥䁦䁧䁨䁩䁪䁫䁬䁭䁮䁯䁰䁱䁲䁳䁴䁵䁶䁷䁸䁹䁺䁻䁼䁽䁾䁿䂀䂁䂂䂃䂄䂅䂆䂇䂈䂉䂊䂋䂌䂍䂎䂏䂐䂑䂒䂓䂔䂕䂖䂗䂘䂙䂚䂛䂜䂝䂞䂟䂠䂡䂢䂣䂤䂥䂦䂧䂨䂩䂪䂫䂬䂭䂮䂯䂰䂱䂲䂳䂴䂵䂶䂷䂸䂹䂺䂻䂼䂽䂾䂿䃀䃁䃂䃃䃄䃅䃆䃇䃈䃉䃊䃋䃌䃍䃎䃏䃐䃑䃒䃓䃔䃕䃖䃗䃘䃙䃚䃛䃜䃝䃞䃟䃠䃡䃢䃣䃤䃥䃦䃧䃨䃩䃪䃫䃬䃭䃮䃯䃰䃱䃲䃳䃴䃵䃶䃷䃸䃹䃺䃻䃼䃽䃾䃿䄀䄁䄂䄃䄄䄅䄆䄇䄈䄉䄊䄋䄌䄍䄎䄏"
+ "䄐䄑䄒䄓䄔䄕䄖䄗䄘䄙䄚䄛䄜䄝䄞䄟䄠䄡䄢䄣䄤䄥䄦䄧䄨䄩䄪䄫䄬䄭䄮䄯䄰䄱䄲䄳䄴䄵䄶䄷䄸䄹䄺䄻䄼䄽䄾䄿䅀䅁䅂䅃䅄䅅䅆䅇䅈䅉䅊䅋䅌䅍䅎䅏䅐䅑䅒䅓䅔䅕䅖䅗䅘䅙䅚䅛䅜䅝䅞䅟䅠䅡䅢䅣䅤䅥䅦䅧䅨䅩䅪䅫䅬䅭䅮䅯䅰䅱䅲䅳䅴䅵䅶䅷䅸䅹䅺䅻䅼䅽䅾䅿䆀䆁䆂䆃䆄䆅䆆䆇䆈䆉䆊䆋䆌䆍䆎䆏䆐䆑䆒䆓䆔䆕䆖䆗䆘䆙䆚䆛䆜䆝䆞䆟䆠䆡䆢䆣䆤䆥䆦䆧䆨䆩䆪䆫䆬䆭䆮䆯䆰䆱䆲䆳䆴䆵䆶䆷䆸䆹䆺䆻䆼䆽䆾䆿䇀䇁䇂䇃䇄䇅䇆䇇䇈䇉䇊䇋䇌䇍䇎䇏䇐䇑䇒䇓䇔䇕䇖䇗䇘䇙䇚䇛䇜䇝䇞䇟䇠䇡䇢䇣䇤䇥䇦䇧䇨䇩䇪䇫䇬䇭䇮䇯䇰䇱䇲䇳䇴䇵䇶䇷䇸䇹䇺䇻䇼䇽䇾䇿䈀䈁䈂䈃䈄䈅䈆䈇䈈䈉䈊䈋䈌䈍䈎䈏䈐䈑䈒䈓䈔䈕䈖䈗䈘䈙䈚䈛䈜䈝䈞䈟䈠䈡䈢䈣䈤䈥䈦䈧䈨䈩䈪䈫䈬䈭䈮䈯䈰䈱䈲䈳䈴䈵䈶䈷䈸䈹䈺䈻䈼䈽䈾䈿䉀䉁䉂䉃䉄䉅䉆䉇䉈䉉䉊䉋䉌䉍䉎䉏䉐䉑䉒䉓䉔䉕䉖䉗䉘䉙䉚䉛䉜䉝䉞䉟䉠䉡䉢䉣䉤䉥䉦䉧䉨䉩䉪䉫䉬䉭䉮䉯䉰䉱䉲䉳䉴䉵䉶䉷䉸䉹䉺䉻䉼䉽䉾䉿䊀䊁䊂䊃䊄䊅䊆䊇䊈䊉䊊䊋䊌䊍䊎䊏䊐䊑䊒䊓䊔䊕䊖䊗䊘䊙䊚䊛䊜䊝䊞䊟䊠䊡䊢䊣䊤䊥䊦䊧䊨䊩䊪䊫䊬䊭䊮䊯䊰䊱䊲䊳䊴䊵䊶䊷䊸䊹䊺䊻䊼䊽䊾䊿䋀䋁䋂䋃䋄䋅䋆䋇䋈䋉䋊䋋䋌䋍䋎䋏䋐䋑䋒䋓䋔䋕䋖䋗䋘䋙䋚䋛䋜䋝䋞䋟䋠䋡䋢䋣䋤䋥䋦䋧䋨䋩䋪䋫䋬䋭䋮䋯䋰䋱䋲䋳䋴䋵䋶䋷䋸䋹䋺䋻䋼䋽䋾䋿䌀䌁䌂䌃䌄䌅䌆䌇䌈䌉䌊䌋䌌䌍䌎䌏"
+ "䌐䌑䌒䌓䌔䌕䌖䌗䌘䌙䌚䌛䌜䌝䌞䌟䌠䌡䌢䌣䌤䌥䌦䌧䌨䌩䌪䌫䌬䌭䌮䌯䌰䌱䌲䌳䌴䌵䌶䌷䌸䌹䌺䌻䌼䌽䌾䌿䍀䍁䍂䍃䍄䍅䍆䍇䍈䍉䍊䍋䍌䍍䍎䍏䍐䍑䍒䍓䍔䍕䍖䍗䍘䍙䍚䍛䍜䍝䍞䍟䍠䍡䍢䍣䍤䍥䍦䍧䍨䍩䍪䍫䍬䍭䍮䍯䍰䍱䍲䍳䍴䍵䍶䍷䍸䍹䍺䍻䍼䍽䍾䍿䎀䎁䎂䎃䎄䎅䎆䎇䎈䎉䎊䎋䎌䎍䎎䎏䎐䎑䎒䎓䎔䎕䎖䎗䎘䎙䎚䎛䎜䎝䎞䎟䎠䎡䎢䎣䎤䎥䎦䎧䎨䎩䎪䎫䎬䎭䎮䎯䎰䎱䎲䎳䎴䎵䎶䎷䎸䎹䎺䎻䎼䎽䎾䎿䏀䏁䏂䏃䏄䏅䏆䏇䏈䏉䏊䏋䏌䏍䏎䏏䏐䏑䏒䏓䏔䏕䏖䏗䏘䏙䏚䏛䏜䏝䏞䏟䏠䏡䏢䏣䏤䏥䏦䏧䏨䏩䏪䏫䏬䏭䏮䏯䏰䏱䏲䏳䏴䏵䏶䏷䏸䏹䏺䏻䏼䏽䏾䏿䐀䐁䐂䐃䐄䐅䐆䐇䐈䐉䐊䐋䐌䐍䐎䐏䐐䐑䐒䐓䐔䐕䐖䐗䐘䐙䐚䐛䐜䐝䐞䐟䐠䐡䐢䐣䐤䐥䐦䐧䐨䐩䐪䐫䐬䐭䐮䐯䐰䐱䐲䐳䐴䐵䐶䐷䐸䐹䐺䐻䐼䐽䐾䐿䑀䑁䑂䑃䑄䑅䑆䑇䑈䑉䑊䑋䑌䑍䑎䑏䑐䑑䑒䑓䑔䑕䑖䑗䑘䑙䑚䑛䑜䑝䑞䑟䑠䑡䑢䑣䑤䑥䑦䑧䑨䑩䑪䑫䑬䑭䑮䑯䑰䑱䑲䑳䑴䑵䑶䑷䑸䑹䑺䑻䑼䑽䑾䑿䒀䒁䒂䒃䒄䒅䒆䒇䒈䒉䒊䒋䒌䒍䒎䒏䒐䒑䒒䒓䒔䒕䒖䒗䒘䒙䒚䒛䒜䒝䒞䒟䒠䒡䒢䒣䒤䒥䒦䒧䒨䒩䒪䒫䒬䒭䒮䒯䒰䒱䒲䒳䒴䒵䒶䒷䒸䒹䒺䒻䒼䒽䒾䒿䓀䓁䓂䓃䓄䓅䓆䓇䓈䓉䓊䓋䓌䓍䓎䓏䓐䓑䓒䓓䓔䓕䓖䓗䓘䓙䓚䓛䓜䓝䓞䓟䓠䓡䓢䓣䓤䓥䓦䓧䓨䓩䓪䓫䓬䓭䓮䓯䓰䓱䓲䓳䓴䓵䓶䓷䓸䓹䓺䓻䓼䓽䓾䓿䔀䔁䔂䔃䔄䔅䔆䔇䔈䔉䔊䔋䔌䔍䔎䔏"
+ "䔐䔑䔒䔓䔔䔕䔖䔗䔘䔙䔚䔛䔜䔝䔞䔟䔠䔡䔢䔣䔤䔥䔦䔧䔨䔩䔪䔫䔬䔭䔮䔯䔰䔱䔲䔳䔴䔵䔶䔷䔸䔹䔺䔻䔼䔽䔾䔿䕀䕁䕂䕃䕄䕅䕆䕇䕈䕉䕊䕋䕌䕍䕎䕏䕐䕑䕒䕓䕔䕕䕖䕗䕘䕙䕚䕛䕜䕝䕞䕟䕠䕡䕢䕣䕤䕥䕦䕧䕨䕩䕪䕫䕬䕭䕮䕯䕰䕱䕲䕳䕴䕵䕶䕷䕸䕹䕺䕻䕼䕽䕾䕿䖀䖁䖂䖃䖄䖅䖆䖇䖈䖉䖊䖋䖌䖍䖎䖏䖐䖑䖒䖓䖔䖕䖖䖗䖘䖙䖚䖛䖜䖝䖞䖟䖠䖡䖢䖣䖤䖥䖦䖧䖨䖩䖪䖫䖬䖭䖮䖯䖰䖱䖲䖳䖴䖵䖶䖷䖸䖹䖺䖻䖼䖽䖾䖿䗀䗁䗂䗃䗄䗅䗆䗇䗈䗉䗊䗋䗌䗍䗎䗏䗐䗑䗒䗓䗔䗕䗖䗗䗘䗙䗚䗛䗜䗝䗞䗟䗠䗡䗢䗣䗤䗥䗦䗧䗨䗩䗪䗫䗬䗭䗮䗯䗰䗱䗲䗳䗴䗵䗶䗷䗸䗹䗺䗻䗼䗽䗾䗿䘀䘁䘂䘃䘄䘅䘆䘇䘈䘉䘊䘋䘌䘍䘎䘏䘐䘑䘒䘓䘔䘕䘖䘗䘘䘙䘚䘛䘜䘝䘞䘟䘠䘡䘢䘣䘤䘥䘦䘧䘨䘩䘪䘫䘬䘭䘮䘯䘰䘱䘲䘳䘴䘵䘶䘷䘸䘹䘺䘻䘼䘽䘾䘿䙀䙁䙂䙃䙄䙅䙆䙇䙈䙉䙊䙋䙌䙍䙎䙏䙐䙑䙒䙓䙔䙕䙖䙗䙘䙙䙚䙛䙜䙝䙞䙟䙠䙡䙢䙣䙤䙥䙦䙧䙨䙩䙪䙫䙬䙭䙮䙯䙰䙱䙲䙳䙴䙵䙶䙷䙸䙹䙺䙻䙼䙽䙾䙿䚀䚁䚂䚃䚄䚅䚆䚇䚈䚉䚊䚋䚌䚍䚎䚏䚐䚑䚒䚓䚔䚕䚖䚗䚘䚙䚚䚛䚜䚝䚞䚟䚠䚡䚢䚣䚤䚥䚦䚧䚨䚩䚪䚫䚬䚭䚮䚯䚰䚱䚲䚳䚴䚵䚶䚷䚸䚹䚺䚻䚼䚽䚾䚿䛀䛁䛂䛃䛄䛅䛆䛇䛈䛉䛊䛋䛌䛍䛎䛏䛐䛑䛒䛓䛔䛕䛖䛗䛘䛙䛚䛛䛜䛝䛞䛟䛠䛡䛢䛣䛤䛥䛦䛧䛨䛩䛪䛫䛬䛭䛮䛯䛰䛱䛲䛳䛴䛵䛶䛷䛸䛹䛺䛻䛼䛽䛾䛿䜀䜁䜂䜃䜄䜅䜆䜇䜈䜉䜊䜋䜌䜍䜎䜏"
+ "䜐䜑䜒䜓䜔䜕䜖䜗䜘䜙䜚䜛䜜䜝䜞䜟䜠䜡䜢䜣䜤䜥䜦䜧䜨䜩䜪䜫䜬䜭䜮䜯䜰䜱䜲䜳䜴䜵䜶䜷䜸䜹䜺䜻䜼䜽䜾䜿䝀䝁䝂䝃䝄䝅䝆䝇䝈䝉䝊䝋䝌䝍䝎䝏䝐䝑䝒䝓䝔䝕䝖䝗䝘䝙䝚䝛䝜䝝䝞䝟䝠䝡䝢䝣䝤䝥䝦䝧䝨䝩䝪䝫䝬䝭䝮䝯䝰䝱䝲䝳䝴䝵䝶䝷䝸䝹䝺䝻䝼䝽䝾䝿䞀䞁䞂䞃䞄䞅䞆䞇䞈䞉䞊䞋䞌䞍䞎䞏䞐䞑䞒䞓䞔䞕䞖䞗䞘䞙䞚䞛䞜䞝䞞䞟䞠䞡䞢䞣䞤䞥䞦䞧䞨䞩䞪䞫䞬䞭䞮䞯䞰䞱䞲䞳䞴䞵䞶䞷䞸䞹䞺䞻䞼䞽䞾䞿䟀䟁䟂䟃䟄䟅䟆䟇䟈䟉䟊䟋䟌䟍䟎䟏䟐䟑䟒䟓䟔䟕䟖䟗䟘䟙䟚䟛䟜䟝䟞䟟䟠䟡䟢䟣䟤䟥䟦䟧䟨䟩䟪䟫䟬䟭䟮䟯䟰䟱䟲䟳䟴䟵䟶䟷䟸䟹䟺䟻䟼䟽䟾䟿䠀䠁䠂䠃䠄䠅䠆䠇䠈䠉䠊䠋䠌䠍䠎䠏䠐䠑䠒䠓䠔䠕䠖䠗䠘䠙䠚䠛䠜䠝䠞䠟䠠䠡䠢䠣䠤䠥䠦䠧䠨䠩䠪䠫䠬䠭䠮䠯䠰䠱䠲䠳䠴䠵䠶䠷䠸䠹䠺䠻䠼䠽䠾䠿䡀䡁䡂䡃䡄䡅䡆䡇䡈䡉䡊䡋䡌䡍䡎䡏䡐䡑䡒䡓䡔䡕䡖䡗䡘䡙䡚䡛䡜䡝䡞䡟䡠䡡䡢䡣䡤䡥䡦䡧䡨䡩䡪䡫䡬䡭䡮䡯䡰䡱䡲䡳䡴䡵䡶䡷䡸䡹䡺䡻䡼䡽䡾䡿䢀䢁䢂䢃䢄䢅䢆䢇䢈䢉䢊䢋䢌䢍䢎䢏䢐䢑䢒䢓䢔䢕䢖䢗䢘䢙䢚䢛䢜䢝䢞䢟䢠䢡䢢䢣䢤䢥䢦䢧䢨䢩䢪䢫䢬䢭䢮䢯䢰䢱䢲䢳䢴䢵䢶䢷䢸䢹䢺䢻䢼䢽䢾䢿䣀䣁䣂䣃䣄䣅䣆䣇䣈䣉䣊䣋䣌䣍䣎䣏䣐䣑䣒䣓䣔䣕䣖䣗䣘䣙䣚䣛䣜䣝䣞䣟䣠䣡䣢䣣䣤䣥䣦䣧䣨䣩䣪䣫䣬䣭䣮䣯䣰䣱䣲䣳䣴䣵䣶䣷䣸䣹䣺䣻䣼䣽䣾䣿䤀䤁䤂䤃䤄䤅䤆䤇䤈䤉䤊䤋䤌䤍䤎䤏"
+ "䤐䤑䤒䤓䤔䤕䤖䤗䤘䤙䤚䤛䤜䤝䤞䤟䤠䤡䤢䤣䤤䤥䤦䤧䤨䤩䤪䤫䤬䤭䤮䤯䤰䤱䤲䤳䤴䤵䤶䤷䤸䤹䤺䤻䤼䤽䤾䤿䥀䥁䥂䥃䥄䥅䥆䥇䥈䥉䥊䥋䥌䥍䥎䥏䥐䥑䥒䥓䥔䥕䥖䥗䥘䥙䥚䥛䥜䥝䥞䥟䥠䥡䥢䥣䥤䥥䥦䥧䥨䥩䥪䥫䥬䥭䥮䥯䥰䥱䥲䥳䥴䥵䥶䥷䥸䥹䥺䥻䥼䥽䥾䥿䦀䦁䦂䦃䦄䦅䦆䦇䦈䦉䦊䦋䦌䦍䦎䦏䦐䦑䦒䦓䦔䦕䦖䦗䦘䦙䦚䦛䦜䦝䦞䦟䦠䦡䦢䦣䦤䦥䦦䦧䦨䦩䦪䦫䦬䦭䦮䦯䦰䦱䦲䦳䦴䦵䦶䦷䦸䦹䦺䦻䦼䦽䦾䦿䧀䧁䧂䧃䧄䧅䧆䧇䧈䧉䧊䧋䧌䧍䧎䧏䧐䧑䧒䧓䧔䧕䧖䧗䧘䧙䧚䧛䧜䧝䧞䧟䧠䧡䧢䧣䧤䧥䧦䧧䧨䧩䧪䧫䧬䧭䧮䧯䧰䧱䧲䧳䧴䧵䧶䧷䧸䧹䧺䧻䧼䧽䧾䧿䨀䨁䨂䨃䨄䨅䨆䨇䨈䨉䨊䨋䨌䨍䨎䨏䨐䨑䨒䨓䨔䨕䨖䨗䨘䨙䨚䨛䨜䨝䨞䨟䨠䨡䨢䨣䨤䨥䨦䨧䨨䨩䨪䨫䨬䨭䨮䨯䨰䨱䨲䨳䨴䨵䨶䨷䨸䨹䨺䨻䨼䨽䨾䨿䩀䩁䩂䩃䩄䩅䩆䩇䩈䩉䩊䩋䩌䩍䩎䩏䩐䩑䩒䩓䩔䩕䩖䩗䩘䩙䩚䩛䩜䩝䩞䩟䩠䩡䩢䩣䩤䩥䩦䩧䩨䩩䩪䩫䩬䩭䩮䩯䩰䩱䩲䩳䩴䩵䩶䩷䩸䩹䩺䩻䩼䩽䩾䩿䪀䪁䪂䪃䪄䪅䪆䪇䪈䪉䪊䪋䪌䪍䪎䪏䪐䪑䪒䪓䪔䪕䪖䪗䪘䪙䪚䪛䪜䪝䪞䪟䪠䪡䪢䪣䪤䪥䪦䪧䪨䪩䪪䪫䪬䪭䪮䪯䪰䪱䪲䪳䪴䪵䪶䪷䪸䪹䪺䪻䪼䪽䪾䪿䫀䫁䫂䫃䫄䫅䫆䫇䫈䫉䫊䫋䫌䫍䫎䫏䫐䫑䫒䫓䫔䫕䫖䫗䫘䫙䫚䫛䫜䫝䫞䫟䫠䫡䫢䫣䫤䫥䫦䫧䫨䫩䫪䫫䫬䫭䫮䫯䫰䫱䫲䫳䫴䫵䫶䫷䫸䫹䫺䫻䫼䫽䫾䫿䬀䬁䬂䬃䬄䬅䬆䬇䬈䬉䬊䬋䬌䬍䬎䬏"
+ "䬐䬑䬒䬓䬔䬕䬖䬗䬘䬙䬚䬛䬜䬝䬞䬟䬠䬡䬢䬣䬤䬥䬦䬧䬨䬩䬪䬫䬬䬭䬮䬯䬰䬱䬲䬳䬴䬵䬶䬷䬸䬹䬺䬻䬼䬽䬾䬿䭀䭁䭂䭃䭄䭅䭆䭇䭈䭉䭊䭋䭌䭍䭎䭏䭐䭑䭒䭓䭔䭕䭖䭗䭘䭙䭚䭛䭜䭝䭞䭟䭠䭡䭢䭣䭤䭥䭦䭧䭨䭩䭪䭫䭬䭭䭮䭯䭰䭱䭲䭳䭴䭵䭶䭷䭸䭹䭺䭻䭼䭽䭾䭿䮀䮁䮂䮃䮄䮅䮆䮇䮈䮉䮊䮋䮌䮍䮎䮏䮐䮑䮒䮓䮔䮕䮖䮗䮘䮙䮚䮛䮜䮝䮞䮟䮠䮡䮢䮣䮤䮥䮦䮧䮨䮩䮪䮫䮬䮭䮮䮯䮰䮱䮲䮳䮴䮵䮶䮷䮸䮹䮺䮻䮼䮽䮾䮿䯀䯁䯂䯃䯄䯅䯆䯇䯈䯉䯊䯋䯌䯍䯎䯏䯐䯑䯒䯓䯔䯕䯖䯗䯘䯙䯚䯛䯜䯝䯞䯟䯠䯡䯢䯣䯤䯥䯦䯧䯨䯩䯪䯫䯬䯭䯮䯯䯰䯱䯲䯳䯴䯵䯶䯷䯸䯹䯺䯻䯼䯽䯾䯿䰀䰁䰂䰃䰄䰅䰆䰇䰈䰉䰊䰋䰌䰍䰎䰏䰐䰑䰒䰓䰔䰕䰖䰗䰘䰙䰚䰛䰜䰝䰞䰟䰠䰡䰢䰣䰤䰥䰦䰧䰨䰩䰪䰫䰬䰭䰮䰯䰰䰱䰲䰳䰴䰵䰶䰷䰸䰹䰺䰻䰼䰽䰾䰿䱀䱁䱂䱃䱄䱅䱆䱇䱈䱉䱊䱋䱌䱍䱎䱏䱐䱑䱒䱓䱔䱕䱖䱗䱘䱙䱚䱛䱜䱝䱞䱟䱠䱡䱢䱣䱤䱥䱦䱧䱨䱩䱪䱫䱬䱭䱮䱯䱰䱱䱲䱳䱴䱵䱶䱷䱸䱹䱺䱻䱼䱽䱾䱿䲀䲁䲂䲃䲄䲅䲆䲇䲈䲉䲊䲋䲌䲍䲎䲏䲐䲑䲒䲓䲔䲕䲖䲗䲘䲙䲚䲛䲜䲝䲞䲟䲠䲡䲢䲣䲤䲥䲦䲧䲨䲩䲪䲫䲬䲭䲮䲯䲰䲱䲲䲳䲴䲵䲶䲷䲸䲹䲺䲻䲼䲽䲾䲿䳀䳁䳂䳃䳄䳅䳆䳇䳈䳉䳊䳋䳌䳍䳎䳏䳐䳑䳒䳓䳔䳕䳖䳗䳘䳙䳚䳛䳜䳝䳞䳟䳠䳡䳢䳣䳤䳥䳦䳧䳨䳩䳪䳫䳬䳭䳮䳯䳰䳱䳲䳳䳴䳵䳶䳷䳸䳹䳺䳻䳼䳽䳾䳿䴀䴁䴂䴃䴄䴅䴆䴇䴈䴉䴊䴋䴌䴍䴎䴏"
+ "䴐䴑䴒䴓䴔䴕䴖䴗䴘䴙䴚䴛䴜䴝䴞䴟䴠䴡䴢䴣䴤䴥䴦䴧䴨䴩䴪䴫䴬䴭䴮䴯䴰䴱䴲䴳䴴䴵䴶䴷䴸䴹䴺䴻䴼䴽䴾䴿䵀䵁䵂䵃䵄䵅䵆䵇䵈䵉䵊䵋䵌䵍䵎䵏䵐䵑䵒䵓䵔䵕䵖䵗䵘䵙䵚䵛䵜䵝䵞䵟䵠䵡䵢䵣䵤䵥䵦䵧䵨䵩䵪䵫䵬䵭䵮䵯䵰䵱䵲䵳䵴䵵䵶䵷䵸䵹䵺䵻䵼䵽䵾䵿䶀䶁䶂䶃䶄䶅䶆䶇䶈䶉䶊䶋䶌䶍䶎䶏䶐䶑䶒䶓䶔䶕䶖䶗䶘䶙䶚䶛䶜䶝䶞䶟䶠䶡䶢䶣䶤䶥䶦䶧䶨䶩䶪䶫䶬䶭䶮䶯䶰䶱䶲䶳䶴䶵䶶䶷䶸䶹䶺䶻䶼䶽䶾䶿䷀䷁䷂䷃䷄䷅䷆䷇䷈䷉䷊䷋䷌䷍䷎䷏䷐䷑䷒䷓䷔䷕䷖䷗䷘䷙䷚䷛䷜䷝䷞䷟䷠䷡䷢䷣䷤䷥䷦䷧䷨䷩䷪䷫䷬䷭䷮䷯䷰䷱䷲䷳䷴䷵䷶䷷䷸䷹䷺䷻䷼䷽䷾䷿一丁丂七丄丅丆万丈三上下丌不与丏丐丑丒专且丕世丗丘丙业丛东丝丞丟", "鱀鱁鱂鱃鱄鱅鱆鱇鱈鱉鱊鱋鱌鱍鱎鱏鱐鱑鱒鱓鱔鱕鱖鱗鱘鱙鱚鱛鱜鱝鱞鱟鱠鱡鱢鱣鱤鱥鱦鱧鱨鱩鱪鱫鱬鱭鱮鱯鱰鱱鱲鱳鱴鱵鱶鱷鱸鱹鱺鱻鱼鱽鱾鱿鲀鲁鲂鲃鲄鲅鲆鲇鲈鲉鲊鲋鲌鲍鲎鲏鲐鲑鲒鲓鲔鲕鲖鲗鲘鲙鲚鲛鲜鲝鲞鲟鲠鲡鲢鲣鲤鲥鲦鲧鲨鲩鲪鲫鲬鲭鲮鲯鲰鲱鲲鲳鲴鲵鲶鲷鲸鲹鲺鲻鲼鲽鲾鲿鳀鳁鳂鳃鳄鳅鳆鳇鳈鳉鳊鳋鳌鳍鳎鳏鳐鳑鳒鳓鳔鳕鳖鳗鳘鳙鳚鳛鳜鳝鳞鳟鳠鳡鳢鳣鳤鳥鳦鳧鳨鳩鳪鳫鳬鳭鳮鳯鳰鳱鳲鳳鳴鳵鳶鳷鳸鳹鳺鳻鳼鳽鳾鳿鴀鴁鴂鴃鴄鴅鴆鴇鴈鴉鴊鴋鴌鴍鴎鴏鴐鴑鴒鴓鴔鴕鴖鴗鴘鴙鴚鴛鴜鴝鴞鴟鴠鴡鴢鴣鴤鴥鴦鴧鴨鴩鴪鴫鴬鴭鴮鴯鴰鴱鴲鴳鴴鴵鴶鴷鴸鴹鴺鴻鴼鴽鴾鴿鵀鵁鵂鵃鵄鵅鵆鵇鵈鵉鵊鵋鵌鵍鵎鵏鵐鵑鵒鵓鵔鵕鵖鵗鵘鵙鵚鵛鵜鵝鵞鵟鵠鵡鵢鵣鵤鵥鵦鵧鵨鵩鵪鵫鵬鵭鵮鵯鵰鵱鵲鵳鵴鵵鵶鵷鵸鵹鵺鵻鵼鵽鵾鵿鶀鶁鶂鶃鶄鶅鶆鶇鶈鶉鶊鶋鶌鶍鶎鶏鶐鶑鶒鶓鶔鶕鶖鶗鶘鶙鶚鶛鶜鶝鶞鶟鶠鶡鶢鶣鶤鶥鶦鶧鶨鶩鶪鶫鶬鶭鶮鶯鶰鶱鶲鶳鶴鶵鶶鶷鶸鶹鶺鶻鶼鶽鶾鶿鷀鷁鷂鷃鷄鷅鷆鷇鷈鷉鷊鷋鷌鷍鷎鷏鷐鷑鷒鷓鷔鷕鷖鷗鷘鷙鷚鷛鷜鷝鷞鷟鷠鷡鷢鷣鷤鷥鷦鷧鷨鷩鷪鷫鷬鷭鷮鷯鷰鷱鷲鷳鷴鷵鷶鷷鷸鷹鷺鷻鷼鷽鷾鷿鸀鸁鸂鸃鸄鸅鸆鸇鸈鸉鸊鸋鸌鸍鸎鸏鸐鸑鸒鸓鸔鸕鸖鸗鸘鸙鸚鸛鸜鸝鸞鸟鸠鸡鸢鸣鸤鸥鸦鸧鸨鸩鸪鸫鸬鸭鸮鸯鸰鸱鸲鸳鸴鸵鸶鸷鸸鸹鸺鸻鸼鸽鸾鸿"
+ "鹀鹁鹂鹃鹄鹅鹆鹇鹈鹉鹊鹋鹌鹍鹎鹏鹐鹑鹒鹓鹔鹕鹖鹗鹘鹙鹚鹛鹜鹝鹞鹟鹠鹡鹢鹣鹤鹥鹦鹧鹨鹩鹪鹫鹬鹭鹮鹯鹰鹱鹲鹳鹴鹵鹶鹷鹸鹹鹺鹻鹼鹽鹾鹿麀麁麂麃麄麅麆麇麈麉麊麋麌麍麎麏麐麑麒麓麔麕麖麗麘麙麚麛麜麝麞麟麠麡麢麣麤麥麦麧麨麩麪麫麬麭麮麯麰麱麲麳麴麵麶麷麸麹麺麻麼麽麾麿黀黁黂黃黄黅黆黇黈黉黊黋黌黍黎黏黐黑黒黓黔黕黖黗默黙黚黛黜黝點黟黠黡黢黣黤黥黦黧黨黩黪黫黬黭黮黯黰黱黲黳黴黵黶黷黸黹黺黻黼黽黾黿鼀鼁鼂鼃鼄鼅鼆鼇鼈鼉鼊鼋鼌鼍鼎鼏鼐鼑鼒鼓鼔鼕鼖鼗鼘鼙鼚鼛鼜鼝鼞鼟鼠鼡鼢鼣鼤鼥鼦鼧鼨鼩鼪鼫鼬鼭鼮鼯鼰鼱鼲鼳鼴鼵鼶鼷鼸鼹鼺鼻鼼鼽鼾鼿齀齁齂齃齄齅齆齇齈齉齊齋齌齍齎齏齐齑齒齓齔齕齖齗齘齙齚齛齜齝齞齟齠齡齢齣齤齥齦齧齨齩齪齫齬齭齮齯齰齱齲齳齴齵齶齷齸齹齺齻齼齽齾齿龀龁龂龃龄龅龆龇龈龉龊龋龌龍龎龏龐龑龒龓龔龕龖龗龘龙龚龛龜龝龞龟龠龡龢龣龤龥龦龧龨龩龪龫龬龭龮龯龰龱龲龳龴龵龶龷龸龹龺龻龼龽龾龿鿀鿁鿂鿃鿄鿅鿆鿇鿈鿉鿊鿋鿌鿍鿎鿏鿐鿑鿒鿓鿔鿕鿖鿗鿘鿙鿚鿛鿜鿝鿞鿟鿠鿡鿢鿣鿤鿥鿦鿧鿨鿩鿪鿫鿬鿭鿮鿯鿰鿱鿲鿳鿴鿵鿶鿷鿸鿹鿺鿻鿼鿽鿾鿿ꀀꀁꀂꀃꀄꀅꀆꀇꀈꀉꀊꀋꀌꀍꀎꀏꀐꀑꀒꀓꀔꀕꀖꀗꀘꀙꀚꀛꀜꀝꀞꀟꀠꀡꀢꀣꀤꀥꀦꀧꀨꀩꀪꀫꀬꀭꀮꀯꀰꀱꀲꀳꀴꀵꀶꀷꀸꀹꀺꀻꀼꀽꀾꀿ"
+ "ꁀꁁꁂꁃꁄꁅꁆꁇꁈꁉꁊꁋꁌꁍꁎꁏꁐꁑꁒꁓꁔꁕꁖꁗꁘꁙꁚꁛꁜꁝꁞꁟꁠꁡꁢꁣꁤꁥꁦꁧꁨꁩꁪꁫꁬꁭꁮꁯꁰꁱꁲꁳꁴꁵꁶꁷꁸꁹꁺꁻꁼꁽꁾꁿꂀꂁꂂꂃꂄꂅꂆꂇꂈꂉꂊꂋꂌꂍꂎꂏꂐꂑꂒꂓꂔꂕꂖꂗꂘꂙꂚꂛꂜꂝꂞꂟꂠꂡꂢꂣꂤꂥꂦꂧꂨꂩꂪꂫꂬꂭꂮꂯꂰꂱꂲꂳꂴꂵꂶꂷꂸꂹꂺꂻꂼꂽꂾꂿꃀꃁꃂꃃꃄꃅꃆꃇꃈꃉꃊꃋꃌꃍꃎꃏꃐꃑꃒꃓꃔꃕꃖꃗꃘꃙꃚꃛꃜꃝꃞꃟꃠꃡꃢꃣꃤꃥꃦꃧꃨꃩꃪꃫꃬꃭꃮꃯꃰꃱꃲꃳꃴꃵꃶꃷꃸꃹꃺꃻꃼꃽꃾꃿꄀꄁꄂꄃꄄꄅꄆꄇꄈꄉꄊꄋꄌꄍꄎꄏꄐꄑꄒꄓꄔꄕꄖꄗꄘꄙꄚꄛꄜꄝꄞꄟꄠꄡꄢꄣꄤꄥꄦꄧꄨꄩꄪꄫꄬꄭꄮꄯꄰꄱꄲꄳꄴꄵꄶꄷꄸꄹꄺꄻꄼꄽꄾꄿꅀꅁꅂꅃꅄꅅꅆꅇꅈꅉꅊꅋꅌꅍꅎꅏꅐꅑꅒꅓꅔꅕꅖꅗꅘꅙꅚꅛꅜꅝꅞꅟꅠꅡꅢꅣꅤꅥꅦꅧꅨꅩꅪꅫꅬꅭꅮꅯꅰꅱꅲꅳꅴꅵꅶꅷꅸꅹꅺꅻꅼꅽꅾꅿꆀꆁꆂꆃꆄꆅꆆꆇꆈꆉꆊꆋꆌꆍꆎꆏꆐꆑꆒꆓꆔꆕꆖꆗꆘꆙꆚꆛꆜꆝꆞꆟꆠꆡꆢꆣꆤꆥꆦꆧꆨꆩꆪꆫꆬꆭꆮꆯꆰꆱꆲꆳꆴꆵꆶꆷꆸꆹꆺꆻꆼꆽꆾꆿꇀꇁꇂꇃꇄꇅꇆꇇꇈꇉꇊꇋꇌꇍꇎꇏꇐꇑꇒꇓꇔꇕꇖꇗꇘꇙꇚꇛꇜꇝꇞꇟꇠꇡꇢꇣꇤꇥꇦꇧꇨꇩꇪꇫꇬꇭꇮꇯꇰꇱꇲꇳꇴꇵꇶꇷꇸꇹꇺꇻꇼꇽꇾꇿꈀꈁꈂꈃꈄꈅꈆꈇꈈꈉꈊꈋꈌꈍꈎꈏꈐꈑꈒꈓꈔꈕꈖꈗꈘꈙꈚꈛꈜꈝꈞꈟꈠꈡꈢꈣꈤꈥꈦꈧꈨꈩꈪꈫꈬꈭꈮꈯꈰꈱꈲꈳꈴꈵꈶꈷꈸꈹꈺꈻꈼꈽꈾꈿ"
+ "ꉀꉁꉂꉃꉄꉅꉆꉇꉈꉉꉊꉋꉌꉍꉎꉏꉐꉑꉒꉓꉔꉕꉖꉗꉘꉙꉚꉛꉜꉝꉞꉟꉠꉡꉢꉣꉤꉥꉦꉧꉨꉩꉪꉫꉬꉭꉮꉯꉰꉱꉲꉳꉴꉵꉶꉷꉸꉹꉺꉻꉼꉽꉾꉿꊀꊁꊂꊃꊄꊅꊆꊇꊈꊉꊊꊋꊌꊍꊎꊏꊐꊑꊒꊓꊔꊕꊖꊗꊘꊙꊚꊛꊜꊝꊞꊟꊠꊡꊢꊣꊤꊥꊦꊧꊨꊩꊪꊫꊬꊭꊮꊯꊰꊱꊲꊳꊴꊵꊶꊷꊸꊹꊺꊻꊼꊽꊾꊿꋀꋁꋂꋃꋄꋅꋆꋇꋈꋉꋊꋋꋌꋍꋎꋏꋐꋑꋒꋓꋔꋕꋖꋗꋘꋙꋚꋛꋜꋝꋞꋟꋠꋡꋢꋣꋤꋥꋦꋧꋨꋩꋪꋫꋬꋭꋮꋯꋰꋱꋲꋳꋴꋵꋶꋷꋸꋹꋺꋻꋼꋽꋾꋿꌀꌁꌂꌃꌄꌅꌆꌇꌈꌉꌊꌋꌌꌍꌎꌏꌐꌑꌒꌓꌔꌕꌖꌗꌘꌙꌚꌛꌜꌝꌞꌟꌠꌡꌢꌣꌤꌥꌦꌧꌨꌩꌪꌫꌬꌭꌮꌯꌰꌱꌲꌳꌴꌵꌶꌷꌸꌹꌺꌻꌼꌽꌾꌿꍀꍁꍂꍃꍄꍅꍆꍇꍈꍉꍊꍋꍌꍍꍎꍏꍐꍑꍒꍓꍔꍕꍖꍗꍘꍙꍚꍛꍜꍝꍞꍟꍠꍡꍢꍣꍤꍥꍦꍧꍨꍩꍪꍫꍬꍭꍮꍯꍰꍱꍲꍳꍴꍵꍶꍷꍸꍹꍺꍻꍼꍽꍾꍿꎀꎁꎂꎃꎄꎅꎆꎇꎈꎉꎊꎋꎌꎍꎎꎏꎐꎑꎒꎓꎔꎕꎖꎗꎘꎙꎚꎛꎜꎝꎞꎟꎠꎡꎢꎣꎤꎥꎦꎧꎨꎩꎪꎫꎬꎭꎮꎯꎰꎱꎲꎳꎴꎵꎶꎷꎸꎹꎺꎻꎼꎽꎾꎿꏀꏁꏂꏃꏄꏅꏆꏇꏈꏉꏊꏋꏌꏍꏎꏏꏐꏑꏒꏓꏔꏕꏖꏗꏘꏙꏚꏛꏜꏝꏞꏟꏠꏡꏢꏣꏤꏥꏦꏧꏨꏩꏪꏫꏬꏭꏮꏯꏰꏱꏲꏳꏴꏵꏶꏷꏸꏹꏺꏻꏼꏽꏾꏿꐀꐁꐂꐃꐄꐅꐆꐇꐈꐉꐊꐋꐌꐍꐎꐏꐐꐑꐒꐓꐔꐕꐖꐗꐘꐙꐚꐛꐜꐝꐞꐟꐠꐡꐢꐣꐤꐥꐦꐧꐨꐩꐪꐫꐬꐭꐮꐯꐰꐱꐲꐳꐴꐵꐶꐷꐸꐹꐺꐻꐼꐽꐾꐿ"
+ "ꑀꑁꑂꑃꑄꑅꑆꑇꑈꑉꑊꑋꑌꑍꑎꑏꑐꑑꑒꑓꑔꑕꑖꑗꑘꑙꑚꑛꑜꑝꑞꑟꑠꑡꑢꑣꑤꑥꑦꑧꑨꑩꑪꑫꑬꑭꑮꑯꑰꑱꑲꑳꑴꑵꑶꑷꑸꑹꑺꑻꑼꑽꑾꑿꒀꒁꒂꒃꒄꒅꒆꒇꒈꒉꒊꒋꒌ\ua48d\ua48e\ua48f꒐꒑꒒꒓꒔꒕꒖꒗꒘꒙꒚꒛꒜꒝꒞꒟꒠꒡꒢꒣꒤꒥꒦꒧꒨꒩꒪꒫꒬꒭꒮꒯꒰꒱꒲꒳꒴꒵꒶꒷꒸꒹꒺꒻꒼꒽꒾꒿꓀꓁꓂꓃꓄꓅꓆\ua4c7\ua4c8\ua4c9\ua4ca\ua4cb\ua4cc\ua4cd\ua4ce\ua4cfꓐꓑꓒꓓꓔꓕꓖꓗꓘꓙꓚꓛꓜꓝꓞꓟꓠꓡꓢꓣꓤꓥꓦꓧꓨꓩꓪꓫꓬꓭꓮꓯꓰꓱꓲꓳꓴꓵꓶꓷꓸꓹꓺꓻꓼꓽ꓾꓿ꔀꔁꔂꔃꔄꔅꔆꔇꔈꔉꔊꔋꔌꔍꔎꔏꔐꔑꔒꔓꔔꔕꔖꔗꔘꔙꔚꔛꔜꔝꔞꔟꔠꔡꔢꔣꔤꔥꔦꔧꔨꔩꔪꔫꔬꔭꔮꔯꔰꔱꔲꔳꔴꔵꔶꔷꔸꔹꔺꔻꔼꔽꔾꔿꕀꕁꕂꕃꕄꕅꕆꕇꕈꕉꕊꕋꕌꕍꕎꕏꕐꕑꕒꕓꕔꕕꕖꕗꕘꕙꕚꕛꕜꕝꕞꕟꕠꕡꕢꕣꕤꕥꕦꕧꕨꕩꕪꕫꕬꕭꕮꕯꕰꕱꕲꕳꕴꕵꕶꕷꕸꕹꕺꕻꕼꕽꕾꕿꖀꖁꖂꖃꖄꖅꖆꖇꖈꖉꖊꖋꖌꖍꖎꖏꖐꖑꖒꖓꖔꖕꖖꖗꖘꖙꖚꖛꖜꖝꖞꖟꖠꖡꖢꖣꖤꖥꖦꖧꖨꖩꖪꖫꖬꖭꖮꖯꖰꖱꖲꖳꖴꖵꖶꖷꖸꖹꖺꖻꖼꖽꖾꖿꗀꗁꗂꗃꗄꗅꗆꗇꗈꗉꗊꗋꗌꗍꗎꗏꗐꗑꗒꗓꗔꗕꗖꗗꗘꗙꗚꗛꗜꗝꗞꗟꗠꗡꗢꗣꗤꗥꗦꗧꗨꗩꗪꗫꗬꗭꗮꗯꗰꗱꗲꗳꗴꗵꗶꗷꗸꗹꗺꗻꗼꗽꗾꗿꘀꘁꘂꘃꘄꘅꘆꘇꘈꘉꘊꘋꘌ꘍꘎꘏ꘐꘑꘒꘓꘔꘕꘖꘗꘘꘙꘚꘛꘜꘝꘞꘟ꘠꘡꘢꘣꘤꘥꘦꘧꘨꘩ꘪꘫ\ua62c\ua62d\ua62e\ua62f\ua630\ua631\ua632\ua633\ua634\ua635\ua636\ua637\ua638\ua639\ua63a\ua63b\ua63c\ua63d\ua63e\ua63f"
+ "ꙁꙁꙃꙃꙅꙅꙇꙇꙉꙉꙋꙋꙍꙍꙏꙏꙑꙑꙓꙓꙕꙕꙗꙗꙙꙙꙛꙛꙝꙝꙟꙟꙡꙡꙣꙣꙥꙥꙧꙧꙩꙩꙫꙫꙭꙭꙮ꙯꙰꙱꙲꙳ꙴꙵꙶꙷꙸꙹꙺꙻ꙼꙽꙾ꙿꚁꚁꚃꚃꚅꚅꚇꚇꚉꚉꚋꚋꚍꚍꚏꚏꚑꚑꚓꚓꚕꚕꚗꚗꚙꚙꚛꚛꚜꚝꚞꚟꚠꚡꚢꚣꚤꚥꚦꚧꚨꚩꚪꚫꚬꚭꚮꚯꚰꚱꚲꚳꚴꚵꚶꚷꚸꚹꚺꚻꚼꚽꚾꚿꛀꛁꛂꛃꛄꛅꛆꛇꛈꛉꛊꛋꛌꛍꛎꛏꛐꛑꛒꛓꛔꛕꛖꛗꛘꛙꛚꛛꛜꛝꛞꛟꛠꛡꛢꛣꛤꛥꛦꛧꛨꛩꛪꛫꛬꛭꛮꛯ꛰꛱꛲꛳꛴꛵꛶꛷\ua6f8\ua6f9\ua6fa\ua6fb\ua6fc\ua6fd\ua6fe\ua6ff꜀꜁꜂꜃꜄꜅꜆꜇꜈꜉꜊꜋꜌꜍꜎꜏꜐꜑꜒꜓꜔꜕꜖ꜗꜘꜙꜚꜛꜜꜝꜞꜟ꜠꜡ꜣꜣꜥꜥꜧꜧꜩꜩꜫꜫꜭꜭꜯꜯꜰꜱꜳꜳꜵꜵꜷꜷꜹꜹꜻꜻꜽꜽꜿꜿꝁꝁꝃꝃꝅꝅꝇꝇꝉꝉꝋꝋꝍꝍꝏꝏꝑꝑꝓꝓꝕꝕꝗꝗꝙꝙꝛꝛꝝꝝꝟꝟꝡꝡꝣꝣꝥꝥꝧꝧꝩꝩꝫꝫꝭꝭꝯꝯꝰꝱꝲꝳꝴꝵꝶꝷꝸꝺꝺꝼꝼᵹꝿꝿꞁꞁꞃꞃꞅꞅꞇꞇꞈ꞉꞊ꞌꞌɥꞎꞏꞑꞑꞓꞓꞔꞕꞗꞗꞙꞙꞛꞛꞝꞝꞟꞟꞡꞡꞣꞣꞥꞥꞧꞧꞩꞩɦɜɡɬɪꞯʞʇʝꭓꞵꞵꞷꞷꞹꞹꞻꞻꞽꞽꞿꞿꟁꟁꟃꟃꞔʂᶎꟈꟈꟊꟊɤ\ua7cd\ua7cd\ua7ce\ua7cfꟑꟑ\ua7d2ꟓ\ua7d4ꟕꟗꟗꟙꟙ\ua7db\ua7dbƛ\ua7dd\ua7de\ua7df\ua7e0\ua7e1\ua7e2\ua7e3\ua7e4\ua7e5\ua7e6\ua7e7\ua7e8\ua7e9\ua7ea\ua7eb\ua7ec\ua7ed\ua7ee\ua7ef\ua7f0\ua7f1ꟲꟳꟴꟶꟶꟷꟸꟹꟺꟻꟼꟽꟾꟿꠀꠁꠂꠃꠄꠅ꠆ꠇꠈꠉꠊꠋꠌꠍꠎꠏꠐꠑꠒꠓꠔꠕꠖꠗꠘꠙꠚꠛꠜꠝꠞꠟꠠꠡꠢꠣꠤꠥꠦꠧ꠨꠩꠪꠫꠬\ua82d\ua82e\ua82f꠰꠱꠲꠳꠴꠵꠶꠷꠸꠹\ua83a\ua83b\ua83c\ua83d\ua83e\ua83f"
+ "ꡀꡁꡂꡃꡄꡅꡆꡇꡈꡉꡊꡋꡌꡍꡎꡏꡐꡑꡒꡓꡔꡕꡖꡗꡘꡙꡚꡛꡜꡝꡞꡟꡠꡡꡢꡣꡤꡥꡦꡧꡨꡩꡪꡫꡬꡭꡮꡯꡰꡱꡲꡳ꡴꡵꡶꡷\ua878\ua879\ua87a\ua87b\ua87c\ua87d\ua87e\ua87fꢀꢁꢂꢃꢄꢅꢆꢇꢈꢉꢊꢋꢌꢍꢎꢏꢐꢑꢒꢓꢔꢕꢖꢗꢘꢙꢚꢛꢜꢝꢞꢟꢠꢡꢢꢣꢤꢥꢦꢧꢨꢩꢪꢫꢬꢭꢮꢯꢰꢱꢲꢳꢴꢵꢶꢷꢸꢹꢺꢻꢼꢽꢾꢿꣀꣁꣂꣃ꣄ꣅ\ua8c6\ua8c7\ua8c8\ua8c9\ua8ca\ua8cb\ua8cc\ua8cd꣎꣏꣐꣑꣒꣓꣔꣕꣖꣗꣘꣙\ua8da\ua8db\ua8dc\ua8dd\ua8de\ua8df꣠꣡꣢꣣꣤꣥꣦꣧꣨꣩꣪꣫꣬꣭꣮꣯꣰꣱ꣲꣳꣴꣵꣶꣷ꣸꣹꣺ꣻ꣼ꣽꣾꣿ꤀꤁꤂꤃꤄꤅꤆꤇꤈꤉ꤊꤋꤌꤍꤎꤏꤐꤑꤒꤓꤔꤕꤖꤗꤘꤙꤚꤛꤜꤝꤞꤟꤠꤡꤢꤣꤤꤥꤦꤧꤨꤩꤪ꤫꤬꤭꤮꤯ꤰꤱꤲꤳꤴꤵꤶꤷꤸꤹꤺꤻꤼꤽꤾꤿꥀꥁꥂꥃꥄꥅꥆꥇꥈꥉꥊꥋꥌꥍꥎꥏꥐꥑꥒ꥓\ua954\ua955\ua956\ua957\ua958\ua959\ua95a\ua95b\ua95c\ua95d\ua95e꥟ꥠꥡꥢꥣꥤꥥꥦꥧꥨꥩꥪꥫꥬꥭꥮꥯꥰꥱꥲꥳꥴꥵꥶꥷꥸꥹꥺꥻꥼ\ua97d\ua97e\ua97fꦀꦁꦂꦃꦄꦅꦆꦇꦈꦉꦊꦋꦌꦍꦎꦏꦐꦑꦒꦓꦔꦕꦖꦗꦘꦙꦚꦛꦜꦝꦞꦟꦠꦡꦢꦣꦤꦥꦦꦧꦨꦩꦪꦫꦬꦭꦮꦯꦰꦱꦲ꦳ꦴꦵꦶꦷꦸꦹꦺꦻꦼꦽꦾꦿ꧀꧁꧂꧃꧄꧅꧆꧇꧈꧉꧊꧋꧌꧍\ua9ceꧏ꧐꧑꧒꧓꧔꧕꧖꧗꧘꧙\ua9da\ua9db\ua9dc\ua9dd꧞꧟ꧠꧡꧢꧣꧤꧥꧦꧧꧨꧩꧪꧫꧬꧭꧮꧯ꧰꧱꧲꧳꧴꧵꧶꧷꧸꧹ꧺꧻꧼꧽꧾ\ua9ffꨀꨁꨂꨃꨄꨅꨆꨇꨈꨉꨊꨋꨌꨍꨎꨏꨐꨑꨒꨓꨔꨕꨖꨗꨘꨙꨚꨛꨜꨝꨞꨟꨠꨡꨢꨣꨤꨥꨦꨧꨨꨩꨪꨫꨬꨭꨮꨯꨰꨱꨲꨳꨴꨵꨶ\uaa37\uaa38\uaa39\uaa3a\uaa3b\uaa3c\uaa3d\uaa3e\uaa3f"
+ "ꩀꩁꩂꩃꩄꩅꩆꩇꩈꩉꩊꩋꩌꩍ\uaa4e\uaa4f꩐꩑꩒꩓꩔꩕꩖꩗꩘꩙\uaa5a\uaa5b꩜꩝꩞꩟ꩠꩡꩢꩣꩤꩥꩦꩧꩨꩩꩪꩫꩬꩭꩮꩯꩰꩱꩲꩳꩴꩵꩶ꩷꩸꩹ꩺꩻꩼꩽꩾꩿꪀꪁꪂꪃꪄꪅꪆꪇꪈꪉꪊꪋꪌꪍꪎꪏꪐꪑꪒꪓꪔꪕꪖꪗꪘꪙꪚꪛꪜꪝꪞꪟꪠꪡꪢꪣꪤꪥꪦꪧꪨꪩꪪꪫꪬꪭꪮꪯꪰꪱꪴꪲꪳꪵꪶꪷꪸꪹꪺꪻꪼꪽꪾ꪿ꫀ꫁ꫂ\uaac3\uaac4\uaac5\uaac6\uaac7\uaac8\uaac9\uaaca\uaacb\uaacc\uaacd\uaace\uaacf\uaad0\uaad1\uaad2\uaad3\uaad4\uaad5\uaad6\uaad7\uaad8\uaad9\uaadaꫛꫜꫝ꫞꫟ꫠꫡꫢꫣꫤꫥꫦꫧꫨꫩꫪꫫꫬꫭꫮꫯ꫰꫱ꫲꫳꫴꫵ꫶\uaaf7\uaaf8\uaaf9\uaafa\uaafb\uaafc\uaafd\uaafe\uaaff\uab00ꬁꬂꬃꬄꬅꬆ\uab07\uab08ꬉꬊꬋꬌꬍꬎ\uab0f\uab10ꬑꬒꬓꬔꬕꬖ\uab17\uab18\uab19\uab1a\uab1b\uab1c\uab1d\uab1e\uab1fꬠꬡꬢꬣꬤꬥꬦ\uab27ꬨꬩꬪꬫꬬꬭꬮ\uab2fꬰꬱꬲꬳꬴꬵꬶꬷꬸꬹꬺꬻꬼꬽꬾꬿꭀꭁꭂꭃꭄꭅꭆꭇꭈꭉꭊꭋꭌꭍꭎꭏꭐꭑꭒꭓꭔꭕꭖꭗꭘꭙꭚ꭛ꭜꭝꭞꭟꭠꭡꭢꭣꭤꭥꭦꭧꭨꭩ꭪꭫\uab6c\uab6d\uab6e\uab6fꭰꭱꭲꭳꭴꭵꭶꭷꭸꭹꭺꭻꭼꭽꭾꭿꮀꮁꮂꮃꮄꮅꮆꮇꮈꮉꮊꮋꮌꮍꮎꮏꮐꮑꮒꮓꮔꮕꮖꮗꮘꮙꮚꮛꮜꮝꮞꮟꮠꮡꮢꮣꮤꮥꮦꮧꮨꮩꮪꮫꮬꮭꮮꮯꮰꮱꮲꮳꮴꮵꮶꮷꮸꮹꮺꮻꮼꮽꮾꮿꯀꯁꯂꯃꯄꯅꯆꯇꯈꯉꯊꯋꯌꯍꯎꯏꯐꯑꯒꯓꯔꯕꯖꯗꯘꯙꯚꯛꯜꯝꯞꯟꯠꯡꯢꯣꯤꯥꯦꯧꯨꯩꯪ꯫꯬꯭\uabee\uabef꯰꯱꯲꯳꯴꯵꯶꯷꯸꯹\uabfa\uabfb\uabfc\uabfd\uabfe\uabff가각갂갃간갅갆갇갈갉갊갋갌갍갎갏감갑값갓갔강갖갗갘같갚갛개객갞갟갠갡갢갣갤갥갦갧갨갩갪갫갬갭갮갯갰갱갲갳갴갵갶갷갸갹갺갻갼갽갾갿"
+ "걀걁걂걃걄걅걆걇걈걉걊걋걌걍걎걏걐걑걒걓걔걕걖걗걘걙걚걛걜걝걞걟걠걡걢걣걤걥걦걧걨걩걪걫걬걭걮걯거걱걲걳건걵걶걷걸걹걺걻걼걽걾걿검겁겂것겄겅겆겇겈겉겊겋게겍겎겏겐겑겒겓겔겕겖겗겘겙겚겛겜겝겞겟겠겡겢겣겤겥겦겧겨격겪겫견겭겮겯결겱겲겳겴겵겶겷겸겹겺겻겼경겾겿곀곁곂곃계곅곆곇곈곉곊곋곌곍곎곏곐곑곒곓곔곕곖곗곘곙곚곛곜곝곞곟고곡곢곣곤곥곦곧골곩곪곫곬곭곮곯곰곱곲곳곴공곶곷곸곹곺곻과곽곾곿관괁괂괃괄괅괆괇괈괉괊괋괌괍괎괏괐광괒괓괔괕괖괗괘괙괚괛괜괝괞괟괠괡괢괣괤괥괦괧괨괩괪괫괬괭괮괯괰괱괲괳괴괵괶괷괸괹괺괻괼괽괾괿굀굁굂굃굄굅굆굇굈굉굊굋굌굍굎굏교굑굒굓굔굕굖굗굘굙굚굛굜굝굞굟굠굡굢굣굤굥굦굧굨굩굪굫구국굮굯군굱굲굳굴굵굶굷굸굹굺굻굼굽굾굿궀궁궂궃궄궅궆궇궈궉궊궋권궍궎궏궐궑궒궓궔궕궖궗궘궙궚궛궜궝궞궟궠궡궢궣궤궥궦궧궨궩궪궫궬궭궮궯궰궱궲궳궴궵궶궷궸궹궺궻궼궽궾궿귀귁귂귃귄귅귆귇귈귉귊귋귌귍귎귏귐귑귒귓귔귕귖귗귘귙귚귛규귝귞귟균귡귢귣귤귥귦귧귨귩귪귫귬귭귮귯귰귱귲귳귴귵귶귷그극귺귻근귽귾귿글긁긂긃긄긅긆긇금급긊긋긌긍긎긏긐긑긒긓긔긕긖긗긘긙긚긛긜긝긞긟긠긡긢긣긤긥긦긧긨긩긪긫긬긭긮긯기긱긲긳긴긵긶긷길긹긺긻긼긽긾긿"
+ "김깁깂깃깄깅깆깇깈깉깊깋까깍깎깏깐깑깒깓깔깕깖깗깘깙깚깛깜깝깞깟깠깡깢깣깤깥깦깧깨깩깪깫깬깭깮깯깰깱깲깳깴깵깶깷깸깹깺깻깼깽깾깿꺀꺁꺂꺃꺄꺅꺆꺇꺈꺉꺊꺋꺌꺍꺎꺏꺐꺑꺒꺓꺔꺕꺖꺗꺘꺙꺚꺛꺜꺝꺞꺟꺠꺡꺢꺣꺤꺥꺦꺧꺨꺩꺪꺫꺬꺭꺮꺯꺰꺱꺲꺳꺴꺵꺶꺷꺸꺹꺺꺻꺼꺽꺾꺿껀껁껂껃껄껅껆껇껈껉껊껋껌껍껎껏껐껑껒껓껔껕껖껗께껙껚껛껜껝껞껟껠껡껢껣껤껥껦껧껨껩껪껫껬껭껮껯껰껱껲껳껴껵껶껷껸껹껺껻껼껽껾껿꼀꼁꼂꼃꼄꼅꼆꼇꼈꼉꼊꼋꼌꼍꼎꼏꼐꼑꼒꼓꼔꼕꼖꼗꼘꼙꼚꼛꼜꼝꼞꼟꼠꼡꼢꼣꼤꼥꼦꼧꼨꼩꼪꼫꼬꼭꼮꼯꼰꼱꼲꼳꼴꼵꼶꼷꼸꼹꼺꼻꼼꼽꼾꼿꽀꽁꽂꽃꽄꽅꽆꽇꽈꽉꽊꽋꽌꽍꽎꽏꽐꽑꽒꽓꽔꽕꽖꽗꽘꽙꽚꽛꽜꽝꽞꽟꽠꽡꽢꽣꽤꽥꽦꽧꽨꽩꽪꽫꽬꽭꽮꽯꽰꽱꽲꽳꽴꽵꽶꽷꽸꽹꽺꽻꽼꽽꽾꽿꾀꾁꾂꾃꾄꾅꾆꾇꾈꾉꾊꾋꾌꾍꾎꾏꾐꾑꾒꾓꾔꾕꾖꾗꾘꾙꾚꾛꾜꾝꾞꾟꾠꾡꾢꾣꾤꾥꾦꾧꾨꾩꾪꾫꾬꾭꾮꾯꾰꾱꾲꾳꾴꾵꾶꾷꾸꾹꾺꾻꾼꾽꾾꾿꿀꿁꿂꿃꿄꿅꿆꿇꿈꿉꿊꿋꿌꿍꿎꿏꿐꿑꿒꿓꿔꿕꿖꿗꿘꿙꿚꿛꿜꿝꿞꿟꿠꿡꿢꿣꿤꿥꿦꿧꿨꿩꿪꿫꿬꿭꿮꿯꿰꿱꿲꿳꿴꿵꿶꿷꿸꿹꿺꿻꿼꿽꿾꿿뀀뀁뀂뀃뀄뀅뀆뀇뀈뀉뀊뀋뀌뀍뀎뀏뀐뀑뀒뀓뀔뀕뀖뀗뀘뀙뀚뀛뀜뀝뀞뀟뀠뀡뀢뀣뀤뀥뀦뀧뀨뀩뀪뀫뀬뀭뀮뀯뀰뀱뀲뀳뀴뀵뀶뀷뀸뀹뀺뀻뀼뀽뀾뀿"
+ "끀끁끂끃끄끅끆끇끈끉끊끋끌끍끎끏끐끑끒끓끔끕끖끗끘끙끚끛끜끝끞끟끠끡끢끣끤끥끦끧끨끩끪끫끬끭끮끯끰끱끲끳끴끵끶끷끸끹끺끻끼끽끾끿낀낁낂낃낄낅낆낇낈낉낊낋낌낍낎낏낐낑낒낓낔낕낖낗나낙낚낛난낝낞낟날낡낢낣낤낥낦낧남납낪낫났낭낮낯낰낱낲낳내낵낶낷낸낹낺낻낼낽낾낿냀냁냂냃냄냅냆냇냈냉냊냋냌냍냎냏냐냑냒냓냔냕냖냗냘냙냚냛냜냝냞냟냠냡냢냣냤냥냦냧냨냩냪냫냬냭냮냯냰냱냲냳냴냵냶냷냸냹냺냻냼냽냾냿넀넁넂넃넄넅넆넇너넉넊넋넌넍넎넏널넑넒넓넔넕넖넗넘넙넚넛넜넝넞넟넠넡넢넣네넥넦넧넨넩넪넫넬넭넮넯넰넱넲넳넴넵넶넷넸넹넺넻넼넽넾넿녀녁녂녃년녅녆녇녈녉녊녋녌녍녎녏념녑녒녓녔녕녖녗녘녙녚녛녜녝녞녟녠녡녢녣녤녥녦녧녨녩녪녫녬녭녮녯녰녱녲녳녴녵녶녷노녹녺녻논녽녾녿놀놁놂놃놄놅놆놇놈놉놊놋놌농놎놏놐놑높놓놔놕놖놗놘놙놚놛놜놝놞놟놠놡놢놣놤놥놦놧놨놩놪놫놬놭놮놯놰놱놲놳놴놵놶놷놸놹놺놻놼놽놾놿뇀뇁뇂뇃뇄뇅뇆뇇뇈뇉뇊뇋뇌뇍뇎뇏뇐뇑뇒뇓뇔뇕뇖뇗뇘뇙뇚뇛뇜뇝뇞뇟뇠뇡뇢뇣뇤뇥뇦뇧뇨뇩뇪뇫뇬뇭뇮뇯뇰뇱뇲뇳뇴뇵뇶뇷뇸뇹뇺뇻뇼뇽뇾뇿눀눁눂눃누눅눆눇눈눉눊눋눌눍눎눏눐눑눒눓눔눕눖눗눘눙눚눛눜눝눞눟눠눡눢눣눤눥눦눧눨눩눪눫눬눭눮눯눰눱눲눳눴눵눶눷눸눹눺눻눼눽눾눿"
+ "뉀뉁뉂뉃뉄뉅뉆뉇뉈뉉뉊뉋뉌뉍뉎뉏뉐뉑뉒뉓뉔뉕뉖뉗뉘뉙뉚뉛뉜뉝뉞뉟뉠뉡뉢뉣뉤뉥뉦뉧뉨뉩뉪뉫뉬뉭뉮뉯뉰뉱뉲뉳뉴뉵뉶뉷뉸뉹뉺뉻뉼뉽뉾뉿늀늁늂늃늄늅늆늇늈늉늊늋늌늍늎늏느늑늒늓는늕늖늗늘늙늚늛늜늝늞늟늠늡늢늣늤능늦늧늨늩늪늫늬늭늮늯늰늱늲늳늴늵늶늷늸늹늺늻늼늽늾늿닀닁닂닃닄닅닆닇니닉닊닋닌닍닎닏닐닑닒닓닔닕닖닗님닙닚닛닜닝닞닟닠닡닢닣다닥닦닧단닩닪닫달닭닮닯닰닱닲닳담답닶닷닸당닺닻닼닽닾닿대댁댂댃댄댅댆댇댈댉댊댋댌댍댎댏댐댑댒댓댔댕댖댗댘댙댚댛댜댝댞댟댠댡댢댣댤댥댦댧댨댩댪댫댬댭댮댯댰댱댲댳댴댵댶댷댸댹댺댻댼댽댾댿덀덁덂덃덄덅덆덇덈덉덊덋덌덍덎덏덐덑덒덓더덕덖덗던덙덚덛덜덝덞덟덠덡덢덣덤덥덦덧덨덩덪덫덬덭덮덯데덱덲덳덴덵덶덷델덹덺덻덼덽덾덿뎀뎁뎂뎃뎄뎅뎆뎇뎈뎉뎊뎋뎌뎍뎎뎏뎐뎑뎒뎓뎔뎕뎖뎗뎘뎙뎚뎛뎜뎝뎞뎟뎠뎡뎢뎣뎤뎥뎦뎧뎨뎩뎪뎫뎬뎭뎮뎯뎰뎱뎲뎳뎴뎵뎶뎷뎸뎹뎺뎻뎼뎽뎾뎿돀돁돂돃도독돆돇돈돉돊돋돌돍돎돏돐돑돒돓돔돕돖돗돘동돚돛돜돝돞돟돠돡돢돣돤돥돦돧돨돩돪돫돬돭돮돯돰돱돲돳돴돵돶돷돸돹돺돻돼돽돾돿됀됁됂됃됄됅됆됇됈됉됊됋됌됍됎됏됐됑됒됓됔됕됖됗되됙됚됛된됝됞됟될됡됢됣됤됥됦됧됨됩됪됫됬됭됮됯됰됱됲됳됴됵됶됷됸됹됺됻됼됽됾됿"
+ "둀둁둂둃둄둅둆둇둈둉둊둋둌둍둎둏두둑둒둓둔둕둖둗둘둙둚둛둜둝둞둟둠둡둢둣둤둥둦둧둨둩둪둫둬둭둮둯둰둱둲둳둴둵둶둷둸둹둺둻둼둽둾둿뒀뒁뒂뒃뒄뒅뒆뒇뒈뒉뒊뒋뒌뒍뒎뒏뒐뒑뒒뒓뒔뒕뒖뒗뒘뒙뒚뒛뒜뒝뒞뒟뒠뒡뒢뒣뒤뒥뒦뒧뒨뒩뒪뒫뒬뒭뒮뒯뒰뒱뒲뒳뒴뒵뒶뒷뒸뒹뒺뒻뒼뒽뒾뒿듀듁듂듃듄듅듆듇듈듉듊듋듌듍듎듏듐듑듒듓듔듕듖듗듘듙듚듛드득듞듟든듡듢듣들듥듦듧듨듩듪듫듬듭듮듯듰등듲듳듴듵듶듷듸듹듺듻듼듽듾듿딀딁딂딃딄딅딆딇딈딉딊딋딌딍딎딏딐딑딒딓디딕딖딗딘딙딚딛딜딝딞딟딠딡딢딣딤딥딦딧딨딩딪딫딬딭딮딯따딱딲딳딴딵딶딷딸딹딺딻딼딽딾딿땀땁땂땃땄땅땆땇땈땉땊땋때땍땎땏땐땑땒땓땔땕땖땗땘땙땚땛땜땝땞땟땠땡땢땣땤땥땦땧땨땩땪땫땬땭땮땯땰땱땲땳땴땵땶땷땸땹땺땻땼땽땾땿떀떁떂떃떄떅떆떇떈떉떊떋떌떍떎떏떐떑떒떓떔떕떖떗떘떙떚떛떜떝떞떟떠떡떢떣떤떥떦떧떨떩떪떫떬떭떮떯떰떱떲떳떴떵떶떷떸떹떺떻떼떽떾떿뗀뗁뗂뗃뗄뗅뗆뗇뗈뗉뗊뗋뗌뗍뗎뗏뗐뗑뗒뗓뗔뗕뗖뗗뗘뗙뗚뗛뗜뗝뗞뗟뗠뗡뗢뗣뗤뗥뗦뗧뗨뗩뗪뗫뗬뗭뗮뗯뗰뗱뗲뗳뗴뗵뗶뗷뗸뗹뗺뗻뗼뗽뗾뗿똀똁똂똃똄똅똆똇똈똉똊똋똌똍똎똏또똑똒똓똔똕똖똗똘똙똚똛똜똝똞똟똠똡똢똣똤똥똦똧똨똩똪똫똬똭똮똯똰똱똲똳똴똵똶똷똸똹똺똻똼똽똾똿"
+ "뙀뙁뙂뙃뙄뙅뙆뙇뙈뙉뙊뙋뙌뙍뙎뙏뙐뙑뙒뙓뙔뙕뙖뙗뙘뙙뙚뙛뙜뙝뙞뙟뙠뙡뙢뙣뙤뙥뙦뙧뙨뙩뙪뙫뙬뙭뙮뙯뙰뙱뙲뙳뙴뙵뙶뙷뙸뙹뙺뙻뙼뙽뙾뙿뚀뚁뚂뚃뚄뚅뚆뚇뚈뚉뚊뚋뚌뚍뚎뚏뚐뚑뚒뚓뚔뚕뚖뚗뚘뚙뚚뚛뚜뚝뚞뚟뚠뚡뚢뚣뚤뚥뚦뚧뚨뚩뚪뚫뚬뚭뚮뚯뚰뚱뚲뚳뚴뚵뚶뚷뚸뚹뚺뚻뚼뚽뚾뚿뛀뛁뛂뛃뛄뛅뛆뛇뛈뛉뛊뛋뛌뛍뛎뛏뛐뛑뛒뛓뛔뛕뛖뛗뛘뛙뛚뛛뛜뛝뛞뛟뛠뛡뛢뛣뛤뛥뛦뛧뛨뛩뛪뛫뛬뛭뛮뛯뛰뛱뛲뛳뛴뛵뛶뛷뛸뛹뛺뛻뛼뛽뛾뛿뜀뜁뜂뜃뜄뜅뜆뜇뜈뜉뜊뜋뜌뜍뜎뜏뜐뜑뜒뜓뜔뜕뜖뜗뜘뜙뜚뜛뜜뜝뜞뜟뜠뜡뜢뜣뜤뜥뜦뜧뜨뜩뜪뜫뜬뜭뜮뜯뜰뜱뜲뜳뜴뜵뜶뜷뜸뜹뜺뜻뜼뜽뜾뜿띀띁띂띃띄띅띆띇띈띉띊띋띌띍띎띏띐띑띒띓띔띕띖띗띘띙띚띛띜띝띞띟띠띡띢띣띤띥띦띧띨띩띪띫띬띭띮띯띰띱띲띳띴띵띶띷띸띹띺띻라락띾띿란랁랂랃랄랅랆랇랈랉랊랋람랍랎랏랐랑랒랓랔랕랖랗래랙랚랛랜랝랞랟랠랡랢랣랤랥랦랧램랩랪랫랬랭랮랯랰랱랲랳랴략랶랷랸랹랺랻랼랽랾랿럀럁럂럃럄럅럆럇럈량럊럋럌럍럎럏럐럑럒럓럔럕럖럗럘럙럚럛럜럝럞럟럠럡럢럣럤럥럦럧럨럩럪럫러럭럮럯런럱럲럳럴럵럶럷럸럹럺럻럼럽럾럿렀렁렂렃렄렅렆렇레렉렊렋렌렍렎렏렐렑렒렓렔렕렖렗렘렙렚렛렜렝렞렟렠렡렢렣려력렦렧련렩렪렫렬렭렮렯렰렱렲렳렴렵렶렷렸령렺렻렼렽렾렿"
+ "례롁롂롃롄롅롆롇롈롉롊롋롌롍롎롏롐롑롒롓롔롕롖롗롘롙롚롛로록롞롟론롡롢롣롤롥롦롧롨롩롪롫롬롭롮롯롰롱롲롳롴롵롶롷롸롹롺롻롼롽롾롿뢀뢁뢂뢃뢄뢅뢆뢇뢈뢉뢊뢋뢌뢍뢎뢏뢐뢑뢒뢓뢔뢕뢖뢗뢘뢙뢚뢛뢜뢝뢞뢟뢠뢡뢢뢣뢤뢥뢦뢧뢨뢩뢪뢫뢬뢭뢮뢯뢰뢱뢲뢳뢴뢵뢶뢷뢸뢹뢺뢻뢼뢽뢾뢿룀룁룂룃룄룅룆룇룈룉룊룋료룍룎룏룐룑룒룓룔룕룖룗룘룙룚룛룜룝룞룟룠룡룢룣룤룥룦룧루룩룪룫룬룭룮룯룰룱룲룳룴룵룶룷룸룹룺룻룼룽룾룿뤀뤁뤂뤃뤄뤅뤆뤇뤈뤉뤊뤋뤌뤍뤎뤏뤐뤑뤒뤓뤔뤕뤖뤗뤘뤙뤚뤛뤜뤝뤞뤟뤠뤡뤢뤣뤤뤥뤦뤧뤨뤩뤪뤫뤬뤭뤮뤯뤰뤱뤲뤳뤴뤵뤶뤷뤸뤹뤺뤻뤼뤽뤾뤿륀륁륂륃륄륅륆륇륈륉륊륋륌륍륎륏륐륑륒륓륔륕륖륗류륙륚륛륜륝륞륟률륡륢륣륤륥륦륧륨륩륪륫륬륭륮륯륰륱륲륳르륵륶륷른륹륺륻를륽륾륿릀릁릂릃름릅릆릇릈릉릊릋릌릍릎릏릐릑릒릓릔릕릖릗릘릙릚릛릜릝릞릟릠릡릢릣릤릥릦릧릨릩릪릫리릭릮릯린릱릲릳릴릵릶릷릸릹릺릻림립릾릿맀링맂맃맄맅맆맇마막맊맋만맍많맏말맑맒맓맔맕맖맗맘맙맚맛맜망맞맟맠맡맢맣매맥맦맧맨맩맪맫맬맭맮맯맰맱맲맳맴맵맶맷맸맹맺맻맼맽맾맿먀먁먂먃먄먅먆먇먈먉먊먋먌먍먎먏먐먑먒먓먔먕먖먗먘먙먚먛먜먝먞먟먠먡먢먣먤먥먦먧먨먩먪먫먬먭먮먯먰먱먲먳먴먵먶먷머먹먺먻먼먽먾먿"
+ "멀멁멂멃멄멅멆멇멈멉멊멋멌멍멎멏멐멑멒멓메멕멖멗멘멙멚멛멜멝멞멟멠멡멢멣멤멥멦멧멨멩멪멫멬멭멮멯며멱멲멳면멵멶멷멸멹멺멻멼멽멾멿몀몁몂몃몄명몆몇몈몉몊몋몌몍몎몏몐몑몒몓몔몕몖몗몘몙몚몛몜몝몞몟몠몡몢몣몤몥몦몧모목몪몫몬몭몮몯몰몱몲몳몴몵몶몷몸몹몺못몼몽몾몿뫀뫁뫂뫃뫄뫅뫆뫇뫈뫉뫊뫋뫌뫍뫎뫏뫐뫑뫒뫓뫔뫕뫖뫗뫘뫙뫚뫛뫜뫝뫞뫟뫠뫡뫢뫣뫤뫥뫦뫧뫨뫩뫪뫫뫬뫭뫮뫯뫰뫱뫲뫳뫴뫵뫶뫷뫸뫹뫺뫻뫼뫽뫾뫿묀묁묂묃묄묅묆묇묈묉묊묋묌묍묎묏묐묑묒묓묔묕묖묗묘묙묚묛묜묝묞묟묠묡묢묣묤묥묦묧묨묩묪묫묬묭묮묯묰묱묲묳무묵묶묷문묹묺묻물묽묾묿뭀뭁뭂뭃뭄뭅뭆뭇뭈뭉뭊뭋뭌뭍뭎뭏뭐뭑뭒뭓뭔뭕뭖뭗뭘뭙뭚뭛뭜뭝뭞뭟뭠뭡뭢뭣뭤뭥뭦뭧뭨뭩뭪뭫뭬뭭뭮뭯뭰뭱뭲뭳뭴뭵뭶뭷뭸뭹뭺뭻뭼뭽뭾뭿뮀뮁뮂뮃뮄뮅뮆뮇뮈뮉뮊뮋뮌뮍뮎뮏뮐뮑뮒뮓뮔뮕뮖뮗뮘뮙뮚뮛뮜뮝뮞뮟뮠뮡뮢뮣뮤뮥뮦뮧뮨뮩뮪뮫뮬뮭뮮뮯뮰뮱뮲뮳뮴뮵뮶뮷뮸뮹뮺뮻뮼뮽뮾뮿므믁믂믃믄믅믆믇믈믉믊믋믌믍믎믏믐믑믒믓믔믕믖믗믘믙믚믛믜믝믞믟믠믡믢믣믤믥믦믧믨믩믪믫믬믭믮믯믰믱믲믳믴믵믶믷미믹믺믻민믽믾믿밀밁밂밃밄밅밆밇밈밉밊밋밌밍밎및밐밑밒밓바박밖밗반밙밚받발밝밞밟밠밡밢밣밤밥밦밧밨방밪밫밬밭밮밯배백밲밳밴밵밶밷밸밹밺밻밼밽밾밿"
+ "뱀뱁뱂뱃뱄뱅뱆뱇뱈뱉뱊뱋뱌뱍뱎뱏뱐뱑뱒뱓뱔뱕뱖뱗뱘뱙뱚뱛뱜뱝뱞뱟뱠뱡뱢뱣뱤뱥뱦뱧뱨뱩뱪뱫뱬뱭뱮뱯뱰뱱뱲뱳뱴뱵뱶뱷뱸뱹뱺뱻뱼뱽뱾뱿벀벁벂벃버벅벆벇번벉벊벋벌벍벎벏벐벑벒벓범법벖벗벘벙벚벛벜벝벞벟베벡벢벣벤벥벦벧벨벩벪벫벬벭벮벯벰벱벲벳벴벵벶벷벸벹벺벻벼벽벾벿변볁볂볃별볅볆볇볈볉볊볋볌볍볎볏볐병볒볓볔볕볖볗볘볙볚볛볜볝볞볟볠볡볢볣볤볥볦볧볨볩볪볫볬볭볮볯볰볱볲볳보복볶볷본볹볺볻볼볽볾볿봀봁봂봃봄봅봆봇봈봉봊봋봌봍봎봏봐봑봒봓봔봕봖봗봘봙봚봛봜봝봞봟봠봡봢봣봤봥봦봧봨봩봪봫봬봭봮봯봰봱봲봳봴봵봶봷봸봹봺봻봼봽봾봿뵀뵁뵂뵃뵄뵅뵆뵇뵈뵉뵊뵋뵌뵍뵎뵏뵐뵑뵒뵓뵔뵕뵖뵗뵘뵙뵚뵛뵜뵝뵞뵟뵠뵡뵢뵣뵤뵥뵦뵧뵨뵩뵪뵫뵬뵭뵮뵯뵰뵱뵲뵳뵴뵵뵶뵷뵸뵹뵺뵻뵼뵽뵾뵿부북붂붃분붅붆붇불붉붊붋붌붍붎붏붐붑붒붓붔붕붖붗붘붙붚붛붜붝붞붟붠붡붢붣붤붥붦붧붨붩붪붫붬붭붮붯붰붱붲붳붴붵붶붷붸붹붺붻붼붽붾붿뷀뷁뷂뷃뷄뷅뷆뷇뷈뷉뷊뷋뷌뷍뷎뷏뷐뷑뷒뷓뷔뷕뷖뷗뷘뷙뷚뷛뷜뷝뷞뷟뷠뷡뷢뷣뷤뷥뷦뷧뷨뷩뷪뷫뷬뷭뷮뷯뷰뷱뷲뷳뷴뷵뷶뷷뷸뷹뷺뷻뷼뷽뷾뷿븀븁븂븃븄븅븆븇븈븉븊븋브븍븎븏븐븑븒븓블븕븖븗븘븙븚븛븜븝븞븟븠븡븢븣븤븥븦븧븨븩븪븫븬븭븮븯븰븱븲븳븴븵븶븷븸븹븺븻븼븽븾븿"
+ "빀빁빂빃비빅빆빇빈빉빊빋빌빍빎빏빐빑빒빓빔빕빖빗빘빙빚빛빜빝빞빟빠빡빢빣빤빥빦빧빨빩빪빫빬빭빮빯빰빱빲빳빴빵빶빷빸빹빺빻빼빽빾빿뺀뺁뺂뺃뺄뺅뺆뺇뺈뺉뺊뺋뺌뺍뺎뺏뺐뺑뺒뺓뺔뺕뺖뺗뺘뺙뺚뺛뺜뺝뺞뺟뺠뺡뺢뺣뺤뺥뺦뺧뺨뺩뺪뺫뺬뺭뺮뺯뺰뺱뺲뺳뺴뺵뺶뺷뺸뺹뺺뺻뺼뺽뺾뺿뻀뻁뻂뻃뻄뻅뻆뻇뻈뻉뻊뻋뻌뻍뻎뻏뻐뻑뻒뻓뻔뻕뻖뻗뻘뻙뻚뻛뻜뻝뻞뻟뻠뻡뻢뻣뻤뻥뻦뻧뻨뻩뻪뻫뻬뻭뻮뻯뻰뻱뻲뻳뻴뻵뻶뻷뻸뻹뻺뻻뻼뻽뻾뻿뼀뼁뼂뼃뼄뼅뼆뼇뼈뼉뼊뼋뼌뼍뼎뼏뼐뼑뼒뼓뼔뼕뼖뼗뼘뼙뼚뼛뼜뼝뼞뼟뼠뼡뼢뼣뼤뼥뼦뼧뼨뼩뼪뼫뼬뼭뼮뼯뼰뼱뼲뼳뼴뼵뼶뼷뼸뼹뼺뼻뼼뼽뼾뼿뽀뽁뽂뽃뽄뽅뽆뽇뽈뽉뽊뽋뽌뽍뽎뽏뽐뽑뽒뽓뽔뽕뽖뽗뽘뽙뽚뽛뽜뽝뽞뽟뽠뽡뽢뽣뽤뽥뽦뽧뽨뽩뽪뽫뽬뽭뽮뽯뽰뽱뽲뽳뽴뽵뽶뽷뽸뽹뽺뽻뽼뽽뽾뽿뾀뾁뾂뾃뾄뾅뾆뾇뾈뾉뾊뾋뾌뾍뾎뾏뾐뾑뾒뾓뾔뾕뾖뾗뾘뾙뾚뾛뾜뾝뾞뾟뾠뾡뾢뾣뾤뾥뾦뾧뾨뾩뾪뾫뾬뾭뾮뾯뾰뾱뾲뾳뾴뾵뾶뾷뾸뾹뾺뾻뾼뾽뾾뾿뿀뿁뿂뿃뿄뿅뿆뿇뿈뿉뿊뿋뿌뿍뿎뿏뿐뿑뿒뿓뿔뿕뿖뿗뿘뿙뿚뿛뿜뿝뿞뿟뿠뿡뿢뿣뿤뿥뿦뿧뿨뿩뿪뿫뿬뿭뿮뿯뿰뿱뿲뿳뿴뿵뿶뿷뿸뿹뿺뿻뿼뿽뿾뿿쀀쀁쀂쀃쀄쀅쀆쀇쀈쀉쀊쀋쀌쀍쀎쀏쀐쀑쀒쀓쀔쀕쀖쀗쀘쀙쀚쀛쀜쀝쀞쀟쀠쀡쀢쀣쀤쀥쀦쀧쀨쀩쀪쀫쀬쀭쀮쀯쀰쀱쀲쀳쀴쀵쀶쀷쀸쀹쀺쀻쀼쀽쀾쀿"
+ "쁀쁁쁂쁃쁄쁅쁆쁇쁈쁉쁊쁋쁌쁍쁎쁏쁐쁑쁒쁓쁔쁕쁖쁗쁘쁙쁚쁛쁜쁝쁞쁟쁠쁡쁢쁣쁤쁥쁦쁧쁨쁩쁪쁫쁬쁭쁮쁯쁰쁱쁲쁳쁴쁵쁶쁷쁸쁹쁺쁻쁼쁽쁾쁿삀삁삂삃삄삅삆삇삈삉삊삋삌삍삎삏삐삑삒삓삔삕삖삗삘삙삚삛삜삝삞삟삠삡삢삣삤삥삦삧삨삩삪삫사삭삮삯산삱삲삳살삵삶삷삸삹삺삻삼삽삾삿샀상샂샃샄샅샆샇새색샊샋샌샍샎샏샐샑샒샓샔샕샖샗샘샙샚샛샜생샞샟샠샡샢샣샤샥샦샧샨샩샪샫샬샭샮샯샰샱샲샳샴샵샶샷샸샹샺샻샼샽샾샿섀섁섂섃섄섅섆섇섈섉섊섋섌섍섎섏섐섑섒섓섔섕섖섗섘섙섚섛서석섞섟선섡섢섣설섥섦섧섨섩섪섫섬섭섮섯섰성섲섳섴섵섶섷세섹섺섻센섽섾섿셀셁셂셃셄셅셆셇셈셉셊셋셌셍셎셏셐셑셒셓셔셕셖셗션셙셚셛셜셝셞셟셠셡셢셣셤셥셦셧셨셩셪셫셬셭셮셯셰셱셲셳셴셵셶셷셸셹셺셻셼셽셾셿솀솁솂솃솄솅솆솇솈솉솊솋소속솎솏손솑솒솓솔솕솖솗솘솙솚솛솜솝솞솟솠송솢솣솤솥솦솧솨솩솪솫솬솭솮솯솰솱솲솳솴솵솶솷솸솹솺솻솼솽솾솿쇀쇁쇂쇃쇄쇅쇆쇇쇈쇉쇊쇋쇌쇍쇎쇏쇐쇑쇒쇓쇔쇕쇖쇗쇘쇙쇚쇛쇜쇝쇞쇟쇠쇡쇢쇣쇤쇥쇦쇧쇨쇩쇪쇫쇬쇭쇮쇯쇰쇱쇲쇳쇴쇵쇶쇷쇸쇹쇺쇻쇼쇽쇾쇿숀숁숂숃숄숅숆숇숈숉숊숋숌숍숎숏숐숑숒숓숔숕숖숗수숙숚숛순숝숞숟술숡숢숣숤숥숦숧숨숩숪숫숬숭숮숯숰숱숲숳숴숵숶숷숸숹숺숻숼숽숾숿"
+ "쉀쉁쉂쉃쉄쉅쉆쉇쉈쉉쉊쉋쉌쉍쉎쉏쉐쉑쉒쉓쉔쉕쉖쉗쉘쉙쉚쉛쉜쉝쉞쉟쉠쉡쉢쉣쉤쉥쉦쉧쉨쉩쉪쉫쉬쉭쉮쉯쉰쉱쉲쉳쉴쉵쉶쉷쉸쉹쉺쉻쉼쉽쉾쉿슀슁슂슃슄슅슆슇슈슉슊슋슌슍슎슏슐슑슒슓슔슕슖슗슘슙슚슛슜슝슞슟슠슡슢슣스슥슦슧슨슩슪슫슬슭슮슯슰슱슲슳슴습슶슷슸승슺슻슼슽슾슿싀싁싂싃싄싅싆싇싈싉싊싋싌싍싎싏싐싑싒싓싔싕싖싗싘싙싚싛시식싞싟신싡싢싣실싥싦싧싨싩싪싫심십싮싯싰싱싲싳싴싵싶싷싸싹싺싻싼싽싾싿쌀쌁쌂쌃쌄쌅쌆쌇쌈쌉쌊쌋쌌쌍쌎쌏쌐쌑쌒쌓쌔쌕쌖쌗쌘쌙쌚쌛쌜쌝쌞쌟쌠쌡쌢쌣쌤쌥쌦쌧쌨쌩쌪쌫쌬쌭쌮쌯쌰쌱쌲쌳쌴쌵쌶쌷쌸쌹쌺쌻쌼쌽쌾쌿썀썁썂썃썄썅썆썇썈썉썊썋썌썍썎썏", "썐썑썒썓썔썕썖썗썘썙썚썛썜썝썞썟썠썡썢썣썤썥썦썧써썩썪썫썬썭썮썯썰썱썲썳썴썵썶썷썸썹썺썻썼썽썾썿쎀쎁쎂쎃쎄쎅쎆쎇쎈쎉쎊쎋쎌쎍쎎쎏쎐쎑쎒쎓쎔쎕쎖쎗쎘쎙쎚쎛쎜쎝쎞쎟쎠쎡쎢쎣쎤쎥쎦쎧쎨쎩쎪쎫쎬쎭쎮쎯쎰쎱쎲쎳쎴쎵쎶쎷쎸쎹쎺쎻쎼쎽쎾쎿쏀쏁쏂쏃쏄쏅쏆쏇쏈쏉쏊쏋쏌쏍쏎쏏쏐쏑쏒쏓쏔쏕쏖쏗쏘쏙쏚쏛쏜쏝쏞쏟쏠쏡쏢쏣쏤쏥쏦쏧쏨쏩쏪쏫쏬쏭쏮쏯쏰쏱쏲쏳쏴쏵쏶쏷쏸쏹쏺쏻쏼쏽쏾쏿쐀쐁쐂쐃쐄쐅쐆쐇쐈쐉쐊쐋쐌쐍쐎쐏쐐쐑쐒쐓쐔쐕쐖쐗쐘쐙쐚쐛쐜쐝쐞쐟쐠쐡쐢쐣쐤쐥쐦쐧쐨쐩쐪쐫쐬쐭쐮쐯쐰쐱쐲쐳쐴쐵쐶쐷쐸쐹쐺쐻쐼쐽쐾쐿쑀쑁쑂쑃쑄쑅쑆쑇쑈쑉쑊쑋쑌쑍쑎쑏쑐쑑쑒쑓쑔쑕쑖쑗쑘쑙쑚쑛쑜쑝쑞쑟쑠쑡쑢쑣쑤쑥쑦쑧쑨쑩쑪쑫쑬쑭쑮쑯쑰쑱쑲쑳쑴쑵쑶쑷쑸쑹쑺쑻쑼쑽쑾쑿쒀쒁쒂쒃쒄쒅쒆쒇쒈쒉쒊쒋쒌쒍쒎쒏쒐쒑쒒쒓쒔쒕쒖쒗쒘쒙쒚쒛쒜쒝쒞쒟쒠쒡쒢쒣쒤쒥쒦쒧쒨쒩쒪쒫쒬쒭쒮쒯쒰쒱쒲쒳쒴쒵쒶쒷쒸쒹쒺쒻쒼쒽쒾쒿쓀쓁쓂쓃쓄쓅쓆쓇쓈쓉쓊쓋쓌쓍쓎쓏쓐쓑쓒쓓쓔쓕쓖쓗쓘쓙쓚쓛쓜쓝쓞쓟쓠쓡쓢쓣쓤쓥쓦쓧쓨쓩쓪쓫쓬쓭쓮쓯쓰쓱쓲쓳쓴쓵쓶쓷쓸쓹쓺쓻쓼쓽쓾쓿씀씁씂씃씄씅씆씇씈씉씊씋씌씍씎씏씐씑씒씓씔씕씖씗씘씙씚씛씜씝씞씟씠씡씢씣씤씥씦씧씨씩씪씫씬씭씮씯씰씱씲씳씴씵씶씷씸씹씺씻씼씽씾씿앀앁앂앃아악앆앇안앉않앋알앍앎앏"
+ "앐앑앒앓암압앖앗았앙앚앛앜앝앞앟애액앢앣앤앥앦앧앨앩앪앫앬앭앮앯앰앱앲앳앴앵앶앷앸앹앺앻야약앾앿얀얁얂얃얄얅얆얇얈얉얊얋얌얍얎얏얐양얒얓얔얕얖얗얘얙얚얛얜얝얞얟얠얡얢얣얤얥얦얧얨얩얪얫얬얭얮얯얰얱얲얳어억얶얷언얹얺얻얼얽얾얿엀엁엂엃엄업없엇었엉엊엋엌엍엎엏에엑엒엓엔엕엖엗엘엙엚엛엜엝엞엟엠엡엢엣엤엥엦엧엨엩엪엫여역엮엯연엱엲엳열엵엶엷엸엹엺엻염엽엾엿였영옂옃옄옅옆옇예옉옊옋옌옍옎옏옐옑옒옓옔옕옖옗옘옙옚옛옜옝옞옟옠옡옢옣오옥옦옧온옩옪옫올옭옮옯옰옱옲옳옴옵옶옷옸옹옺옻옼옽옾옿와왁왂왃완왅왆왇왈왉왊왋왌왍왎왏왐왑왒왓왔왕왖왗왘왙왚왛왜왝왞왟왠왡왢왣왤왥왦왧왨왩왪왫왬왭왮왯왰왱왲왳왴왵왶왷외왹왺왻왼왽왾왿욀욁욂욃욄욅욆욇욈욉욊욋욌욍욎욏욐욑욒욓요욕욖욗욘욙욚욛욜욝욞욟욠욡욢욣욤욥욦욧욨용욪욫욬욭욮욯우욱욲욳운욵욶욷울욹욺욻욼욽욾욿움웁웂웃웄웅웆웇웈웉웊웋워웍웎웏원웑웒웓월웕웖웗웘웙웚웛웜웝웞웟웠웡웢웣웤웥웦웧웨웩웪웫웬웭웮웯웰웱웲웳웴웵웶웷웸웹웺웻웼웽웾웿윀윁윂윃위윅윆윇윈윉윊윋윌윍윎윏윐윑윒윓윔윕윖윗윘윙윚윛윜윝윞윟유육윢윣윤윥윦윧율윩윪윫윬윭윮윯윰윱윲윳윴융윶윷윸윹윺윻으윽윾윿은읁읂읃을읅읆읇읈읉읊읋음읍읎읏"
+ "읐응읒읓읔읕읖읗의읙읚읛읜읝읞읟읠읡읢읣읤읥읦읧읨읩읪읫읬읭읮읯읰읱읲읳이익읶읷인읹읺읻일읽읾읿잀잁잂잃임입잆잇있잉잊잋잌잍잎잏자작잒잓잔잕잖잗잘잙잚잛잜잝잞잟잠잡잢잣잤장잦잧잨잩잪잫재잭잮잯잰잱잲잳잴잵잶잷잸잹잺잻잼잽잾잿쟀쟁쟂쟃쟄쟅쟆쟇쟈쟉쟊쟋쟌쟍쟎쟏쟐쟑쟒쟓쟔쟕쟖쟗쟘쟙쟚쟛쟜쟝쟞쟟쟠쟡쟢쟣쟤쟥쟦쟧쟨쟩쟪쟫쟬쟭쟮쟯쟰쟱쟲쟳쟴쟵쟶쟷쟸쟹쟺쟻쟼쟽쟾쟿저적젂젃전젅젆젇절젉젊젋젌젍젎젏점접젒젓젔정젖젗젘젙젚젛제젝젞젟젠젡젢젣젤젥젦젧젨젩젪젫젬젭젮젯젰젱젲젳젴젵젶젷져젹젺젻젼젽젾젿졀졁졂졃졄졅졆졇졈졉졊졋졌졍졎졏졐졑졒졓졔졕졖졗졘졙졚졛졜졝졞졟졠졡졢졣졤졥졦졧졨졩졪졫졬졭졮졯조족졲졳존졵졶졷졸졹졺졻졼졽졾졿좀좁좂좃좄종좆좇좈좉좊좋좌좍좎좏좐좑좒좓좔좕좖좗좘좙좚좛좜좝좞좟좠좡좢좣좤좥좦좧좨좩좪좫좬좭좮좯좰좱좲좳좴좵좶좷좸좹좺좻좼좽좾좿죀죁죂죃죄죅죆죇죈죉죊죋죌죍죎죏죐죑죒죓죔죕죖죗죘죙죚죛죜죝죞죟죠죡죢죣죤죥죦죧죨죩죪죫죬죭죮죯죰죱죲죳죴죵죶죷죸죹죺죻주죽죾죿준줁줂줃줄줅줆줇줈줉줊줋줌줍줎줏줐중줒줓줔줕줖줗줘줙줚줛줜줝줞줟줠줡줢줣줤줥줦줧줨줩줪줫줬줭줮줯줰줱줲줳줴줵줶줷줸줹줺줻줼줽줾줿쥀쥁쥂쥃쥄쥅쥆쥇쥈쥉쥊쥋쥌쥍쥎쥏"
+ "쥐쥑쥒쥓쥔쥕쥖쥗쥘쥙쥚쥛쥜쥝쥞쥟쥠쥡쥢쥣쥤쥥쥦쥧쥨쥩쥪쥫쥬쥭쥮쥯쥰쥱쥲쥳쥴쥵쥶쥷쥸쥹쥺쥻쥼쥽쥾쥿즀즁즂즃즄즅즆즇즈즉즊즋즌즍즎즏즐즑즒즓즔즕즖즗즘즙즚즛즜증즞즟즠즡즢즣즤즥즦즧즨즩즪즫즬즭즮즯즰즱즲즳즴즵즶즷즸즹즺즻즼즽즾즿지직짂짃진짅짆짇질짉짊짋짌짍짎짏짐집짒짓짔징짖짗짘짙짚짛짜짝짞짟짠짡짢짣짤짥짦짧짨짩짪짫짬짭짮짯짰짱짲짳짴짵짶짷째짹짺짻짼짽짾짿쨀쨁쨂쨃쨄쨅쨆쨇쨈쨉쨊쨋쨌쨍쨎쨏쨐쨑쨒쨓쨔쨕쨖쨗쨘쨙쨚쨛쨜쨝쨞쨟쨠쨡쨢쨣쨤쨥쨦쨧쨨쨩쨪쨫쨬쨭쨮쨯쨰쨱쨲쨳쨴쨵쨶쨷쨸쨹쨺쨻쨼쨽쨾쨿쩀쩁쩂쩃쩄쩅쩆쩇쩈쩉쩊쩋쩌쩍쩎쩏쩐쩑쩒쩓쩔쩕쩖쩗쩘쩙쩚쩛쩜쩝쩞쩟쩠쩡쩢쩣쩤쩥쩦쩧쩨쩩쩪쩫쩬쩭쩮쩯쩰쩱쩲쩳쩴쩵쩶쩷쩸쩹쩺쩻쩼쩽쩾쩿쪀쪁쪂쪃쪄쪅쪆쪇쪈쪉쪊쪋쪌쪍쪎쪏쪐쪑쪒쪓쪔쪕쪖쪗쪘쪙쪚쪛쪜쪝쪞쪟쪠쪡쪢쪣쪤쪥쪦쪧쪨쪩쪪쪫쪬쪭쪮쪯쪰쪱쪲쪳쪴쪵쪶쪷쪸쪹쪺쪻쪼쪽쪾쪿쫀쫁쫂쫃쫄쫅쫆쫇쫈쫉쫊쫋쫌쫍쫎쫏쫐쫑쫒쫓쫔쫕쫖쫗쫘쫙쫚쫛쫜쫝쫞쫟쫠쫡쫢쫣쫤쫥쫦쫧쫨쫩쫪쫫쫬쫭쫮쫯쫰쫱쫲쫳쫴쫵쫶쫷쫸쫹쫺쫻쫼쫽쫾쫿쬀쬁쬂쬃쬄쬅쬆쬇쬈쬉쬊쬋쬌쬍쬎쬏쬐쬑쬒쬓쬔쬕쬖쬗쬘쬙쬚쬛쬜쬝쬞쬟쬠쬡쬢쬣쬤쬥쬦쬧쬨쬩쬪쬫쬬쬭쬮쬯쬰쬱쬲쬳쬴쬵쬶쬷쬸쬹쬺쬻쬼쬽쬾쬿쭀쭁쭂쭃쭄쭅쭆쭇쭈쭉쭊쭋쭌쭍쭎쭏"
+ "쭐쭑쭒쭓쭔쭕쭖쭗쭘쭙쭚쭛쭜쭝쭞쭟쭠쭡쭢쭣쭤쭥쭦쭧쭨쭩쭪쭫쭬쭭쭮쭯쭰쭱쭲쭳쭴쭵쭶쭷쭸쭹쭺쭻쭼쭽쭾쭿쮀쮁쮂쮃쮄쮅쮆쮇쮈쮉쮊쮋쮌쮍쮎쮏쮐쮑쮒쮓쮔쮕쮖쮗쮘쮙쮚쮛쮜쮝쮞쮟쮠쮡쮢쮣쮤쮥쮦쮧쮨쮩쮪쮫쮬쮭쮮쮯쮰쮱쮲쮳쮴쮵쮶쮷쮸쮹쮺쮻쮼쮽쮾쮿쯀쯁쯂쯃쯄쯅쯆쯇쯈쯉쯊쯋쯌쯍쯎쯏쯐쯑쯒쯓쯔쯕쯖쯗쯘쯙쯚쯛쯜쯝쯞쯟쯠쯡쯢쯣쯤쯥쯦쯧쯨쯩쯪쯫쯬쯭쯮쯯쯰쯱쯲쯳쯴쯵쯶쯷쯸쯹쯺쯻쯼쯽쯾쯿찀찁찂찃찄찅찆찇찈찉찊찋찌찍찎찏찐찑찒찓찔찕찖찗찘찙찚찛찜찝찞찟찠찡찢찣찤찥찦찧차착찪찫찬찭찮찯찰찱찲찳찴찵찶찷참찹찺찻찼창찾찿챀챁챂챃채책챆챇챈챉챊챋챌챍챎챏챐챑챒챓챔챕챖챗챘챙챚챛챜챝챞챟챠챡챢챣챤챥챦챧챨챩챪챫챬챭챮챯챰챱챲챳챴챵챶챷챸챹챺챻챼챽챾챿첀첁첂첃첄첅첆첇첈첉첊첋첌첍첎첏첐첑첒첓첔첕첖첗처척첚첛천첝첞첟철첡첢첣첤첥첦첧첨첩첪첫첬청첮첯첰첱첲첳체첵첶첷첸첹첺첻첼첽첾첿쳀쳁쳂쳃쳄쳅쳆쳇쳈쳉쳊쳋쳌쳍쳎쳏쳐쳑쳒쳓쳔쳕쳖쳗쳘쳙쳚쳛쳜쳝쳞쳟쳠쳡쳢쳣쳤쳥쳦쳧쳨쳩쳪쳫쳬쳭쳮쳯쳰쳱쳲쳳쳴쳵쳶쳷쳸쳹쳺쳻쳼쳽쳾쳿촀촁촂촃촄촅촆촇초촉촊촋촌촍촎촏촐촑촒촓촔촕촖촗촘촙촚촛촜총촞촟촠촡촢촣촤촥촦촧촨촩촪촫촬촭촮촯촰촱촲촳촴촵촶촷촸촹촺촻촼촽촾촿쵀쵁쵂쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏"
+ "쵐쵑쵒쵓쵔쵕쵖쵗쵘쵙쵚쵛최쵝쵞쵟쵠쵡쵢쵣쵤쵥쵦쵧쵨쵩쵪쵫쵬쵭쵮쵯쵰쵱쵲쵳쵴쵵쵶쵷쵸쵹쵺쵻쵼쵽쵾쵿춀춁춂춃춄춅춆춇춈춉춊춋춌춍춎춏춐춑춒춓추축춖춗춘춙춚춛출춝춞춟춠춡춢춣춤춥춦춧춨충춪춫춬춭춮춯춰춱춲춳춴춵춶춷춸춹춺춻춼춽춾춿췀췁췂췃췄췅췆췇췈췉췊췋췌췍췎췏췐췑췒췓췔췕췖췗췘췙췚췛췜췝췞췟췠췡췢췣췤췥췦췧취췩췪췫췬췭췮췯췰췱췲췳췴췵췶췷췸췹췺췻췼췽췾췿츀츁츂츃츄츅츆츇츈츉츊츋츌츍츎츏츐츑츒츓츔츕츖츗츘츙츚츛츜츝츞츟츠측츢츣츤츥츦츧츨츩츪츫츬츭츮츯츰츱츲츳츴층츶츷츸츹츺츻츼츽츾츿칀칁칂칃칄칅칆칇칈칉칊칋칌칍칎칏칐칑칒칓칔칕칖칗치칙칚칛친칝칞칟칠칡칢칣칤칥칦칧침칩칪칫칬칭칮칯칰칱칲칳카칵칶칷칸칹칺칻칼칽칾칿캀캁캂캃캄캅캆캇캈캉캊캋캌캍캎캏캐캑캒캓캔캕캖캗캘캙캚캛캜캝캞캟캠캡캢캣캤캥캦캧캨캩캪캫캬캭캮캯캰캱캲캳캴캵캶캷캸캹캺캻캼캽캾캿컀컁컂컃컄컅컆컇컈컉컊컋컌컍컎컏컐컑컒컓컔컕컖컗컘컙컚컛컜컝컞컟컠컡컢컣커컥컦컧컨컩컪컫컬컭컮컯컰컱컲컳컴컵컶컷컸컹컺컻컼컽컾컿케켁켂켃켄켅켆켇켈켉켊켋켌켍켎켏켐켑켒켓켔켕켖켗켘켙켚켛켜켝켞켟켠켡켢켣켤켥켦켧켨켩켪켫켬켭켮켯켰켱켲켳켴켵켶켷켸켹켺켻켼켽켾켿콀콁콂콃콄콅콆콇콈콉콊콋콌콍콎콏"
+ "콐콑콒콓코콕콖콗콘콙콚콛콜콝콞콟콠콡콢콣콤콥콦콧콨콩콪콫콬콭콮콯콰콱콲콳콴콵콶콷콸콹콺콻콼콽콾콿쾀쾁쾂쾃쾄쾅쾆쾇쾈쾉쾊쾋쾌쾍쾎쾏쾐쾑쾒쾓쾔쾕쾖쾗쾘쾙쾚쾛쾜쾝쾞쾟쾠쾡쾢쾣쾤쾥쾦쾧쾨쾩쾪쾫쾬쾭쾮쾯쾰쾱쾲쾳쾴쾵쾶쾷쾸쾹쾺쾻쾼쾽쾾쾿쿀쿁쿂쿃쿄쿅쿆쿇쿈쿉쿊쿋쿌쿍쿎쿏쿐쿑쿒쿓쿔쿕쿖쿗쿘쿙쿚쿛쿜쿝쿞쿟쿠쿡쿢쿣쿤쿥쿦쿧쿨쿩쿪쿫쿬쿭쿮쿯쿰쿱쿲쿳쿴쿵쿶쿷쿸쿹쿺쿻쿼쿽쿾쿿퀀퀁퀂퀃퀄퀅퀆퀇퀈퀉퀊퀋퀌퀍퀎퀏퀐퀑퀒퀓퀔퀕퀖퀗퀘퀙퀚퀛퀜퀝퀞퀟퀠퀡퀢퀣퀤퀥퀦퀧퀨퀩퀪퀫퀬퀭퀮퀯퀰퀱퀲퀳퀴퀵퀶퀷퀸퀹퀺퀻퀼퀽퀾퀿큀큁큂큃큄큅큆큇큈큉큊큋큌큍큎큏큐큑큒큓큔큕큖큗큘큙큚큛큜큝큞큟큠큡큢큣큤큥큦큧큨큩큪큫크큭큮큯큰큱큲큳클큵큶큷큸큹큺큻큼큽큾큿킀킁킂킃킄킅킆킇킈킉킊킋킌킍킎킏킐킑킒킓킔킕킖킗킘킙킚킛킜킝킞킟킠킡킢킣키킥킦킧킨킩킪킫킬킭킮킯킰킱킲킳킴킵킶킷킸킹킺킻킼킽킾킿타탁탂탃탄탅탆탇탈탉탊탋탌탍탎탏탐탑탒탓탔탕탖탗탘탙탚탛태택탞탟탠탡탢탣탤탥탦탧탨탩탪탫탬탭탮탯탰탱탲탳탴탵탶탷탸탹탺탻탼탽탾탿턀턁턂턃턄턅턆턇턈턉턊턋턌턍턎턏턐턑턒턓턔턕턖턗턘턙턚턛턜턝턞턟턠턡턢턣턤턥턦턧턨턩턪턫턬턭턮턯터턱턲턳턴턵턶턷털턹턺턻턼턽턾턿텀텁텂텃텄텅텆텇텈텉텊텋테텍텎텏"
+ "텐텑텒텓텔텕텖텗텘텙텚텛템텝텞텟텠텡텢텣텤텥텦텧텨텩텪텫텬텭텮텯텰텱텲텳텴텵텶텷텸텹텺텻텼텽텾텿톀톁톂톃톄톅톆톇톈톉톊톋톌톍톎톏톐톑톒톓톔톕톖톗톘톙톚톛톜톝톞톟토톡톢톣톤톥톦톧톨톩톪톫톬톭톮톯톰톱톲톳톴통톶톷톸톹톺톻톼톽톾톿퇀퇁퇂퇃퇄퇅퇆퇇퇈퇉퇊퇋퇌퇍퇎퇏퇐퇑퇒퇓퇔퇕퇖퇗퇘퇙퇚퇛퇜퇝퇞퇟퇠퇡퇢퇣퇤퇥퇦퇧퇨퇩퇪퇫퇬퇭퇮퇯퇰퇱퇲퇳퇴퇵퇶퇷퇸퇹퇺퇻퇼퇽퇾퇿툀툁툂툃툄툅툆툇툈툉툊툋툌툍툎툏툐툑툒툓툔툕툖툗툘툙툚툛툜툝툞툟툠툡툢툣툤툥툦툧툨툩툪툫투툭툮툯툰툱툲툳툴툵툶툷툸툹툺툻툼툽툾툿퉀퉁퉂퉃퉄퉅퉆퉇퉈퉉퉊퉋퉌퉍퉎퉏퉐퉑퉒퉓퉔퉕퉖퉗퉘퉙퉚퉛퉜퉝퉞퉟퉠퉡퉢퉣퉤퉥퉦퉧퉨퉩퉪퉫퉬퉭퉮퉯퉰퉱퉲퉳퉴퉵퉶퉷퉸퉹퉺퉻퉼퉽퉾퉿튀튁튂튃튄튅튆튇튈튉튊튋튌튍튎튏튐튑튒튓튔튕튖튗튘튙튚튛튜튝튞튟튠튡튢튣튤튥튦튧튨튩튪튫튬튭튮튯튰튱튲튳튴튵튶튷트특튺튻튼튽튾튿틀틁틂틃틄틅틆틇틈틉틊틋틌틍틎틏틐틑틒틓틔틕틖틗틘틙틚틛틜틝틞틟틠틡틢틣틤틥틦틧틨틩틪틫틬틭틮틯티틱틲틳틴틵틶틷틸틹틺틻틼틽틾틿팀팁팂팃팄팅팆팇팈팉팊팋파팍팎팏판팑팒팓팔팕팖팗팘팙팚팛팜팝팞팟팠팡팢팣팤팥팦팧패팩팪팫팬팭팮팯팰팱팲팳팴팵팶팷팸팹팺팻팼팽팾팿퍀퍁퍂퍃퍄퍅퍆퍇퍈퍉퍊퍋퍌퍍퍎퍏"
+ "퍐퍑퍒퍓퍔퍕퍖퍗퍘퍙퍚퍛퍜퍝퍞퍟퍠퍡퍢퍣퍤퍥퍦퍧퍨퍩퍪퍫퍬퍭퍮퍯퍰퍱퍲퍳퍴퍵퍶퍷퍸퍹퍺퍻퍼퍽퍾퍿펀펁펂펃펄펅펆펇펈펉펊펋펌펍펎펏펐펑펒펓펔펕펖펗페펙펚펛펜펝펞펟펠펡펢펣펤펥펦펧펨펩펪펫펬펭펮펯펰펱펲펳펴펵펶펷편펹펺펻펼펽펾펿폀폁폂폃폄폅폆폇폈평폊폋폌폍폎폏폐폑폒폓폔폕폖폗폘폙폚폛폜폝폞폟폠폡폢폣폤폥폦폧폨폩폪폫포폭폮폯폰폱폲폳폴폵폶폷폸폹폺폻폼폽폾폿퐀퐁퐂퐃퐄퐅퐆퐇퐈퐉퐊퐋퐌퐍퐎퐏퐐퐑퐒퐓퐔퐕퐖퐗퐘퐙퐚퐛퐜퐝퐞퐟퐠퐡퐢퐣퐤퐥퐦퐧퐨퐩퐪퐫퐬퐭퐮퐯퐰퐱퐲퐳퐴퐵퐶퐷퐸퐹퐺퐻퐼퐽퐾퐿푀푁푂푃푄푅푆푇푈푉푊푋푌푍푎푏푐푑푒푓푔푕푖푗푘푙푚푛표푝푞푟푠푡푢푣푤푥푦푧푨푩푪푫푬푭푮푯푰푱푲푳푴푵푶푷푸푹푺푻푼푽푾푿풀풁풂풃풄풅풆풇품풉풊풋풌풍풎풏풐풑풒풓풔풕풖풗풘풙풚풛풜풝풞풟풠풡풢풣풤풥풦풧풨풩풪풫풬풭풮풯풰풱풲풳풴풵풶풷풸풹풺풻풼풽풾풿퓀퓁퓂퓃퓄퓅퓆퓇퓈퓉퓊퓋퓌퓍퓎퓏퓐퓑퓒퓓퓔퓕퓖퓗퓘퓙퓚퓛퓜퓝퓞퓟퓠퓡퓢퓣퓤퓥퓦퓧퓨퓩퓪퓫퓬퓭퓮퓯퓰퓱퓲퓳퓴퓵퓶퓷퓸퓹퓺퓻퓼퓽퓾퓿픀픁픂픃프픅픆픇픈픉픊픋플픍픎픏픐픑픒픓픔픕픖픗픘픙픚픛픜픝픞픟픠픡픢픣픤픥픦픧픨픩픪픫픬픭픮픯픰픱픲픳픴픵픶픷픸픹픺픻피픽픾픿핀핁핂핃필핅핆핇핈핉핊핋핌핍핎핏"
+ "핐핑핒핓핔핕핖핗하학핚핛한핝핞핟할핡핢핣핤핥핦핧함합핪핫핬항핮핯핰핱핲핳해핵핶핷핸핹핺핻핼핽핾핿햀햁햂햃햄햅햆햇했행햊햋햌햍햎햏햐햑햒햓햔햕햖햗햘햙햚햛햜햝햞햟햠햡햢햣햤향햦햧햨햩햪햫햬햭햮햯햰햱햲햳햴햵햶햷햸햹햺햻햼햽햾햿헀헁헂헃헄헅헆헇허헉헊헋헌헍헎헏헐헑헒헓헔헕헖헗험헙헚헛헜헝헞헟헠헡헢헣헤헥헦헧헨헩헪헫헬헭헮헯헰헱헲헳헴헵헶헷헸헹헺헻헼헽헾헿혀혁혂혃현혅혆혇혈혉혊혋혌혍혎혏혐협혒혓혔형혖혗혘혙혚혛혜혝혞혟혠혡혢혣혤혥혦혧혨혩혪혫혬혭혮혯혰혱혲혳혴혵혶혷호혹혺혻혼혽혾혿홀홁홂홃홄홅홆홇홈홉홊홋홌홍홎홏홐홑홒홓화확홖홗환홙홚홛활홝홞홟홠홡홢홣홤홥홦홧홨황홪홫홬홭홮홯홰홱홲홳홴홵홶홷홸홹홺홻홼홽홾홿횀횁횂횃횄횅횆횇횈횉횊횋회획횎횏횐횑횒횓횔횕횖횗횘횙횚횛횜횝횞횟횠횡횢횣횤횥횦횧효횩횪횫횬횭횮횯횰횱횲횳횴횵횶횷횸횹횺횻횼횽횾횿훀훁훂훃후훅훆훇훈훉훊훋훌훍훎훏훐훑훒훓훔훕훖훗훘훙훚훛훜훝훞훟훠훡훢훣훤훥훦훧훨훩훪훫훬훭훮훯훰훱훲훳훴훵훶훷훸훹훺훻훼훽훾훿휀휁휂휃휄휅휆휇휈휉휊휋휌휍휎휏휐휑휒휓휔휕휖휗휘휙휚휛휜휝휞휟휠휡휢휣휤휥휦휧휨휩휪휫휬휭휮휯휰휱휲휳휴휵휶휷휸휹휺휻휼휽휾휿흀흁흂흃흄흅흆흇흈흉흊흋흌흍흎흏"
+ "흐흑흒흓흔흕흖흗흘흙흚흛흜흝흞흟흠흡흢흣흤흥흦흧흨흩흪흫희흭흮흯흰흱흲흳흴흵흶흷흸흹흺흻흼흽흾흿힀힁힂힃힄힅힆힇히힉힊힋힌힍힎힏힐힑힒힓힔힕힖힗힘힙힚힛힜힝힞힟힠힡힢힣\ud7a4\ud7a5\ud7a6\ud7a7\ud7a8\ud7a9\ud7aa\ud7ab\ud7ac\ud7ad\ud7ae\ud7afힰힱힲힳힴힵힶힷힸힹힺힻힼힽힾힿퟀퟁퟂퟃퟄퟅퟆ\ud7c7\ud7c8\ud7c9\ud7caퟋퟌퟍퟎퟏퟐퟑퟒퟓퟔퟕퟖퟗퟘퟙퟚퟛퟜퟝퟞퟟퟠퟡퟢퟣퟤퟥퟦퟧퟨퟩퟪퟫퟬퟭퟮퟯퟰퟱퟲퟳퟴퟵퟶퟷퟸퟹퟺퟻ\ud7fc\ud7fd\ud7fe\ud7ff????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"

+ "???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????\udbff\udc00???????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"

+ "????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????????"
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ ""
+ "豈更車賈滑串句龜龜契金喇奈懶癩羅蘿螺裸邏樂洛烙珞落酪駱亂卵欄爛蘭鸞嵐濫藍襤拉臘蠟廊朗浪狼郎來冷勞擄櫓爐盧老蘆虜路露魯鷺碌祿綠菉錄鹿論壟弄籠聾牢磊賂雷壘屢樓淚漏累"
+ "縷陋勒肋凜凌稜綾菱陵讀拏樂諾丹寧怒率異北磻便復不泌數索參塞省葉說殺辰沈拾若掠略亮兩凉梁糧良諒量勵呂女廬旅濾礪閭驪麗黎力曆歷轢年憐戀撚漣煉璉秊練聯輦蓮連鍊列劣咽烈裂說廉念捻殮簾獵令囹寧嶺怜玲瑩羚聆鈴零靈領例禮醴隸惡了僚寮尿料樂燎療蓼遼龍暈阮劉杻柳流溜琉留硫紐類六戮陸倫崙淪輪律慄栗率隆利吏履易李梨泥理痢罹裏裡里離匿溺吝燐璘藺隣鱗麟林淋臨立笠粒狀炙識什茶刺切度拓糖宅洞暴輻行降見廓兀嗀﨎﨏塚﨑晴﨓﨔凞猪益礼神祥福靖精羽﨟蘒﨡諸﨣﨤逸都﨧﨨﨩飯飼館鶴郞隷侮僧免勉勤卑喝嘆器塀墨層屮悔慨憎懲敏既暑梅海渚漢煮爫琢碑社祉祈祐祖祝禍禎穀突節練縉繁署者臭艹艹著褐視謁謹賓贈辶逸難響頻恵𤋮舘\ufa6e\ufa6f並况全侀充冀勇勺喝啕喙嗢塚墳奄奔婢嬨廒廙彩徭惘慎愈憎慠懲戴揄搜摒敖晴朗望杖歹殺流滛滋漢瀞煮瞧爵犯猪瑱甆画瘝瘟益盛直睊着磌窱節类絛練缾者荒華蝹襁覆視調諸請謁諾諭謹變贈輸遲醙鉶陼難靖韛響頋頻鬒龜𢡊𢡄𣏕㮝䀘䀹𥉉𥳐𧻓齃龎\ufada\ufadb\ufadc\ufadd\ufade\ufadf\ufae0\ufae1\ufae2\ufae3\ufae4\ufae5\ufae6\ufae7\ufae8\ufae9\ufaea\ufaeb\ufaec\ufaed\ufaee\ufaef\ufaf0\ufaf1\ufaf2\ufaf3\ufaf4\ufaf5\ufaf6\ufaf7\ufaf8\ufaf9\ufafa\ufafb\ufafc\ufafd\ufafe\ufaffﬀﬁﬂﬃﬄﬅﬆ\ufb07\ufb08\ufb09\ufb0a\ufb0b\ufb0c\ufb0d\ufb0e\ufb0f\ufb10\ufb11\ufb12ﬓﬔﬕﬖﬗ\ufb18\ufb19\ufb1a\ufb1b\ufb1cיִﬞײַﬠﬡﬢﬣﬤﬥﬦﬧﬨ﬩שׁשׂשּׁשּׂאַאָאּבּגּדּהּוּזּ\ufb37טּיּךּכּלּ\ufb3dמּ\ufb3fנּסּ\ufb42ףּפּ\ufb45צּקּרּשּתּוֹבֿכֿפֿﭏ"
+ "ﭐﭑﭒﭓﭔﭕﭖﭗﭘﭙﭚﭛﭜﭝﭞﭟﭠﭡﭢﭣﭤﭥﭦﭧﭨﭩﭪﭫﭬﭭﭮﭯﭰﭱﭲﭳﭴﭵﭶﭷﭸﭹﭺﭻﭼﭽﭾﭿﮀﮁﮂﮃﮄﮅﮆﮇﮈﮉﮊﮋﮌﮍﮎﮏﮐﮑﮒﮓﮔﮕﮖﮗﮘﮙﮚﮛﮜﮝﮞﮟﮠﮡﮢﮣﮤﮥﮦﮧﮨﮩﮪﮫﮬﮭﮮﮯﮰﮱ﮲﮳﮴﮵﮶﮷﮸﮹﮺﮻﮼﮽﮾﮿﯀﯁﯂\ufbc3\ufbc4\ufbc5\ufbc6\ufbc7\ufbc8\ufbc9\ufbca\ufbcb\ufbcc\ufbcd\ufbce\ufbcf\ufbd0\ufbd1\ufbd2ﯓﯔﯕﯖﯗﯘﯙﯚﯛﯜﯝﯞﯟﯠﯡﯢﯣﯤﯥﯦﯧﯨﯩﯪﯫﯬﯭﯮﯯﯰﯱﯲﯳﯴﯵﯶﯷﯸﯹﯺﯻﯼﯽﯾﯿﰀﰁﰂﰃﰄﰅﰆﰇﰈﰉﰊﰋﰌﰍﰎﰏﰐﰑﰒﰓﰔﰕﰖﰗﰘﰙﰚﰛﰜﰝﰞﰟﰠﰡﰢﰣﰤﰥﰦﰧﰨﰩﰪﰫﰬﰭﰮﰯﰰﰱﰲﰳﰴﰵﰶﰷﰸﰹﰺﰻﰼﰽﰾﰿﱀﱁﱂﱃﱄﱅﱆﱇﱈﱉﱊﱋﱌﱍﱎﱏﱐﱑﱒﱓﱔﱕﱖﱗﱘﱙﱚﱛﱜﱝﱞﱟﱠﱡﱢﱣﱤﱥﱦﱧﱨﱩﱪﱫﱬﱭﱮﱯﱰﱱﱲﱳﱴﱵﱶﱷﱸﱹﱺﱻﱼﱽﱾﱿﲀﲁﲂﲃﲄﲅﲆﲇﲈﲉﲊﲋﲌﲍﲎﲏﲐﲑﲒﲓﲔﲕﲖﲗﲘﲙﲚﲛﲜﲝﲞﲟﲠﲡﲢﲣﲤﲥﲦﲧﲨﲩﲪﲫﲬﲭﲮﲯﲰﲱﲲﲳﲴﲵﲶﲷﲸﲹﲺﲻﲼﲽﲾﲿﳀﳁﳂﳃﳄﳅﳆﳇﳈﳉﳊﳋﳌﳍﳎﳏﳐﳑﳒﳓﳔﳕﳖﳗﳘﳙﳚﳛﳜﳝﳞﳟﳠﳡﳢﳣﳤﳥﳦﳧﳨﳩﳪﳫﳬﳭﳮﳯﳰﳱﳲﳳﳴﳵﳶﳷﳸﳹﳺﳻﳼﳽﳾﳿﴀﴁﴂﴃﴄﴅﴆﴇﴈﴉﴊﴋﴌﴍﴎﴏﴐﴑﴒﴓﴔﴕﴖﴗﴘﴙﴚﴛﴜﴝﴞﴟﴠﴡﴢﴣﴤﴥﴦﴧﴨﴩﴪﴫﴬﴭﴮﴯﴰﴱﴲﴳﴴﴵﴶﴷﴸﴹﴺﴻﴼﴽ﴾﴿﵀﵁﵂﵃﵄﵅﵆﵇﵈﵉﵊﵋﵌﵍﵎﵏"
+ "ﵐﵑﵒﵓﵔﵕﵖﵗﵘﵙﵚﵛﵜﵝﵞﵟﵠﵡﵢﵣﵤﵥﵦﵧﵨﵩﵪﵫﵬﵭﵮﵯﵰﵱﵲﵳﵴﵵﵶﵷﵸﵹﵺﵻﵼﵽﵾﵿﶀﶁﶂﶃﶄﶅﶆﶇﶈﶉﶊﶋﶌﶍﶎﶏ\ufd90\ufd91ﶒﶓﶔﶕﶖﶗﶘﶙﶚﶛﶜﶝﶞﶟﶠﶡﶢﶣﶤﶥﶦﶧﶨﶩﶪﶫﶬﶭﶮﶯﶰﶱﶲﶳﶴﶵﶶﶷﶸﶹﶺﶻﶼﶽﶾﶿﷀﷁﷂﷃﷄﷅﷆﷇ\ufdc8\ufdc9\ufdca\ufdcb\ufdcc\ufdcd\ufdce﷏\ufdd0\ufdd1\ufdd2\ufdd3\ufdd4\ufdd5\ufdd6\ufdd7\ufdd8\ufdd9\ufdda\ufddb\ufddc\ufddd\ufdde\ufddf\ufde0\ufde1\ufde2\ufde3\ufde4\ufde5\ufde6\ufde7\ufde8\ufde9\ufdea\ufdeb\ufdec\ufded\ufdee\ufdefﷰﷱﷲﷳﷴﷵﷶﷷﷸﷹﷺﷻ﷼﷽﷾﷿︀︁︂︃︄︅︆︇︈︉︊︋︌︍︎️︐︑︒︓︔︕︖︗︘︙\ufe1a\ufe1b\ufe1c\ufe1d\ufe1e\ufe1f︧︨︩︪︫︬︭︠︡︢︣︤︥︦︮︯︰︱︲︳︴︵︶︷︸︹︺︻︼︽︾︿﹀﹁﹂﹃﹄﹅﹆﹇﹈﹉﹊﹋﹌﹍﹎﹏﹐﹑﹒\ufe53﹔﹕﹖﹗﹘﹙﹚﹛﹜﹝﹞﹟﹠﹡﹢﹣﹤﹥﹦\ufe67﹨﹩﹪﹫\ufe6c\ufe6d\ufe6e\ufe6fﹰﹱﹲﹳﹴ\ufe75ﹶﹷﹸﹹﹺﹻﹼﹽﹾﹿﺀﺁﺂﺃﺄﺅﺆﺇﺈﺉﺊﺋﺌﺍﺎﺏﺐﺑﺒﺓﺔﺕﺖﺗﺘﺙﺚﺛﺜﺝﺞﺟﺠﺡﺢﺣﺤﺥﺦﺧﺨﺩﺪﺫﺬﺭﺮﺯﺰﺱﺲﺳﺴﺵﺶﺷﺸﺹﺺﺻﺼﺽﺾﺿﻀﻁﻂﻃﻄﻅﻆﻇﻈﻉﻊﻋﻌﻍﻎﻏﻐﻑﻒﻓﻔﻕﻖﻗﻘﻙﻚﻛﻜﻝﻞﻟﻠﻡﻢﻣﻤﻥﻦﻧﻨﻩﻪﻫﻬﻭﻮﻯﻰﻱﻲﻳﻴﻵﻶﻷﻸﻹﻺﻻﻼ\ufefd\ufefe﻿\uff00！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏ"
+ "ｐｑｒｓｔｕｖｗｘｙｚ｛｜｝～｟｠｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟﾠﾡﾢﾣﾤﾥﾦﾧﾨﾩﾪﾫﾬﾭﾮﾯﾰﾱﾲﾳﾴﾵﾶﾷﾸﾹﾺﾻﾼﾽﾾ\uffbf\uffc0\uffc1ￂￃￄￅￆￇ\uffc8\uffc9ￊￋￌￍￎￏ\uffd0\uffd1ￒￓￔￕￖￗ\uffd8\uffd9ￚￛￜ\uffdd\uffde\uffdf￠￡￢￣￤￥￦\uffe7￨￩￪￫￬￭￮\uffef\ufff0\ufff1\ufff2\ufff3\ufff4\ufff5\ufff6\ufff7\ufff8￹￺￻￼�\ufffe\uffff", "Asset download failed: ", "Asset download success: ", "FileType \'", "\' Not supported in web backend", "File not found: ", " (", "Error reading layout file: ", "Classpath", "Internal", "External", "Absolute",
"Local", "minParticleCount", "maxParticleCount", "- Scale -", "attached", "continuous", "aligned", "additive", "behind", "premultipliedAlpha", "spriteMode", "Error parsing emitter: ", "Missing value: ", "WAIT", "COLOR", "VARIABLE", "IF", "EVENT", "SKIP", "EFFECT_START", "EFFECT_END", "STYLE", "SIZE", "CLEARCOLOR", "CLEARSIZE", "CLEARFONT", "ENDCOLOR", "VAR", "Pixmap", "Custom", "texture width and height must be square when using mipmapping.", "transparent", "black", "gray", "silver", "white", "red", "orange",
"yellow", "green", "blue", "indigo", "violet", "purple", "brown", "pink", "magenta", "brick", "ember", "salmon", "chocolate", "tan", "bronze", "cinnamon", "apricot", "peach", "pear", "saffron", "butter", "chartreuse", "cactus", "lime", "olive", "fern", "moss", "celery", "sage", "jade", "cyan", "mint", "teal", "turquoise", "sky", "cobalt", "denim", "navy", "lavender", "plum", "mauve", "rose", "raspberry", "YELLOW", "BLUE", "GOLD", "GRAY", "ORANGE", "MAGENTA", "FIREBRICK", "SCARLET", "WHITE", "SKY", "FOREST",
"GREEN", "CHARTREUSE", "MAROON", "RED", "CYAN", "BLACK", "VIOLET", "CORAL", "ROYAL", "LIME", "CLEAR", "LIGHT_GRAY", "NAVY", "BROWN", "SALMON", "PURPLE", "DARK_GRAY", "SLATE", "TAN", "PINK", "OLIVE", "TEAL", "GOLDENROD", "grey", "gold", "puce", "sand", "skin", "coral", "azure", "ocean", "sapphire", "Already prepared", "Call prepare() before calling getPixmap()", "[^a-zA-Z0-9_]+", "start + count must be <= size: ", " + ", " <= ", "Replacement preconditions do not hold", "IGNORE", "REPLACE", "REPORT", "newAction must be non-null",
"US-ASCII", "ISO-8859-1", "UTF-16", "UTF-16BE", "UTF-16LE", "�", "averageCharsPerByte must be positive. Actual value is ", "maxCharsPerByte must be positive. Actual value is ", "[\\s\t,]+", "bold", "italic", "i", "oblique", "o", "underline", "u", "strikethrough", "strike", "superscript", "super", "midscript", "mid", "subscript", "sub", "a", "active", "lowMin", "lowMax", "highMin", "highMax", "relative", "scalingCount", "scaling", "timelineCount", "timeline", "Missing value: independent", "independent", "ParticleEmitter",
"The loaded particle effect descriptor file uses an old invalid format. Please download the latest version of the Particle Editor tool and recreate the file by loading and saving it again.", "colorsCount", "colors", "shape", "edges", "side", "single", "random", "animated", "point", "line", "square", "ellipse", "both", "top", "bottom", "Action must be non-null", "Malformed input of length ", "Unmappable characters of length ", "IndexedDB Error removing file: ", "Error writing file: ", "Comparison method violates its general contract!"]);
jl_String.prototype.toString = function() {
    return $rt_ustr(this);
};
jl_String.prototype.valueOf = jl_String.prototype.toString;
jl_Object.prototype.toString = function() {
    return $rt_ustr(jl_Object_toString(this));
};
jl_Object.prototype.__teavm_class__ = function() {
    return $dbg_class(this);
};
let $rt_export_main = $rt_mainStarter(cvdt_TeaVMLauncher_main);
$rt_export_main.javaException = $rt_javaException;
let $rt_jso_marker = Symbol('jsoClass');
(() => {
    let c;
    c = cgxgbtdi_TeaWindow.prototype;
    c.onAnimationFrame = $rt_callWithReceiver(cgxgbtdi_TeaWindow_onAnimationFrame$exported$0);
    c = cgxgbt_TeaInput.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaInput_handleEvent$exported$0);
    c = cgxgbt_TeaApplication$1.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaApplication$1_handleEvent$exported$0);
    c = cgxgbt_TeaApplication$2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaApplication$2_handleEvent$exported$0);
    c = cgxgbt_TeaApplication$3.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaApplication$3_handleEvent$exported$0);
    c = cgxgbt_TeaGraphics$1.prototype;
    c.fullscreenChanged = $rt_callWithReceiver(cgxgbt_TeaGraphics$1_fullscreenChanged$exported$0);
    c = cgxgbt_TeaClipboard$ClipboardWriteHandler.prototype;
    c.denied = $rt_callWithReceiver(cgxgbt_TeaClipboard$ClipboardWriteHandler_denied$exported$2);
    c.prompt = $rt_callWithReceiver(cgxgbt_TeaClipboard$ClipboardWriteHandler_prompt$exported$1);
    c.granted = $rt_callWithReceiver(cgxgbt_TeaClipboard$ClipboardWriteHandler_granted$exported$0);
    c = cgxgbt_TeaClipboard$_init_$lambda$_0_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaClipboard$_init_$lambda$_0_0_handleEvent$exported$0);
    c = cgxgbt_TeaClipboard$_init_$lambda$_0_1.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaClipboard$_init_$lambda$_0_1_handleEvent$exported$0);
    c = cgxgbt_TeaClipboard$_init_$lambda$_0_2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbt_TeaClipboard$_init_$lambda$_0_2_handleEvent$exported$0);
    c = cgxgbta_AssetLoadImpl$1.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$1_handleEvent$exported$0);
    c = cgxgbta_AssetLoadImpl$2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$2_handleEvent$exported$0);
    c = cgxgbta_AssetLoadImpl$3.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$3_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_0_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_1_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$setupIndexedDB$lambda$_1_2_handleEvent$exported$0);
    c = cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0.prototype;
    c.apply = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_0_apply$exported$0);
    c = cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1.prototype;
    c.apply = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_1_apply$exported$0);
    c = cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2.prototype;
    c.get = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$downloadDroppedFile$lambda$_3_2_get$exported$0);
    c = cgxgbta_AssetLoadImpl$getFile$lambda$_2_0.prototype;
    c.onExecute = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$getFile$lambda$_2_0_onExecute$exported$0);
    c = cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_0_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_1_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$readAllFilesAsync$lambda$_4_2_handleEvent$exported$0);
    c = otji_JSWrapper$Helper$_clinit_$lambda$_3_0.prototype;
    c.accept = $rt_callWithReceiver(otji_JSWrapper$Helper$_clinit_$lambda$_3_0_accept$exported$0);
    c = otji_JSWrapper$Helper$_clinit_$lambda$_3_1.prototype;
    c.accept = $rt_callWithReceiver(otji_JSWrapper$Helper$_clinit_$lambda$_3_1_accept$exported$0);
    c = cgxgbta_AssetDownloadImpl$2.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$2_handleEvent$exported$0);
    c = cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$loadScript$lambda$_5_0_handleEvent$exported$0);
    c = cgxgbta_AssetLoadImpl$4.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetLoadImpl$4_handleEvent$exported$0);
    c = cgxgbtft_LocalDBStorage$putFile$lambda$_2_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$putFile$lambda$_2_0_handleEvent$exported$0);
    c = cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0.prototype;
    c.onTimer = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$loadBinary$lambda$_6_0_onTimer$exported$0);
    c = cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$loadBinaryInternally$lambda$_7_0_handleEvent$exported$0);
    c = cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$setOnProgress$lambda$_8_0_handleEvent$exported$0);
    c = cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0.prototype;
    c.onTimer = $rt_callWithReceiver(cgxgbta_AssetDownloadImpl$lambda$loadBinaryInternally$3$lambda$_13_0_onTimer$exported$0);
    c = cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0.prototype;
    c.handleEvent = $rt_callWithReceiver(cgxgbtft_LocalDBStorage$removeFile$lambda$_3_0_handleEvent$exported$0);
})();
$rt_exports.main = $rt_export_main;
}));
